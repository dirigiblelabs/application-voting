var class2type = {};
var hasOwn = class2type.hasOwnProperty;
var toString = class2type.toString;
var fnToString = hasOwn.toString;
var ObjectFunctionString = fnToString.call(Object);
var fnIsPlainObject = function (obj) {
  var proto, Ctor;
  if (!obj || toString.call(obj) !== "[object Object]") {
    return false;
  }
  proto = Object.getPrototypeOf(obj);
  if (!proto) {
    return true;
  }
  Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
};

var oToken = Object.create(null);
var fnMerge = function () {
    var src, copyIsArray, copy, name, options, clone, target = arguments[2] || {}, i = 3, length = arguments.length, deep = arguments[0] || false, skipToken = arguments[1] ? undefined : oToken;
    if (typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }
    for (; i < length; i++) {
        if ((options = arguments[i]) != null) {
            for (name in options) {
                src = target[name];
                copy = options[name];
                if (name === '__proto__' || target === copy) {
                    continue;
                }
                if (deep && copy && (fnIsPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    } else {
                        clone = src && fnIsPlainObject(src) ? src : {};
                    }
                    target[name] = fnMerge(deep, arguments[1], clone, copy);
                } else if (copy !== skipToken) {
                    target[name] = copy;
                }
            }
        }
    }
    return target;
};

var fnMerge$1 = function () {
    var args = [
        true,
        false
    ];
    args.push.apply(args, arguments);
    return fnMerge.apply(null, args);
};

const features = new Map();

const registerFeature = (name, feature) => {
	features.set(name, feature);
};

const getFeature = name => {
	return features.get(name);
};

const assetParameters = {"themes":{"default":"sap_fiori_3","all":["sap_fiori_3","sap_fiori_3_dark","sap_belize","sap_belize_hcb","sap_belize_hcw","sap_fiori_3_hcb","sap_fiori_3_hcw"]},"languages":{"default":"en","all":["ar","bg","ca","cs","da","de","el","en","es","et","fi","fr","hi","hr","hu","it","iw","ja","kk","ko","lt","lv","ms","nl","no","pl","pt","ro","ru","sh","sk","sl","sv","th","tr","uk","vi","zh_CN","zh_TW"]},"locales":{"default":"en","all":["ar","ar_EG","ar_SA","bg","ca","cs","da","de","de_AT","de_CH","el","el_CY","en","en_AU","en_GB","en_HK","en_IE","en_IN","en_NZ","en_PG","en_SG","en_ZA","es","es_AR","es_BO","es_CL","es_CO","es_MX","es_PE","es_UY","es_VE","et","fa","fi","fr","fr_BE","fr_CA","fr_CH","fr_LU","he","hi","hr","hu","id","it","it_CH","ja","kk","ko","lt","lv","ms","nb","nl","nl_BE","pl","pt","pt_PT","ro","ru","ru_UA","sk","sl","sr","sv","th","tr","uk","vi","zh_CN","zh_HK","zh_SG","zh_TW"]}};

const DEFAULT_THEME = assetParameters.themes.default;
const DEFAULT_LANGUAGE = assetParameters.languages.default;
const DEFAULT_LOCALE = assetParameters.locales.default;
const SUPPORTED_LOCALES = assetParameters.locales.all;

let initialized = false;

let initialConfig = {
	animationMode: "full",
	theme: DEFAULT_THEME,
	rtl: null,
	language: null,
	calendarType: null,
	noConflict: false, // no URL
	formatSettings: {},
	useDefaultLanguage: false,
	assetsPath: "",
};

/* General settings */
const getAnimationMode = () => {
	initConfiguration();
	return initialConfig.animationMode;
};

const getTheme = () => {
	initConfiguration();
	return initialConfig.theme;
};

const getRTL = () => {
	initConfiguration();
	return initialConfig.rtl;
};

const getLanguage = () => {
	initConfiguration();
	return initialConfig.language;
};

/**
 * Returns if the default language, that is inlined build time,
 * should be used, instead of trying fetching the language over the network.
 * @returns {Boolean}
 */
const getUseDefaultLanguage = () => {
	initConfiguration();
	return initialConfig.useDefaultLanguage;
};

const getNoConflict = () => {
	initConfiguration();
	return initialConfig.noConflict;
};

const getCalendarType = () => {
	initConfiguration();
	return initialConfig.calendarType;
};

const getFormatSettings = () => {
	initConfiguration();
	return initialConfig.formatSettings;
};

const getAssetsPath = () => {
	initConfiguration();
	return initialConfig.assetsPath;
};

const booleanMapping = new Map();
booleanMapping.set("true", true);
booleanMapping.set("false", false);

const parseConfigurationScript = () => {
	const configScript = document.querySelector("[data-ui5-config]") || document.querySelector("[data-id='sap-ui-config']"); // for backward compatibility

	let configJSON;

	if (configScript) {
		try {
			configJSON = JSON.parse(configScript.innerHTML);
		} catch (err) {
			console.warn("Incorrect data-sap-ui-config format. Please use JSON"); /* eslint-disable-line */
		}

		if (configJSON) {
			initialConfig = fnMerge$1(initialConfig, configJSON);
		}
	}
};

const parseURLParameters = () => {
	const params = new URLSearchParams(window.location.search);

	params.forEach((value, key) => {
		if (!key.startsWith("sap-ui")) {
			return;
		}

		const lowerCaseValue = value.toLowerCase();

		const param = key.split("sap-ui-")[1];

		if (booleanMapping.has(value)) {
			value = booleanMapping.get(lowerCaseValue);
		}

		initialConfig[param] = value;
	});
};

const applyOpenUI5Configuration = () => {
	const OpenUI5Support = getFeature("OpenUI5Support");
	if (!OpenUI5Support || !OpenUI5Support.isLoaded()) {
		return;
	}

	const OpenUI5Config = OpenUI5Support.getConfigurationSettingsObject();
	initialConfig = fnMerge$1(initialConfig, OpenUI5Config);
};


const initConfiguration = () => {
	if (initialized) {
		return;
	}

	// 1. Lowest priority - configuration script
	parseConfigurationScript();

	// 2. URL parameters overwrite configuration script parameters
	parseURLParameters();

	// 3. If OpenUI5 is detected, it has the highest priority
	applyOpenUI5Configuration();

	initialized = true;
};

let assetsPath;

const getAssetsPath$1 = () => {
	if (assetsPath === undefined) {
		assetsPath = getAssetsPath();
	}

	return assetsPath;
};

const setAssetsPath = newAssetsPath => {
	assetsPath = newAssetsPath;
};

const MAX_PROCESS_COUNT = 10;

class RenderQueue {
	constructor() {
		this.list = []; // Used to store the web components in order
		this.lookup = new Set(); // Used for faster search
	}

	add(webComponent) {
		if (this.lookup.has(webComponent)) {
			return;
		}

		this.list.push(webComponent);
		this.lookup.add(webComponent);
	}

	remove(webComponent) {
		if (!this.lookup.has(webComponent)) {
			return;
		}

		this.list = this.list.filter(item => item !== webComponent);
		this.lookup.delete(webComponent);
	}

	shift() {
		const webComponent = this.list.shift();
		if (webComponent) {
			this.lookup.delete(webComponent);
			return webComponent;
		}
	}

	isEmpty() {
		return this.list.length === 0;
	}

	isAdded(webComponent) {
		return this.lookup.has(webComponent);
	}

	/**
	 * Processes the whole queue by executing the callback on each component,
	 * while also imposing restrictions on how many times a component may be processed.
	 *
	 * @param callback - function with one argument (the web component to be processed)
	 */
	process(callback) {
		let webComponent;
		const stats = new Map();

		webComponent = this.shift();
		while (webComponent) {
			const timesProcessed = stats.get(webComponent) || 0;
			if (timesProcessed > MAX_PROCESS_COUNT) {
				throw new Error(`Web component processed too many times this task, max allowed is: ${MAX_PROCESS_COUNT}`);
			}
			callback(webComponent);
			stats.set(webComponent, timesProcessed + 1);
			webComponent = this.shift();
		}
	}
}

// This is needed as IE11 doesn't have Set.prototype.keys/values/entries, so [...mySet.values()] is not an option
const setToArray = s => {
	const arr = [];
	s.forEach(item => {
		arr.push(item);
	});
	return arr;
};

const Definitions = new Set();
const Failures = new Set();
let failureTimeout;

const registerTag = tag => {
	Definitions.add(tag);
};

const isTagRegistered = tag => {
	return Definitions.has(tag);
};

const getAllRegisteredTags = () => {
	return setToArray(Definitions);
};

const recordTagRegistrationFailure = tag => {
	Failures.add(tag);
	if (!failureTimeout) {
		failureTimeout = setTimeout(() => {
			displayFailedRegistrations();
			failureTimeout = undefined;
		}, 1000);
	}
};

const displayFailedRegistrations = () => {
	console.warn(`The following tags have already been defined by a different UI5 Web Components version: ${setToArray(Failures).join(", ")}`); // eslint-disable-line
	Failures.clear();
};

const rtlAwareSet = new Set();

const markAsRtlAware = klass => {
	rtlAwareSet.add(klass);
};

const isRtlAware = klass => {
	return rtlAwareSet.has(klass);
};

const registeredElements = new Set();

// Queue for invalidated web components
const invalidatedWebComponents = new RenderQueue();

let renderTaskPromise,
	renderTaskPromiseResolve;

let mutationObserverTimer;

let queuePromise;

/**
 * Class that manages the rendering/re-rendering of web components
 * This is always asynchronous
 */
class RenderScheduler {
	constructor() {
		throw new Error("Static class");
	}

	/**
	 * Schedules a render task (if not already scheduled) to render the component
	 *
	 * @param webComponent
	 * @returns {Promise}
	 */
	static async renderDeferred(webComponent) {
		// Enqueue the web component
		invalidatedWebComponents.add(webComponent);

		// Schedule a rendering task
		await RenderScheduler.scheduleRenderTask();
	}

	/**
	 * Renders a component synchronously
	 *
	 * @param webComponent
	 */
	static renderImmediately(webComponent) {
		webComponent._render();
	}

	/**
	 * Cancels the rendering of a component, added to the queue with renderDeferred
	 *
	 * @param webComponent
	 */
	static cancelRender(webComponent) {
		invalidatedWebComponents.remove(webComponent);
	}

	/**
	 * Schedules a rendering task, if not scheduled already
	 */
	static async scheduleRenderTask() {
		if (!queuePromise) {
			queuePromise = new Promise(resolve => {
				window.requestAnimationFrame(() => {
					// Render all components in the queue
					invalidatedWebComponents.process(component => component._render());

					// Resolve the promise so that callers of renderDeferred can continue
					queuePromise = null;
					resolve();

					// Wait for Mutation observer before the render task is considered finished
					if (!mutationObserverTimer) {
						mutationObserverTimer = setTimeout(() => {
							mutationObserverTimer = undefined;
							if (invalidatedWebComponents.isEmpty()) {
								RenderScheduler._resolveTaskPromise();
							}
						}, 200);
					}
				});
			});
		}

		await queuePromise;
	}

	/**
	 * return a promise that will be resolved once all invalidated web components are rendered
	 */
	static whenDOMUpdated() {
		if (renderTaskPromise) {
			return renderTaskPromise;
		}

		renderTaskPromise = new Promise(resolve => {
			renderTaskPromiseResolve = resolve;
			window.requestAnimationFrame(() => {
				if (invalidatedWebComponents.isEmpty()) {
					renderTaskPromise = undefined;
					resolve();
				}
			});
		});

		return renderTaskPromise;
	}

	static whenAllCustomElementsAreDefined() {
		const definedPromises = getAllRegisteredTags().map(tag => customElements.whenDefined(tag));
		return Promise.all(definedPromises);
	}

	static async whenFinished() {
		await RenderScheduler.whenAllCustomElementsAreDefined();
		await RenderScheduler.whenDOMUpdated();
	}

	static _resolveTaskPromise() {
		if (!invalidatedWebComponents.isEmpty()) {
			// More updates are pending. Resolve will be called again
			return;
		}

		if (renderTaskPromiseResolve) {
			renderTaskPromiseResolve.call(this);
			renderTaskPromiseResolve = undefined;
			renderTaskPromise = undefined;
		}
	}

	static register(element) {
		registeredElements.add(element);
	}

	static deregister(element) {
		registeredElements.delete(element);
	}

	/**
	 * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.
	 *
	 * Usage:
	 * reRenderAllUI5Elements() -> rerenders all components
	 * reRenderAllUI5Elements({tag: "ui5-button"}) -> re-renders only instances of ui5-button
	 * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components
	 * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components
	 * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware
	 * etc...
	 *
	 * @public
	 * @param {Object|undefined} filters - Object with keys that can be "rtlAware" or "languageAware"
	 */
	static reRenderAllUI5Elements(filters) {
		registeredElements.forEach(element => {
			const tag = element.constructor.getMetadata().getTag();
			const rtlAware = isRtlAware(element.constructor);
			const languageAware = element.constructor.getMetadata().isLanguageAware();
			if (!filters || (filters.tag === tag) || (filters.rtlAware && rtlAware) || (filters.languageAware && languageAware)) {
				RenderScheduler.renderDeferred(element);
			}
		});
	}
}

class EventProvider {
	constructor() {
		this._eventRegistry = {};
	}

	attachEvent(eventName, fnFunction) {
		const eventRegistry = this._eventRegistry;
		let eventListeners = eventRegistry[eventName];

		if (!Array.isArray(eventListeners)) {
			eventRegistry[eventName] = [];
			eventListeners = eventRegistry[eventName];
		}

		eventListeners.push({
			"function": fnFunction,
		});
	}

	detachEvent(eventName, fnFunction) {
		const eventRegistry = this._eventRegistry;
		let eventListeners = eventRegistry[eventName];

		if (!eventListeners) {
			return;
		}

		eventListeners = eventListeners.filter(event => {
			return event["function"] !== fnFunction; // eslint-disable-line
		});

		if (eventListeners.length === 0) {
			delete eventRegistry[eventName];
		}
	}

	/**
	 * Fires an event and returns the results of all event listeners as an array.
	 * Example: If listeners return promises, you can: await fireEvent("myEvent") to know when all listeners have finished.
	 *
	 * @param eventName the event to fire
	 * @param data optional data to pass to each event listener
	 * @returns {Array} an array with the results of all event listeners
	 */
	fireEvent(eventName, data) {
		const eventRegistry = this._eventRegistry;
		const eventListeners = eventRegistry[eventName];

		if (!eventListeners) {
			return [];
		}

		return eventListeners.map(event => {
			return event["function"].call(this, data); // eslint-disable-line
		});
	}

	isHandlerAttached(eventName, fnFunction) {
		const eventRegistry = this._eventRegistry;
		const eventListeners = eventRegistry[eventName];

		if (!eventListeners) {
			return false;
		}

		for (let i = 0; i < eventListeners.length; i++) {
			const event = eventListeners[i];
			if (event["function"] === fnFunction) { // eslint-disable-line
				return true;
			}
		}

		return false;
	}

	hasListeners(eventName) {
		return !!this._eventRegistry[eventName];
	}
}

const eventProvider = new EventProvider();
const CUSTOM_CSS_CHANGE = "CustomCSSChange";

const attachCustomCSSChange = listener => {
	eventProvider.attachEvent(CUSTOM_CSS_CHANGE, listener);
};

const fireCustomCSSChange = tag => {
	return eventProvider.fireEvent(CUSTOM_CSS_CHANGE, tag);
};

const customCSSFor = {};

const addCustomCSS = (tag, css) => {
	if (!customCSSFor[tag]) {
		customCSSFor[tag] = [];
	}
	customCSSFor[tag].push(css);
	fireCustomCSSChange(tag);

	RenderScheduler.reRenderAllUI5Elements({ tag });
};

const getCustomCSS = tag => {
	return customCSSFor[tag] ? customCSSFor[tag].join("") : "";
};

const eventProvider$1 = new EventProvider();
const THEME_LOADED = "themeLoaded";

const attachThemeLoaded = listener => {
	eventProvider$1.attachEvent(THEME_LOADED, listener);
};

const detachThemeLoaded = listener => {
	eventProvider$1.detachEvent(THEME_LOADED, listener);
};

const fireThemeLoaded = theme => {
	return eventProvider$1.fireEvent(THEME_LOADED, theme);
};

const fetchPromises = new Map();
const jsonPromises = new Map();
const textPromises = new Map();

const fetchTextOnce = async url => {
	if (!fetchPromises.get(url)) {
		fetchPromises.set(url, fetch(url));
	}
	const response = await fetchPromises.get(url);

	if (!textPromises.get(url)) {
		textPromises.set(url, response.text());
	}

	return textPromises.get(url);
};

const fetchJsonOnce = async url => {
	if (!fetchPromises.get(url)) {
		fetchPromises.set(url, fetch(url));
	}
	const response = await fetchPromises.get(url);

	if (!jsonPromises.get(url)) {
		jsonPromises.set(url, response.json());
	}

	return jsonPromises.get(url);
};

/**
 * ""                        -> ""
 * "noExtension"             -> ""
 * "file.txt"                -> ".txt"
 * "file.with.many.dots.doc" -> ".doc"
 * ".gitignore"              -> ""
 *
 * @param fileName - the file name
 * @returns {string}
 */
const getFileExtension = fileName => {
	const dotPos = fileName.lastIndexOf(".");

	if (dotPos < 1) {
		return "";
	}

	return fileName.slice(dotPos);
};

let assetPathMappingFn = assetName => assetName;

const getEffectiveAssetPath = assetName => {
	if (typeof assetName !== "string") {
		return assetName;
	}

	assetName = assetPathMappingFn(assetName);

	const assetsPathPrefix = getAssetsPath$1();
	if (assetsPathPrefix) {
		return `${assetsPathPrefix}${assetName}`;
	}

	return assetName;
};

const themeURLs = new Map();
const themeStyles = new Map();
const registeredPackages = new Set();
const registeredThemes = new Set();

/**
 * Used to provide CSS Vars for a specific theme for a specific package.
 * The CSS Vars can be passed directly as a string (containing them), as an object with a "_" property(containing them in the "_" property), or as a URL.
 * This URL must point to a JSON file, containing a "_" property.
 *
 * Example usage:
 *  1) Pass the CSS Vars as a string directly.
 *  registerThemeProperties("my-package", "my_theme", ":root{--var1: red;}");
 *  2) Pass the CSS Vars as an object directly
 *  registerThemeProperties("my-package", "my_theme", {"_": ":root{--var1: red;}"});
 *  3) Pass a URL to a CSS file, containing the CSS Vars. Will be fetched on demand, not upon registration.
 *  registerThemeProperties("my-package", "my_theme", "http://url/to/my/theme.css");
 *  4) Pass a URL to a JSON file, containing the CSS Vars in its "_" property. Will be fetched on demand, not upon registration.
 *  registerThemeProperties("my-package", "my_theme", "http://url/to/my/theme.json");
 *
 * @public
 * @param packageName - the NPM package for which CSS Vars are registered
 * @param themeName - the theme which the CSS Vars implement
 * @param style - can be one of four options: a string, an object with a "_" property, URL to a CSS file, or URL to a JSON file with a "_" property
 */
const registerThemeProperties = (packageName, themeName, style) => {
	if (style._) {
		// JSON object like ({"_": ":root"})
		themeStyles.set(`${packageName}_${themeName}`, style._);
	} else if (style.includes(":root") || style === "") {
		// pure string, including empty string
		themeStyles.set(`${packageName}_${themeName}`, style);
	} else {
		// url for fetching
		themeURLs.set(`${packageName}_${themeName}`, style);
	}
	registeredPackages.add(packageName);
	registeredThemes.add(themeName);
};

const getThemeProperties = async (packageName, themeName) => {
	const style = themeStyles.get(`${packageName}_${themeName}`);
	if (style !== undefined) { // it's valid for style to be an empty string
		return style;
	}

	if (!registeredThemes.has(themeName)) {
		const regThemesStr = [...registeredThemes.values()].join(", ");
		console.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */
		return themeStyles.get(`${packageName}_${DEFAULT_THEME}`);
	}

	const data = await fetchThemeProperties(packageName, themeName);
	const themeProps = data._ || data;

	themeStyles.set(`${packageName}_${themeName}`, themeProps);
	return themeProps;
};

const fetchThemeProperties = async (packageName, themeName) => {
	const url = themeURLs.get(`${packageName}_${themeName}`);

	if (!url) {
		throw new Error(`You have to import the ${packageName}/dist/Assets.js module to switch to additional themes`);
	}

	return getFileExtension(url) === ".css" ? fetchTextOnce(url) : fetchJsonOnce(getEffectiveAssetPath(url));
};

const getRegisteredPackages = () => {
	return registeredPackages;
};

const isThemeRegistered = theme => {
	return registeredThemes.has(theme);
};

/**
 * Creates a <style> tag in the <head> tag
 * @param cssText - the CSS
 * @param attributes - optional attributes to add to the tag
 * @returns {HTMLElement}
 */
const createStyleInHead = (cssText, attributes = {}) => {
	const style = document.createElement("style");
	style.type = "text/css";

	Object.entries(attributes).forEach(pair => style.setAttribute(...pair));

	style.textContent = cssText;
	document.head.appendChild(style);
	return style;
};

/**
 * Creates/updates a style element holding all CSS Custom Properties
 * @param cssText
 * @param packageName
 */
const createThemePropertiesStyleTag = (cssText, packageName) => {
	const styleElement = document.head.querySelector(`style[data-ui5-theme-properties="${packageName}"]`);
	if (styleElement) {
		styleElement.textContent = cssText || "";	// in case of undefined
	} else {
		const attributes = {
			"data-ui5-theme-properties": packageName,
		};
		createStyleInHead(cssText, attributes);
	}
};

const getThemeMetadata = () => {
	// Check if the class was already applied, most commonly to the link/style tag with the CSS Variables
	let el = document.querySelector(".sapThemeMetaData-Base-baseLib");
	if (el) {
		return getComputedStyle(el).backgroundImage;
	}

	el = document.createElement("span");
	el.style.display = "none";
	el.classList.add("sapThemeMetaData-Base-baseLib");
	document.body.appendChild(el);
	const metadata = getComputedStyle(el).backgroundImage;
	document.body.removeChild(el);

	return metadata;
};

const parseThemeMetadata = metadataString => {
	const params = /\(["']?data:text\/plain;utf-8,(.*?)['"]?\)$/i.exec(metadataString);
	if (params && params.length >= 2) {
		let paramsString = params[1];
		paramsString = paramsString.replace(/\\"/g, `"`);
		if (paramsString.charAt(0) !== "{" && paramsString.charAt(paramsString.length - 1) !== "}") {
			try {
				paramsString = decodeURIComponent(paramsString);
			} catch (ex) {
				console.warn("Malformed theme metadata string, unable to decodeURIComponent"); // eslint-disable-line
				return;
			}
		}
		try {
			return JSON.parse(paramsString);
		} catch (ex) {
			console.warn("Malformed theme metadata string, unable to parse JSON"); // eslint-disable-line
		}
	}
};

const processThemeMetadata = metadata => {
	let themeName;
	let baseThemeName;

	try {
		themeName = metadata.Path.match(/\.([^.]+)\.css_variables$/)[1];
		baseThemeName = metadata.Extends[0];
	} catch (ex) {
		console.warn("Malformed theme metadata Object", metadata); // eslint-disable-line
		return;
	}

	return {
		themeName,
		baseThemeName,
	};
};

const getThemeDesignerTheme = () => {
	const metadataString = getThemeMetadata();
	if (!metadataString || metadataString === "none") {
		return;
	}

	const metadata = parseThemeMetadata(metadataString);
	return processThemeMetadata(metadata);
};

let ponyfillTimer;

const ponyfillNeeded = () => !!window.CSSVarsPonyfill;

const runPonyfill = () => {
	ponyfillTimer = undefined;

	window.CSSVarsPonyfill.cssVars({
		rootElement: document.head,
		variables: isCompact() ? getCompactModeVars() : {},
		silent: true,
	});
};

const schedulePonyfill = () => {
	if (!ponyfillTimer) {
		ponyfillTimer = window.setTimeout(runPonyfill, 0);
	}
};

const isCompact = () => {
	const b = document.body;
	return b.hasAttribute("data-ui5-compact-size") || b.classList.contains("ui5-content-density-compact") || b.classList.contains("sapUiSizeCompact");
};

const getCompactModeVars = () => {
	const compactVars = {};
	[...document.querySelectorAll(`[data-ui5-theme-properties]`)].forEach(el => {
		const cssContent = el.textContent.replace("\n", "");
		let match;
		const regExp = new RegExp("data-ui5-compact-size[^{]*{(.*?)}", "g");
		while ((match = regExp.exec(cssContent)) !== null) { // eslint-disable-line
			const compactCSS = match[1];
			compactCSS.split(";").forEach(declaration => {
				const pair = declaration.split(":");
				compactVars[pair[0].trim()] = pair[1].trim();
			});
		}
	});

	return compactVars;
};

const BASE_THEME_PACKAGE = "@ui5/webcomponents-theme-base";

const isThemeBaseRegistered = () => {
	const registeredPackages = getRegisteredPackages();
	return registeredPackages.has(BASE_THEME_PACKAGE);
};

const loadThemeBase = async theme => {
	if (!isThemeBaseRegistered()) {
		return;
	}

	const cssText = await getThemeProperties(BASE_THEME_PACKAGE, theme);
	createThemePropertiesStyleTag(cssText, BASE_THEME_PACKAGE);
};

const deleteThemeBase = () => {
	const styleElement = document.head.querySelector(`style[data-ui5-theme-properties="${BASE_THEME_PACKAGE}"]`);
	if (styleElement) {
		styleElement.parentElement.removeChild(styleElement);
	}
};

const loadComponentPackages = async theme => {
	const registeredPackages = getRegisteredPackages();
	registeredPackages.forEach(async packageName => {
		if (packageName === BASE_THEME_PACKAGE) {
			return;
		}

		const cssText = await getThemeProperties(packageName, theme);
		createThemePropertiesStyleTag(cssText, packageName);
	});
};

const detectExternalTheme = () => {
	// If theme designer theme is detected, use this
	const extTheme = getThemeDesignerTheme();
	if (extTheme) {
		return extTheme;
	}

	// If OpenUI5Support is enabled, try to find out if it loaded variables
	const OpenUI5Support = getFeature("OpenUI5Support");
	if (OpenUI5Support) {
		const varsLoaded = OpenUI5Support.cssVariablesLoaded();
		if (varsLoaded) {
			return {
				themeName: OpenUI5Support.getConfigurationSettingsObject().theme, // just themeName, baseThemeName is only relevant for custom themes
			};
		}
	}
};

const applyTheme = async theme => {
	const extTheme = detectExternalTheme();

	// Only load theme_base properties if there is no externally loaded theme, or there is, but it is not being loaded
	if (!extTheme || theme !== extTheme.themeName) {
		await loadThemeBase(theme);
	} else {
		deleteThemeBase();
	}

	// Always load component packages properties. For non-registered themes, try with the base theme, if any
	const packagesTheme = isThemeRegistered(theme) ? theme : extTheme && extTheme.baseThemeName;
	await loadComponentPackages(packagesTheme);

	// When changing the theme, run the ponyfill immediately
	if (ponyfillNeeded()) {
		runPonyfill();
	}

	fireThemeLoaded(theme);
};

let theme;

const getTheme$1 = () => {
	if (theme === undefined) {
		theme = getTheme();
	}

	return theme;
};

const setTheme = async newTheme => {
	if (theme === newTheme) {
		return;
	}

	theme = newTheme;

	// Update CSS Custom Properties
	await applyTheme(theme);
};

const sap$1 = window.sap;
const core = sap$1 && sap$1.ui && typeof sap$1.ui.getCore === "function" && sap$1.ui.getCore();

const isLoaded = () => {
	return !!core;
};

const init = () => {
	if (!core) {
		return Promise.resolve();
	}

	return new Promise(resolve => {
		core.attachInit(() => {
			sap$1.ui.require(["sap/ui/core/LocaleData"], resolve);
		});
	});
};

const getConfigurationSettingsObject = () => {
	if (!core) {
		return;
	}

	const config = core.getConfiguration();
	const LocaleData = sap$1.ui.require("sap/ui/core/LocaleData");

	return {
		animationMode: config.getAnimationMode(),
		language: config.getLanguage(),
		theme: config.getTheme(),
		rtl: config.getRTL(),
		calendarType: config.getCalendarType(),
		formatSettings: {
			firstDayOfWeek: LocaleData ? LocaleData.getInstance(config.getLocale()).getFirstDayOfWeek() : undefined,
		},
	};
};

const getLocaleDataObject = () => {
	if (!core) {
		return;
	}

	const config = core.getConfiguration();
	const LocaleData = sap$1.ui.require("sap/ui/core/LocaleData");
	return LocaleData.getInstance(config.getLocale())._get();
};

const listenForThemeChange = () => {
	const config = core.getConfiguration();
	core.attachThemeChanged(async () => {
		await setTheme(config.getTheme());
	});
};

const attachListeners = () => {
	if (!core) {
		return;
	}

	listenForThemeChange();
};

const cssVariablesLoaded = () => {
	if (!core) {
		return;
	}

	const link = [...document.head.children].find(el => el.id === "sap-ui-theme-sap.ui.core"); // more reliable than querySelector early
	if (!link) {
		return;
	}

	return !!link.href.match(/\/css(-|_)variables\.css/);
};

const OpenUI5Support = {
	isLoaded,
	init,
	getConfigurationSettingsObject,
	getLocaleDataObject,
	attachListeners,
	cssVariablesLoaded,
};

registerFeature("OpenUI5Support", OpenUI5Support);

const eventProvider$2 = new EventProvider();
const LANG_CHANGE = "languageChange";

const attachLanguageChange = listener => {
	eventProvider$2.attachEvent(LANG_CHANGE, listener);
};

const fireLanguageChange = lang => {
	return eventProvider$2.fireEvent(LANG_CHANGE, lang);
};

let language;
let useDefaultLanguage;

/**
 * Returns the currently configured language, or the browser language as a fallback
 * @returns {String}
 */
const getLanguage$1 = () => {
	if (language === undefined) {
		language = getLanguage();
	}
	return language;
};

/**
 * Changes the current language, re-fetches all message bundles, updates all language-aware components
 * and returns a promise that resolves when all rendering is done
 *
 * @param newLanguage
 * @returns {Promise<void>}
 */
const setLanguage = async newLanguage => {
	if (language === newLanguage) {
		return;
	}

	language = newLanguage;

	const listenersResults = fireLanguageChange(newLanguage);
	await Promise.all(listenersResults);
	RenderScheduler.reRenderAllUI5Elements({ languageAware: true });
	return RenderScheduler.whenFinished();
};

/**
 * Defines if the default language, that is inlined, should be used,
 * instead of fetching the language over the network.
 * <b>Note:</b> By default the language will be fetched.
 *
 * @param {Boolean} useDefaultLanguage
 */
const setUseDefaultLanguage = useDefaultLang => {
	useDefaultLanguage = useDefaultLang;
};

/**
 * Returns if the default language, that is inlined, should be used.
 * @returns {Boolean}
 */
const getUseDefaultLanguage$1 = () => {
	if (useDefaultLanguage === undefined) {
		setUseDefaultLanguage(getUseDefaultLanguage());
	}

	return useDefaultLanguage;
};

/**
 * Base class for all data types.
 *
 * @class
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.base.types.DataType
 * @public
 */
class DataType {
	static isValid(value) {
	}

	static generataTypeAcessors(types) {
		Object.keys(types).forEach(type => {
			Object.defineProperty(this, type, {
				get() {
					return types[type];
				},
			});
		});
	}
}

/**
 * Different calendar types.
 */
const CalendarTypes = {
	Gregorian: "Gregorian",
	Islamic: "Islamic",
	Japanese: "Japanese",
	Buddhist: "Buddhist",
	Persian: "Persian",
};

class CalendarType extends DataType {
	static isValid(value) {
		return !!CalendarTypes[value];
	}
}

CalendarType.generataTypeAcessors(CalendarTypes);

let calendarType;

const getCalendarType$1 = () => {
	if (calendarType === undefined) {
		calendarType = getCalendarType();
	}

	if (CalendarType.isValid(calendarType)) {
		return calendarType;
	}

	return CalendarType.Gregorian;
};

var getDesigntimePropertyAsArray = value => {
	const m = /\$([-a-z0-9A-Z._]+)(?::([^$]*))?\$/.exec(value);
	return m && m[2] ? m[2].split(/,/) : null;
};

var detectNavigatorLanguage = () => {
	const browserLanguages = navigator.languages;

	const navigatorLanguage = () => {
		return navigator.language;
	};

	const rawLocale = (browserLanguages && browserLanguages[0]) || navigatorLanguage() || navigator.userLanguage || navigator.browserLanguage;

	return rawLocale || DEFAULT_LANGUAGE;
};

const rLocale = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;

class Locale {
	constructor(sLocaleId) {
		const aResult = rLocale.exec(sLocaleId.replace(/_/g, "-"));
		if (aResult === null) {
			throw new Error(`The given language ${sLocaleId} does not adhere to BCP-47.`);
		}
		this.sLocaleId = sLocaleId;
		this.sLanguage = aResult[1] || null;
		this.sScript = aResult[2] || null;
		this.sRegion = aResult[3] || null;
		this.sVariant = (aResult[4] && aResult[4].slice(1)) || null;
		this.sExtension = (aResult[5] && aResult[5].slice(1)) || null;
		this.sPrivateUse = aResult[6] || null;
		if (this.sLanguage) {
			this.sLanguage = this.sLanguage.toLowerCase();
		}
		if (this.sScript) {
			this.sScript = this.sScript.toLowerCase().replace(/^[a-z]/, s => {
				return s.toUpperCase();
			});
		}
		if (this.sRegion) {
			this.sRegion = this.sRegion.toUpperCase();
		}
	}

	getLanguage() {
		return this.sLanguage;
	}

	getScript() {
		return this.sScript;
	}

	getRegion() {
		return this.sRegion;
	}

	getVariant() {
		return this.sVariant;
	}

	getVariantSubtags() {
		return this.sVariant ? this.sVariant.split("-") : [];
	}

	getExtension() {
		return this.sExtension;
	}

	getExtensionSubtags() {
		return this.sExtension ? this.sExtension.slice(2).split("-") : [];
	}

	getPrivateUse() {
		return this.sPrivateUse;
	}

	getPrivateUseSubtags() {
		return this.sPrivateUse ? this.sPrivateUse.slice(2).split("-") : [];
	}

	hasPrivateUseSubtag(sSubtag) {
		return this.getPrivateUseSubtags().indexOf(sSubtag) >= 0;
	}

	toString() {
		const r = [this.sLanguage];

		if (this.sScript) {
			r.push(this.sScript);
		}
		if (this.sRegion) {
			r.push(this.sRegion);
		}
		if (this.sVariant) {
			r.push(this.sVariant);
		}
		if (this.sExtension) {
			r.push(this.sExtension);
		}
		if (this.sPrivateUse) {
			r.push(this.sPrivateUse);
		}
		return r.join("-");
	}
}

const convertToLocaleOrNull = lang => {
	try {
		if (lang && typeof lang === "string") {
			return new Locale(lang);
		}
	} catch (e) {
		// ignore
	}
};

/**
 * Returns the locale based on the parameter or configured language Configuration#getLanguage
 * If no language has been configured - a new locale based on browser language is returned
 */
const getLocale = lang => {
	if (lang) {
		return convertToLocaleOrNull(lang);
	}

	if (getLanguage$1()) {
		return new Locale(getLanguage$1());
	}

	return convertToLocaleOrNull(detectNavigatorLanguage());
};

const emptyFn = () => {};

/**
 * OpenUI5 FormatSettings shim
 */
const FormatSettings = {
	getFormatLocale: getLocale,
	getLegacyDateFormat: emptyFn,
	getLegacyDateCalendarCustomizing: emptyFn,
	getCustomLocaleData: emptyFn,
};

/**
 * OpenUI5 Configuration Shim
 */
const Configuration = {
	getLanguage: getLanguage$1,
	getCalendarType: getCalendarType$1,
	getSupportedLanguages: () => getDesigntimePropertyAsArray("$core-i18n-locales:,ar,bg,ca,cs,da,de,el,en,es,et,fi,fr,hi,hr,hu,it,iw,ja,ko,lt,lv,nl,no,pl,pt,ro,ru,sh,sk,sl,sv,th,tr,uk,vi,zh_CN,zh_TW$"),
	getOriginInfo: emptyFn,
	getFormatSettings: () => FormatSettings,
};

/**
 * OpenUI5 Core shim
 */
const Core = {
	getConfiguration: () => Configuration,
	getLibraryResourceBundle: emptyFn(),
	getFormatSettings: () => FormatSettings,
};

var BaseObject;
var Interface = function (oObject, aMethods, bFacade) {
  if (!oObject) {
    return oObject;
  }
  BaseObject = BaseObject || sap.ui.requireSync("sap/ui/base/Object");
  function fCreateDelegator(oObject, sMethodName) {
    return function () {
      var tmp = oObject[sMethodName].apply(oObject, arguments);
      if (bFacade) {
        return this;
      } else {
        return tmp instanceof BaseObject ? tmp.getInterface() : tmp;
      }
    };
  }
  if (!aMethods) {
    return {};
  }
  var sMethodName;
  for (var i = 0, ml = aMethods.length; i < ml; i++) {
    sMethodName = aMethods[i];
    if (!oObject[sMethodName] || typeof oObject[sMethodName] === "function") {
      this[sMethodName] = fCreateDelegator(oObject, sMethodName);
    }
  }
};

var ObjectPath = {};
var defaultRootContext = window;
function getObjectPathArray(vObjectPath) {
  return Array.isArray(vObjectPath) ? vObjectPath.slice() : vObjectPath.split(".");
}
ObjectPath.create = function (vObjectPath, oRootContext) {
  var oObject = oRootContext || defaultRootContext;
  var aNames = getObjectPathArray(vObjectPath);
  for (var i = 0; i < aNames.length; i++) {
    var sName = aNames[i];
    if (oObject[sName] === null || oObject[sName] !== undefined && (typeof oObject[sName] !== "object" && typeof oObject[sName] !== "function")) {
      throw new Error("Could not set object-path for '" + aNames.join(".") + "', path segment '" + sName + "' already exists.");
    }
    oObject[sName] = oObject[sName] || ({});
    oObject = oObject[sName];
  }
  return oObject;
};
ObjectPath.get = function (vObjectPath, oRootContext) {
  var oObject = oRootContext || defaultRootContext;
  var aNames = getObjectPathArray(vObjectPath);
  var sPropertyName = aNames.pop();
  for (var i = 0; i < aNames.length && oObject; i++) {
    oObject = oObject[aNames[i]];
  }
  return oObject ? oObject[sPropertyName] : undefined;
};
ObjectPath.set = function (vObjectPath, vValue, oRootContext) {
  oRootContext = oRootContext || defaultRootContext;
  var aNames = getObjectPathArray(vObjectPath);
  var sPropertyName = aNames.pop();
  var oObject = ObjectPath.create(aNames, oRootContext);
  oObject[sPropertyName] = vValue;
};

var Device = {
  browser: {
    phantomJS: false
  }
};

var fnNow = !(typeof window != "undefined" && window.performance && performance.now && performance.timing) ? Date.now : (function () {
  var iNavigationStart = performance.timing.navigationStart;
  return function perfnow() {
    return iNavigationStart + performance.now();
  };
})();

var Log = {};
Log.Level = {
    NONE: -1,
    FATAL: 0,
    ERROR: 1,
    WARNING: 2,
    INFO: 3,
    DEBUG: 4,
    TRACE: 5,
    ALL: 5 + 1
};
var sDefaultComponent, aLog = [], mMaxLevel = { '': Log.Level.ERROR }, iLogEntriesLimit = 3000, oListener = null, bLogSupportInfo = false;
function pad0(i, w) {
    return ('000' + String(i)).slice(-w);
}
function level(sComponent) {
    return !sComponent || isNaN(mMaxLevel[sComponent]) ? mMaxLevel[''] : mMaxLevel[sComponent];
}
function discardLogEntries() {
    var iLogLength = aLog.length;
    if (iLogLength) {
        var iEntriesToKeep = Math.min(iLogLength, Math.floor(iLogEntriesLimit * 0.7));
        if (oListener) {
            oListener.onDiscardLogEntries(aLog.slice(0, iLogLength - iEntriesToKeep));
        }
        if (iEntriesToKeep) {
            aLog = aLog.slice(-iEntriesToKeep, iLogLength);
        } else {
            aLog = [];
        }
    }
}
function getLogEntryListenerInstance() {
    if (!oListener) {
        oListener = {
            listeners: [],
            onLogEntry: function (oLogEntry) {
                for (var i = 0; i < oListener.listeners.length; i++) {
                    if (oListener.listeners[i].onLogEntry) {
                        oListener.listeners[i].onLogEntry(oLogEntry);
                    }
                }
            },
            onDiscardLogEntries: function (aDiscardedLogEntries) {
                for (var i = 0; i < oListener.listeners.length; i++) {
                    if (oListener.listeners[i].onDiscardLogEntries) {
                        oListener.listeners[i].onDiscardLogEntries(aDiscardedLogEntries);
                    }
                }
            },
            attach: function (oLog, oLstnr) {
                if (oLstnr) {
                    oListener.listeners.push(oLstnr);
                    if (oLstnr.onAttachToLog) {
                        oLstnr.onAttachToLog(oLog);
                    }
                }
            },
            detach: function (oLog, oLstnr) {
                for (var i = 0; i < oListener.listeners.length; i++) {
                    if (oListener.listeners[i] === oLstnr) {
                        if (oLstnr.onDetachFromLog) {
                            oLstnr.onDetachFromLog(oLog);
                        }
                        oListener.listeners.splice(i, 1);
                        return;
                    }
                }
            }
        };
    }
    return oListener;
}
Log.fatal = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.FATAL, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.error = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.ERROR, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.warning = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.WARNING, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.info = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.INFO, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.debug = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.DEBUG, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.trace = function (sMessage, sDetails, sComponent, fnSupportInfo) {
    log(Log.Level.TRACE, sMessage, sDetails, sComponent, fnSupportInfo);
};
Log.setLevel = function (iLogLevel, sComponent, _bDefault) {
    sComponent = sComponent || sDefaultComponent || '';
    if (!_bDefault || mMaxLevel[sComponent] == null) {
        mMaxLevel[sComponent] = iLogLevel;
        var sLogLevel;
        Object.keys(Log.Level).forEach(function (sLevel) {
            if (Log.Level[sLevel] === iLogLevel) {
                sLogLevel = sLevel;
            }
        });
        log(Log.Level.INFO, 'Changing log level ' + (sComponent ? 'for \'' + sComponent + '\' ' : '') + 'to ' + sLogLevel, '', 'sap.base.log');
    }
};
Log.getLevel = function (sComponent) {
    return level(sComponent || sDefaultComponent);
};
Log.isLoggable = function (iLevel, sComponent) {
    return (iLevel == null ? Log.Level.DEBUG : iLevel) <= level(sComponent || sDefaultComponent);
};
Log.logSupportInfo = function (bEnabled) {
    bLogSupportInfo = bEnabled;
};
function log(iLevel, sMessage, sDetails, sComponent, fnSupportInfo) {
    if (!fnSupportInfo && !sComponent && typeof sDetails === 'function') {
        fnSupportInfo = sDetails;
        sDetails = '';
    }
    if (!fnSupportInfo && typeof sComponent === 'function') {
        fnSupportInfo = sComponent;
        sComponent = '';
    }
    sComponent = sComponent || sDefaultComponent;
    if (iLevel <= level(sComponent)) {
        var fNow = fnNow(), oNow = new Date(fNow), iMicroSeconds = Math.floor((fNow - Math.floor(fNow)) * 1000), oLogEntry = {
                time: pad0(oNow.getHours(), 2) + ':' + pad0(oNow.getMinutes(), 2) + ':' + pad0(oNow.getSeconds(), 2) + '.' + pad0(oNow.getMilliseconds(), 3) + pad0(iMicroSeconds, 3),
                date: pad0(oNow.getFullYear(), 4) + '-' + pad0(oNow.getMonth() + 1, 2) + '-' + pad0(oNow.getDate(), 2),
                timestamp: fNow,
                level: iLevel,
                message: String(sMessage || ''),
                details: String(sDetails || ''),
                component: String(sComponent || '')
            };
        if (bLogSupportInfo && typeof fnSupportInfo === 'function') {
            oLogEntry.supportInfo = fnSupportInfo();
        }
        if (iLogEntriesLimit) {
            if (aLog.length >= iLogEntriesLimit) {
                discardLogEntries();
            }
            aLog.push(oLogEntry);
        }
        if (oListener) {
            oListener.onLogEntry(oLogEntry);
        }
        if (console) {
            var isDetailsError = sDetails instanceof Error, logText = oLogEntry.date + ' ' + oLogEntry.time + ' ' + oLogEntry.message + ' - ' + oLogEntry.details + ' ' + oLogEntry.component;
            switch (iLevel) {
            case Log.Level.FATAL:
            case Log.Level.ERROR:
                isDetailsError ? console.error(logText, '\n', sDetails) : console.error(logText);
                break;
            case Log.Level.WARNING:
                isDetailsError ? console.warn(logText, '\n', sDetails) : console.warn(logText);
                break;
            case Log.Level.INFO:
                if (console.info) {
                    isDetailsError ? console.info(logText, '\n', sDetails) : console.info(logText);
                } else {
                    isDetailsError ? console.log(logText, '\n', sDetails) : console.log(logText);
                }
                break;
            case Log.Level.DEBUG:
                if (console.debug) {
                    isDetailsError ? console.debug(logText, '\n', sDetails) : console.debug(logText);
                } else {
                    isDetailsError ? console.log(logText, '\n', sDetails) : console.log(logText);
                }
                break;
            case Log.Level.TRACE:
                if (console.trace) {
                    isDetailsError ? console.trace(logText, '\n', sDetails) : console.trace(logText);
                } else {
                    isDetailsError ? console.log(logText, '\n', sDetails) : console.log(logText);
                }
                break;
            }
            if (console.info && oLogEntry.supportInfo) {
                console.info(oLogEntry.supportInfo);
            }
        }
        return oLogEntry;
    }
}
Log.getLogEntries = function () {
    return aLog.slice();
};
Log.getLogEntriesLimit = function () {
    return iLogEntriesLimit;
};
Log.setLogEntriesLimit = function (iLimit) {
    if (iLimit < 0) {
        throw new Error('The log entries limit needs to be greater than or equal to 0!');
    }
    iLogEntriesLimit = iLimit;
    if (aLog.length >= iLogEntriesLimit) {
        discardLogEntries();
    }
};
Log.addLogListener = function (oListener) {
    getLogEntryListenerInstance().attach(this, oListener);
};
Log.removeLogListener = function (oListener) {
    getLogEntryListenerInstance().detach(this, oListener);
};
function Logger(sComponent) {
    this.fatal = function (msg, detail, comp, support) {
        Log.fatal(msg, detail, comp || sComponent, support);
        return this;
    };
    this.error = function (msg, detail, comp, support) {
        Log.error(msg, detail, comp || sComponent, support);
        return this;
    };
    this.warning = function (msg, detail, comp, support) {
        Log.warning(msg, detail, comp || sComponent, support);
        return this;
    };
    this.info = function (msg, detail, comp, support) {
        Log.info(msg, detail, comp || sComponent, support);
        return this;
    };
    this.debug = function (msg, detail, comp, support) {
        Log.debug(msg, detail, comp || sComponent, support);
        return this;
    };
    this.trace = function (msg, detail, comp, support) {
        Log.trace(msg, detail, comp || sComponent, support);
        return this;
    };
    this.setLevel = function (level, comp) {
        Log.setLevel(level, comp || sComponent);
        return this;
    };
    this.getLevel = function (comp) {
        return Log.getLevel(comp || sComponent);
    };
    this.isLoggable = function (level, comp) {
        return Log.isLoggable(level, comp || sComponent);
    };
}
Log.getLogger = function (sComponent, iDefaultLogLevel) {
    if (!isNaN(iDefaultLogLevel) && mMaxLevel[sComponent] == null) {
        mMaxLevel[sComponent] = iDefaultLogLevel;
    }
    return new Logger(sComponent);
};

var fnAssert = function (bResult, vMessage) {
    if (!bResult) {
        var sMessage = typeof vMessage === 'function' ? vMessage() : vMessage;
        if (console && console.assert) {
            console.assert(bResult, sMessage);
        } else {
            Log.debug('[Assertions] ' + sMessage);
        }
    }
};

var fnUniqueSort = function (aArray) {
    fnAssert(aArray instanceof Array, 'uniqueSort: input parameter must be an Array');
    var l = aArray.length;
    if (l > 1) {
        aArray.sort();
        var j = 0;
        for (var i = 1; i < l; i++) {
            if (aArray[i] !== aArray[j]) {
                aArray[++j] = aArray[i];
            }
        }
        if (++j < l) {
            aArray.splice(j, l - j);
        }
    }
    return aArray;
};

var Metadata = function (sClassName, oClassInfo) {
    fnAssert(typeof sClassName === 'string' && sClassName, 'Metadata: sClassName must be a non-empty string');
    fnAssert(typeof oClassInfo === 'object', 'Metadata: oClassInfo must be empty or an object');
    if (!oClassInfo || typeof oClassInfo.metadata !== 'object') {
        oClassInfo = {
            metadata: oClassInfo || {},
            constructor: ObjectPath.get(sClassName)
        };
        oClassInfo.metadata.__version = 1;
    }
    oClassInfo.metadata.__version = oClassInfo.metadata.__version || 2;
    if (typeof oClassInfo.constructor !== 'function') {
        throw Error('constructor for class ' + sClassName + ' must have been declared before creating metadata for it');
    }
    this._sClassName = sClassName;
    this._oClass = oClassInfo.constructor;
    this.extend(oClassInfo);
};
Metadata.prototype.extend = function (oClassInfo) {
    this.applySettings(oClassInfo);
    this.afterApplySettings();
};
Metadata.prototype.applySettings = function (oClassInfo) {
    var that = this, oStaticInfo = oClassInfo.metadata, oPrototype;
    if (oStaticInfo.baseType) {
        var oParentClass = ObjectPath.get(oStaticInfo.baseType);
        if (typeof oParentClass !== 'function') {
            Log.fatal('base class \'' + oStaticInfo.baseType + '\' does not exist');
        }
        if (oParentClass.getMetadata) {
            this._oParent = oParentClass.getMetadata();
            fnAssert(oParentClass === oParentClass.getMetadata().getClass(), 'Metadata: oParentClass must match the class in the parent metadata');
        } else {
            this._oParent = new Metadata(oStaticInfo.baseType, {});
        }
    } else {
        this._oParent = undefined;
    }
    this._bAbstract = !!oStaticInfo['abstract'];
    this._bFinal = !!oStaticInfo['final'];
    this._sStereotype = oStaticInfo.stereotype || (this._oParent ? this._oParent._sStereotype : 'object');
    this._bDeprecated = !!oStaticInfo['deprecated'];
    this._aInterfaces = oStaticInfo.interfaces || [];
    this._aPublicMethods = oStaticInfo.publicMethods || [];
    this._bInterfacesUnique = false;
    oPrototype = this._oClass.prototype;
    for (var n in oClassInfo) {
        if (n !== 'metadata' && n !== 'constructor') {
            oPrototype[n] = oClassInfo[n];
            if (!n.match(/^_|^on|^init$|^exit$/)) {
                that._aPublicMethods.push(n);
            }
        }
    }
};
Metadata.prototype.afterApplySettings = function () {
    if (this._oParent) {
        this._aAllPublicMethods = this._oParent._aAllPublicMethods.concat(this._aPublicMethods);
        this._bInterfacesUnique = false;
    } else {
        this._aAllPublicMethods = this._aPublicMethods;
    }
};
Metadata.prototype.getStereotype = function () {
    return this._sStereotype;
};
Metadata.prototype.getName = function () {
    return this._sClassName;
};
Metadata.prototype.getClass = function () {
    return this._oClass;
};
Metadata.prototype.getParent = function () {
    return this._oParent;
};
Metadata.prototype._dedupInterfaces = function () {
    if (!this._bInterfacesUnique) {
        fnUniqueSort(this._aInterfaces);
        fnUniqueSort(this._aPublicMethods);
        fnUniqueSort(this._aAllPublicMethods);
        this._bInterfacesUnique = true;
    }
};
Metadata.prototype.getPublicMethods = function () {
    this._dedupInterfaces();
    return this._aPublicMethods;
};
Metadata.prototype.getAllPublicMethods = function () {
    this._dedupInterfaces();
    return this._aAllPublicMethods;
};
Metadata.prototype.getInterfaces = function () {
    this._dedupInterfaces();
    return this._aInterfaces;
};
Metadata.prototype.isInstanceOf = function (sInterface) {
    if (this._oParent) {
        if (this._oParent.isInstanceOf(sInterface)) {
            return true;
        }
    }
    var a = this._aInterfaces;
    for (var i = 0, l = a.length; i < l; i++) {
        if (a[i] === sInterface) {
            return true;
        }
    }
    return false;
};
var WRITABLE_IFF_PHANTOM = !!Device.browser.phantomJS;
Object.defineProperty(Metadata.prototype, '_mImplementedTypes', {
    get: function () {
        if (this === Metadata.prototype) {
            throw new Error('sap.ui.base.Metadata: The \'_mImplementedTypes\' property must not be accessed on the prototype');
        }
        var result = Object.create(this._oParent ? this._oParent._mImplementedTypes : null);
        result[this._sClassName] = true;
        var aInterfaces = this._aInterfaces, i = aInterfaces.length;
        while (i-- > 0) {
            if (!result[aInterfaces[i]]) {
                result[aInterfaces[i]] = true;
            }
        }
        Object.defineProperty(this, '_mImplementedTypes', {
            value: Object.freeze(result),
            writable: WRITABLE_IFF_PHANTOM,
            configurable: false
        });
        return result;
    },
    configurable: true
});
Metadata.prototype.isA = function (vTypeName) {
    var mTypes = this._mImplementedTypes;
    if (Array.isArray(vTypeName)) {
        for (var i = 0; i < vTypeName.length; i++) {
            if (vTypeName[i] in mTypes) {
                return true;
            }
        }
        return false;
    }
    return vTypeName in mTypes;
};
Metadata.prototype.isAbstract = function () {
    return this._bAbstract;
};
Metadata.prototype.isFinal = function () {
    return this._bFinal;
};
Metadata.prototype.isDeprecated = function () {
    return this._bDeprecated;
};
Metadata.prototype.addPublicMethods = function (sMethod) {
    var aNames = sMethod instanceof Array ? sMethod : arguments;
    Array.prototype.push.apply(this._aPublicMethods, aNames);
    Array.prototype.push.apply(this._aAllPublicMethods, aNames);
    this._bInterfacesUnique = false;
};
Metadata.createClass = function (fnBaseClass, sClassName, oClassInfo, FNMetaImpl) {
    if (typeof fnBaseClass === 'string') {
        FNMetaImpl = oClassInfo;
        oClassInfo = sClassName;
        sClassName = fnBaseClass;
        fnBaseClass = null;
    }
    fnAssert(!fnBaseClass || typeof fnBaseClass === 'function');
    fnAssert(typeof sClassName === 'string' && !!sClassName);
    fnAssert(!oClassInfo || typeof oClassInfo === 'object');
    fnAssert(!FNMetaImpl || typeof FNMetaImpl === 'function');
    FNMetaImpl = FNMetaImpl || Metadata;
    if (typeof FNMetaImpl.preprocessClassInfo === 'function') {
        oClassInfo = FNMetaImpl.preprocessClassInfo(oClassInfo);
    }
    oClassInfo = oClassInfo || {};
    oClassInfo.metadata = oClassInfo.metadata || {};
    if (!oClassInfo.hasOwnProperty('constructor')) {
        oClassInfo.constructor = undefined;
    }
    var fnClass = oClassInfo.constructor;
    fnAssert(!fnClass || typeof fnClass === 'function');
    if (fnBaseClass) {
        if (!fnClass) {
            if (oClassInfo.metadata.deprecated) {
                fnClass = function () {
                    Log.warning('Usage of deprecated class: ' + sClassName);
                    fnBaseClass.apply(this, arguments);
                };
            } else {
                fnClass = function () {
                    fnBaseClass.apply(this, arguments);
                };
            }
        }
        fnClass.prototype = Object.create(fnBaseClass.prototype);
        fnClass.prototype.constructor = fnClass;
        oClassInfo.metadata.baseType = fnBaseClass.getMetadata().getName();
    } else {
        fnClass = fnClass || function () {
        };
        delete oClassInfo.metadata.baseType;
    }
    oClassInfo.constructor = fnClass;
    ObjectPath.set(sClassName, fnClass);
    var oMetadata = new FNMetaImpl(sClassName, oClassInfo);
    fnClass.getMetadata = fnClass.prototype.getMetadata = function () {
        return oMetadata;
    };
    if (!fnClass.getMetadata().isFinal()) {
        fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {
            return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);
        };
    }
    return fnClass;
};

var BaseObject$1 = Metadata.createClass('sap.ui.base.Object', {
    constructor: function () {
        if (!(this instanceof BaseObject$1)) {
            throw Error('Cannot instantiate object: "new" is missing!');
        }
    }
});
BaseObject$1.prototype.destroy = function () {
};
BaseObject$1.prototype.getInterface = function () {
    var oInterface = new Interface(this, this.getMetadata().getAllPublicMethods());
    this.getInterface = function () {
        return oInterface;
    };
    return oInterface;
};
BaseObject$1.defineClass = function (sClassName, oStaticInfo, FNMetaImpl) {
    var oMetadata = new (FNMetaImpl || Metadata)(sClassName, oStaticInfo);
    var fnClass = oMetadata.getClass();
    fnClass.getMetadata = fnClass.prototype.getMetadata = function () {
        return oMetadata;
    };
    if (!oMetadata.isFinal()) {
        fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {
            return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);
        };
    }
    Log.debug('defined class \'' + sClassName + '\'' + (oMetadata.getParent() ? ' as subclass of ' + oMetadata.getParent().getName() : ''));
    return oMetadata;
};
BaseObject$1.prototype.isA = function (vTypeName) {
    return this.getMetadata().isA(vTypeName);
};
BaseObject$1.isA = function (oObject, vTypeName) {
    return oObject instanceof BaseObject$1 && oObject.isA(vTypeName);
};

var class2type$1 = {};
var hasOwn$1 = class2type$1.hasOwnProperty;
var toString$1 = class2type$1.toString;
var fnToString$1 = hasOwn$1.toString;
var ObjectFunctionString$1 = fnToString$1.call(Object);
var fnIsPlainObject$1 = function (obj) {
  var proto, Ctor;
  if (!obj || toString$1.call(obj) !== "[object Object]") {
    return false;
  }
  proto = Object.getPrototypeOf(obj);
  if (!proto) {
    return true;
  }
  Ctor = hasOwn$1.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && fnToString$1.call(Ctor) === ObjectFunctionString$1;
};

var oToken$1 = Object.create(null);
var fnMerge$2 = function () {
    var src, copyIsArray, copy, name, options, clone, target = arguments[2] || {}, i = 3, length = arguments.length, deep = arguments[0] || false, skipToken = arguments[1] ? undefined : oToken$1;
    if (typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }
    for (; i < length; i++) {
        if ((options = arguments[i]) != null) {
            for (name in options) {
                src = target[name];
                copy = options[name];
                if (name === '__proto__' || target === copy) {
                    continue;
                }
                if (deep && copy && (fnIsPlainObject$1(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    } else {
                        clone = src && fnIsPlainObject$1(src) ? src : {};
                    }
                    target[name] = fnMerge$2(deep, arguments[1], clone, copy);
                } else if (copy !== skipToken) {
                    target[name] = copy;
                }
            }
        }
    }
    return target;
};

var fnExtend = function () {
    var args = [
        false,
        true
    ];
    args.push.apply(args, arguments);
    return fnMerge$2.apply(null, args);
};

var CalendarType$1 = {
  Gregorian: "Gregorian",
  Islamic: "Islamic",
  Japanese: "Japanese",
  Persian: "Persian",
  Buddhist: "Buddhist"
};

var rLocale$1 = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
var Locale$1 = BaseObject$1.extend('sap.ui.core.Locale', {
    constructor: function (sLocaleId) {
        BaseObject$1.apply(this);
        var aResult = rLocale$1.exec(sLocaleId.replace(/_/g, '-'));
        if (aResult === null) {
            throw 'The given language \'' + sLocaleId + '\' does not adhere to BCP-47.';
        }
        this.sLocaleId = sLocaleId;
        this.sLanguage = aResult[1] || null;
        this.sScript = aResult[2] || null;
        this.sRegion = aResult[3] || null;
        this.sVariant = aResult[4] && aResult[4].slice(1) || null;
        this.sExtension = aResult[5] && aResult[5].slice(1) || null;
        this.sPrivateUse = aResult[6] || null;
        if (this.sLanguage) {
            this.sLanguage = this.sLanguage.toLowerCase();
        }
        if (this.sScript) {
            this.sScript = this.sScript.toLowerCase().replace(/^[a-z]/, function ($) {
                return $.toUpperCase();
            });
        }
        if (this.sRegion) {
            this.sRegion = this.sRegion.toUpperCase();
        }
    },
    getLanguage: function () {
        return this.sLanguage;
    },
    getScript: function () {
        return this.sScript;
    },
    getRegion: function () {
        return this.sRegion;
    },
    getVariant: function () {
        return this.sVariant;
    },
    getVariantSubtags: function () {
        return this.sVariant ? this.sVariant.split('-') : [];
    },
    getExtension: function () {
        return this.sExtension;
    },
    getExtensionSubtags: function () {
        return this.sExtension ? this.sExtension.slice(2).split('-') : [];
    },
    getPrivateUse: function () {
        return this.sPrivateUse;
    },
    getPrivateUseSubtags: function () {
        return this.sPrivateUse ? this.sPrivateUse.slice(2).split('-') : [];
    },
    hasPrivateUseSubtag: function (sSubtag) {
        fnAssert(sSubtag && sSubtag.match(/^[0-9A-Z]{1,8}$/i), 'subtag must be a valid BCP47 private use tag');
        return this.getPrivateUseSubtags().indexOf(sSubtag) >= 0;
    },
    toString: function () {
        var r = [this.sLanguage];
        if (this.sScript) {
            r.push(this.sScript);
        }
        if (this.sRegion) {
            r.push(this.sRegion);
        }
        if (this.sVariant) {
            r.push(this.sVariant);
        }
        if (this.sExtension) {
            r.push(this.sExtension);
        }
        if (this.sPrivateUse) {
            r.push(this.sPrivateUse);
        }
        return r.join('-');
    },
    getSAPLogonLanguage: function () {
        var sLanguage = this.sLanguage || '', m;
        if (sLanguage.indexOf('-') >= 0) {
            sLanguage = sLanguage.slice(0, sLanguage.indexOf('-'));
        }
        sLanguage = M_ISO639_OLD_TO_NEW[sLanguage] || sLanguage;
        if (sLanguage === 'zh') {
            if (this.sScript === 'Hant' || !this.sScript && this.sRegion === 'TW') {
                sLanguage = 'zf';
            }
        }
        if (this.sPrivateUse && (m = /-(saptrc|sappsd)(?:-|$)/i.exec(this.sPrivateUse))) {
            sLanguage = m[1].toLowerCase() === 'saptrc' ? '1Q' : '2Q';
        }
        return sLanguage.toUpperCase();
    }
});
var M_ISO639_OLD_TO_NEW = {
    'iw': 'he',
    'ji': 'yi',
    'in': 'id',
    'sh': 'sr'
};
function getDesigntimePropertyAsArray$1(sValue) {
    var m = /\$([-a-z0-9A-Z._]+)(?::([^$]*))?\$/.exec(sValue);
    return m && m[2] ? m[2].split(/,/) : null;
}
var A_RTL_LOCALES = getDesigntimePropertyAsArray$1('$cldr-rtl-locales:ar,fa,he$') || [];
Locale$1._cldrLocales = getDesigntimePropertyAsArray$1('$cldr-locales:ar,ar_EG,ar_SA,bg,br,ca,cs,da,de,de_AT,de_CH,el,el_CY,en,en_AU,en_GB,en_HK,en_IE,en_IN,en_NZ,en_PG,en_SG,en_ZA,es,es_AR,es_BO,es_CL,es_CO,es_MX,es_PE,es_UY,es_VE,et,fa,fi,fr,fr_BE,fr_CA,fr_CH,fr_LU,he,hi,hr,hu,id,it,it_CH,ja,kk,ko,lt,lv,ms,nb,nl,nl_BE,nn,pl,pt,pt_PT,ro,ru,ru_UA,sk,sl,sr,sv,th,tr,uk,vi,zh_CN,zh_HK,zh_SG,zh_TW$');
Locale$1._coreI18nLocales = getDesigntimePropertyAsArray$1('$core-i18n-locales:,ar,bg,ca,cs,da,de,el,en,es,et,fi,fr,hi,hr,hu,it,iw,ja,kk,ko,lt,lv,ms,nl,no,pl,pt,ro,ru,sh,sk,sl,sv,th,tr,uk,vi,zh_CN,zh_TW$');
Locale$1._impliesRTL = function (vLanguage) {
    var oLocale = vLanguage instanceof Locale$1 ? vLanguage : new Locale$1(vLanguage);
    var sLanguage = oLocale.getLanguage() || '';
    sLanguage = sLanguage && M_ISO639_OLD_TO_NEW[sLanguage] || sLanguage;
    var sRegion = oLocale.getRegion() || '';
    if (sRegion && A_RTL_LOCALES.indexOf(sLanguage + '_' + sRegion) >= 0) {
        return true;
    }
    return A_RTL_LOCALES.indexOf(sLanguage) >= 0;
};

const resources = new Map();
const cldrData = {};
const cldrUrls = {};

// externally configurable mapping function for resolving (localeId -> URL)
// default implementation - ui5 CDN
let cldrMappingFn = locale => `https://ui5.sap.com/1.60.2/resources/sap/ui/core/cldr/${locale}.json`;

const M_ISO639_OLD_TO_NEW$1 = {
	"iw": "he",
	"ji": "yi",
	"in": "id",
	"sh": "sr",
};

const calcLocale = (language, region, script) => {
	// normalize language and handle special cases
	language = (language && M_ISO639_OLD_TO_NEW$1[language]) || language;
	// Special case 1: in an SAP context, the inclusive language code "no" always means Norwegian Bokmal ("nb")
	if (language === "no") {
		language = "nb";
	}
	// Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)
	if (language === "zh" && !region) {
		if (script === "Hans") {
			region = "CN";
		} else if (script === "Hant") {
			region = "TW";
		}
	}

	// try language + region
	let localeId = `${language}_${region}`;
	if (!SUPPORTED_LOCALES.includes(localeId)) {
		// fallback to language only
		localeId = language;
	}
	if (!SUPPORTED_LOCALES.includes(localeId)) {
		// fallback to english
		localeId = DEFAULT_LOCALE;
	}

	return localeId;
};


const resolveMissingMappings = () => {
	if (!cldrMappingFn) {
		return;
	}

	const missingLocales = SUPPORTED_LOCALES.filter(locale => !cldrData[locale] && !cldrUrls[locale]);
	missingLocales.forEach(locale => {
		cldrUrls[locale] = cldrMappingFn(locale);
	});
};

const registerModuleContent = (moduleName, content) => {
	resources.set(moduleName, content);
};

const getModuleContent = moduleName => {
	const moduleContent = resources.get(moduleName);
	if (moduleContent) {
		return moduleContent;
	}

	const missingModule = moduleName.match(/sap\/ui\/core\/cldr\/(\w+)\.json/);
	if (missingModule) {
		throw new Error(`CLDR data for locale ${missingModule[1]} is not loaded!`);
	}

	throw new Error(`Unknown module ${moduleName}`);
};

const fetchCldr = async (language, region, script) => {
	resolveMissingMappings();
	const localeId = calcLocale(language, region, script);

	let cldrObj = cldrData[localeId];
	const url = cldrUrls[localeId];

	const OpenUI5Support = getFeature("OpenUI5Support");
	if (!cldrObj && OpenUI5Support) {
		cldrObj = OpenUI5Support.getLocaleDataObject();
	}

	if (cldrObj) {
		// inlined from build or fetched independently
		registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrObj);
	} else if (url) {
		// fetch it
		const cldrContent = await fetchJsonOnce(getEffectiveAssetPath(url));
		registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrContent);
	}
};

const registerCldr = (locale, url) => {
	cldrUrls[locale] = url;
};

const setCldrData = (locale, data) => {
	cldrData[locale] = data;
};

// When the language changes dynamically (the user calls setLanguage),
// re-fetch the required CDRD data.
attachLanguageChange(() => {
	const locale = getLocale();
	return fetchCldr(locale.getLanguage(), locale.getRegion(), locale.getScript());
});

const LoaderExtensions = {
	loadResource: getModuleContent,
};

var LocaleData = BaseObject$1.extend('sap.ui.core.LocaleData', {
    constructor: function (oLocale) {
        this.oLocale = oLocale;
        BaseObject$1.apply(this);
        this.mData = getData(oLocale);
    },
    _get: function () {
        return this._getDeep(this.mData, arguments);
    },
    _getMerged: function () {
        return this._get.apply(this, arguments);
    },
    _getDeep: function (oObject, aPropertyNames) {
        var oResult = oObject;
        for (var i = 0; i < aPropertyNames.length; i++) {
            oResult = oResult[aPropertyNames[i]];
            if (oResult === undefined) {
                break;
            }
        }
        return oResult;
    },
    getOrientation: function () {
        return this._get('orientation');
    },
    getLanguages: function () {
        return this._get('languages');
    },
    getScripts: function () {
        return this._get('scripts');
    },
    getTerritories: function () {
        return this._get('territories');
    },
    getMonths: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'months', 'format', sWidth);
    },
    getMonthsStandAlone: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'months', 'stand-alone', sWidth);
    },
    getDays: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide' || sWidth == 'short', 'sWidth must be narrow, abbreviate, wide or short');
        return this._get(getCLDRCalendarName(sCalendarType), 'days', 'format', sWidth);
    },
    getDaysStandAlone: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide' || sWidth == 'short', 'sWidth must be narrow, abbreviated, wide or short');
        return this._get(getCLDRCalendarName(sCalendarType), 'days', 'stand-alone', sWidth);
    },
    getQuarters: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'quarters', 'format', sWidth);
    },
    getQuartersStandAlone: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'quarters', 'stand-alone', sWidth);
    },
    getDayPeriods: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'dayPeriods', 'format', sWidth);
    },
    getDayPeriodsStandAlone: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'narrow' || sWidth == 'abbreviated' || sWidth == 'wide', 'sWidth must be narrow, abbreviated or wide');
        return this._get(getCLDRCalendarName(sCalendarType), 'dayPeriods', 'stand-alone', sWidth);
    },
    getDatePattern: function (sStyle, sCalendarType) {
        fnAssert(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        return this._get(getCLDRCalendarName(sCalendarType), 'dateFormats', sStyle);
    },
    getTimePattern: function (sStyle, sCalendarType) {
        fnAssert(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        return this._get(getCLDRCalendarName(sCalendarType), 'timeFormats', sStyle);
    },
    getDateTimePattern: function (sStyle, sCalendarType) {
        fnAssert(sStyle == 'short' || sStyle == 'medium' || sStyle == 'long' || sStyle == 'full', 'sStyle must be short, medium, long or full');
        return this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', sStyle);
    },
    getCombinedDateTimePattern: function (sDateStyle, sTimeStyle, sCalendarType) {
        fnAssert(sDateStyle == 'short' || sDateStyle == 'medium' || sDateStyle == 'long' || sDateStyle == 'full', 'sStyle must be short, medium, long or full');
        fnAssert(sTimeStyle == 'short' || sTimeStyle == 'medium' || sTimeStyle == 'long' || sTimeStyle == 'full', 'sStyle must be short, medium, long or full');
        var sDateTimePattern = this.getDateTimePattern(sDateStyle, sCalendarType), sDatePattern = this.getDatePattern(sDateStyle, sCalendarType), sTimePattern = this.getTimePattern(sTimeStyle, sCalendarType);
        return sDateTimePattern.replace('{0}', sTimePattern).replace('{1}', sDatePattern);
    },
    getCustomDateTimePattern: function (sSkeleton, sCalendarType) {
        var oAvailableFormats = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'availableFormats');
        return this._getFormatPattern(sSkeleton, oAvailableFormats, sCalendarType);
    },
    getIntervalPattern: function (sId, sCalendarType) {
        var oIntervalFormats = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'intervalFormats'), aIdParts, sIntervalId, sDifference, oInterval, sPattern;
        if (sId) {
            aIdParts = sId.split('-');
            sIntervalId = aIdParts[0];
            sDifference = aIdParts[1];
            oInterval = oIntervalFormats[sIntervalId];
            if (oInterval) {
                sPattern = oInterval[sDifference];
                if (sPattern) {
                    return sPattern;
                }
            }
        }
        return oIntervalFormats.intervalFormatFallback;
    },
    getCombinedIntervalPattern: function (sPattern, sCalendarType) {
        var oIntervalFormats = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'intervalFormats'), sFallbackPattern = oIntervalFormats.intervalFormatFallback;
        return sFallbackPattern.replace(/\{(0|1)\}/g, sPattern);
    },
    getCustomIntervalPattern: function (sSkeleton, vGreatestDiff, sCalendarType) {
        var oAvailableFormats = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'intervalFormats');
        return this._getFormatPattern(sSkeleton, oAvailableFormats, sCalendarType, vGreatestDiff);
    },
    _getFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {
        var vPattern, aPatterns, oIntervalFormats;
        if (!vDiff) {
            vPattern = oAvailableFormats[sSkeleton];
        } else if (typeof vDiff === 'string') {
            if (vDiff == 'j' || vDiff == 'J') {
                vDiff = this.getPreferredHourSymbol();
            }
            oIntervalFormats = oAvailableFormats[sSkeleton];
            vPattern = oIntervalFormats && oIntervalFormats[vDiff];
        }
        if (vPattern) {
            if (typeof vPattern === 'object') {
                aPatterns = Object.keys(vPattern).map(function (sKey) {
                    return vPattern[sKey];
                });
            } else {
                return vPattern;
            }
        }
        if (!aPatterns) {
            aPatterns = this._createFormatPattern(sSkeleton, oAvailableFormats, sCalendarType, vDiff);
        }
        if (aPatterns && aPatterns.length === 1) {
            return aPatterns[0];
        }
        return aPatterns;
    },
    _createFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {
        var aTokens = this._parseSkeletonFormat(sSkeleton), aPatterns, oBestMatch = this._findBestMatch(aTokens, sSkeleton, oAvailableFormats), oToken, oAvailableDateTimeFormats, oSymbol, oGroup, sPattern, sSinglePattern, sDiffSymbol, sDiffGroup, rMixedSkeleton = /^([GyYqQMLwWEecdD]+)([hHkKjJmszZvVOXx]+)$/, bSingleDate, i;
        if (vDiff) {
            if (typeof vDiff === 'string') {
                sDiffGroup = mCLDRSymbols[vDiff] ? mCLDRSymbols[vDiff].group : '';
                if (sDiffGroup) {
                    bSingleDate = mCLDRSymbolGroups[sDiffGroup].index > aTokens[aTokens.length - 1].index;
                }
                sDiffSymbol = vDiff;
            } else {
                bSingleDate = true;
                if (aTokens[0].symbol === 'y' && oBestMatch && oBestMatch.pattern.G) {
                    oSymbol = mCLDRSymbols['G'];
                    oGroup = mCLDRSymbolGroups[oSymbol.group];
                    aTokens.splice(0, 0, {
                        symbol: 'G',
                        group: oSymbol.group,
                        match: oSymbol.match,
                        index: oGroup.index,
                        field: oGroup.field,
                        length: 1
                    });
                }
                for (i = aTokens.length - 1; i >= 0; i--) {
                    oToken = aTokens[i];
                    if (vDiff[oToken.group]) {
                        bSingleDate = false;
                        break;
                    }
                }
                for (i = 0; i < aTokens.length; i++) {
                    oToken = aTokens[i];
                    if (vDiff[oToken.group]) {
                        sDiffSymbol = oToken.symbol;
                        break;
                    }
                }
                if ((sDiffSymbol == 'h' || sDiffSymbol == 'K') && vDiff.DayPeriod) {
                    sDiffSymbol = 'a';
                }
            }
            if (bSingleDate) {
                return [this.getCustomDateTimePattern(sSkeleton, sCalendarType)];
            }
            if (oBestMatch && oBestMatch.missingTokens.length === 0) {
                sPattern = oBestMatch.pattern[sDiffSymbol];
                if (sPattern && oBestMatch.distance > 0) {
                    sPattern = this._expandFields(sPattern, oBestMatch.patternTokens, aTokens);
                }
            }
            if (!sPattern) {
                oAvailableDateTimeFormats = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'availableFormats');
                if (rMixedSkeleton.test(sSkeleton) && 'ahHkKjJms'.indexOf(sDiffSymbol) >= 0) {
                    sPattern = this._getMixedFormatPattern(sSkeleton, oAvailableDateTimeFormats, sCalendarType, vDiff);
                } else {
                    sSinglePattern = this._getFormatPattern(sSkeleton, oAvailableDateTimeFormats, sCalendarType);
                    sPattern = this.getCombinedIntervalPattern(sSinglePattern, sCalendarType);
                }
            }
            aPatterns = [sPattern];
        } else if (!oBestMatch) {
            sPattern = sSkeleton;
            aPatterns = [sPattern];
        } else {
            if (typeof oBestMatch.pattern === 'string') {
                aPatterns = [oBestMatch.pattern];
            } else if (typeof oBestMatch.pattern === 'object') {
                aPatterns = [];
                for (var sKey in oBestMatch.pattern) {
                    sPattern = oBestMatch.pattern[sKey];
                    aPatterns.push(sPattern);
                }
            }
            if (oBestMatch.distance > 0) {
                if (oBestMatch.missingTokens.length > 0) {
                    if (rMixedSkeleton.test(sSkeleton)) {
                        aPatterns = [this._getMixedFormatPattern(sSkeleton, oAvailableFormats, sCalendarType)];
                    } else {
                        aPatterns = this._expandFields(aPatterns, oBestMatch.patternTokens, aTokens);
                        aPatterns = this._appendItems(aPatterns, oBestMatch.missingTokens, sCalendarType);
                    }
                } else {
                    aPatterns = this._expandFields(aPatterns, oBestMatch.patternTokens, aTokens);
                }
            }
        }
        if (sSkeleton.indexOf('J') >= 0) {
            aPatterns.forEach(function (sPattern, iIndex) {
                aPatterns[iIndex] = sPattern.replace(/ ?[abB](?=([^']*'[^']*')*[^']*)$/g, '');
            });
        }
        return aPatterns;
    },
    _parseSkeletonFormat: function (sSkeleton) {
        var aTokens = [], oToken = { index: -1 }, sSymbol, oSymbol, oGroup;
        for (var i = 0; i < sSkeleton.length; i++) {
            sSymbol = sSkeleton.charAt(i);
            if (sSymbol == 'j' || sSymbol == 'J') {
                sSymbol = this.getPreferredHourSymbol();
            }
            if (sSymbol == oToken.symbol) {
                oToken.length++;
                continue;
            }
            oSymbol = mCLDRSymbols[sSymbol];
            oGroup = mCLDRSymbolGroups[oSymbol.group];
            if (oSymbol.group == 'Other' || oGroup.diffOnly) {
                throw new Error('Symbol \'' + sSymbol + '\' is not allowed in skeleton format \'' + sSkeleton + '\'');
            }
            if (oGroup.index <= oToken.index) {
                throw new Error('Symbol \'' + sSymbol + '\' at wrong position or duplicate in skeleton format \'' + sSkeleton + '\'');
            }
            oToken = {
                symbol: sSymbol,
                group: oSymbol.group,
                match: oSymbol.match,
                index: oGroup.index,
                field: oGroup.field,
                length: 1
            };
            aTokens.push(oToken);
        }
        return aTokens;
    },
    _findBestMatch: function (aTokens, sSkeleton, oAvailableFormats) {
        var aTestTokens, aMissingTokens, oToken, oTestToken, iTest, iDistance, bMatch, iFirstDiffPos, oTokenSymbol, oTestTokenSymbol, oBestMatch = {
                distance: 10000,
                firstDiffPos: -1
            };
        for (var sTestSkeleton in oAvailableFormats) {
            if (sTestSkeleton === 'intervalFormatFallback' || sTestSkeleton.indexOf('B') > -1) {
                continue;
            }
            aTestTokens = this._parseSkeletonFormat(sTestSkeleton);
            iDistance = 0;
            aMissingTokens = [];
            bMatch = true;
            if (aTokens.length < aTestTokens.length) {
                continue;
            }
            iTest = 0;
            iFirstDiffPos = aTokens.length;
            for (var i = 0; i < aTokens.length; i++) {
                oToken = aTokens[i];
                oTestToken = aTestTokens[iTest];
                if (iFirstDiffPos === aTokens.length) {
                    iFirstDiffPos = i;
                }
                if (oTestToken) {
                    oTokenSymbol = mCLDRSymbols[oToken.symbol];
                    oTestTokenSymbol = mCLDRSymbols[oTestToken.symbol];
                    if (oToken.symbol === oTestToken.symbol) {
                        if (oToken.length === oTestToken.length) {
                            if (iFirstDiffPos === i) {
                                iFirstDiffPos = aTokens.length;
                            }
                        } else {
                            if (oToken.length < oTokenSymbol.numericCeiling ? oTestToken.length < oTestTokenSymbol.numericCeiling : oTestToken.length >= oTestTokenSymbol.numericCeiling) {
                                iDistance += Math.abs(oToken.length - oTestToken.length);
                            } else {
                                iDistance += 5;
                            }
                        }
                        iTest++;
                        continue;
                    } else {
                        if (oToken.match == oTestToken.match) {
                            iDistance += Math.abs(oToken.length - oTestToken.length) + 10;
                            iTest++;
                            continue;
                        }
                    }
                }
                aMissingTokens.push(oToken);
                iDistance += 50 - i;
            }
            if (iTest < aTestTokens.length) {
                bMatch = false;
            }
            if (bMatch && (iDistance < oBestMatch.distance || iDistance === oBestMatch.distance && iFirstDiffPos > oBestMatch.firstDiffPos)) {
                oBestMatch.distance = iDistance;
                oBestMatch.firstDiffPos = iFirstDiffPos;
                oBestMatch.missingTokens = aMissingTokens;
                oBestMatch.pattern = oAvailableFormats[sTestSkeleton];
                oBestMatch.patternTokens = aTestTokens;
            }
        }
        if (oBestMatch.pattern) {
            return oBestMatch;
        }
    },
    _expandFields: function (vPattern, aPatternTokens, aTokens) {
        var bSinglePattern = typeof vPattern === 'string';
        var aPatterns;
        if (bSinglePattern) {
            aPatterns = [vPattern];
        } else {
            aPatterns = vPattern;
        }
        var aResult = aPatterns.map(function (sPattern) {
            var mGroups = {}, mPatternGroups = {}, sResultPatterm = '', bQuoted = false, i = 0, iSkeletonLength, iPatternLength, iBestLength, iNewLength, oSkeletonToken, oBestToken, oSymbol, sChar;
            aTokens.forEach(function (oToken) {
                mGroups[oToken.group] = oToken;
            });
            aPatternTokens.forEach(function (oToken) {
                mPatternGroups[oToken.group] = oToken;
            });
            while (i < sPattern.length) {
                sChar = sPattern.charAt(i);
                if (bQuoted) {
                    sResultPatterm += sChar;
                    if (sChar == '\'') {
                        bQuoted = false;
                    }
                } else {
                    oSymbol = mCLDRSymbols[sChar];
                    if (oSymbol && mGroups[oSymbol.group] && mPatternGroups[oSymbol.group]) {
                        oSkeletonToken = mGroups[oSymbol.group];
                        oBestToken = mPatternGroups[oSymbol.group];
                        iSkeletonLength = oSkeletonToken.length;
                        iBestLength = oBestToken.length;
                        iPatternLength = 1;
                        while (sPattern.charAt(i + 1) == sChar) {
                            i++;
                            iPatternLength++;
                        }
                        if (iSkeletonLength === iBestLength || (iSkeletonLength < oSymbol.numericCeiling ? iPatternLength >= oSymbol.numericCeiling : iPatternLength < oSymbol.numericCeiling)) {
                            iNewLength = iPatternLength;
                        } else {
                            iNewLength = Math.max(iPatternLength, iSkeletonLength);
                        }
                        for (var j = 0; j < iNewLength; j++) {
                            sResultPatterm += sChar;
                        }
                    } else {
                        sResultPatterm += sChar;
                        if (sChar == '\'') {
                            bQuoted = true;
                        }
                    }
                }
                i++;
            }
            return sResultPatterm;
        });
        return bSinglePattern ? aResult[0] : aResult;
    },
    _appendItems: function (aPatterns, aMissingTokens, sCalendarType) {
        var oAppendItems = this._get(getCLDRCalendarName(sCalendarType), 'dateTimeFormats', 'appendItems');
        aPatterns.forEach(function (sPattern, iIndex) {
            var sDisplayName, sAppendPattern, sAppendField;
            aMissingTokens.forEach(function (oToken) {
                sAppendPattern = oAppendItems[oToken.group];
                sDisplayName = '\'' + this.getDisplayName(oToken.field) + '\'';
                sAppendField = '';
                for (var i = 0; i < oToken.length; i++) {
                    sAppendField += oToken.symbol;
                }
                aPatterns[iIndex] = sAppendPattern.replace(/\{0\}/, sPattern).replace(/\{1\}/, sAppendField).replace(/\{2\}/, sDisplayName);
            }.bind(this));
        }.bind(this));
        return aPatterns;
    },
    _getMixedFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {
        var rMixedSkeleton = /^([GyYqQMLwWEecdD]+)([hHkKjJmszZvVOXx]+)$/, rWideMonth = /MMMM|LLLL/, rAbbrevMonth = /MMM|LLL/, rWeekDay = /E|e|c/, oResult, sDateSkeleton, sTimeSkeleton, sStyle, sDatePattern, sTimePattern, sDateTimePattern, sResultPattern;
        oResult = rMixedSkeleton.exec(sSkeleton);
        sDateSkeleton = oResult[1];
        sTimeSkeleton = oResult[2];
        sDatePattern = this._getFormatPattern(sDateSkeleton, oAvailableFormats, sCalendarType);
        if (vDiff) {
            sTimePattern = this.getCustomIntervalPattern(sTimeSkeleton, vDiff, sCalendarType);
        } else {
            sTimePattern = this._getFormatPattern(sTimeSkeleton, oAvailableFormats, sCalendarType);
        }
        if (rWideMonth.test(sDateSkeleton)) {
            sStyle = rWeekDay.test(sDateSkeleton) ? 'full' : 'long';
        } else if (rAbbrevMonth.test(sDateSkeleton)) {
            sStyle = 'medium';
        } else {
            sStyle = 'short';
        }
        sDateTimePattern = this.getDateTimePattern(sStyle, sCalendarType);
        sResultPattern = sDateTimePattern.replace(/\{1\}/, sDatePattern).replace(/\{0\}/, sTimePattern);
        return sResultPattern;
    },
    getNumberSymbol: function (sType) {
        fnAssert(sType == 'decimal' || sType == 'group' || sType == 'plusSign' || sType == 'minusSign' || sType == 'percentSign', 'sType must be decimal, group, plusSign, minusSign or percentSign');
        return this._get('symbols-latn-' + sType);
    },
    getLenientNumberSymbols: function (sType) {
        fnAssert(sType == 'plusSign' || sType == 'minusSign', 'sType must be plusSign or minusSign');
        return this._get('lenient-scope-number')[sType];
    },
    getDecimalPattern: function () {
        return this._get('decimalFormat').standard;
    },
    getCurrencyPattern: function (sContext) {
        return this._get('currencyFormat')[sContext] || this._get('currencyFormat').standard;
    },
    getCurrencySpacing: function (sPosition) {
        return this._get('currencyFormat', 'currencySpacing', sPosition === 'after' ? 'afterCurrency' : 'beforeCurrency');
    },
    getPercentPattern: function () {
        return this._get('percentFormat').standard;
    },
    getMiscPattern: function (sName) {
        fnAssert(sName == 'approximately' || sName == 'atLeast' || sName == 'atMost' || sName == 'range', 'sName must be approximately, atLeast, atMost or range');
        return this._get('miscPattern')[sName];
    },
    getMinimalDaysInFirstWeek: function () {
        return this._get('weekData-minDays');
    },
    getFirstDayOfWeek: function () {
        return this._get('weekData-firstDay');
    },
    getWeekendStart: function () {
        return this._get('weekData-weekendStart');
    },
    getWeekendEnd: function () {
        return this._get('weekData-weekendEnd');
    },
    getCustomCurrencyCodes: function () {
        var mCustomCurrencies = this._get('currency') || {}, mCustomCurrencyCodes = {};
        Object.keys(mCustomCurrencies).forEach(function (sCurrencyKey) {
            mCustomCurrencyCodes[sCurrencyKey] = sCurrencyKey;
        });
        return mCustomCurrencyCodes;
    },
    getCurrencyDigits: function (sCurrency) {
        var mCustomCurrencies = this._get('currency');
        if (mCustomCurrencies) {
            if (mCustomCurrencies[sCurrency] && mCustomCurrencies[sCurrency].hasOwnProperty('digits')) {
                return mCustomCurrencies[sCurrency].digits;
            } else if (mCustomCurrencies['DEFAULT'] && mCustomCurrencies['DEFAULT'].hasOwnProperty('digits')) {
                return mCustomCurrencies['DEFAULT'].digits;
            }
        }
        var iDigits = this._get('currencyDigits', sCurrency);
        if (iDigits == null) {
            iDigits = this._get('currencyDigits', 'DEFAULT');
            if (iDigits == null) {
                iDigits = 2;
            }
        }
        return iDigits;
    },
    getCurrencySymbol: function (sCurrency) {
        var oCurrencySymbols = this.getCurrencySymbols();
        return oCurrencySymbols && oCurrencySymbols[sCurrency] || sCurrency;
    },
    getCurrencyCodeBySymbol: function (sCurrencySymbol) {
        var oCurrencySymbols = this._get('currencySymbols'), sCurrencyCode;
        for (sCurrencyCode in oCurrencySymbols) {
            if (oCurrencySymbols[sCurrencyCode] === sCurrencySymbol) {
                return sCurrencyCode;
            }
        }
        return sCurrencySymbol;
    },
    getCurrencySymbols: function () {
        var mCustomCurrencies = this._get('currency'), mCustomCurrencySymbols = {}, sIsoCode;
        for (var sCurrencyKey in mCustomCurrencies) {
            sIsoCode = mCustomCurrencies[sCurrencyKey].isoCode;
            if (mCustomCurrencies[sCurrencyKey].symbol) {
                mCustomCurrencySymbols[sCurrencyKey] = mCustomCurrencies[sCurrencyKey].symbol;
            } else if (sIsoCode) {
                mCustomCurrencySymbols[sCurrencyKey] = this._get('currencySymbols')[sIsoCode];
            }
        }
        return Object.assign({}, this._get('currencySymbols'), mCustomCurrencySymbols);
    },
    getUnitDisplayName: function (sUnit) {
        var mUnitFormat = this.getUnitFormat(sUnit);
        return mUnitFormat && mUnitFormat['displayName'] || '';
    },
    getRelativePatterns: function (aScales, sStyle) {
        if (sStyle === undefined) {
            sStyle = 'wide';
        }
        fnAssert(sStyle === 'wide' || sStyle === 'short' || sStyle === 'narrow', 'sStyle is only allowed to be set with \'wide\', \'short\' or \'narrow\'');
        var aPatterns = [], aPluralCategories = this.getPluralCategories(), oScale, oTimeEntry, iValue, iSign;
        if (!aScales) {
            aScales = [
                'year',
                'month',
                'week',
                'day',
                'hour',
                'minute',
                'second'
            ];
        }
        aScales.forEach(function (sScale) {
            oScale = this._get('dateFields', sScale + '-' + sStyle);
            for (var sEntry in oScale) {
                if (sEntry.indexOf('relative-type-') === 0) {
                    iValue = parseInt(sEntry.substr(14));
                    aPatterns.push({
                        scale: sScale,
                        value: iValue,
                        pattern: oScale[sEntry]
                    });
                } else if (sEntry.indexOf('relativeTime-type-') == 0) {
                    oTimeEntry = oScale[sEntry];
                    iSign = sEntry.substr(18) === 'past' ? -1 : 1;
                    aPluralCategories.forEach(function (sKey) {
                        aPatterns.push({
                            scale: sScale,
                            sign: iSign,
                            pattern: oTimeEntry['relativeTimePattern-count-' + sKey]
                        });
                    });
                }
            }
        }.bind(this));
        return aPatterns;
    },
    getRelativePattern: function (sScale, iDiff, bFuture, sStyle) {
        var sPattern, oTypes, sKey, sPluralCategory;
        if (typeof bFuture === 'string') {
            sStyle = bFuture;
            bFuture = undefined;
        }
        if (bFuture === undefined) {
            bFuture = iDiff > 0;
        }
        if (sStyle === undefined) {
            sStyle = 'wide';
        }
        fnAssert(sStyle === 'wide' || sStyle === 'short' || sStyle === 'narrow', 'sStyle is only allowed to be set with \'wide\', \'short\' or \'narrow\'');
        sKey = sScale + '-' + sStyle;
        if (iDiff === 0 || iDiff === -2 || iDiff === 2) {
            sPattern = this._get('dateFields', sKey, 'relative-type-' + iDiff);
        }
        if (!sPattern) {
            oTypes = this._get('dateFields', sKey, 'relativeTime-type-' + (bFuture ? 'future' : 'past'));
            sPluralCategory = this.getPluralCategory(Math.abs(iDiff).toString());
            sPattern = oTypes['relativeTimePattern-count-' + sPluralCategory];
        }
        return sPattern;
    },
    getRelativeSecond: function (iDiff, sStyle) {
        return this.getRelativePattern('second', iDiff, sStyle);
    },
    getRelativeMinute: function (iDiff, sStyle) {
        if (iDiff == 0) {
            return null;
        }
        return this.getRelativePattern('minute', iDiff, sStyle);
    },
    getRelativeHour: function (iDiff, sStyle) {
        if (iDiff == 0) {
            return null;
        }
        return this.getRelativePattern('hour', iDiff, sStyle);
    },
    getRelativeDay: function (iDiff, sStyle) {
        return this.getRelativePattern('day', iDiff, sStyle);
    },
    getRelativeWeek: function (iDiff, sStyle) {
        return this.getRelativePattern('week', iDiff, sStyle);
    },
    getRelativeMonth: function (iDiff, sStyle) {
        return this.getRelativePattern('month', iDiff, sStyle);
    },
    getDisplayName: function (sType, sStyle) {
        fnAssert(sType == 'second' || sType == 'minute' || sType == 'hour' || sType == 'zone' || sType == 'day' || sType == 'weekday' || sType == 'week' || sType == 'month' || sType == 'quarter' || sType == 'year' || sType == 'era', 'sType must be second, minute, hour, zone, day, weekday, week, month, quarter, year, era');
        if (sStyle === undefined) {
            sStyle = 'wide';
        }
        fnAssert(sStyle === 'wide' || sStyle === 'short' || sStyle === 'narrow', 'sStyle is only allowed to be set with \'wide\', \'short\' or \'narrow\'');
        var aSingleFormFields = [
                'era',
                'weekday',
                'zone'
            ], sKey = aSingleFormFields.indexOf(sType) === -1 ? sType + '-' + sStyle : sType;
        return this._get('dateFields', sKey, 'displayName');
    },
    getRelativeYear: function (iDiff, sStyle) {
        return this.getRelativePattern('year', iDiff, sStyle);
    },
    getDecimalFormat: function (sStyle, sNumber, sPlural) {
        var sFormat;
        var oFormats;
        switch (sStyle) {
        case 'long':
            oFormats = this._get('decimalFormat-long');
            break;
        default:
            oFormats = this._get('decimalFormat-short');
            break;
        }
        if (oFormats) {
            var sName = sNumber + '-' + sPlural;
            sFormat = oFormats[sName];
            if (!sFormat) {
                sName = sNumber + '-other';
                sFormat = oFormats[sName];
            }
        }
        return sFormat;
    },
    getCurrencyFormat: function (sStyle, sNumber, sPlural) {
        var sFormat;
        var oFormats = this._get('currencyFormat-' + sStyle);
        if (!oFormats) {
            if (sStyle === 'sap-short') {
                throw new Error('Failed to get CLDR data for property "currencyFormat-sap-short"');
            }
            oFormats = this._get('currencyFormat-short');
        }
        if (oFormats) {
            var sName = sNumber + '-' + sPlural;
            sFormat = oFormats[sName];
            if (!sFormat) {
                sName = sNumber + '-other';
                sFormat = oFormats[sName];
            }
        }
        return sFormat;
    },
    getListFormat: function (sType, sStyle) {
        var oFormats = this._get('listPattern-' + (sType || 'standard') + '-' + (sStyle || 'wide'));
        if (oFormats) {
            return oFormats;
        }
        return {};
    },
    getResolvedUnitFormat: function (sUnit) {
        sUnit = this.getUnitFromMapping(sUnit) || sUnit;
        return this.getUnitFormat(sUnit);
    },
    getUnitFormat: function (sUnit) {
        return this._get('units', 'short', sUnit);
    },
    getUnitFormats: function () {
        return this._getMerged('units', 'short');
    },
    getUnitFromMapping: function (sMapping) {
        return this._get('unitMappings', sMapping);
    },
    getEras: function (sWidth, sCalendarType) {
        fnAssert(sWidth == 'wide' || sWidth == 'abbreviated' || sWidth == 'narrow', 'sWidth must be wide, abbreviate or narrow');
        var oEras = this._get(getCLDRCalendarName(sCalendarType), 'era-' + sWidth), aEras = [];
        for (var i in oEras) {
            aEras[parseInt(i)] = oEras[i];
        }
        return aEras;
    },
    getEraDates: function (sCalendarType) {
        var oEraDates = this._get('eras-' + sCalendarType.toLowerCase()), aEraDates = [];
        for (var i in oEraDates) {
            aEraDates[parseInt(i)] = oEraDates[i];
        }
        return aEraDates;
    },
    getCalendarWeek: function (sStyle, iWeekNumber) {
        fnAssert(sStyle == 'wide' || sStyle == 'narrow', 'sStyle must be wide or narrow');
        var oMessageBundle = Core.getLibraryResourceBundle('sap.ui.core', this.oLocale.toString()), sKey = 'date.week.calendarweek.' + sStyle;
        return oMessageBundle.getText(sKey, iWeekNumber);
    },
    getPreferredCalendarType: function () {
        var sCalendarPreference = this._get('calendarPreference'), aCalendars = sCalendarPreference ? sCalendarPreference.split(' ') : [], sCalendarName, sType, i;
        for (i = 0; i < aCalendars.length; i++) {
            sCalendarName = aCalendars[i].split('-')[0];
            for (sType in CalendarType$1) {
                if (sCalendarName === sType.toLowerCase()) {
                    return sType;
                }
            }
        }
        return CalendarType$1.Gregorian;
    },
    getPreferredHourSymbol: function () {
        return this._get('timeData', '_preferred');
    },
    getPluralCategories: function () {
        var oPlurals = this._get('plurals'), aCategories = Object.keys(oPlurals);
        aCategories.push('other');
        return aCategories;
    },
    getPluralCategory: function (sNumber) {
        var oPlurals = this._get('plurals');
        if (typeof sNumber === 'number') {
            sNumber = sNumber.toString();
        }
        if (!this._pluralTest) {
            this._pluralTest = {};
        }
        for (var sCategory in oPlurals) {
            var fnTest = this._pluralTest[sCategory];
            if (!fnTest) {
                fnTest = this._parsePluralRule(oPlurals[sCategory]);
                this._pluralTest[sCategory] = fnTest;
            }
            if (fnTest(sNumber)) {
                return sCategory;
            }
        }
        return 'other';
    },
    _parsePluralRule: function (sRule) {
        var OP_OR = 'or', OP_AND = 'and', OP_MOD = '%', OP_EQ = '=', OP_NEQ = '!=', OPD_N = 'n', OPD_I = 'i', OPD_F = 'f', OPD_T = 't', OPD_V = 'v', OPD_W = 'w', RANGE = '..', SEP = ',';
        var i = 0, aTokens;
        aTokens = sRule.split(' ');
        function accept(sToken) {
            if (aTokens[i] === sToken) {
                i++;
                return true;
            }
            return false;
        }
        function consume() {
            var sToken = aTokens[i];
            i++;
            return sToken;
        }
        function or_condition() {
            var fnAnd, fnOr;
            fnAnd = and_condition();
            if (accept(OP_OR)) {
                fnOr = or_condition();
                return function (o) {
                    return fnAnd(o) || fnOr(o);
                };
            }
            return fnAnd;
        }
        function and_condition() {
            var fnRelation, fnAnd;
            fnRelation = relation();
            if (accept(OP_AND)) {
                fnAnd = and_condition();
                return function (o) {
                    return fnRelation(o) && fnAnd(o);
                };
            }
            return fnRelation;
        }
        function relation() {
            var fnExpr, fnRangeList, bEq;
            fnExpr = expr();
            if (accept(OP_EQ)) {
                bEq = true;
            } else if (accept(OP_NEQ)) {
                bEq = false;
            } else {
                throw new Error('Expected \'=\' or \'!=\'');
            }
            fnRangeList = range_list();
            if (bEq) {
                return function (o) {
                    return fnRangeList(o).indexOf(fnExpr(o)) >= 0;
                };
            } else {
                return function (o) {
                    return fnRangeList(o).indexOf(fnExpr(o)) === -1;
                };
            }
        }
        function expr() {
            var fnOperand;
            fnOperand = operand();
            if (accept(OP_MOD)) {
                var iDivisor = parseInt(consume());
                return function (o) {
                    return fnOperand(o) % iDivisor;
                };
            }
            return fnOperand;
        }
        function operand() {
            if (accept(OPD_N)) {
                return function (o) {
                    return o.n;
                };
            } else if (accept(OPD_I)) {
                return function (o) {
                    return o.i;
                };
            } else if (accept(OPD_F)) {
                return function (o) {
                    return o.f;
                };
            } else if (accept(OPD_T)) {
                return function (o) {
                    return o.t;
                };
            } else if (accept(OPD_V)) {
                return function (o) {
                    return o.v;
                };
            } else if (accept(OPD_W)) {
                return function (o) {
                    return o.w;
                };
            } else {
                throw new Error('Unknown operand: ' + consume());
            }
        }
        function range_list() {
            var aValues = [], sRangeList = consume(), aParts = sRangeList.split(SEP), aRange, iFrom, iTo;
            aParts.forEach(function (sPart) {
                aRange = sPart.split(RANGE);
                if (aRange.length === 1) {
                    aValues.push(parseInt(sPart));
                } else {
                    iFrom = parseInt(aRange[0]);
                    iTo = parseInt(aRange[1]);
                    for (var i = iFrom; i <= iTo; i++) {
                        aValues.push(i);
                    }
                }
            });
            return function (o) {
                return aValues;
            };
        }
        var fnOr = or_condition();
        if (i != aTokens.length) {
            throw new Error('Not completely parsed');
        }
        return function (sValue) {
            var iDotPos = sValue.indexOf('.'), sDecimal, sFraction, sFractionNoZeros, o;
            if (iDotPos === -1) {
                sDecimal = sValue;
                sFraction = '';
                sFractionNoZeros = '';
            } else {
                sDecimal = sValue.substr(0, iDotPos);
                sFraction = sValue.substr(iDotPos + 1);
                sFractionNoZeros = sFraction.replace(/0+$/, '');
            }
            o = {
                n: parseFloat(sValue),
                i: parseInt(sDecimal),
                v: sFraction.length,
                w: sFractionNoZeros.length,
                f: parseInt(sFraction),
                t: parseInt(sFractionNoZeros)
            };
            return fnOr(o);
        };
    }
});
var mCLDRSymbolGroups = {
    'Era': {
        field: 'era',
        index: 0
    },
    'Year': {
        field: 'year',
        index: 1
    },
    'Quarter': {
        field: 'quarter',
        index: 2
    },
    'Month': {
        field: 'month',
        index: 3
    },
    'Week': {
        field: 'week',
        index: 4
    },
    'Day-Of-Week': {
        field: 'weekday',
        index: 5
    },
    'Day': {
        field: 'day',
        index: 6
    },
    'DayPeriod': {
        field: 'hour',
        index: 7,
        diffOnly: true
    },
    'Hour': {
        field: 'hour',
        index: 8
    },
    'Minute': {
        field: 'minute',
        index: 9
    },
    'Second': {
        field: 'second',
        index: 10
    },
    'Timezone': {
        field: 'zone',
        index: 11
    }
};
var mCLDRSymbols = {
    'G': {
        group: 'Era',
        match: 'Era',
        numericCeiling: 1
    },
    'y': {
        group: 'Year',
        match: 'Year',
        numericCeiling: 100
    },
    'Y': {
        group: 'Year',
        match: 'Year',
        numericCeiling: 100
    },
    'Q': {
        group: 'Quarter',
        match: 'Quarter',
        numericCeiling: 3
    },
    'q': {
        group: 'Quarter',
        match: 'Quarter',
        numericCeiling: 3
    },
    'M': {
        group: 'Month',
        match: 'Month',
        numericCeiling: 3
    },
    'L': {
        group: 'Month',
        match: 'Month',
        numericCeiling: 3
    },
    'w': {
        group: 'Week',
        match: 'Week',
        numericCeiling: 100
    },
    'W': {
        group: 'Week',
        match: 'Week',
        numericCeiling: 100
    },
    'd': {
        group: 'Day',
        match: 'Day',
        numericCeiling: 100
    },
    'D': {
        group: 'Day',
        match: 'Day',
        numericCeiling: 100
    },
    'E': {
        group: 'Day-Of-Week',
        match: 'Day-Of-Week',
        numericCeiling: 1
    },
    'e': {
        group: 'Day-Of-Week',
        match: 'Day-Of-Week',
        numericCeiling: 3
    },
    'c': {
        group: 'Day-Of-Week',
        match: 'Day-Of-Week',
        numericCeiling: 2
    },
    'h': {
        group: 'Hour',
        match: 'Hour12',
        numericCeiling: 100
    },
    'H': {
        group: 'Hour',
        match: 'Hour24',
        numericCeiling: 100
    },
    'k': {
        group: 'Hour',
        match: 'Hour24',
        numericCeiling: 100
    },
    'K': {
        group: 'Hour',
        match: 'Hour12',
        numericCeiling: 100
    },
    'm': {
        group: 'Minute',
        match: 'Minute',
        numericCeiling: 100
    },
    's': {
        group: 'Second',
        match: 'Second',
        numericCeiling: 100
    },
    'z': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'Z': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'O': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'v': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'V': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'X': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'x': {
        group: 'Timezone',
        match: 'Timezone',
        numericCeiling: 1
    },
    'S': {
        group: 'Other',
        numericCeiling: 100
    },
    'u': {
        group: 'Other',
        numericCeiling: 100
    },
    'U': {
        group: 'Other',
        numericCeiling: 1
    },
    'r': {
        group: 'Other',
        numericCeiling: 100
    },
    'F': {
        group: 'Other',
        numericCeiling: 100
    },
    'g': {
        group: 'Other',
        numericCeiling: 100
    },
    'a': {
        group: 'DayPeriod',
        numericCeiling: 1
    },
    'b': {
        group: 'Other',
        numericCeiling: 1
    },
    'B': {
        group: 'Other',
        numericCeiling: 1
    },
    'A': {
        group: 'Other',
        numericCeiling: 100
    }
};
var M_DEFAULT_DATA = {
    'orientation': 'left-to-right',
    'languages': {},
    'scripts': {},
    'territories': {},
    'ca-gregorian': {
        'dateFormats': {
            'full': 'EEEE, MMMM d, y',
            'long': 'MMMM d, y',
            'medium': 'MMM d, y',
            'short': 'M/d/yy'
        },
        'timeFormats': {
            'full': 'h:mm:ss a zzzz',
            'long': 'h:mm:ss a z',
            'medium': 'h:mm:ss a',
            'short': 'h:mm a'
        },
        'dateTimeFormats': {
            'full': '{1} \'at\' {0}',
            'long': '{1} \'at\' {0}',
            'medium': '{1}, {0}',
            'short': '{1}, {0}',
            'availableFormats': {
                'd': 'd',
                'E': 'ccc',
                'Ed': 'd E',
                'Ehm': 'E h:mm a',
                'EHm': 'E HH:mm',
                'Ehms': 'E h:mm:ss a',
                'EHms': 'E HH:mm:ss',
                'Gy': 'y G',
                'GyMMM': 'MMM y G',
                'GyMMMd': 'MMM d, y G',
                'GyMMMEd': 'E, MMM d, y G',
                'h': 'h a',
                'H': 'HH',
                'hm': 'h:mm a',
                'Hm': 'HH:mm',
                'hms': 'h:mm:ss a',
                'Hms': 'HH:mm:ss',
                'hmsv': 'h:mm:ss a v',
                'Hmsv': 'HH:mm:ss v',
                'hmv': 'h:mm a v',
                'Hmv': 'HH:mm v',
                'M': 'L',
                'Md': 'M/d',
                'MEd': 'E, M/d',
                'MMM': 'LLL',
                'MMMd': 'MMM d',
                'MMMEd': 'E, MMM d',
                'MMMMd': 'MMMM d',
                'ms': 'mm:ss',
                'y': 'y',
                'yM': 'M/y',
                'yMd': 'M/d/y',
                'yMEd': 'E, M/d/y',
                'yMMM': 'MMM y',
                'yMMMd': 'MMM d, y',
                'yMMMEd': 'E, MMM d, y',
                'yMMMM': 'MMMM y',
                'yQQQ': 'QQQ y',
                'yQQQQ': 'QQQQ y'
            },
            'appendItems': {
                'Day': '{0} ({2}: {1})',
                'Day-Of-Week': '{0} {1}',
                'Era': '{0} {1}',
                'Hour': '{0} ({2}: {1})',
                'Minute': '{0} ({2}: {1})',
                'Month': '{0} ({2}: {1})',
                'Quarter': '{0} ({2}: {1})',
                'Second': '{0} ({2}: {1})',
                'Timezone': '{0} {1}',
                'Week': '{0} ({2}: {1})',
                'Year': '{0} {1}'
            },
            'intervalFormats': {
                'intervalFormatFallback': '{0} \u2013 {1}',
                'd': { 'd': 'd \u2013 d' },
                'h': {
                    'a': 'h a \u2013 h a',
                    'h': 'h \u2013 h a'
                },
                'H': { 'H': 'HH \u2013 HH' },
                'hm': {
                    'a': 'h:mm a \u2013 h:mm a',
                    'h': 'h:mm \u2013 h:mm a',
                    'm': 'h:mm \u2013 h:mm a'
                },
                'Hm': {
                    'H': 'HH:mm \u2013 HH:mm',
                    'm': 'HH:mm \u2013 HH:mm'
                },
                'hmv': {
                    'a': 'h:mm a \u2013 h:mm a v',
                    'h': 'h:mm \u2013 h:mm a v',
                    'm': 'h:mm \u2013 h:mm a v'
                },
                'Hmv': {
                    'H': 'HH:mm \u2013 HH:mm v',
                    'm': 'HH:mm \u2013 HH:mm v'
                },
                'hv': {
                    'a': 'h a \u2013 h a v',
                    'h': 'h \u2013 h a v'
                },
                'Hv': { 'H': 'HH \u2013 HH v' },
                'M': { 'M': 'M \u2013 M' },
                'Md': {
                    'd': 'M/d \u2013 M/d',
                    'M': 'M/d \u2013 M/d'
                },
                'MEd': {
                    'd': 'E, M/d \u2013 E, M/d',
                    'M': 'E, M/d \u2013 E, M/d'
                },
                'MMM': { 'M': 'MMM \u2013 MMM' },
                'MMMd': {
                    'd': 'MMM d \u2013 d',
                    'M': 'MMM d \u2013 MMM d'
                },
                'MMMEd': {
                    'd': 'E, MMM d \u2013 E, MMM d',
                    'M': 'E, MMM d \u2013 E, MMM d'
                },
                'y': { 'y': 'y \u2013 y' },
                'yM': {
                    'M': 'M/y \u2013 M/y',
                    'y': 'M/y \u2013 M/y'
                },
                'yMd': {
                    'd': 'M/d/y \u2013 M/d/y',
                    'M': 'M/d/y \u2013 M/d/y',
                    'y': 'M/d/y \u2013 M/d/y'
                },
                'yMEd': {
                    'd': 'E, M/d/y \u2013 E, M/d/y',
                    'M': 'E, M/d/y \u2013 E, M/d/y',
                    'y': 'E, M/d/y \u2013 E, M/d/y'
                },
                'yMMM': {
                    'M': 'MMM \u2013 MMM y',
                    'y': 'MMM y \u2013 MMM y'
                },
                'yMMMd': {
                    'd': 'MMM d \u2013 d, y',
                    'M': 'MMM d \u2013 MMM d, y',
                    'y': 'MMM d, y \u2013 MMM d, y'
                },
                'yMMMEd': {
                    'd': 'E, MMM d \u2013 E, MMM d, y',
                    'M': 'E, MMM d \u2013 E, MMM d, y',
                    'y': 'E, MMM d, y \u2013 E, MMM d, y'
                },
                'yMMMM': {
                    'M': 'MMMM \u2013 MMMM y',
                    'y': 'MMMM y \u2013 MMMM y'
                }
            }
        },
        'months': {
            'format': {
                'abbreviated': [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ],
                'narrow': [
                    'J',
                    'F',
                    'M',
                    'A',
                    'M',
                    'J',
                    'J',
                    'A',
                    'S',
                    'O',
                    'N',
                    'D'
                ],
                'wide': [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                ]
            },
            'stand-alone': {
                'abbreviated': [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ],
                'narrow': [
                    'J',
                    'F',
                    'M',
                    'A',
                    'M',
                    'J',
                    'J',
                    'A',
                    'S',
                    'O',
                    'N',
                    'D'
                ],
                'wide': [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                ]
            }
        },
        'days': {
            'format': {
                'abbreviated': [
                    'Sun',
                    'Mon',
                    'Tue',
                    'Wed',
                    'Thu',
                    'Fri',
                    'Sat'
                ],
                'narrow': [
                    'S',
                    'M',
                    'T',
                    'W',
                    'T',
                    'F',
                    'S'
                ],
                'short': [
                    'Su',
                    'Mo',
                    'Tu',
                    'We',
                    'Th',
                    'Fr',
                    'Sa'
                ],
                'wide': [
                    'Sunday',
                    'Monday',
                    'Tuesday',
                    'Wednesday',
                    'Thursday',
                    'Friday',
                    'Saturday'
                ]
            },
            'stand-alone': {
                'abbreviated': [
                    'Sun',
                    'Mon',
                    'Tue',
                    'Wed',
                    'Thu',
                    'Fri',
                    'Sat'
                ],
                'narrow': [
                    'S',
                    'M',
                    'T',
                    'W',
                    'T',
                    'F',
                    'S'
                ],
                'short': [
                    'Su',
                    'Mo',
                    'Tu',
                    'We',
                    'Th',
                    'Fr',
                    'Sa'
                ],
                'wide': [
                    'Sunday',
                    'Monday',
                    'Tuesday',
                    'Wednesday',
                    'Thursday',
                    'Friday',
                    'Saturday'
                ]
            }
        },
        'quarters': {
            'format': {
                'abbreviated': [
                    'Q1',
                    'Q2',
                    'Q3',
                    'Q4'
                ],
                'narrow': [
                    '1',
                    '2',
                    '3',
                    '4'
                ],
                'wide': [
                    '1st quarter',
                    '2nd quarter',
                    '3rd quarter',
                    '4th quarter'
                ]
            },
            'stand-alone': {
                'abbreviated': [
                    'Q1',
                    'Q2',
                    'Q3',
                    'Q4'
                ],
                'narrow': [
                    '1',
                    '2',
                    '3',
                    '4'
                ],
                'wide': [
                    '1st quarter',
                    '2nd quarter',
                    '3rd quarter',
                    '4th quarter'
                ]
            }
        },
        'dayPeriods': {
            'format': {
                'abbreviated': [
                    'AM',
                    'PM'
                ],
                'narrow': [
                    'a',
                    'p'
                ],
                'wide': [
                    'AM',
                    'PM'
                ]
            },
            'stand-alone': {
                'abbreviated': [
                    'AM',
                    'PM'
                ],
                'narrow': [
                    'AM',
                    'PM'
                ],
                'wide': [
                    'AM',
                    'PM'
                ]
            }
        },
        'era-wide': {
            '0': 'Before Christ',
            '1': 'Anno Domini'
        },
        'era-abbreviated': {
            '0': 'BC',
            '1': 'AD'
        },
        'era-narrow': {
            '0': 'B',
            '1': 'A'
        }
    },
    'eras-gregorian': {
        '0': { '_end': '0-12-31' },
        '1': { '_start': '1-01-01' }
    },
    'dateFields': {
        'era': { 'displayName': 'era' },
        'year-wide': {
            'displayName': 'year',
            'relative-type--1': 'last year',
            'relative-type-0': 'this year',
            'relative-type-1': 'next year',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} year',
                'relativeTimePattern-count-other': 'in {0} years'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} year ago',
                'relativeTimePattern-count-other': '{0} years ago'
            }
        },
        'year-short': {
            'displayName': 'yr.',
            'relative-type--1': 'last yr.',
            'relative-type-0': 'this yr.',
            'relative-type-1': 'next yr.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} yr.',
                'relativeTimePattern-count-other': 'in {0} yr.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} yr. ago',
                'relativeTimePattern-count-other': '{0} yr. ago'
            }
        },
        'year-narrow': {
            'displayName': 'yr.',
            'relative-type--1': 'last yr.',
            'relative-type-0': 'this yr.',
            'relative-type-1': 'next yr.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} yr.',
                'relativeTimePattern-count-other': 'in {0} yr.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} yr. ago',
                'relativeTimePattern-count-other': '{0} yr. ago'
            }
        },
        'quarter-wide': {
            'displayName': 'quarter',
            'relative-type--1': 'last quarter',
            'relative-type-0': 'this quarter',
            'relative-type-1': 'next quarter',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} quarter',
                'relativeTimePattern-count-other': 'in {0} quarters'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} quarter ago',
                'relativeTimePattern-count-other': '{0} quarters ago'
            }
        },
        'quarter-short': {
            'displayName': 'qtr.',
            'relative-type--1': 'last qtr.',
            'relative-type-0': 'this qtr.',
            'relative-type-1': 'next qtr.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} qtr.',
                'relativeTimePattern-count-other': 'in {0} qtrs.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} qtr. ago',
                'relativeTimePattern-count-other': '{0} qtrs. ago'
            }
        },
        'quarter-narrow': {
            'displayName': 'qtr.',
            'relative-type--1': 'last qtr.',
            'relative-type-0': 'this qtr.',
            'relative-type-1': 'next qtr.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} qtr.',
                'relativeTimePattern-count-other': 'in {0} qtrs.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} qtr. ago',
                'relativeTimePattern-count-other': '{0} qtrs. ago'
            }
        },
        'month-wide': {
            'displayName': 'month',
            'relative-type--1': 'last month',
            'relative-type-0': 'this month',
            'relative-type-1': 'next month',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} month',
                'relativeTimePattern-count-other': 'in {0} months'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} month ago',
                'relativeTimePattern-count-other': '{0} months ago'
            }
        },
        'month-short': {
            'displayName': 'mo.',
            'relative-type--1': 'last mo.',
            'relative-type-0': 'this mo.',
            'relative-type-1': 'next mo.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} mo.',
                'relativeTimePattern-count-other': 'in {0} mo.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} mo. ago',
                'relativeTimePattern-count-other': '{0} mo. ago'
            }
        },
        'month-narrow': {
            'displayName': 'mo.',
            'relative-type--1': 'last mo.',
            'relative-type-0': 'this mo.',
            'relative-type-1': 'next mo.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} mo.',
                'relativeTimePattern-count-other': 'in {0} mo.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} mo. ago',
                'relativeTimePattern-count-other': '{0} mo. ago'
            }
        },
        'week-wide': {
            'displayName': 'week',
            'relative-type--1': 'last week',
            'relative-type-0': 'this week',
            'relative-type-1': 'next week',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} week',
                'relativeTimePattern-count-other': 'in {0} weeks'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} week ago',
                'relativeTimePattern-count-other': '{0} weeks ago'
            },
            'relativePeriod': 'the week of {0}'
        },
        'week-short': {
            'displayName': 'wk.',
            'relative-type--1': 'last wk.',
            'relative-type-0': 'this wk.',
            'relative-type-1': 'next wk.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} wk.',
                'relativeTimePattern-count-other': 'in {0} wk.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} wk. ago',
                'relativeTimePattern-count-other': '{0} wk. ago'
            },
            'relativePeriod': 'the week of {0}'
        },
        'week-narrow': {
            'displayName': 'wk.',
            'relative-type--1': 'last wk.',
            'relative-type-0': 'this wk.',
            'relative-type-1': 'next wk.',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} wk.',
                'relativeTimePattern-count-other': 'in {0} wk.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} wk. ago',
                'relativeTimePattern-count-other': '{0} wk. ago'
            },
            'relativePeriod': 'the week of {0}'
        },
        'day-wide': {
            'displayName': 'day',
            'relative-type--1': 'yesterday',
            'relative-type-0': 'today',
            'relative-type-1': 'tomorrow',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} day',
                'relativeTimePattern-count-other': 'in {0} days'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} day ago',
                'relativeTimePattern-count-other': '{0} days ago'
            }
        },
        'day-short': {
            'displayName': 'day',
            'relative-type--1': 'yesterday',
            'relative-type-0': 'today',
            'relative-type-1': 'tomorrow',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} day',
                'relativeTimePattern-count-other': 'in {0} days'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} day ago',
                'relativeTimePattern-count-other': '{0} days ago'
            }
        },
        'day-narrow': {
            'displayName': 'day',
            'relative-type--1': 'yesterday',
            'relative-type-0': 'today',
            'relative-type-1': 'tomorrow',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} day',
                'relativeTimePattern-count-other': 'in {0} days'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} day ago',
                'relativeTimePattern-count-other': '{0} days ago'
            }
        },
        'weekday': { 'displayName': 'day of the week' },
        'hour-wide': {
            'displayName': 'hour',
            'relative-type-0': 'this hour',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} hour',
                'relativeTimePattern-count-other': 'in {0} hours'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} hour ago',
                'relativeTimePattern-count-other': '{0} hours ago'
            }
        },
        'hour-short': {
            'displayName': 'hr.',
            'relative-type-0': 'this hour',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} hr.',
                'relativeTimePattern-count-other': 'in {0} hr.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} hr. ago',
                'relativeTimePattern-count-other': '{0} hr. ago'
            }
        },
        'hour-narrow': {
            'displayName': 'hr.',
            'relative-type-0': 'this hour',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} hr.',
                'relativeTimePattern-count-other': 'in {0} hr.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} hr. ago',
                'relativeTimePattern-count-other': '{0} hr. ago'
            }
        },
        'minute-wide': {
            'displayName': 'minute',
            'relative-type-0': 'this minute',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} minute',
                'relativeTimePattern-count-other': 'in {0} minutes'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} minute ago',
                'relativeTimePattern-count-other': '{0} minutes ago'
            }
        },
        'minute-short': {
            'displayName': 'min.',
            'relative-type-0': 'this minute',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} min.',
                'relativeTimePattern-count-other': 'in {0} min.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} min. ago',
                'relativeTimePattern-count-other': '{0} min. ago'
            }
        },
        'minute-narrow': {
            'displayName': 'min.',
            'relative-type-0': 'this minute',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} min.',
                'relativeTimePattern-count-other': 'in {0} min.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} min. ago',
                'relativeTimePattern-count-other': '{0} min. ago'
            }
        },
        'second-wide': {
            'displayName': 'second',
            'relative-type-0': 'now',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} second',
                'relativeTimePattern-count-other': 'in {0} seconds'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} second ago',
                'relativeTimePattern-count-other': '{0} seconds ago'
            }
        },
        'second-short': {
            'displayName': 'sec.',
            'relative-type-0': 'now',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} sec.',
                'relativeTimePattern-count-other': 'in {0} sec.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} sec. ago',
                'relativeTimePattern-count-other': '{0} sec. ago'
            }
        },
        'second-narrow': {
            'displayName': 'sec.',
            'relative-type-0': 'now',
            'relativeTime-type-future': {
                'relativeTimePattern-count-one': 'in {0} sec.',
                'relativeTimePattern-count-other': 'in {0} sec.'
            },
            'relativeTime-type-past': {
                'relativeTimePattern-count-one': '{0} sec. ago',
                'relativeTimePattern-count-other': '{0} sec. ago'
            }
        },
        'zone': { 'displayName': 'time zone' }
    },
    'decimalFormat': { 'standard': '#,##0.###' },
    'currencyFormat': {
        'standard': '\xA4#,##0.00',
        'currencySpacing': {
            'beforeCurrency': {
                'currencyMatch': '[:^S:]',
                'surroundingMatch': '[:digit:]',
                'insertBetween': '\xA0'
            },
            'afterCurrency': {
                'currencyMatch': '[:^S:]',
                'surroundingMatch': '[:digit:]',
                'insertBetween': '\xA0'
            }
        }
    },
    'percentFormat': { 'standard': '#,##0%' },
    'miscPattern': {
        'approximately': '~{0}',
        'atLeast': '{0}+',
        'atMost': '\u2264{0}',
        'range': '{0}\u2013{1}'
    },
    'symbols-latn-decimal': '.',
    'symbols-latn-group': ',',
    'symbols-latn-plusSign': '+',
    'symbols-latn-minusSign': '-',
    'symbols-latn-percentSign': '%',
    'weekData-minDays': 4,
    'weekData-firstDay': 1,
    'weekData-weekendStart': 6,
    'weekData-weekendEnd': 0,
    'timeData': {
        _allowed: 'H h',
        _preferred: 'H'
    },
    'lenient-scope-number': {
        'minusSign': '-\u2010\u2012\u2013\u207B\u208B\u2212\u2796\uFE63',
        'commaSign': ',\u060C\u066B\u3001\uFE10\uFE11\uFE50\uFE51\uFF0C',
        'plusSign': '+\u207A\u208A\u2795\uFB29\uFE62'
    },
    'plurals': {},
    'units': {
        'short': {
            'per': { 'compoundUnitPattern': '{0}/{1}' },
            'acceleration-g-force': {
                'displayName': 'g-force',
                'unitPattern-count-one': '{0} G',
                'unitPattern-count-other': '{0} G'
            },
            'acceleration-meter-per-second-squared': {
                'displayName': 'meters/sec\xB2',
                'unitPattern-count-one': '{0} m/s\xB2',
                'unitPattern-count-other': '{0} m/s\xB2'
            },
            'angle-revolution': {
                'displayName': 'rev',
                'unitPattern-count-one': '{0} rev',
                'unitPattern-count-other': '{0} rev'
            },
            'angle-radian': {
                'displayName': 'radians',
                'unitPattern-count-one': '{0} rad',
                'unitPattern-count-other': '{0} rad'
            },
            'angle-degree': {
                'displayName': 'degrees',
                'unitPattern-count-one': '{0} deg',
                'unitPattern-count-other': '{0} deg'
            },
            'angle-arc-minute': {
                'displayName': 'arcmins',
                'unitPattern-count-one': '{0} arcmin',
                'unitPattern-count-other': '{0} arcmins'
            },
            'angle-arc-second': {
                'displayName': 'arcsecs',
                'unitPattern-count-one': '{0} arcsec',
                'unitPattern-count-other': '{0} arcsecs'
            },
            'area-square-kilometer': {
                'displayName': 'km\xB2',
                'unitPattern-count-one': '{0} km\xB2',
                'unitPattern-count-other': '{0} km\xB2',
                'perUnitPattern': '{0}/km\xB2'
            },
            'area-hectare': {
                'displayName': 'hectares',
                'unitPattern-count-one': '{0} ha',
                'unitPattern-count-other': '{0} ha'
            },
            'area-square-meter': {
                'displayName': 'meters\xB2',
                'unitPattern-count-one': '{0} m\xB2',
                'unitPattern-count-other': '{0} m\xB2',
                'perUnitPattern': '{0}/m\xB2'
            },
            'area-square-centimeter': {
                'displayName': 'cm\xB2',
                'unitPattern-count-one': '{0} cm\xB2',
                'unitPattern-count-other': '{0} cm\xB2',
                'perUnitPattern': '{0}/cm\xB2'
            },
            'area-square-mile': {
                'displayName': 'sq miles',
                'unitPattern-count-one': '{0} sq mi',
                'unitPattern-count-other': '{0} sq mi',
                'perUnitPattern': '{0}/mi\xB2'
            },
            'area-acre': {
                'displayName': 'acres',
                'unitPattern-count-one': '{0} ac',
                'unitPattern-count-other': '{0} ac'
            },
            'area-square-yard': {
                'displayName': 'yards\xB2',
                'unitPattern-count-one': '{0} yd\xB2',
                'unitPattern-count-other': '{0} yd\xB2'
            },
            'area-square-foot': {
                'displayName': 'sq feet',
                'unitPattern-count-one': '{0} sq ft',
                'unitPattern-count-other': '{0} sq ft'
            },
            'area-square-inch': {
                'displayName': 'inches\xB2',
                'unitPattern-count-one': '{0} in\xB2',
                'unitPattern-count-other': '{0} in\xB2',
                'perUnitPattern': '{0}/in\xB2'
            },
            'concentr-karat': {
                'displayName': 'karats',
                'unitPattern-count-one': '{0} kt',
                'unitPattern-count-other': '{0} kt'
            },
            'concentr-milligram-per-deciliter': {
                'displayName': 'mg/dL',
                'unitPattern-count-one': '{0} mg/dL',
                'unitPattern-count-other': '{0} mg/dL'
            },
            'concentr-millimole-per-liter': {
                'displayName': 'millimol/liter',
                'unitPattern-count-one': '{0} mmol/L',
                'unitPattern-count-other': '{0} mmol/L'
            },
            'concentr-part-per-million': {
                'displayName': 'parts/million',
                'unitPattern-count-one': '{0} ppm',
                'unitPattern-count-other': '{0} ppm'
            },
            'consumption-liter-per-kilometer': {
                'displayName': 'liters/km',
                'unitPattern-count-one': '{0} L/km',
                'unitPattern-count-other': '{0} L/km'
            },
            'consumption-liter-per-100kilometers': {
                'displayName': 'L/100 km',
                'unitPattern-count-one': '{0} L/100 km',
                'unitPattern-count-other': '{0} L/100 km'
            },
            'consumption-mile-per-gallon': {
                'displayName': 'miles/gal',
                'unitPattern-count-one': '{0} mpg',
                'unitPattern-count-other': '{0} mpg'
            },
            'consumption-mile-per-gallon-imperial': {
                'displayName': 'miles/gal Imp.',
                'unitPattern-count-one': '{0} mpg Imp.',
                'unitPattern-count-other': '{0} mpg Imp.'
            },
            'digital-terabyte': {
                'displayName': 'TByte',
                'unitPattern-count-one': '{0} TB',
                'unitPattern-count-other': '{0} TB'
            },
            'digital-terabit': {
                'displayName': 'Tbit',
                'unitPattern-count-one': '{0} Tb',
                'unitPattern-count-other': '{0} Tb'
            },
            'digital-gigabyte': {
                'displayName': 'GByte',
                'unitPattern-count-one': '{0} GB',
                'unitPattern-count-other': '{0} GB'
            },
            'digital-gigabit': {
                'displayName': 'Gbit',
                'unitPattern-count-one': '{0} Gb',
                'unitPattern-count-other': '{0} Gb'
            },
            'digital-megabyte': {
                'displayName': 'MByte',
                'unitPattern-count-one': '{0} MB',
                'unitPattern-count-other': '{0} MB'
            },
            'digital-megabit': {
                'displayName': 'Mbit',
                'unitPattern-count-one': '{0} Mb',
                'unitPattern-count-other': '{0} Mb'
            },
            'digital-kilobyte': {
                'displayName': 'kByte',
                'unitPattern-count-one': '{0} kB',
                'unitPattern-count-other': '{0} kB'
            },
            'digital-kilobit': {
                'displayName': 'kbit',
                'unitPattern-count-one': '{0} kb',
                'unitPattern-count-other': '{0} kb'
            },
            'digital-byte': {
                'displayName': 'byte',
                'unitPattern-count-one': '{0} byte',
                'unitPattern-count-other': '{0} byte'
            },
            'digital-bit': {
                'displayName': 'bit',
                'unitPattern-count-one': '{0} bit',
                'unitPattern-count-other': '{0} bit'
            },
            'duration-century': {
                'displayName': 'c',
                'unitPattern-count-one': '{0} c',
                'unitPattern-count-other': '{0} c'
            },
            'duration-year': {
                'displayName': 'years',
                'unitPattern-count-one': '{0} yr',
                'unitPattern-count-other': '{0} yrs',
                'perUnitPattern': '{0}/y'
            },
            'duration-month': {
                'displayName': 'months',
                'unitPattern-count-one': '{0} mth',
                'unitPattern-count-other': '{0} mths',
                'perUnitPattern': '{0}/m'
            },
            'duration-week': {
                'displayName': 'weeks',
                'unitPattern-count-one': '{0} wk',
                'unitPattern-count-other': '{0} wks',
                'perUnitPattern': '{0}/w'
            },
            'duration-day': {
                'displayName': 'days',
                'unitPattern-count-one': '{0} day',
                'unitPattern-count-other': '{0} days',
                'perUnitPattern': '{0}/d'
            },
            'duration-hour': {
                'displayName': 'hours',
                'unitPattern-count-one': '{0} hr',
                'unitPattern-count-other': '{0} hr',
                'perUnitPattern': '{0}/h'
            },
            'duration-minute': {
                'displayName': 'mins',
                'unitPattern-count-one': '{0} min',
                'unitPattern-count-other': '{0} min',
                'perUnitPattern': '{0}/min'
            },
            'duration-second': {
                'displayName': 'secs',
                'unitPattern-count-one': '{0} sec',
                'unitPattern-count-other': '{0} sec',
                'perUnitPattern': '{0}/s'
            },
            'duration-millisecond': {
                'displayName': 'millisecs',
                'unitPattern-count-one': '{0} ms',
                'unitPattern-count-other': '{0} ms'
            },
            'duration-microsecond': {
                'displayName': 'μsecs',
                'unitPattern-count-one': '{0} μs',
                'unitPattern-count-other': '{0} μs'
            },
            'duration-nanosecond': {
                'displayName': 'nanosecs',
                'unitPattern-count-one': '{0} ns',
                'unitPattern-count-other': '{0} ns'
            },
            'electric-ampere': {
                'displayName': 'amps',
                'unitPattern-count-one': '{0} A',
                'unitPattern-count-other': '{0} A'
            },
            'electric-milliampere': {
                'displayName': 'milliamps',
                'unitPattern-count-one': '{0} mA',
                'unitPattern-count-other': '{0} mA'
            },
            'electric-ohm': {
                'displayName': 'ohms',
                'unitPattern-count-one': '{0} Ω',
                'unitPattern-count-other': '{0} Ω'
            },
            'electric-volt': {
                'displayName': 'volts',
                'unitPattern-count-one': '{0} V',
                'unitPattern-count-other': '{0} V'
            },
            'energy-kilocalorie': {
                'displayName': 'kcal',
                'unitPattern-count-one': '{0} kcal',
                'unitPattern-count-other': '{0} kcal'
            },
            'energy-calorie': {
                'displayName': 'cal',
                'unitPattern-count-one': '{0} cal',
                'unitPattern-count-other': '{0} cal'
            },
            'energy-foodcalorie': {
                'displayName': 'Cal',
                'unitPattern-count-one': '{0} Cal',
                'unitPattern-count-other': '{0} Cal'
            },
            'energy-kilojoule': {
                'displayName': 'kilojoule',
                'unitPattern-count-one': '{0} kJ',
                'unitPattern-count-other': '{0} kJ'
            },
            'energy-joule': {
                'displayName': 'joules',
                'unitPattern-count-one': '{0} J',
                'unitPattern-count-other': '{0} J'
            },
            'energy-kilowatt-hour': {
                'displayName': 'kW-hour',
                'unitPattern-count-one': '{0} kWh',
                'unitPattern-count-other': '{0} kWh'
            },
            'frequency-gigahertz': {
                'displayName': 'GHz',
                'unitPattern-count-one': '{0} GHz',
                'unitPattern-count-other': '{0} GHz'
            },
            'frequency-megahertz': {
                'displayName': 'MHz',
                'unitPattern-count-one': '{0} MHz',
                'unitPattern-count-other': '{0} MHz'
            },
            'frequency-kilohertz': {
                'displayName': 'kHz',
                'unitPattern-count-one': '{0} kHz',
                'unitPattern-count-other': '{0} kHz'
            },
            'frequency-hertz': {
                'displayName': 'Hz',
                'unitPattern-count-one': '{0} Hz',
                'unitPattern-count-other': '{0} Hz'
            },
            'length-kilometer': {
                'displayName': 'km',
                'unitPattern-count-one': '{0} km',
                'unitPattern-count-other': '{0} km',
                'perUnitPattern': '{0}/km'
            },
            'length-meter': {
                'displayName': 'm',
                'unitPattern-count-one': '{0} m',
                'unitPattern-count-other': '{0} m',
                'perUnitPattern': '{0}/m'
            },
            'length-decimeter': {
                'displayName': 'dm',
                'unitPattern-count-one': '{0} dm',
                'unitPattern-count-other': '{0} dm'
            },
            'length-centimeter': {
                'displayName': 'cm',
                'unitPattern-count-one': '{0} cm',
                'unitPattern-count-other': '{0} cm',
                'perUnitPattern': '{0}/cm'
            },
            'length-millimeter': {
                'displayName': 'mm',
                'unitPattern-count-one': '{0} mm',
                'unitPattern-count-other': '{0} mm'
            },
            'length-micrometer': {
                'displayName': 'µmeters',
                'unitPattern-count-one': '{0} µm',
                'unitPattern-count-other': '{0} µm'
            },
            'length-nanometer': {
                'displayName': 'nm',
                'unitPattern-count-one': '{0} nm',
                'unitPattern-count-other': '{0} nm'
            },
            'length-picometer': {
                'displayName': 'pm',
                'unitPattern-count-one': '{0} pm',
                'unitPattern-count-other': '{0} pm'
            },
            'length-mile': {
                'displayName': 'miles',
                'unitPattern-count-one': '{0} mi',
                'unitPattern-count-other': '{0} mi'
            },
            'length-yard': {
                'displayName': 'yards',
                'unitPattern-count-one': '{0} yd',
                'unitPattern-count-other': '{0} yd'
            },
            'length-foot': {
                'displayName': 'feet',
                'unitPattern-count-one': '{0} ft',
                'unitPattern-count-other': '{0} ft',
                'perUnitPattern': '{0}/ft'
            },
            'length-inch': {
                'displayName': 'inches',
                'unitPattern-count-one': '{0} in',
                'unitPattern-count-other': '{0} in',
                'perUnitPattern': '{0}/in'
            },
            'length-parsec': {
                'displayName': 'parsecs',
                'unitPattern-count-one': '{0} pc',
                'unitPattern-count-other': '{0} pc'
            },
            'length-light-year': {
                'displayName': 'light yrs',
                'unitPattern-count-one': '{0} ly',
                'unitPattern-count-other': '{0} ly'
            },
            'length-astronomical-unit': {
                'displayName': 'au',
                'unitPattern-count-one': '{0} au',
                'unitPattern-count-other': '{0} au'
            },
            'length-furlong': {
                'displayName': 'furlongs',
                'unitPattern-count-one': '{0} fur',
                'unitPattern-count-other': '{0} fur'
            },
            'length-fathom': {
                'displayName': 'fathoms',
                'unitPattern-count-one': '{0} ftm',
                'unitPattern-count-other': '{0} ftm'
            },
            'length-nautical-mile': {
                'displayName': 'nmi',
                'unitPattern-count-one': '{0} nmi',
                'unitPattern-count-other': '{0} nmi'
            },
            'length-mile-scandinavian': {
                'displayName': 'smi',
                'unitPattern-count-one': '{0} smi',
                'unitPattern-count-other': '{0} smi'
            },
            'length-point': {
                'displayName': 'points',
                'unitPattern-count-one': '{0} pt',
                'unitPattern-count-other': '{0} pt'
            },
            'light-lux': {
                'displayName': 'lux',
                'unitPattern-count-one': '{0} lx',
                'unitPattern-count-other': '{0} lx'
            },
            'mass-metric-ton': {
                'displayName': 't',
                'unitPattern-count-one': '{0} t',
                'unitPattern-count-other': '{0} t'
            },
            'mass-kilogram': {
                'displayName': 'kg',
                'unitPattern-count-one': '{0} kg',
                'unitPattern-count-other': '{0} kg',
                'perUnitPattern': '{0}/kg'
            },
            'mass-gram': {
                'displayName': 'grams',
                'unitPattern-count-one': '{0} g',
                'unitPattern-count-other': '{0} g',
                'perUnitPattern': '{0}/g'
            },
            'mass-milligram': {
                'displayName': 'mg',
                'unitPattern-count-one': '{0} mg',
                'unitPattern-count-other': '{0} mg'
            },
            'mass-microgram': {
                'displayName': 'µg',
                'unitPattern-count-one': '{0} µg',
                'unitPattern-count-other': '{0} µg'
            },
            'mass-ton': {
                'displayName': 'tons',
                'unitPattern-count-one': '{0} tn',
                'unitPattern-count-other': '{0} tn'
            },
            'mass-stone': {
                'displayName': 'stones',
                'unitPattern-count-one': '{0} st',
                'unitPattern-count-other': '{0} st'
            },
            'mass-pound': {
                'displayName': 'pounds',
                'unitPattern-count-one': '{0} lb',
                'unitPattern-count-other': '{0} lb',
                'perUnitPattern': '{0}/lb'
            },
            'mass-ounce': {
                'displayName': 'oz',
                'unitPattern-count-one': '{0} oz',
                'unitPattern-count-other': '{0} oz',
                'perUnitPattern': '{0}/oz'
            },
            'mass-ounce-troy': {
                'displayName': 'oz troy',
                'unitPattern-count-one': '{0} oz t',
                'unitPattern-count-other': '{0} oz t'
            },
            'mass-carat': {
                'displayName': 'carats',
                'unitPattern-count-one': '{0} CD',
                'unitPattern-count-other': '{0} CD'
            },
            'power-gigawatt': {
                'displayName': 'GW',
                'unitPattern-count-one': '{0} GW',
                'unitPattern-count-other': '{0} GW'
            },
            'power-megawatt': {
                'displayName': 'MW',
                'unitPattern-count-one': '{0} MW',
                'unitPattern-count-other': '{0} MW'
            },
            'power-kilowatt': {
                'displayName': 'kW',
                'unitPattern-count-one': '{0} kW',
                'unitPattern-count-other': '{0} kW'
            },
            'power-watt': {
                'displayName': 'watts',
                'unitPattern-count-one': '{0} W',
                'unitPattern-count-other': '{0} W'
            },
            'power-milliwatt': {
                'displayName': 'mW',
                'unitPattern-count-one': '{0} mW',
                'unitPattern-count-other': '{0} mW'
            },
            'power-horsepower': {
                'displayName': 'hp',
                'unitPattern-count-one': '{0} hp',
                'unitPattern-count-other': '{0} hp'
            },
            'pressure-hectopascal': {
                'displayName': 'hPa',
                'unitPattern-count-one': '{0} hPa',
                'unitPattern-count-other': '{0} hPa'
            },
            'pressure-millimeter-of-mercury': {
                'displayName': 'mmHg',
                'unitPattern-count-one': '{0} mmHg',
                'unitPattern-count-other': '{0} mmHg'
            },
            'pressure-pound-per-square-inch': {
                'displayName': 'psi',
                'unitPattern-count-one': '{0} psi',
                'unitPattern-count-other': '{0} psi'
            },
            'pressure-inch-hg': {
                'displayName': 'inHg',
                'unitPattern-count-one': '{0} inHg',
                'unitPattern-count-other': '{0} inHg'
            },
            'pressure-millibar': {
                'displayName': 'mbar',
                'unitPattern-count-one': '{0} mbar',
                'unitPattern-count-other': '{0} mbar'
            },
            'speed-kilometer-per-hour': {
                'displayName': 'km/hour',
                'unitPattern-count-one': '{0} kph',
                'unitPattern-count-other': '{0} kph'
            },
            'speed-meter-per-second': {
                'displayName': 'meters/sec',
                'unitPattern-count-one': '{0} m/s',
                'unitPattern-count-other': '{0} m/s'
            },
            'speed-mile-per-hour': {
                'displayName': 'miles/hour',
                'unitPattern-count-one': '{0} mph',
                'unitPattern-count-other': '{0} mph'
            },
            'speed-knot': {
                'displayName': 'kn',
                'unitPattern-count-one': '{0} kn',
                'unitPattern-count-other': '{0} kn'
            },
            'temperature-generic': {
                'displayName': '\xB0',
                'unitPattern-count-other': '{0}\xB0'
            },
            'temperature-celsius': {
                'displayName': 'deg. C',
                'unitPattern-count-one': '{0}\xB0C',
                'unitPattern-count-other': '{0}\xB0C'
            },
            'temperature-fahrenheit': {
                'displayName': 'deg. F',
                'unitPattern-count-one': '{0}\xB0F',
                'unitPattern-count-other': '{0}\xB0F'
            },
            'temperature-kelvin': {
                'displayName': 'K',
                'unitPattern-count-one': '{0} K',
                'unitPattern-count-other': '{0} K'
            },
            'volume-cubic-kilometer': {
                'displayName': 'km\xB3',
                'unitPattern-count-one': '{0} km\xB3',
                'unitPattern-count-other': '{0} km\xB3'
            },
            'volume-cubic-meter': {
                'displayName': 'm\xB3',
                'unitPattern-count-one': '{0} m\xB3',
                'unitPattern-count-other': '{0} m\xB3',
                'perUnitPattern': '{0}/m\xB3'
            },
            'volume-cubic-centimeter': {
                'displayName': 'cm\xB3',
                'unitPattern-count-one': '{0} cm\xB3',
                'unitPattern-count-other': '{0} cm\xB3',
                'perUnitPattern': '{0}/cm\xB3'
            },
            'volume-cubic-mile': {
                'displayName': 'mi\xB3',
                'unitPattern-count-one': '{0} mi\xB3',
                'unitPattern-count-other': '{0} mi\xB3'
            },
            'volume-cubic-yard': {
                'displayName': 'yards\xB3',
                'unitPattern-count-one': '{0} yd\xB3',
                'unitPattern-count-other': '{0} yd\xB3'
            },
            'volume-cubic-foot': {
                'displayName': 'feet\xB3',
                'unitPattern-count-one': '{0} ft\xB3',
                'unitPattern-count-other': '{0} ft\xB3'
            },
            'volume-cubic-inch': {
                'displayName': 'inches\xB3',
                'unitPattern-count-one': '{0} in\xB3',
                'unitPattern-count-other': '{0} in\xB3'
            },
            'volume-megaliter': {
                'displayName': 'ML',
                'unitPattern-count-one': '{0} ML',
                'unitPattern-count-other': '{0} ML'
            },
            'volume-hectoliter': {
                'displayName': 'hL',
                'unitPattern-count-one': '{0} hL',
                'unitPattern-count-other': '{0} hL'
            },
            'volume-liter': {
                'displayName': 'liters',
                'unitPattern-count-one': '{0} L',
                'unitPattern-count-other': '{0} L',
                'perUnitPattern': '{0}/L'
            },
            'volume-deciliter': {
                'displayName': 'dL',
                'unitPattern-count-one': '{0} dL',
                'unitPattern-count-other': '{0} dL'
            },
            'volume-centiliter': {
                'displayName': 'cL',
                'unitPattern-count-one': '{0} cL',
                'unitPattern-count-other': '{0} cL'
            },
            'volume-milliliter': {
                'displayName': 'mL',
                'unitPattern-count-one': '{0} mL',
                'unitPattern-count-other': '{0} mL'
            },
            'volume-pint-metric': {
                'displayName': 'mpt',
                'unitPattern-count-one': '{0} mpt',
                'unitPattern-count-other': '{0} mpt'
            },
            'volume-cup-metric': {
                'displayName': 'mcup',
                'unitPattern-count-one': '{0} mc',
                'unitPattern-count-other': '{0} mc'
            },
            'volume-acre-foot': {
                'displayName': 'acre ft',
                'unitPattern-count-one': '{0} ac ft',
                'unitPattern-count-other': '{0} ac ft'
            },
            'volume-bushel': {
                'displayName': 'bushels',
                'unitPattern-count-one': '{0} bu',
                'unitPattern-count-other': '{0} bu'
            },
            'volume-gallon': {
                'displayName': 'gal',
                'unitPattern-count-one': '{0} gal',
                'unitPattern-count-other': '{0} gal',
                'perUnitPattern': '{0}/gal US'
            },
            'volume-gallon-imperial': {
                'displayName': 'Imp. gal',
                'unitPattern-count-one': '{0} gal Imp.',
                'unitPattern-count-other': '{0} gal Imp.',
                'perUnitPattern': '{0}/gal Imp.'
            },
            'volume-quart': {
                'displayName': 'qts',
                'unitPattern-count-one': '{0} qt',
                'unitPattern-count-other': '{0} qt'
            },
            'volume-pint': {
                'displayName': 'pints',
                'unitPattern-count-one': '{0} pt',
                'unitPattern-count-other': '{0} pt'
            },
            'volume-cup': {
                'displayName': 'cups',
                'unitPattern-count-one': '{0} c',
                'unitPattern-count-other': '{0} c'
            },
            'volume-fluid-ounce': {
                'displayName': 'fl oz',
                'unitPattern-count-one': '{0} fl oz',
                'unitPattern-count-other': '{0} fl oz'
            },
            'volume-tablespoon': {
                'displayName': 'tbsp',
                'unitPattern-count-one': '{0} tbsp',
                'unitPattern-count-other': '{0} tbsp'
            },
            'volume-teaspoon': {
                'displayName': 'tsp',
                'unitPattern-count-one': '{0} tsp',
                'unitPattern-count-other': '{0} tsp'
            },
            'coordinateUnit': {
                'east': '{0} E',
                'north': '{0} N',
                'south': '{0} S',
                'west': '{0} W'
            }
        }
    }
};
var M_ISO639_OLD_TO_NEW$2 = {
    'iw': 'he',
    'ji': 'yi',
    'in': 'id',
    'sh': 'sr'
};
var M_SUPPORTED_LOCALES = function () {
    var LOCALES = Locale$1._cldrLocales, result = {}, i;
    if (LOCALES) {
        for (i = 0; i < LOCALES.length; i++) {
            result[LOCALES[i]] = true;
        }
    }
    return result;
}();
var mLocaleDatas = {};
function getCLDRCalendarName(sCalendarType) {
    if (!sCalendarType) {
        sCalendarType = Core.getConfiguration().getCalendarType();
    }
    return 'ca-' + sCalendarType.toLowerCase();
}
function getData(oLocale) {
    var sLanguage = oLocale.getLanguage() || '', sScript = oLocale.getScript() || '', sRegion = oLocale.getRegion() || '', mData;
    function merge(obj, fallbackObj) {
        var name, value, fallbackValue;
        if (!fallbackObj) {
            return;
        }
        for (name in fallbackObj) {
            if (fallbackObj.hasOwnProperty(name)) {
                value = obj[name];
                fallbackValue = fallbackObj[name];
                if (value === undefined) {
                    obj[name] = fallbackValue;
                } else if (value === null) {
                    delete obj[name];
                } else if (typeof value === 'object' && typeof fallbackValue === 'object') {
                    merge(value, fallbackValue);
                }
            }
        }
    }
    function getOrLoad(sId) {
        if (!mLocaleDatas[sId] && (!M_SUPPORTED_LOCALES || M_SUPPORTED_LOCALES[sId] === true)) {
            var data = mLocaleDatas[sId] = LoaderExtensions.loadResource('sap/ui/core/cldr/' + sId + '.json', {
                dataType: 'json',
                failOnError: false
            });
            if (data && data.__fallbackLocale) {
                merge(data, getOrLoad(data.__fallbackLocale));
                delete data.__fallbackLocale;
            }
        }
        return mLocaleDatas[sId];
    }
    sLanguage = sLanguage && M_ISO639_OLD_TO_NEW$2[sLanguage] || sLanguage;
    if (sLanguage === 'no') {
        sLanguage = 'nb';
    }
    if (sLanguage === 'zh' && !sRegion) {
        if (sScript === 'Hans') {
            sRegion = 'CN';
        } else if (sScript === 'Hant') {
            sRegion = 'TW';
        }
    }
    var sId = sLanguage + '_' + sRegion;
    if (sLanguage && sRegion) {
        mData = getOrLoad(sId);
    }
    if (!mData && sLanguage) {
        mData = getOrLoad(sLanguage);
    }
    mLocaleDatas[sId] = mData || M_DEFAULT_DATA;
    return mLocaleDatas[sId];
}
var CustomLocaleData = LocaleData.extend('sap.ui.core.CustomLocaleData', {
    constructor: function (oLocale) {
        LocaleData.apply(this, arguments);
        this.mCustomData = Core.getConfiguration().getFormatSettings().getCustomLocaleData();
    },
    _get: function () {
        var aArguments = Array.prototype.slice.call(arguments), sCalendar, sKey;
        if (aArguments[0].indexOf('ca-') == 0) {
            sCalendar = aArguments[0];
            if (sCalendar == getCLDRCalendarName()) {
                aArguments = aArguments.slice(1);
            }
        }
        sKey = aArguments.join('-');
        var vValue = this.mCustomData[sKey];
        if (vValue == null) {
            vValue = this._getDeep(this.mCustomData, arguments);
            if (vValue == null) {
                vValue = this._getDeep(this.mData, arguments);
            }
        }
        return vValue;
    },
    _getMerged: function () {
        var mData = this._getDeep(this.mData, arguments);
        var mCustomData = this._getDeep(this.mCustomData, arguments);
        return fnExtend({}, mData, mCustomData);
    }
});
LocaleData.getInstance = function (oLocale) {
    return oLocale.hasPrivateUseSubtag('sapufmt') ? new CustomLocaleData(oLocale) : new LocaleData(oLocale);
};

var mRegistry = new Map();
var _Calendars = {
  get: function (sCalendarType) {
    if (!mRegistry.has(sCalendarType)) {
      throw new Error("Required calendar type: " + sCalendarType + " not loaded.");
    }
    return mRegistry.get(sCalendarType);
  },
  set: function (sCalendarType, CalendarClass) {
    mRegistry.set(sCalendarType, CalendarClass);
  }
};

var UniversalDate = BaseObject$1.extend('sap.ui.core.date.UniversalDate', {
    constructor: function () {
        var clDate = UniversalDate.getClass();
        return this.createDate(clDate, arguments);
    }
});
UniversalDate.UTC = function () {
    var clDate = UniversalDate.getClass();
    return clDate.UTC.apply(clDate, arguments);
};
UniversalDate.now = function () {
    return Date.now();
};
UniversalDate.prototype.createDate = function (clDate, aArgs) {
    switch (aArgs.length) {
    case 0:
        return new clDate();
    case 1:
        return new clDate(aArgs[0]);
    case 2:
        return new clDate(aArgs[0], aArgs[1]);
    case 3:
        return new clDate(aArgs[0], aArgs[1], aArgs[2]);
    case 4:
        return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3]);
    case 5:
        return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4]);
    case 6:
        return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5]);
    case 7:
        return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5], aArgs[6]);
    }
};
UniversalDate.getInstance = function (oDate, sCalendarType) {
    var clDate, oInstance;
    if (oDate instanceof UniversalDate) {
        oDate = oDate.getJSDate();
    }
    if (!sCalendarType) {
        sCalendarType = Core.getConfiguration().getCalendarType();
    }
    clDate = UniversalDate.getClass(sCalendarType);
    oInstance = Object.create(clDate.prototype);
    oInstance.oDate = oDate;
    oInstance.sCalendarType = sCalendarType;
    return oInstance;
};
UniversalDate.getClass = function (sCalendarType) {
    if (!sCalendarType) {
        sCalendarType = Core.getConfiguration().getCalendarType();
    }
    return _Calendars.get(sCalendarType);
};
[
    'getDate',
    'getMonth',
    'getFullYear',
    'getYear',
    'getDay',
    'getHours',
    'getMinutes',
    'getSeconds',
    'getMilliseconds',
    'getUTCDate',
    'getUTCMonth',
    'getUTCFullYear',
    'getUTCDay',
    'getUTCHours',
    'getUTCMinutes',
    'getUTCSeconds',
    'getUTCMilliseconds',
    'getTime',
    'valueOf',
    'getTimezoneOffset',
    'toString',
    'toDateString',
    'setDate',
    'setFullYear',
    'setYear',
    'setMonth',
    'setHours',
    'setMinutes',
    'setSeconds',
    'setMilliseconds',
    'setUTCDate',
    'setUTCFullYear',
    'setUTCMonth',
    'setUTCHours',
    'setUTCMinutes',
    'setUTCSeconds',
    'setUTCMilliseconds'
].forEach(function (sName) {
    UniversalDate.prototype[sName] = function () {
        return this.oDate[sName].apply(this.oDate, arguments);
    };
});
UniversalDate.prototype.getJSDate = function () {
    return this.oDate;
};
UniversalDate.prototype.getCalendarType = function () {
    return this.sCalendarType;
};
UniversalDate.prototype.getEra = function () {
    return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getFullYear(), this.oDate.getMonth(), this.oDate.getDate());
};
UniversalDate.prototype.setEra = function (iEra) {
};
UniversalDate.prototype.getUTCEra = function () {
    return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.oDate.getUTCMonth(), this.oDate.getUTCDate());
};
UniversalDate.prototype.setUTCEra = function (iEra) {
};
UniversalDate.prototype.getWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.getFullYear(), this.getMonth(), this.getDate());
};
UniversalDate.prototype.setWeek = function (oWeek) {
    var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week);
    this.setFullYear(oDate.year, oDate.month, oDate.day);
};
UniversalDate.prototype.getUTCWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate());
};
UniversalDate.prototype.setUTCWeek = function (oWeek) {
    var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week);
    this.setUTCFullYear(oDate.year, oDate.month, oDate.day);
};
UniversalDate.prototype.getQuarter = function () {
    return Math.floor(this.getMonth() / 3);
};
UniversalDate.prototype.getUTCQuarter = function () {
    return Math.floor(this.getUTCMonth() / 3);
};
UniversalDate.prototype.getDayPeriod = function () {
    if (this.getHours() < 12) {
        return 0;
    } else {
        return 1;
    }
};
UniversalDate.prototype.getUTCDayPeriod = function () {
    if (this.getUTCHours() < 12) {
        return 0;
    } else {
        return 1;
    }
};
UniversalDate.prototype.getTimezoneShort = function () {
    if (this.oDate.getTimezoneShort) {
        return this.oDate.getTimezoneShort();
    }
};
UniversalDate.prototype.getTimezoneLong = function () {
    if (this.oDate.getTimezoneLong) {
        return this.oDate.getTimezoneLong();
    }
};
var iMillisecondsInWeek = 7 * 24 * 60 * 60 * 1000;
UniversalDate.getWeekByDate = function (sCalendarType, iYear, iMonth, iDay) {
    var oLocale = Core.getConfiguration().getFormatSettings().getFormatLocale(), clDate = this.getClass(sCalendarType), oFirstDay = getFirstDayOfFirstWeek(clDate, iYear), oDate = new clDate(clDate.UTC(iYear, iMonth, iDay)), iWeek, iLastYear, iNextYear, oLastFirstDay, oNextFirstDay;
    if (oLocale.getRegion() === 'US') {
        iWeek = calculateWeeks(oFirstDay, oDate);
    } else {
        iLastYear = iYear - 1;
        iNextYear = iYear + 1;
        oLastFirstDay = getFirstDayOfFirstWeek(clDate, iLastYear);
        oNextFirstDay = getFirstDayOfFirstWeek(clDate, iNextYear);
        if (oDate >= oNextFirstDay) {
            iYear = iNextYear;
            iWeek = 0;
        } else if (oDate < oFirstDay) {
            iYear = iLastYear;
            iWeek = calculateWeeks(oLastFirstDay, oDate);
        } else {
            iWeek = calculateWeeks(oFirstDay, oDate);
        }
    }
    return {
        year: iYear,
        week: iWeek
    };
};
UniversalDate.getFirstDateOfWeek = function (sCalendarType, iYear, iWeek) {
    var oLocale = Core.getConfiguration().getFormatSettings().getFormatLocale(), clDate = this.getClass(sCalendarType), oFirstDay = getFirstDayOfFirstWeek(clDate, iYear), oDate = new clDate(oFirstDay.valueOf() + iWeek * iMillisecondsInWeek);
    if (oLocale.getRegion() === 'US' && iWeek === 0 && oFirstDay.getUTCFullYear() < iYear) {
        return {
            year: iYear,
            month: 0,
            day: 1
        };
    }
    return {
        year: oDate.getUTCFullYear(),
        month: oDate.getUTCMonth(),
        day: oDate.getUTCDate()
    };
};
function getFirstDayOfFirstWeek(clDate, iYear) {
    var oLocale = Core.getConfiguration().getFormatSettings().getFormatLocale(), oLocaleData = LocaleData.getInstance(oLocale), iMinDays = oLocaleData.getMinimalDaysInFirstWeek(), iFirstDayOfWeek = oLocaleData.getFirstDayOfWeek(), oFirstDay = new clDate(clDate.UTC(iYear, 0, 1)), iDayCount = 7;
    while (oFirstDay.getUTCDay() !== iFirstDayOfWeek) {
        oFirstDay.setUTCDate(oFirstDay.getUTCDate() - 1);
        iDayCount--;
    }
    if (iDayCount < iMinDays) {
        oFirstDay.setUTCDate(oFirstDay.getUTCDate() + 7);
    }
    return oFirstDay;
}
function calculateWeeks(oFromDate, oToDate) {
    return Math.floor((oToDate.valueOf() - oFromDate.valueOf()) / iMillisecondsInWeek);
}
var mEras = {};
UniversalDate.getEraByDate = function (sCalendarType, iYear, iMonth, iDay) {
    var aEras = getEras(sCalendarType), iTimestamp = new Date(0).setUTCFullYear(iYear, iMonth, iDay), oEra;
    for (var i = aEras.length - 1; i >= 0; i--) {
        oEra = aEras[i];
        if (!oEra) {
            continue;
        }
        if (oEra._start && iTimestamp >= oEra._startInfo.timestamp) {
            return i;
        }
        if (oEra._end && iTimestamp < oEra._endInfo.timestamp) {
            return i;
        }
    }
};
UniversalDate.getCurrentEra = function (sCalendarType) {
    var oNow = new Date();
    return this.getEraByDate(sCalendarType, oNow.getFullYear(), oNow.getMonth(), oNow.getDate());
};
UniversalDate.getEraStartDate = function (sCalendarType, iEra) {
    var aEras = getEras(sCalendarType), oEra = aEras[iEra] || aEras[0];
    if (oEra._start) {
        return oEra._startInfo;
    }
};
function getEras(sCalendarType) {
    var oLocale = Core.getConfiguration().getFormatSettings().getFormatLocale(), oLocaleData = LocaleData.getInstance(oLocale), aEras = mEras[sCalendarType];
    if (!aEras) {
        var aEras = oLocaleData.getEraDates(sCalendarType);
        if (!aEras[0]) {
            aEras[0] = { _start: '1-1-1' };
        }
        for (var i = 0; i < aEras.length; i++) {
            var oEra = aEras[i];
            if (!oEra) {
                continue;
            }
            if (oEra._start) {
                oEra._startInfo = parseDateString(oEra._start);
            }
            if (oEra._end) {
                oEra._endInfo = parseDateString(oEra._end);
            }
        }
        mEras[sCalendarType] = aEras;
    }
    return aEras;
}
function parseDateString(sDateString) {
    var aParts = sDateString.split('-'), iYear, iMonth, iDay;
    if (aParts[0] == '') {
        iYear = -parseInt(aParts[1]);
        iMonth = parseInt(aParts[2]) - 1;
        iDay = parseInt(aParts[3]);
    } else {
        iYear = parseInt(aParts[0]);
        iMonth = parseInt(aParts[1]) - 1;
        iDay = parseInt(aParts[2]);
    }
    return {
        timestamp: new Date(0).setUTCFullYear(iYear, iMonth, iDay),
        year: iYear,
        month: iMonth,
        day: iDay
    };
}

var Buddhist = UniversalDate.extend('sap.ui.core.date.Buddhist', {
    constructor: function () {
        var aArgs = arguments;
        if (aArgs.length > 1) {
            aArgs = toGregorianArguments(aArgs);
        }
        this.oDate = this.createDate(Date, aArgs);
        this.sCalendarType = CalendarType$1.Buddhist;
    }
});
Buddhist.UTC = function () {
    var aArgs = toGregorianArguments(arguments);
    return Date.UTC.apply(Date, aArgs);
};
Buddhist.now = function () {
    return Date.now();
};
function toBuddhist(oGregorian) {
    var iEraStartYear = UniversalDate.getEraStartDate(CalendarType$1.Buddhist, 0).year, iYear = oGregorian.year - iEraStartYear + 1;
    if (oGregorian.year < 1941 && oGregorian.month < 3) {
        iYear -= 1;
    }
    if (oGregorian.year === null) {
        iYear = undefined;
    }
    return {
        year: iYear,
        month: oGregorian.month,
        day: oGregorian.day
    };
}
function toGregorian(oBuddhist) {
    var iEraStartYear = UniversalDate.getEraStartDate(CalendarType$1.Buddhist, 0).year, iYear = oBuddhist.year + iEraStartYear - 1;
    if (iYear < 1941 && oBuddhist.month < 3) {
        iYear += 1;
    }
    if (oBuddhist.year === null) {
        iYear = undefined;
    }
    return {
        year: iYear,
        month: oBuddhist.month,
        day: oBuddhist.day
    };
}
function toGregorianArguments(aArgs) {
    var oBuddhist, oGregorian;
    oBuddhist = {
        year: aArgs[0],
        month: aArgs[1],
        day: aArgs[2] !== undefined ? aArgs[2] : 1
    };
    oGregorian = toGregorian(oBuddhist);
    aArgs[0] = oGregorian.year;
    return aArgs;
}
Buddhist.prototype._getBuddhist = function () {
    var oGregorian = {
        year: this.oDate.getFullYear(),
        month: this.oDate.getMonth(),
        day: this.oDate.getDate()
    };
    return toBuddhist(oGregorian);
};
Buddhist.prototype._setBuddhist = function (oBuddhist) {
    var oGregorian = toGregorian(oBuddhist);
    return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Buddhist.prototype._getUTCBuddhist = function () {
    var oGregorian = {
        year: this.oDate.getUTCFullYear(),
        month: this.oDate.getUTCMonth(),
        day: this.oDate.getUTCDate()
    };
    return toBuddhist(oGregorian);
};
Buddhist.prototype._setUTCBuddhist = function (oBuddhist) {
    var oGregorian = toGregorian(oBuddhist);
    return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Buddhist.prototype.getYear = function () {
    return this._getBuddhist().year;
};
Buddhist.prototype.getFullYear = function () {
    return this._getBuddhist().year;
};
Buddhist.prototype.getUTCFullYear = function () {
    return this._getUTCBuddhist().year;
};
Buddhist.prototype.setYear = function (iYear) {
    var oBuddhist = this._getBuddhist();
    oBuddhist.year = iYear;
    return this._setBuddhist(oBuddhist);
};
Buddhist.prototype.setFullYear = function (iYear, iMonth, iDay) {
    var oBuddhist = this._getBuddhist();
    oBuddhist.year = iYear;
    if (iMonth !== undefined) {
        oBuddhist.month = iMonth;
    }
    if (iDay !== undefined) {
        oBuddhist.day = iDay;
    }
    return this._setBuddhist(oBuddhist);
};
Buddhist.prototype.setUTCFullYear = function (iYear, iMonth, iDay) {
    var oBuddhist = this._getUTCBuddhist();
    oBuddhist.year = iYear;
    if (iMonth !== undefined) {
        oBuddhist.month = iMonth;
    }
    if (iDay !== undefined) {
        oBuddhist.day = iDay;
    }
    return this._setUTCBuddhist(oBuddhist);
};
Buddhist.prototype.getWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getFullYear(), this.getMonth(), this.getDate());
};
Buddhist.prototype.getUTCWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate());
};
_Calendars.set(CalendarType$1.Buddhist, Buddhist);

var Islamic = UniversalDate.extend('sap.ui.core.date.Islamic', {
    constructor: function () {
        var aArgs = arguments;
        if (aArgs.length > 1) {
            aArgs = toGregorianArguments$1(aArgs);
        }
        this.oDate = this.createDate(Date, aArgs);
        this.sCalendarType = CalendarType$1.Islamic;
    }
});
Islamic.UTC = function () {
    var aArgs = toGregorianArguments$1(arguments);
    return Date.UTC.apply(Date, aArgs);
};
Islamic.now = function () {
    return Date.now();
};
var BASE_YEAR = 1400, GREGORIAN_EPOCH_DAYS = 1721425.5, ISLAMIC_EPOCH_DAYS = 1948439.5, ISLAMIC_MILLIS = -42521587200000, ONE_DAY = 86400000;
var oCustomizationMap = null;
var aSupportedIslamicCalendarTypes = [
    'A',
    'B'
];
function toIslamic(oGregorian) {
    var iGregorianYear = oGregorian.year, iGregorianMonth = oGregorian.month, iGregorianDay = oGregorian.day, iIslamicYear, iIslamicMonth, iIslamicDay, iMonths, iDays, iLeapAdj, iJulianDay;
    iLeapAdj = 0;
    if (iGregorianMonth + 1 > 2) {
        iLeapAdj = isGregorianLeapYear(iGregorianYear) ? -1 : -2;
    }
    iJulianDay = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iGregorianYear - 1) + Math.floor((iGregorianYear - 1) / 4) + -Math.floor((iGregorianYear - 1) / 100) + Math.floor((iGregorianYear - 1) / 400) + Math.floor((367 * (iGregorianMonth + 1) - 362) / 12 + iLeapAdj + iGregorianDay);
    iJulianDay = Math.floor(iJulianDay) + 0.5;
    iDays = iJulianDay - ISLAMIC_EPOCH_DAYS;
    iMonths = Math.floor(iDays / 29.530588853);
    if (iMonths < 0) {
        iIslamicYear = Math.floor(iMonths / 12) + 1;
        iIslamicMonth = iMonths % 12;
        if (iIslamicMonth < 0) {
            iIslamicMonth += 12;
        }
        iIslamicDay = iDays - monthStart(iIslamicYear, iIslamicMonth) + 1;
    } else {
        iMonths++;
        while (getCustomMonthStartDays(iMonths) > iDays) {
            iMonths--;
        }
        iIslamicYear = Math.floor(iMonths / 12) + 1;
        iIslamicMonth = iMonths % 12;
        iIslamicDay = iDays - getCustomMonthStartDays(12 * (iIslamicYear - 1) + iIslamicMonth) + 1;
    }
    return {
        day: iIslamicDay,
        month: iIslamicMonth,
        year: iIslamicYear
    };
}
function toGregorian$1(oIslamic) {
    var iIslamicYear = oIslamic.year, iIslamicMonth = oIslamic.month, iIslamicDate = oIslamic.day, iMonthStart = iIslamicYear < 1 ? monthStart(iIslamicYear, iIslamicMonth) : getCustomMonthStartDays(12 * (iIslamicYear - 1) + iIslamicMonth), iJulianDay = iIslamicDate + iMonthStart + ISLAMIC_EPOCH_DAYS - 1, iJulianDayNoon = Math.floor(iJulianDay - 0.5) + 0.5, iDaysSinceGregorianEpoch = iJulianDayNoon - GREGORIAN_EPOCH_DAYS, iQuadricent = Math.floor(iDaysSinceGregorianEpoch / 146097), iQuadricentNormalized = mod(iDaysSinceGregorianEpoch, 146097), iCent = Math.floor(iQuadricentNormalized / 36524), iCentNormalized = mod(iQuadricentNormalized, 36524), iQuad = Math.floor(iCentNormalized / 1461), iQuadNormalized = mod(iCentNormalized, 1461), iYearIndex = Math.floor(iQuadNormalized / 365), iYear = iQuadricent * 400 + iCent * 100 + iQuad * 4 + iYearIndex, iMonth, iDay, iGregorianYearStartDays, iDayOfYear, tjd, tjd2, iLeapAdj, iLeapAdj2;
    if (!(iCent == 4 || iYearIndex == 4)) {
        iYear++;
    }
    iGregorianYearStartDays = GREGORIAN_EPOCH_DAYS + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400);
    iDayOfYear = iJulianDayNoon - iGregorianYearStartDays;
    tjd = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(iYear) ? -1 : -2) + 1);
    iLeapAdj = 0;
    if (iJulianDayNoon < tjd) {
        iLeapAdj = 0;
    } else {
        iLeapAdj = isGregorianLeapYear(iYear) ? 1 : 2;
    }
    iMonth = Math.floor(((iDayOfYear + iLeapAdj) * 12 + 373) / 367);
    tjd2 = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400);
    iLeapAdj2 = 0;
    if (iMonth > 2) {
        iLeapAdj2 = isGregorianLeapYear(iYear) ? -1 : -2;
    }
    tjd2 += Math.floor((367 * iMonth - 362) / 12 + iLeapAdj2 + 1);
    iDay = iJulianDayNoon - tjd2 + 1;
    return {
        day: iDay,
        month: iMonth - 1,
        year: iYear
    };
}
function toGregorianArguments$1(aArgs) {
    var aGregorianArgs = Array.prototype.slice.call(aArgs), oIslamic, oGregorian;
    oIslamic = {
        year: aArgs[0],
        month: aArgs[1],
        day: aArgs[2] !== undefined ? aArgs[2] : 1
    };
    oGregorian = toGregorian$1(oIslamic);
    aGregorianArgs[0] = oGregorian.year;
    aGregorianArgs[1] = oGregorian.month;
    aGregorianArgs[2] = oGregorian.day;
    return aGregorianArgs;
}
function initCustomizationMap() {
    var sDateFormat, oCustomizationJSON;
    oCustomizationMap = {};
    sDateFormat = Core.getConfiguration().getFormatSettings().getLegacyDateFormat();
    sDateFormat = _isSupportedIslamicCalendarType(sDateFormat) ? sDateFormat : 'A';
    oCustomizationJSON = Core.getConfiguration().getFormatSettings().getLegacyDateCalendarCustomizing();
    oCustomizationJSON = oCustomizationJSON || [];
    if (!oCustomizationJSON.length) {
        Log.warning('No calendar customizations.');
        return;
    }
    oCustomizationJSON.forEach(function (oEntry) {
        if (oEntry.dateFormat === sDateFormat) {
            var date = parseDate(oEntry.gregDate);
            var iGregorianDate = new Date(Date.UTC(date.year, date.month - 1, date.day));
            var iMillis = iGregorianDate.getTime();
            var iIslamicMonthStartDays = (iMillis - ISLAMIC_MILLIS) / ONE_DAY;
            date = parseDate(oEntry.islamicMonthStart);
            var iIslamicMonths = (date.year - 1) * 12 + date.month - 1;
            oCustomizationMap[iIslamicMonths] = iIslamicMonthStartDays;
        }
    });
    Log.info('Working with date format: [' + sDateFormat + '] and customization: ' + JSON.stringify(oCustomizationJSON));
}
function parseDate(sDate) {
    return {
        year: parseInt(sDate.substr(0, 4)),
        month: parseInt(sDate.substr(4, 2)),
        day: parseInt(sDate.substr(6, 2))
    };
}
function getCustomMonthStartDays(months) {
    if (!oCustomizationMap) {
        initCustomizationMap();
    }
    var iIslamicMonthStartDays = oCustomizationMap[months];
    if (!iIslamicMonthStartDays) {
        var year = Math.floor(months / 12) + 1;
        var month = months % 12;
        iIslamicMonthStartDays = monthStart(year, month);
    }
    return iIslamicMonthStartDays;
}
function monthStart(year, month) {
    return Math.ceil(29.5 * month) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30);
}
function mod(a, b) {
    return a - b * Math.floor(a / b);
}
function isGregorianLeapYear(iYear) {
    return !(iYear % 400) || !(iYear % 4) && !!(iYear % 100);
}
function _isSupportedIslamicCalendarType(sCalendarType) {
    return aSupportedIslamicCalendarTypes.indexOf(sCalendarType) !== -1;
}
Islamic.prototype._getIslamic = function () {
    return toIslamic({
        day: this.oDate.getDate(),
        month: this.oDate.getMonth(),
        year: this.oDate.getFullYear()
    });
};
Islamic.prototype._setIslamic = function (oIslamic) {
    var oGregorian = toGregorian$1(oIslamic);
    return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Islamic.prototype._getUTCIslamic = function () {
    return toIslamic({
        day: this.oDate.getUTCDate(),
        month: this.oDate.getUTCMonth(),
        year: this.oDate.getUTCFullYear()
    });
};
Islamic.prototype._setUTCIslamic = function (oIslamic) {
    var oGregorian = toGregorian$1(oIslamic);
    return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Islamic.prototype.getDate = function (iDate) {
    return this._getIslamic().day;
};
Islamic.prototype.getMonth = function () {
    return this._getIslamic().month;
};
Islamic.prototype.getYear = function () {
    return this._getIslamic().year - BASE_YEAR;
};
Islamic.prototype.getFullYear = function () {
    return this._getIslamic().year;
};
Islamic.prototype.setDate = function (iDate) {
    var oIslamic = this._getIslamic();
    oIslamic.day = iDate;
    return this._setIslamic(oIslamic);
};
Islamic.prototype.setMonth = function (iMonth, iDay) {
    var oIslamic = this._getIslamic();
    oIslamic.month = iMonth;
    if (iDay !== undefined) {
        oIslamic.day = iDay;
    }
    return this._setIslamic(oIslamic);
};
Islamic.prototype.setYear = function (iYear) {
    var oIslamic = this._getIslamic();
    oIslamic.year = iYear + BASE_YEAR;
    return this._setIslamic(oIslamic);
};
Islamic.prototype.setFullYear = function (iYear, iMonth, iDay) {
    var oIslamic = this._getIslamic();
    oIslamic.year = iYear;
    if (iMonth !== undefined) {
        oIslamic.month = iMonth;
    }
    if (iDay !== undefined) {
        oIslamic.day = iDay;
    }
    return this._setIslamic(oIslamic);
};
Islamic.prototype.getUTCDate = function (iDate) {
    return this._getUTCIslamic().day;
};
Islamic.prototype.getUTCMonth = function () {
    return this._getUTCIslamic().month;
};
Islamic.prototype.getUTCFullYear = function () {
    return this._getUTCIslamic().year;
};
Islamic.prototype.setUTCDate = function (iDate) {
    var oIslamic = this._getUTCIslamic();
    oIslamic.day = iDate;
    return this._setUTCIslamic(oIslamic);
};
Islamic.prototype.setUTCMonth = function (iMonth, iDay) {
    var oIslamic = this._getUTCIslamic();
    oIslamic.month = iMonth;
    if (iDay !== undefined) {
        oIslamic.day = iDay;
    }
    return this._setUTCIslamic(oIslamic);
};
Islamic.prototype.setUTCFullYear = function (iYear, iMonth, iDay) {
    var oIslamic = this._getUTCIslamic();
    oIslamic.year = iYear;
    if (iMonth !== undefined) {
        oIslamic.month = iMonth;
    }
    if (iDay !== undefined) {
        oIslamic.day = iDay;
    }
    return this._setUTCIslamic(oIslamic);
};
_Calendars.set(CalendarType$1.Islamic, Islamic);

var Japanese = UniversalDate.extend('sap.ui.core.date.Japanese', {
    constructor: function () {
        var aArgs = arguments;
        if (aArgs.length > 1) {
            aArgs = toGregorianArguments$2(aArgs);
        }
        this.oDate = this.createDate(Date, aArgs);
        this.sCalendarType = CalendarType$1.Japanese;
    }
});
Japanese.UTC = function () {
    var aArgs = toGregorianArguments$2(arguments);
    return Date.UTC.apply(Date, aArgs);
};
Japanese.now = function () {
    return Date.now();
};
function toJapanese(oGregorian) {
    var iEra = UniversalDate.getEraByDate(CalendarType$1.Japanese, oGregorian.year, oGregorian.month, oGregorian.day), iEraStartYear = UniversalDate.getEraStartDate(CalendarType$1.Japanese, iEra).year;
    return {
        era: iEra,
        year: oGregorian.year - iEraStartYear + 1,
        month: oGregorian.month,
        day: oGregorian.day
    };
}
function toGregorian$2(oJapanese) {
    var iEraStartYear = UniversalDate.getEraStartDate(CalendarType$1.Japanese, oJapanese.era).year;
    return {
        year: iEraStartYear + oJapanese.year - 1,
        month: oJapanese.month,
        day: oJapanese.day
    };
}
function toGregorianArguments$2(aArgs) {
    var oJapanese, oGregorian, iEra, vYear = aArgs[0];
    if (typeof vYear == 'number') {
        if (vYear >= 100) {
            return aArgs;
        } else {
            iEra = UniversalDate.getCurrentEra(CalendarType$1.Japanese);
            vYear = [
                iEra,
                vYear
            ];
        }
    } else if (!Array.isArray(vYear)) {
        vYear = [];
    }
    oJapanese = {
        era: vYear[0],
        year: vYear[1],
        month: aArgs[1],
        day: aArgs[2] !== undefined ? aArgs[2] : 1
    };
    oGregorian = toGregorian$2(oJapanese);
    aArgs[0] = oGregorian.year;
    return aArgs;
}
Japanese.prototype._getJapanese = function () {
    var oGregorian = {
        year: this.oDate.getFullYear(),
        month: this.oDate.getMonth(),
        day: this.oDate.getDate()
    };
    return toJapanese(oGregorian);
};
Japanese.prototype._setJapanese = function (oJapanese) {
    var oGregorian = toGregorian$2(oJapanese);
    return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Japanese.prototype._getUTCJapanese = function () {
    var oGregorian = {
        year: this.oDate.getUTCFullYear(),
        month: this.oDate.getUTCMonth(),
        day: this.oDate.getUTCDate()
    };
    return toJapanese(oGregorian);
};
Japanese.prototype._setUTCJapanese = function (oJapanese) {
    var oGregorian = toGregorian$2(oJapanese);
    return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Japanese.prototype.getYear = function () {
    return this._getJapanese().year;
};
Japanese.prototype.getFullYear = function () {
    return this._getJapanese().year;
};
Japanese.prototype.getEra = function () {
    return this._getJapanese().era;
};
Japanese.prototype.getUTCFullYear = function () {
    return this._getUTCJapanese().year;
};
Japanese.prototype.getUTCEra = function () {
    return this._getUTCJapanese().era;
};
Japanese.prototype.setYear = function (iYear) {
    var oJapanese = this._getJapanese();
    oJapanese.year = iYear;
    return this._setJapanese(oJapanese);
};
Japanese.prototype.setFullYear = function (iYear, iMonth, iDay) {
    var oJapanese = this._getJapanese();
    oJapanese.year = iYear;
    if (iMonth !== undefined) {
        oJapanese.month = iMonth;
    }
    if (iDay !== undefined) {
        oJapanese.day = iDay;
    }
    return this._setJapanese(oJapanese);
};
Japanese.prototype.setEra = function (iEra, iYear, iMonth, iDay) {
    var oEraStartDate = UniversalDate.getEraStartDate(CalendarType$1.Japanese, iEra), oJapanese = toJapanese(oEraStartDate);
    if (iYear !== undefined) {
        oJapanese.year = iYear;
    }
    if (iMonth !== undefined) {
        oJapanese.month = iMonth;
    }
    if (iDay !== undefined) {
        oJapanese.day = iDay;
    }
    return this._setJapanese(oJapanese);
};
Japanese.prototype.setUTCFullYear = function (iYear, iMonth, iDay) {
    var oJapanese = this._getUTCJapanese();
    oJapanese.year = iYear;
    if (iMonth !== undefined) {
        oJapanese.month = iMonth;
    }
    if (iDay !== undefined) {
        oJapanese.day = iDay;
    }
    return this._setUTCJapanese(oJapanese);
};
Japanese.prototype.setUTCEra = function (iEra, iYear, iMonth, iDay) {
    var oEraStartDate = UniversalDate.getEraStartDate(CalendarType$1.Japanese, iEra), oJapanese = toJapanese(oEraStartDate);
    if (iYear !== undefined) {
        oJapanese.year = iYear;
    }
    if (iMonth !== undefined) {
        oJapanese.month = iMonth;
    }
    if (iDay !== undefined) {
        oJapanese.day = iDay;
    }
    return this._setUTCJapanese(oJapanese);
};
Japanese.prototype.getWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getFullYear(), this.getMonth(), this.getDate());
};
Japanese.prototype.getUTCWeek = function () {
    return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate());
};
_Calendars.set(CalendarType$1.Japanese, Japanese);

var Persian = UniversalDate.extend('sap.ui.core.date.Persian', {
    constructor: function () {
        var aArgs = arguments;
        if (aArgs.length > 1) {
            aArgs = toGregorianArguments$3(aArgs);
        }
        this.oDate = this.createDate(Date, aArgs);
        this.sCalendarType = CalendarType$1.Persian;
    }
});
Persian.UTC = function () {
    var aArgs = toGregorianArguments$3(arguments);
    return Date.UTC.apply(Date, aArgs);
};
Persian.now = function () {
    return Date.now();
};
var BASE_YEAR$1 = 1300;
function toPersian(oGregorian) {
    var iJulianDayNumber = g2d(oGregorian.year, oGregorian.month + 1, oGregorian.day);
    return d2j(iJulianDayNumber);
}
function toGregorian$3(oPersian) {
    var iJulianDayNumber = j2d(oPersian.year, oPersian.month + 1, oPersian.day);
    return d2g(iJulianDayNumber);
}
function toGregorianArguments$3(aArgs) {
    var aGregorianArgs = Array.prototype.slice.call(aArgs), oPersian, oGregorian;
    if (typeof aArgs[0] !== 'number' || typeof aArgs[1] !== 'number' || aArgs[2] !== undefined && typeof aArgs[2] != 'number') {
        aGregorianArgs[0] = NaN;
        aGregorianArgs[1] = NaN;
        aGregorianArgs[2] = NaN;
        return aGregorianArgs;
    }
    oPersian = {
        year: aArgs[0],
        month: aArgs[1],
        day: aArgs[2] !== undefined ? aArgs[2] : 1
    };
    oGregorian = toGregorian$3(oPersian);
    aGregorianArgs[0] = oGregorian.year;
    aGregorianArgs[1] = oGregorian.month;
    aGregorianArgs[2] = oGregorian.day;
    return aGregorianArgs;
}
function jalCal(jy) {
    var breaks = [
            -61,
            9,
            38,
            199,
            426,
            686,
            756,
            818,
            1111,
            1181,
            1210,
            1635,
            2060,
            2097,
            2192,
            2262,
            2324,
            2394,
            2456,
            3178
        ], bl = breaks.length, gy = jy + 621, leapJ = -14, jp = breaks[0], jm, jump, leap, leapG, march, n, i;
    for (i = 1; i < bl; i += 1) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm) {
            break;
        }
        leapJ = leapJ + div(jump, 33) * 8 + div(mod$1(jump, 33), 4);
        jp = jm;
    }
    n = jy - jp;
    leapJ = leapJ + div(n, 33) * 8 + div(mod$1(n, 33) + 3, 4);
    if (mod$1(jump, 33) === 4 && jump - n === 4) {
        leapJ += 1;
    }
    leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;
    march = 20 + leapJ - leapG;
    if (jump - n < 6) {
        n = n - jump + div(jump + 4, 33) * 33;
    }
    leap = mod$1(mod$1(n + 1, 33) - 1, 4);
    if (leap === -1) {
        leap = 4;
    }
    return {
        leap: leap,
        gy: gy,
        march: march
    };
}
function j2d(jy, jm, jd) {
    while (jm < 1) {
        jm += 12;
        jy--;
    }
    while (jm > 12) {
        jm -= 12;
        jy++;
    }
    var r = jalCal(jy);
    return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
}
function d2j(jdn) {
    var gy = d2g(jdn).year, jy = gy - 621, r = jalCal(jy), jdn1f = g2d(gy, 3, r.march), jd, jm, k;
    k = jdn - jdn1f;
    if (k >= 0) {
        if (k <= 185) {
            jm = 1 + div(k, 31);
            jd = mod$1(k, 31) + 1;
            return {
                year: jy,
                month: jm - 1,
                day: jd
            };
        } else {
            k -= 186;
        }
    } else {
        jy -= 1;
        k += 179;
        if (r.leap === 1) {
            k += 1;
        }
    }
    jm = 7 + div(k, 30);
    jd = mod$1(k, 30) + 1;
    return {
        year: jy,
        month: jm - 1,
        day: jd
    };
}
function g2d(gy, gm, gd) {
    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod$1(gm + 9, 12) + 2, 5) + gd - 34840408;
    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
    return d;
}
function d2g(jdn) {
    var j, i, gd, gm, gy;
    j = 4 * jdn + 139361631;
    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
    i = div(mod$1(j, 1461), 4) * 5 + 308;
    gd = div(mod$1(i, 153), 5) + 1;
    gm = mod$1(div(i, 153), 12) + 1;
    gy = div(j, 1461) - 100100 + div(8 - gm, 6);
    return {
        year: gy,
        month: gm - 1,
        day: gd
    };
}
function div(a, b) {
    return ~~(a / b);
}
function mod$1(a, b) {
    return a - ~~(a / b) * b;
}
Persian.prototype._getPersian = function () {
    return toPersian({
        day: this.oDate.getDate(),
        month: this.oDate.getMonth(),
        year: this.oDate.getFullYear()
    });
};
Persian.prototype._setPersian = function (oPersian) {
    var oGregorian = toGregorian$3(oPersian);
    return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Persian.prototype._getUTCPersian = function () {
    return toPersian({
        day: this.oDate.getUTCDate(),
        month: this.oDate.getUTCMonth(),
        year: this.oDate.getUTCFullYear()
    });
};
Persian.prototype._setUTCPersian = function (oPersian) {
    var oGregorian = toGregorian$3(oPersian);
    return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Persian.prototype.getDate = function (iDate) {
    return this._getPersian().day;
};
Persian.prototype.getMonth = function () {
    return this._getPersian().month;
};
Persian.prototype.getYear = function () {
    return this._getPersian().year - BASE_YEAR$1;
};
Persian.prototype.getFullYear = function () {
    return this._getPersian().year;
};
Persian.prototype.setDate = function (iDate) {
    var oPersian = this._getPersian();
    oPersian.day = iDate;
    return this._setPersian(oPersian);
};
Persian.prototype.setMonth = function (iMonth, iDay) {
    var oPersian = this._getPersian();
    oPersian.month = iMonth;
    if (iDay !== undefined) {
        oPersian.day = iDay;
    }
    return this._setPersian(oPersian);
};
Persian.prototype.setYear = function (iYear) {
    var oPersian = this._getPersian();
    oPersian.year = iYear + BASE_YEAR$1;
    return this._setPersian(oPersian);
};
Persian.prototype.setFullYear = function (iYear, iMonth, iDay) {
    var oPersian = this._getPersian();
    oPersian.year = iYear;
    if (iMonth !== undefined) {
        oPersian.month = iMonth;
    }
    if (iDay !== undefined) {
        oPersian.day = iDay;
    }
    return this._setPersian(oPersian);
};
Persian.prototype.getUTCDate = function (iDate) {
    return this._getUTCPersian().day;
};
Persian.prototype.getUTCMonth = function () {
    return this._getUTCPersian().month;
};
Persian.prototype.getUTCFullYear = function () {
    return this._getUTCPersian().year;
};
Persian.prototype.setUTCDate = function (iDate) {
    var oPersian = this._getUTCPersian();
    oPersian.day = iDate;
    return this._setUTCPersian(oPersian);
};
Persian.prototype.setUTCMonth = function (iMonth, iDay) {
    var oPersian = this._getUTCPersian();
    oPersian.month = iMonth;
    if (iDay !== undefined) {
        oPersian.day = iDay;
    }
    return this._setUTCPersian(oPersian);
};
Persian.prototype.setUTCFullYear = function (iYear, iMonth, iDay) {
    var oPersian = this._getUTCPersian();
    oPersian.year = iYear;
    if (iMonth !== undefined) {
        oPersian.month = iMonth;
    }
    if (iDay !== undefined) {
        oPersian.day = iDay;
    }
    return this._setUTCPersian(oPersian);
};
_Calendars.set(CalendarType$1.Persian, Persian);

/**
 *
 *
 * @author Jerry Bendy <jerry@icewingcc.com>
 * @licence MIT
 *
 */

(function(self) {

    var nativeURLSearchParams = (self.URLSearchParams && self.URLSearchParams.prototype.get) ? self.URLSearchParams : null,
        isSupportObjectConstructor = nativeURLSearchParams && (new nativeURLSearchParams({a: 1})).toString() === 'a=1',
        // There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.
        decodesPlusesCorrectly = nativeURLSearchParams && (new nativeURLSearchParams('s=%2B').get('s') === '+'),
        __URLSearchParams__ = "__URLSearchParams__",
        // Fix bug in Edge which cannot encode ' &' correctly
        encodesAmpersandsCorrectly = nativeURLSearchParams ? (function() {
            var ampersandTest = new nativeURLSearchParams();
            ampersandTest.append('s', ' &');
            return ampersandTest.toString() === 's=+%26';
        })() : true,
        prototype = URLSearchParamsPolyfill.prototype,
        iterable = !!(self.Symbol && self.Symbol.iterator);

    if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly && encodesAmpersandsCorrectly) {
        return;
    }


    /**
     * Make a URLSearchParams instance
     *
     * @param {object|string|URLSearchParams} search
     * @constructor
     */
    function URLSearchParamsPolyfill(search) {
        search = search || "";

        // support construct object with another URLSearchParams instance
        if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
            search = search.toString();
        }
        this [__URLSearchParams__] = parseToDict(search);
    }


    /**
     * Appends a specified key/value pair as a new search parameter.
     *
     * @param {string} name
     * @param {string} value
     */
    prototype.append = function(name, value) {
        appendTo(this [__URLSearchParams__], name, value);
    };

    /**
     * Deletes the given search parameter, and its associated value,
     * from the list of all search parameters.
     *
     * @param {string} name
     */
    prototype['delete'] = function(name) {
        delete this [__URLSearchParams__] [name];
    };

    /**
     * Returns the first value associated to the given search parameter.
     *
     * @param {string} name
     * @returns {string|null}
     */
    prototype.get = function(name) {
        var dict = this [__URLSearchParams__];
        return name in dict ? dict[name][0] : null;
    };

    /**
     * Returns all the values association with a given search parameter.
     *
     * @param {string} name
     * @returns {Array}
     */
    prototype.getAll = function(name) {
        var dict = this [__URLSearchParams__];
        return name in dict ? dict [name].slice(0) : [];
    };

    /**
     * Returns a Boolean indicating if such a search parameter exists.
     *
     * @param {string} name
     * @returns {boolean}
     */
    prototype.has = function(name) {
        return name in this [__URLSearchParams__];
    };

    /**
     * Sets the value associated to a given search parameter to
     * the given value. If there were several values, delete the
     * others.
     *
     * @param {string} name
     * @param {string} value
     */
    prototype.set = function set(name, value) {
        this [__URLSearchParams__][name] = ['' + value];
    };

    /**
     * Returns a string containg a query string suitable for use in a URL.
     *
     * @returns {string}
     */
    prototype.toString = function() {
        var dict = this[__URLSearchParams__], query = [], i, key, name, value;
        for (key in dict) {
            name = encode(key);
            for (i = 0, value = dict[key]; i < value.length; i++) {
                query.push(name + '=' + encode(value[i]));
            }
        }
        return query.join('&');
    };

    // There is a bug in Safari 10.1 and `Proxy`ing it is not enough.
    var forSureUsePolyfill = !decodesPlusesCorrectly;
    var useProxy = (!forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self.Proxy);
    /*
     * Apply polifill to global object and append other prototype into it
     */
    Object.defineProperty(self, 'URLSearchParams', {
        value: (useProxy ?
            // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0
            new Proxy(nativeURLSearchParams, {
                construct: function(target, args) {
                    return new target((new URLSearchParamsPolyfill(args[0]).toString()));
                }
            }) :
            URLSearchParamsPolyfill)
    });

    var USPProto = self.URLSearchParams.prototype;

    USPProto.polyfill = true;

    /**
     *
     * @param {function} callback
     * @param {object} thisArg
     */
    USPProto.forEach = USPProto.forEach || function(callback, thisArg) {
        var dict = parseToDict(this.toString());
        Object.getOwnPropertyNames(dict).forEach(function(name) {
            dict[name].forEach(function(value) {
                callback.call(thisArg, value, name, this);
            }, this);
        }, this);
    };

    /**
     * Sort all name-value pairs
     */
    USPProto.sort = USPProto.sort || function() {
        var dict = parseToDict(this.toString()), keys = [], k, i, j;
        for (k in dict) {
            keys.push(k);
        }
        keys.sort();

        for (i = 0; i < keys.length; i++) {
            this['delete'](keys[i]);
        }
        for (i = 0; i < keys.length; i++) {
            var key = keys[i], values = dict[key];
            for (j = 0; j < values.length; j++) {
                this.append(key, values[j]);
            }
        }
    };

    /**
     * Returns an iterator allowing to go through all keys of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.keys = USPProto.keys || function() {
        var items = [];
        this.forEach(function(item, name) {
            items.push(name);
        });
        return makeIterator(items);
    };

    /**
     * Returns an iterator allowing to go through all values of
     * the key/value pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.values = USPProto.values || function() {
        var items = [];
        this.forEach(function(item) {
            items.push(item);
        });
        return makeIterator(items);
    };

    /**
     * Returns an iterator allowing to go through all key/value
     * pairs contained in this object.
     *
     * @returns {function}
     */
    USPProto.entries = USPProto.entries || function() {
        var items = [];
        this.forEach(function(item, name) {
            items.push([name, item]);
        });
        return makeIterator(items);
    };


    if (iterable) {
        USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;
    }


    function encode(str) {
        var replace = {
            '!': '%21',
            "'": '%27',
            '(': '%28',
            ')': '%29',
            '~': '%7E',
            '%20': '+',
            '%00': '\x00'
        };
        return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function(match) {
            return replace[match];
        });
    }

    function decode(str) {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    }

    function makeIterator(arr) {
        var iterator = {
            next: function() {
                var value = arr.shift();
                return {done: value === undefined, value: value};
            }
        };

        if (iterable) {
            iterator[self.Symbol.iterator] = function() {
                return iterator;
            };
        }

        return iterator;
    }

    function parseToDict(search) {
        var dict = {};

        if (typeof search === "object") {
            for (var key in search) {
                if (search.hasOwnProperty(key)) {
                    appendTo(dict, key, search[key]);
                }
            }

        } else {
            // remove first '?'
            if (search.indexOf("?") === 0) {
                search = search.slice(1);
            }

            var pairs = search.split("&");
            for (var j = 0; j < pairs.length; j++) {
                var value = pairs [j],
                    index = value.indexOf('=');

                if (-1 < index) {
                    appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));

                } else {
                    if (value) {
                        appendTo(dict, decode(value), '');
                    }
                }
            }
        }

        return dict;
    }

    function appendTo(dict, name, value) {
        var val = typeof value === 'string' ? value : (
            value !== null && value !== undefined && typeof value.toString === 'function' ? value.toString() : JSON.stringify(value)
        );

        if (name in dict) {
            dict[name].push(val);
        } else {
            dict[name] = [val];
        }
    }

})(typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : window));

const patchNodeValue = () => {
	if (!window.ShadyDOM) {
		return;
	}
	const nativeNodeValue = Object.getOwnPropertyDescriptor(Node.prototype, "nodeValue");
	Object.defineProperty(Node.prototype, "nodeValue", {
		get() {
			return nativeNodeValue.get.apply(this);
		},
		set(text) {
			nativeNodeValue.set.apply(this, arguments); // eslint-disable-line

			// Call manually the mutation observer callback
			const parentElement = this.parentNode;
			if (parentElement instanceof HTMLElement && parentElement.isUI5Element) {
				parentElement._processChildren();
			}
		},
	});
};

patchNodeValue();

const instances = new Map();

/**
 * Fetches and returns а LocaleData object for the required locale
 * For more information on this object's API, please see:
 * https://ui5.sap.com/#/api/sap.ui.core.LocaleData
 *
 * @param lang - if left empty, will use the configured/current locale
 * @returns {LocaleData}
 */
const getLocaleData = async lang => {
	const locale = getLocale(lang);
	const localeLang = locale.getLanguage();

	if (!instances.has(localeLang)) {
		await fetchCldr(locale.getLanguage(), locale.getRegion(), locale.getScript());
		instances.set(localeLang, LocaleData.getInstance(locale));
	}

	return instances.get(localeLang);
};

const localeRegEX = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
const SAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;

/* Map for old language names for a few ISO639 codes. */
const M_ISO639_NEW_TO_OLD = {
	"he": "iw",
	"yi": "ji",
	"id": "in",
	"sr": "sh",
};

/**
 * Normalizes the given locale in BCP-47 syntax.
 * @param {string} locale locale to normalize
 * @returns {string} Normalized locale, "undefined" if the locale can't be normalized or the default locale, if no locale provided.
 */
const normalizeLocale = locale => {
	let m;

	if (!locale) {
		return DEFAULT_LOCALE;
	}

	if (typeof locale === "string" && (m = localeRegEX.exec(locale.replace(/_/g, "-")))) {/* eslint-disable-line */
		let language = m[1].toLowerCase();
		let region = m[3] ? m[3].toUpperCase() : undefined;
		const script = m[2] ? m[2].toLowerCase() : undefined;
		const variants = m[4] ? m[4].slice(1) : undefined;
		const isPrivate = m[6];

		language = M_ISO639_NEW_TO_OLD[language] || language;

		// recognize and convert special SAP supportability locales (overwrites m[]!)
		if ((isPrivate && (m = SAPSupportabilityLocales.exec(isPrivate))) /* eslint-disable-line */ ||
			(variants && (m = SAPSupportabilityLocales.exec(variants)))) {/* eslint-disable-line */
			return `en_US_${m[1].toLowerCase()}`; // for now enforce en_US (agreed with SAP SLS)
		}

		// Chinese: when no region but a script is specified, use default region for each script
		if (language === "zh" && !region) {
			if (script === "hans") {
				region = "CN";
			} else if (script === "hant") {
				region = "TW";
			}
		}

		return language + (region ? "_" + region + (variants ? "_" + variants.replace("-", "_") : "") : ""); /* eslint-disable-line */
	}
};

/**
 * Calculates the next fallback locale for the given locale.
 *
 * @param {string} locale Locale string in Java format (underscores) or null
 * @returns {string} Next fallback Locale or "en" if no fallbacks found.
 */
const nextFallbackLocale = locale => {
	if (!locale) {
		return DEFAULT_LOCALE;
	}

	if (locale === "zh_HK") {
		return "zh_TW";
	}

	// if there are multiple segments (separated by underscores), remove the last one
	const p = locale.lastIndexOf("_");
	if (p >= 0) {
		return locale.slice(0, p);
	}

	// for any language but the default, fallback to the default first before falling back to the 'raw' language (empty string)
	return locale !== DEFAULT_LOCALE ? DEFAULT_LOCALE : "";
};

const bundleData = new Map();
const bundleURLs = new Map();

/**
 * Sets a map with texts and ID the are related to.
 * @param {string} packageName package ID that the i18n bundle will be related to
 * @param {Object} data an object with string locales as keys and text translataions as values
 * @public
 */
const setI18nBundleData = (packageName, data) => {
	bundleData.set(packageName, data);
};

const getI18nBundleData = packageName => {
	return bundleData.get(packageName);
};

/**
 * Registers a map of locale/url information, to be used by the <code>fetchI18nBundle</code> method.
 * Note: In order to be able to register ".properties" files, you must import the following module:
 * import "@ui5/webcomponents-base/dist/features/PropertiesFormatSupport.js";
 *
 * @param {string} packageName package ID that the i18n bundle will be related to
 * @param {Object} bundle an object with string locales as keys and the URLs (in .json or .properties format - see the note above) where the corresponding locale can be fetched from, f.e {"en": "path/en.json", ...}
 *
 * @public
 */
const registerI18nBundle = (packageName, bundle) => {
	const oldBundle = bundleURLs.get(packageName) || {};
	bundleURLs.set(packageName, Object.assign({}, oldBundle, bundle));
};

/**
 * This method preforms the asynchronous task of fetching the actual text resources. It will fetch
 * each text resource over the network once (even for multiple calls to the same method).
 * It should be fully finished before the i18nBundle class is created in the webcomponents.
 * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.
 * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>
 * @param {packageName} packageName the NPM package name
 * @public
 */
const fetchI18nBundle = async packageName => {
	const bundlesForPackage = bundleURLs.get(packageName);

	if (!bundlesForPackage) {
		console.warn(`Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */
		` You need to import ${packageName}/dist/Assets.js with a build tool that supports JSON imports.`); /* eslint-disable-line */
		return;
	}

	const language = getLocale().getLanguage();
	const region = getLocale().getRegion();
	const useDefaultLanguage = getUseDefaultLanguage$1();
	let localeId = normalizeLocale(language + (region ? `-${region}` : ``));

	while (localeId !== DEFAULT_LANGUAGE && !bundlesForPackage[localeId]) {
		localeId = nextFallbackLocale(localeId);
	}

	if (useDefaultLanguage && localeId === DEFAULT_LANGUAGE) {
		setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)
		return;
	}

	const bundleURL = bundlesForPackage[localeId];

	if (typeof bundleURL === "object") { // inlined from build
		setI18nBundleData(packageName, bundleURL);
		return;
	}

	const content = await fetchTextOnce(getEffectiveAssetPath(bundleURL));
	let parser;
	if (content.startsWith("{")) {
		parser = JSON.parse;
	} else {
		const PropertiesFormatSupport = getFeature("PropertiesFormatSupport");
		if (!PropertiesFormatSupport) {
			throw new Error(`In order to support .properties files, please: import "@ui5/webcomponents-base/dist/features/PropertiesFormatSupport.js";`);
		}
		parser = PropertiesFormatSupport.parser;
	}

	const data = parser(content);

	setI18nBundleData(packageName, data);
};

// When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles
attachLanguageChange(() => {
	const allPackages = [...bundleData.keys()];
	return Promise.all(allPackages.map(fetchI18nBundle));
});

var ar = "/services/v4/web/voting/ui/vote/resources/messagebundle_ar.3cb0c9150a0d3b65.json";

var bg = "/services/v4/web/voting/ui/vote/resources/messagebundle_bg.c5b5f09d4cdc05c2.json";

var ca = "/services/v4/web/voting/ui/vote/resources/messagebundle_ca.21eddad79e57b196.json";

var cs = "/services/v4/web/voting/ui/vote/resources/messagebundle_cs.254cf5a554d6c3cf.json";

var da = "/services/v4/web/voting/ui/vote/resources/messagebundle_da.292202a074417518.json";

var de = "/services/v4/web/voting/ui/vote/resources/messagebundle_de.8a37d0d12d5f3fdb.json";

var el = "/services/v4/web/voting/ui/vote/resources/messagebundle_el.20e733cf13266e95.json";

var en = "/services/v4/web/voting/ui/vote/resources/messagebundle_en.2116c2eb907f4239.json";

var es = "/services/v4/web/voting/ui/vote/resources/messagebundle_es.4b7a0782bf89db91.json";

var et = "/services/v4/web/voting/ui/vote/resources/messagebundle_et.32a3ecb2ab90d7e1.json";

var fi = "/services/v4/web/voting/ui/vote/resources/messagebundle_fi.59f4c565254f8bd7.json";

var fr = "/services/v4/web/voting/ui/vote/resources/messagebundle_fr.4823ab3f68b56fff.json";

var hi = "/services/v4/web/voting/ui/vote/resources/messagebundle_hi.169377676442a6c3.json";

var hr = "/services/v4/web/voting/ui/vote/resources/messagebundle_hr.7b0f01264adee46e.json";

var hu = "/services/v4/web/voting/ui/vote/resources/messagebundle_hu.b7073837581b601d.json";

var it = "/services/v4/web/voting/ui/vote/resources/messagebundle_it.7aa517f8f41868e7.json";

var iw = "/services/v4/web/voting/ui/vote/resources/messagebundle_iw.f8e9297bda991f89.json";

var ja = "/services/v4/web/voting/ui/vote/resources/messagebundle_ja.94a03c1b60503735.json";

var kk = "/services/v4/web/voting/ui/vote/resources/messagebundle_kk.8108317e69a7b684.json";

var ko = "/services/v4/web/voting/ui/vote/resources/messagebundle_ko.30d4f96289f472cb.json";

var lt = "/services/v4/web/voting/ui/vote/resources/messagebundle_lt.3132c6a3e0a20741.json";

var lv = "/services/v4/web/voting/ui/vote/resources/messagebundle_lv.6d37db7bca572e88.json";

var ms = "/services/v4/web/voting/ui/vote/resources/messagebundle_ms.96b31d30dbb8df67.json";

var nl = "/services/v4/web/voting/ui/vote/resources/messagebundle_nl.55a55c21aa99f942.json";

var no = "/services/v4/web/voting/ui/vote/resources/messagebundle_no.b9dc8ffcbe8a355c.json";

var pl = "/services/v4/web/voting/ui/vote/resources/messagebundle_pl.6cd59d32e72c298e.json";

var pt = "/services/v4/web/voting/ui/vote/resources/messagebundle_pt.2c1d8ef6246adb51.json";

var ro = "/services/v4/web/voting/ui/vote/resources/messagebundle_ro.fb81096a3806a008.json";

var ru = "/services/v4/web/voting/ui/vote/resources/messagebundle_ru.d749fe9a4410804b.json";

var sh = "/services/v4/web/voting/ui/vote/resources/messagebundle_sh.916eebfe6e3f1a59.json";

var sk = "/services/v4/web/voting/ui/vote/resources/messagebundle_sk.8974857bc54ff0cd.json";

var sl = "/services/v4/web/voting/ui/vote/resources/messagebundle_sl.641196e022a3f742.json";

var sv = "/services/v4/web/voting/ui/vote/resources/messagebundle_sv.80f494abf30df0c1.json";

var th = "/services/v4/web/voting/ui/vote/resources/messagebundle_th.379bcb24bcfc7df4.json";

var tr = "/services/v4/web/voting/ui/vote/resources/messagebundle_tr.afe04d29d9dba0d7.json";

var uk = "/services/v4/web/voting/ui/vote/resources/messagebundle_uk.4afab4a3f061d588.json";

var vi = "/services/v4/web/voting/ui/vote/resources/messagebundle_vi.2c80623c96bff00a.json";

var zhCN = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_CN.aacf4602bca2861e.json";

var zhTW = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_TW.e049f5a95536f343.json";

const bundleMap = {
	ar,
	bg,
	ca,
	cs,
	da,
	de,
	el,
	en,
	es,
	et,
	fi,
	fr,
	hi,
	hr,
	hu,
	it,
	iw,
	ja,
	kk,
	ko,
	lt,
	lv,
	ms,
	nl,
	no,
	pl,
	pt,
	ro,
	ru,
	sh,
	sk,
	sl,
	sv,
	th,
	tr,
	uk,
	vi,
	zh_CN: zhCN,
	zh_TW: zhTW,
};

const allEntriesInlined = Object.entries(bundleMap).every(([_key, value]) => typeof (value) === "object");

/* eslint-disable */
if (allEntriesInlined) {
	console.warn(`Inefficient bundling detected: consider bundling i18n imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}
/* eslint-enable */

registerI18nBundle("@ui5/webcomponents-icons", bundleMap);

const getSingletonElementInstance = (tag, parentElement = document.body) => {
	let el = document.querySelector(tag);

	if (el) {
		return el;
	}

	el = document.createElement(tag);

	return parentElement.insertBefore(el, parentElement.firstChild);
};

const getSharedResourcesInstance = () => getSingletonElementInstance("ui5-shared-resources", document.head);

/**
 * Use this method to initialize/get resources that you would like to be shared among UI5 Web Components runtime instances.
 * The data will be accessed via a singleton "ui5-shared-resources" HTML element in the "head" element of the page.
 *
 * @public
 * @param namespace Unique ID of the resource, may contain "." to denote hierarchy
 * @param initialValue Object or primitive that will be used as an initial value if the resource does not exist
 * @returns {*}
 */
const getSharedResource = (namespace, initialValue) => {
	const parts = namespace.split(".");
	let current = getSharedResourcesInstance();

	for (let i = 0; i < parts.length; i++) {
		const part = parts[i];
		const lastPart = i === parts.length - 1;
		if (!Object.prototype.hasOwnProperty.call(current, part)) {
			current[part] = lastPart ? initialValue : {};
		}
		current = current[part];
	}

	return current;
};

const registry = getSharedResource("SVGIcons.registry", new Map());
const iconCollectionPromises = getSharedResource("SVGIcons.promises", new Map());

const ICON_NOT_FOUND = "ICON_NOT_FOUND";
const DEFAULT_COLLECTION = "SAP-icons";

const calcKey = (name, collection) => {
	// silently support ui5-compatible URIs
	if (name.startsWith("sap-icon://")) {
		name = name.replace("sap-icon://", "");
		[name, collection] = name.split("/").reverse();
	}
	collection = collection || DEFAULT_COLLECTION;
	return `${collection}:${name}`;
};

const registerIcon = (name, { pathData, ltr, accData, collection } = {}) => { // eslint-disable-line
	const key = calcKey(name, collection);
	registry.set(key, { pathData, ltr, accData });
};

const getIconDataSync = (name, collection = DEFAULT_COLLECTION) => {
	const key = calcKey(name, collection);
	return registry.get(key);
};

const getIconData = async (name, collection = DEFAULT_COLLECTION) => {
	const key = calcKey(name, collection);

	if (!iconCollectionPromises.has(collection)) {
		iconCollectionPromises.set(collection, Promise.resolve(ICON_NOT_FOUND));
	}

	const iconData = await iconCollectionPromises.get(collection);

	if (iconData === ICON_NOT_FOUND) {
		return iconData;
	}

	return registry.get(key);
};

const getRegisteredNames = async () => {
	if (iconCollectionPromises.has(DEFAULT_COLLECTION)) {
		await iconCollectionPromises.get(DEFAULT_COLLECTION);
	}
	return Array.from(registry.keys()).map(k => k.split(":")[1]);
};

const registerCollectionPromise = (collection, promise) => {
	iconCollectionPromises.set(collection, promise);
};

const registerIconBundle = async (collectionName, bundleData) => {
	let resolveFn;
	const collectionFetched = new Promise(resolve => {
		resolveFn = resolve;
	});
	registerCollectionPromise(collectionName, collectionFetched);

	if (typeof bundleData !== "object") { // not inlined from build -> fetch it
		bundleData = await fetchJsonOnce(getEffectiveAssetPath(bundleData));
	}
	fillRegistry(bundleData);
	resolveFn();
};

const fillRegistry = bundleData => {
	Object.keys(bundleData.data).forEach(iconName => {
		const iconData = bundleData.data[iconName];

		registerIcon(iconName, {
			pathData: iconData.path,
			ltr: iconData.ltr,
			accData: iconData.acc,
			collection: bundleData.collection,
		 });
	});
};

var SAPIcons = "/services/v4/web/voting/ui/vote/resources/SAP-icons.6dfb44c5a9373ee7.json";

registerIconBundle("SAP-icons", SAPIcons);

var ar$1 = "/services/v4/web/voting/ui/vote/resources/ar.43441c1da168c24d.json";

var ar_EG = "/services/v4/web/voting/ui/vote/resources/ar_EG.2c9d7bc8c6cc480e.json";

var ar_SA = "/services/v4/web/voting/ui/vote/resources/ar_SA.5a58dac7851f3491.json";

var bg$1 = "/services/v4/web/voting/ui/vote/resources/bg.ed8d32010cf321a6.json";

var ca$1 = "/services/v4/web/voting/ui/vote/resources/ca.e7ad42298985cd11.json";

var cs$1 = "/services/v4/web/voting/ui/vote/resources/cs.9c679acdc4b03e38.json";

var da$1 = "/services/v4/web/voting/ui/vote/resources/da.ba9951ef39b201a6.json";

var de$1 = "/services/v4/web/voting/ui/vote/resources/de.6caccc36abcd1ecf.json";

var de_AT = "/services/v4/web/voting/ui/vote/resources/de_AT.0f4ffe37737725a0.json";

var de_CH = "/services/v4/web/voting/ui/vote/resources/de_CH.c148cbc7ceb1a7a5.json";

var el$1 = "/services/v4/web/voting/ui/vote/resources/el.11c4c67dcb9fadcc.json";

var el_CY = "/services/v4/web/voting/ui/vote/resources/el_CY.ed3bddd6e79dc343.json";

var en$1 = "/services/v4/web/voting/ui/vote/resources/en.c4465af466100b5b.json";

var en_AU = "/services/v4/web/voting/ui/vote/resources/en_AU.5cb9fccc9ce24663.json";

var en_GB = "/services/v4/web/voting/ui/vote/resources/en_GB.e31daeeb57c2f1d1.json";

var en_HK = "/services/v4/web/voting/ui/vote/resources/en_HK.0a22405bb092bec2.json";

var en_IE = "/services/v4/web/voting/ui/vote/resources/en_IE.6a062df10dabdb1c.json";

var en_IN = "/services/v4/web/voting/ui/vote/resources/en_IN.bfd20b07e9079267.json";

var en_NZ = "/services/v4/web/voting/ui/vote/resources/en_NZ.18303e8298e4752a.json";

var en_PG = "/services/v4/web/voting/ui/vote/resources/en_PG.9f604c968f3ab77e.json";

var en_SG = "/services/v4/web/voting/ui/vote/resources/en_SG.cc59a6a409e1617e.json";

var en_ZA = "/services/v4/web/voting/ui/vote/resources/en_ZA.198f9641a502d660.json";

var es$1 = "/services/v4/web/voting/ui/vote/resources/es.c10bf80f473caf30.json";

var es_AR = "/services/v4/web/voting/ui/vote/resources/es_AR.7708d7dd7a6d2a15.json";

var es_BO = "/services/v4/web/voting/ui/vote/resources/es_BO.4a1616d9f3425fba.json";

var es_CL = "/services/v4/web/voting/ui/vote/resources/es_CL.5637126713317a15.json";

var es_CO = "/services/v4/web/voting/ui/vote/resources/es_CO.c9436572ca8f4da8.json";

var es_MX = "/services/v4/web/voting/ui/vote/resources/es_MX.b4bce7dc951eb8f4.json";

var es_PE = "/services/v4/web/voting/ui/vote/resources/es_PE.65f448fde1f0de13.json";

var es_UY = "/services/v4/web/voting/ui/vote/resources/es_UY.9ec44031491e9b95.json";

var es_VE = "/services/v4/web/voting/ui/vote/resources/es_VE.152233c7f57ecdab.json";

var et$1 = "/services/v4/web/voting/ui/vote/resources/et.bbc93e8a17832e8f.json";

var fa = "/services/v4/web/voting/ui/vote/resources/fa.083b927b3586b3a3.json";

var fi$1 = "/services/v4/web/voting/ui/vote/resources/fi.1b4c89f38783556e.json";

var fr$1 = "/services/v4/web/voting/ui/vote/resources/fr.ddbb9df1e0bdb6ac.json";

var fr_BE = "/services/v4/web/voting/ui/vote/resources/fr_BE.bf3609280b7b93ee.json";

var fr_CA = "/services/v4/web/voting/ui/vote/resources/fr_CA.b64d0bcd23a5cd3e.json";

var fr_CH = "/services/v4/web/voting/ui/vote/resources/fr_CH.349b221a02887244.json";

var fr_LU = "/services/v4/web/voting/ui/vote/resources/fr_LU.ef7d7c8bb3328d28.json";

var he = "/services/v4/web/voting/ui/vote/resources/he.d628e8bf13a8a2c8.json";

var hi$1 = "/services/v4/web/voting/ui/vote/resources/hi.cc34df8229f656f5.json";

var hr$1 = "/services/v4/web/voting/ui/vote/resources/hr.c920290f50173516.json";

var hu$1 = "/services/v4/web/voting/ui/vote/resources/hu.2d9fa4a9163cd7c0.json";

var id = "/services/v4/web/voting/ui/vote/resources/id.163fdd2a7dbd1dd3.json";

var it$1 = "/services/v4/web/voting/ui/vote/resources/it.b5acbefdd6794dfc.json";

var it_CH = "/services/v4/web/voting/ui/vote/resources/it_CH.ade4cbfb2e49424a.json";

var ja$1 = "/services/v4/web/voting/ui/vote/resources/ja.d882fade5c3e04b5.json";

var kk$1 = "/services/v4/web/voting/ui/vote/resources/kk.ab96b18c66676a99.json";

var ko$1 = "/services/v4/web/voting/ui/vote/resources/ko.a0d63a1580dcbefd.json";

var lt$1 = "/services/v4/web/voting/ui/vote/resources/lt.93bb00f91a74d613.json";

var lv$1 = "/services/v4/web/voting/ui/vote/resources/lv.3c272216d7d4d61c.json";

var ms$1 = "/services/v4/web/voting/ui/vote/resources/ms.e26b54937e5d1516.json";

var nb = "/services/v4/web/voting/ui/vote/resources/nb.a6e9993590a73989.json";

var nl$1 = "/services/v4/web/voting/ui/vote/resources/nl.cac914c3529b7b01.json";

var nl_BE = "/services/v4/web/voting/ui/vote/resources/nl_BE.a3ac6f9f99feba7b.json";

var pl$1 = "/services/v4/web/voting/ui/vote/resources/pl.2cc1c94da23f8c37.json";

var pt$1 = "/services/v4/web/voting/ui/vote/resources/pt.fc8dd9656bc363a4.json";

var pt_PT = "/services/v4/web/voting/ui/vote/resources/pt_PT.be31b641eedfdb48.json";

var ro$1 = "/services/v4/web/voting/ui/vote/resources/ro.fc6a48bc63cf435e.json";

var ru$1 = "/services/v4/web/voting/ui/vote/resources/ru.77f0de46b3b490b1.json";

var ru_UA = "/services/v4/web/voting/ui/vote/resources/ru_UA.4c4e0034fbd799c6.json";

var sk$1 = "/services/v4/web/voting/ui/vote/resources/sk.0d62a8cca83c1dec.json";

var sl$1 = "/services/v4/web/voting/ui/vote/resources/sl.7b303551cc238560.json";

var sr = "/services/v4/web/voting/ui/vote/resources/sr.7fb9ac6ed054ff7d.json";

var sv$1 = "/services/v4/web/voting/ui/vote/resources/sv.6ea04dfd8d1c331b.json";

var th$1 = "/services/v4/web/voting/ui/vote/resources/th.8e8d734a66ed1c51.json";

var tr$1 = "/services/v4/web/voting/ui/vote/resources/tr.dbb9aa836fc4e3f5.json";

var uk$1 = "/services/v4/web/voting/ui/vote/resources/uk.4854089f0c12f77c.json";

var vi$1 = "/services/v4/web/voting/ui/vote/resources/vi.e6ffbde0643d7d75.json";

var zh_CN = "/services/v4/web/voting/ui/vote/resources/zh_CN.6607a3e9e0901e53.json";

var zh_HK = "/services/v4/web/voting/ui/vote/resources/zh_HK.1c2563d3e4dad56e.json";

var zh_SG = "/services/v4/web/voting/ui/vote/resources/zh_SG.db7f1334eecf894d.json";

var zh_TW = "/services/v4/web/voting/ui/vote/resources/zh_TW.a1d00dd87c58d8f0.json";

const cldrData$1 = {
	ar: ar$1,ar_EG,ar_SA,bg: bg$1,ca: ca$1,cs: cs$1,da: da$1,de: de$1,de_AT,de_CH,el: el$1,el_CY,en: en$1,en_AU,en_GB,en_HK,en_IE,en_IN,en_NZ,en_PG,en_SG,en_ZA,es: es$1,es_AR,es_BO,es_CL,es_CO,es_MX,es_PE,es_UY,es_VE,et: et$1,fa,fi: fi$1,fr: fr$1,fr_BE,fr_CA,fr_CH,fr_LU,he,hi: hi$1,hr: hr$1,hu: hu$1,id,it: it$1,it_CH,ja: ja$1,kk: kk$1,ko: ko$1,lt: lt$1,lv: lv$1,ms: ms$1,nb,nl: nl$1,nl_BE,pl: pl$1,pt: pt$1,pt_PT,ro: ro$1,ru: ru$1,ru_UA,sk: sk$1,sl: sl$1,sr,sv: sv$1,th: th$1,tr: tr$1,uk: uk$1,vi: vi$1,zh_CN,zh_HK,zh_SG,zh_TW
};

const allEntriesInlined$1 = Object.entries(cldrData$1).every(([_key, value]) => typeof (value) === "object");

if (allEntriesInlined$1) {
	console.warn(`Inefficient bundling detected: consider bundling CLDR imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}


Object.entries(cldrData$1).forEach(([key, value]) => {
	if (typeof (value) === "object") {
		setCldrData(key, value);
	} else {
		registerCldr(key, value);
	}
});

var sap_belize = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.6c6e759e0d3534d0.json";

var sap_belize_hcb = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.dfd19a1252497415.json";

var sap_belize_hcw = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.e2ac94de83159e1e.json";

var sap_fiori_3_dark = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.e19065174fdd4592.json";

var sap_fiori_3_hcb = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.966b2e43c0966351.json";

var sap_fiori_3_hcw = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.8cc66e917327b7a4.json";

const isInlined = obj => typeof (obj) === "object";

if (isInlined(sap_belize) || isInlined(sap_belize_hcb) || isInlined(sap_belize_hcw) || isInlined(sap_fiori_3_dark) || isInlined(sap_fiori_3_hcb) || isInlined(sap_fiori_3_hcw)) {
	console.warn(`Inefficient bundling detected: consider bundling theme properties imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_belize", sap_belize);
registerThemeProperties("@ui5/webcomponents-theme-base", "sap_belize_hcb", sap_belize_hcb);
registerThemeProperties("@ui5/webcomponents-theme-base", "sap_belize_hcw", sap_belize_hcw);
registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3_dark", sap_fiori_3_dark);
registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3_hcb", sap_fiori_3_hcb);
registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3_hcw", sap_fiori_3_hcw);

var sap_belize$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.6bd46d026b8bc33d.json";

var sap_belize_hcb$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.62a3e9278bf3ab2c.json";

var sap_belize_hcw$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.cf495b6c5efd2239.json";

var sap_fiori_3_dark$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.5fc6adeb83de27fd.json";

var sap_fiori_3_hcb$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.83190bcda73c33c1.json";

var sap_fiori_3_hcw$1 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.48c7e95c97cef611.json";

const isInlined$1 = obj => typeof (obj) === "object";

if (isInlined$1(sap_belize$1) || isInlined$1(sap_belize_hcb$1) || isInlined$1(sap_belize_hcw$1) || isInlined$1(sap_fiori_3_dark$1) || isInlined$1(sap_fiori_3_hcb$1) || isInlined$1(sap_fiori_3_hcw$1)) {
	console.warn(`Inefficient bundling detected: consider bundling theme properties imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}

registerThemeProperties("@ui5/webcomponents", "sap_belize", sap_belize$1);
registerThemeProperties("@ui5/webcomponents", "sap_belize_hcb", sap_belize_hcb$1);
registerThemeProperties("@ui5/webcomponents", "sap_belize_hcw", sap_belize_hcw$1);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3_dark", sap_fiori_3_dark$1);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3_hcb", sap_fiori_3_hcb$1);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3_hcw", sap_fiori_3_hcw$1);

var ar$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ar.d20c665dc46a6f9b.json";

var bg$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_bg.38428028ff3b1869.json";

var ca$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ca.c46423cc94896604.json";

var cs$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_cs.d9d68b2690954b4e.json";

var da$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_da.1189e997523b89f6.json";

var de$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_de.1edf86f620dd657a.json";

var el$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_el.b0d02877b9366e9a.json";

var en$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_en.523661a217059d99.json";

var es$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_es.43fc364a8be37449.json";

var et$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_et.8f9abcfab5eb10c2.json";

var fi$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_fi.6fc14fd0d16cc223.json";

var fr$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_fr.c686ab9036b91d78.json";

var hi$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hi.8b8cbc4fb282adf6.json";

var hr$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hr.bb811aa76359724a.json";

var hu$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hu.18417ced7dce8cf7.json";

var it$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_it.554f904c106ab069.json";

var iw$1 = "/services/v4/web/voting/ui/vote/resources/messagebundle_iw.487febe0c5c504ff.json";

var ja$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ja.68cf1fa9f03cd6c3.json";

var kk$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_kk.36e63b8f9e1fd98f.json";

var ko$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ko.fb000c7a35009d21.json";

var lt$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_lt.6acd357e3eb3f54e.json";

var lv$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_lv.3ffdda1a20bc15ec.json";

var ms$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ms.218aa30a3e8f58fa.json";

var nl$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_nl.f753744c7e08b3a5.json";

var no$1 = "/services/v4/web/voting/ui/vote/resources/messagebundle_no.385f0fc9f2e49ab5.json";

var pl$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_pl.6c42672479ad9687.json";

var pt$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_pt.ede162cbf79f7fca.json";

var ro$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ro.d3f32654c57588ea.json";

var ru$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ru.0ec083b64484a12d.json";

var sh$1 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sh.98cd3e4299919a30.json";

var sk$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sk.fddb8b9e7b70fc1d.json";

var sl$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sl.c55d5f817482ea06.json";

var sv$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sv.6d855a11d20b4335.json";

var th$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_th.e791b9a81f16120c.json";

var tr$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_tr.ce83741e39606b55.json";

var uk$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_uk.e1ea822764025a5a.json";

var vi$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_vi.7ee7339211750379.json";

var zh_CN$1 = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_CN.0cfd71faba640211.json";

var zh_TW$1 = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_TW.bc718e0187728a16.json";

const bundleMap$1 = {
	ar: ar$2,
	bg: bg$2,
	ca: ca$2,
	cs: cs$2,
	da: da$2,
	de: de$2,
	el: el$2,
	en: en$2,
	es: es$2,
	et: et$2,
	fi: fi$2,
	fr: fr$2,
	hi: hi$2,
	hr: hr$2,
	hu: hu$2,
	it: it$2,
	iw: iw$1,
	ja: ja$2,
	kk: kk$2,
	ko: ko$2,
	lt: lt$2,
	lv: lv$2,
	ms: ms$2,
	nl: nl$2,
	no: no$1,
	pl: pl$2,
	pt: pt$2,
	ro: ro$2,
	ru: ru$2,
	sh: sh$1,
	sk: sk$2,
	sl: sl$2,
	sv: sv$2,
	th: th$2,
	tr: tr$2,
	uk: uk$2,
	vi: vi$2,
	zh_CN: zh_CN$1,
	zh_TW: zh_TW$1,
};

const allEntriesInlined$2 = Object.entries(bundleMap$1).every(([_key, value]) => typeof (value) === "object");

if (allEntriesInlined$2) {
	console.warn(`Inefficient bundling detected: consider bundling i18n imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}

registerI18nBundle("@ui5/webcomponents", bundleMap$1);

class FormSupport {
	/**
	 *
	 * @param element - the WebComponent that needs form support
	 * @param nativeInputUpdateCallback - determines how the native input's disabled and value properties are calculated
	 */
	static syncNativeHiddenInput(element, nativeInputUpdateCallback) {
		const needsNativeInput = !!element.name;
		let nativeInput = element.querySelector("input[type=hidden][data-ui5-form-support]");
		if (needsNativeInput && !nativeInput) {
			nativeInput = document.createElement("input");
			nativeInput.type = "hidden";
			nativeInput.setAttribute("data-ui5-form-support", "");
			nativeInput.slot = "formSupport"; // Needed for IE - otherwise input elements are not part of the real DOM tree and are not detected by forms
			element.appendChild(nativeInput);
		}
		if (!needsNativeInput && nativeInput) {
			element.removeChild(nativeInput);
		}

		if (needsNativeInput) {
			nativeInput.name = element.name;
			(nativeInputUpdateCallback || copyDefaultProperties)(element, nativeInput);
		}
	}

	static syncNativeFileInput(element, nativeInputUpdateCallback, nativeInputChangeCallback) {
		const needsNativeInput = !!element.name;
		let nativeInput = element.querySelector(`input[type=${element._type || "hidden"}][data-ui5-form-support]`);

		if (needsNativeInput && !nativeInput) {
			nativeInput = document.createElement("input");
			nativeInput.type = element._type;
			nativeInput.setAttribute("data-ui5-form-support", "");
			nativeInput.slot = "formSupport"; // Needed to visualize the input in the light dom
			nativeInput.style.position = "absolute";
			nativeInput.style.top = "0";
			nativeInput.style.left = "0";
			nativeInput.style.width = "100%";
			nativeInput.style.height = "100%";
			nativeInput.style.opacity = "0";

			if (element.multiple) {
				nativeInput.multiple = true;
			}

			nativeInput.addEventListener("change", nativeInputChangeCallback);

			element.appendChild(nativeInput);
		}

		if (!needsNativeInput && nativeInput) {
			element.removeChild(nativeInput);
		}

		if (needsNativeInput) {
			nativeInput.name = element.name;
			(nativeInputUpdateCallback || copyDefaultProperties)(element, nativeInput);
		}
	}

	static triggerFormSubmit(element) {
		if (!element.submits) {
			return;
		}
		let currentElement = element.parentElement;
		while (currentElement && currentElement.tagName.toLowerCase() !== "form") {
			currentElement = currentElement.parentElement;
		}
		if (currentElement) {
			currentElement.submit();
		} else {
			console.error(`${element} is not within a form. Please add it in a form.`); // eslint-disable-line
		}
	}
}


const copyDefaultProperties = (element, nativeInput) => {
	nativeInput.disabled = element.disabled;
	nativeInput.value = element.value;
};

// Add form support to the global features registry so that Web Components can find and use it
registerFeature("FormSupport", FormSupport);

const messageFormatRegEX = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\{([0-9]+(?:\s*,[^{}]*)?)\}|[{}]/g;

const formatMessage = (text, values) => {
	values = values || [];

	return text.replace(messageFormatRegEX, ($0, $1, $2, $3, offset) => {
		if ($1) {
			return '\''; /* eslint-disable-line */
		}

		if ($2) {
			return $2.replace(/''/g, '\''); /* eslint-disable-line */
		}

		if ($3) {
			return String(values[parseInt($3)]);
		}

		throw new Error(`[i18n]: pattern syntax error at pos ${offset}`);
	});
};

const I18nBundleInstances = new Map();

/**
 * @class
 * @public
 */
class I18nBundle {
	constructor(packageName) {
		this.packageName = packageName;
	}

	/**
	 * Returns a text in the currently loaded language
	 *
	 * @param {Object|String} textObj key/defaultText pair or just the key
	 * @param params Values for the placeholders
	 * @returns {*}
	 */
	getText(textObj, ...params) {
		if (typeof textObj === "string") {
			textObj = { key: textObj, defaultText: textObj };
		}

		if (!textObj || !textObj.key) {
			return "";
		}

		const bundle = getI18nBundleData(this.packageName);
		const messageText = bundle && bundle[textObj.key] ? bundle[textObj.key] : (textObj.defaultText || textObj.key);

		return formatMessage(messageText, params);
	}
}

const getI18nBundle = packageName => {
	if (I18nBundleInstances.has(packageName)) {
		return I18nBundleInstances.get(packageName);
	}

	const i18nBundle = new I18nBundle(packageName);
	I18nBundleInstances.set(packageName, i18nBundle);
	return i18nBundle;
};

const whenDOMReady = () => {
	return new Promise(resolve => {
		if (document.body) {
			resolve();
		} else {
			document.addEventListener("DOMContentLoaded", () => {
				resolve();
			});
		}
	});
};

/**
 * CSS font face used for the texts provided by SAP.
 */

/* CDN Locations */
const font72RegularWoff = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Regular.woff?ui5-webcomponents`;
const font72RegularWoff2 = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Regular.woff2?ui5-webcomponents`;

const font72RegularFullWoff = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Regular-full.woff?ui5-webcomponents`;
const font72RegularFullWoff2 = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Regular-full.woff2?ui5-webcomponents`;

const font72BoldWoff = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Bold.woff?ui5-webcomponents`;
const font72BoldWoff2 = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Bold.woff2?ui5-webcomponents`;

const font72BoldFullWoff = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Bold-full.woff?ui5-webcomponents`;
const font72BoldFullWoff2 = `https://ui5.sap.com/sdk/resources/sap/ui/core/themes/sap_fiori_3/fonts/72-Bold-full.woff2?ui5-webcomponents`;

const fontFaceCSS = `
	@font-face {
		font-family: "72";
		font-style: normal;
		font-weight: 400;
		src: local("72"),
			url(${font72RegularWoff2}) format("woff2"),
			url(${font72RegularWoff}) format("woff");
	}
	
	@font-face {
		font-family: "72full";
		font-style: normal;
		font-weight: 400;
		src: local('72-full'),
			url(${font72RegularFullWoff2}) format("woff2"),
			url(${font72RegularFullWoff}) format("woff");
		
	}
	
	@font-face {
		font-family: "72";
		font-style: normal;
		font-weight: 700;
		src: local('72-Bold'),
			url(${font72BoldWoff2}) format("woff2"),
			url(${font72BoldWoff}) format("woff");
	}
	
	@font-face {
		font-family: "72full";
		font-style: normal;
		font-weight: 700;
		src: local('72-Bold-full'),
			url(${font72BoldFullWoff2}) format("woff2"),
			url(${font72BoldFullWoff}) format("woff");
	}
`;

/**
 * Some diacritics are supported by the 72 font:
 *  * Grave
 *  * Acute
 *  * Circumflex
 *  * Tilde
 *
 * However, the following diacritics and the combination of multiple diacritics (including the supported ones) are not supported:
 *  * Breve
 *  * Horn
 *  * Dot below
 *  * Hook above
 *
 *
 * Override for the characters that aren't covered by the '72' font to other system fonts
 *
 * U+0102-0103: A and a with Breve
 * U+01A0-01A1: O and o with Horn
 * U+01AF-01B0: U and u with Horn
 * U+1EA0-1EB7: A and a with diacritics that are not supported by the font and combination of multiple diacritics
 * U+1EB8-1EC7: E and e with diacritics that are not supported by the font and combination of multiple diacritics
 * U+1EC8-1ECB: I and i with diacritics that are not supported by the font and combination of multiple diacritics
 * U+1ECC-1EE3: O and o with diacritics that are not supported by the font and combination of multiple diacritics
 * U+1EE4-1EF1: U and u with diacritics that are not supported by the font and combination of multiple diacritics
 * U+1EF4-1EF7: Y and y with diacritics that are not supported by the font and combination of multiple diacritics
 *
 */
const overrideFontFaceCSS = `
	@font-face {
		font-family: '72override';
		unicode-range: U+0102-0103, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EB7, U+1EB8-1EC7, U+1EC8-1ECB, U+1ECC-1EE3, U+1EE4-1EF1, U+1EF4-1EF7;
		src: local('Arial'), local('Helvetica'), local('sans-serif');
	}
`;

const insertFontFace = () => {
	const OpenUI5Support = getFeature("OpenUI5Support");

	// Only set the main font if there is no OpenUI5 support, or there is, but OpenUI5 is not loaded
	if (!OpenUI5Support || !OpenUI5Support.isLoaded()) {
		insertMainFontFace();
	}

	// Always set the override font - OpenUI5 in CSS Vars mode does not set it, unlike the main font
	insertOverrideFontFace();
};

const insertMainFontFace = () => {
	if (!document.querySelector(`head>style[data-ui5-font-face]`)) {
		createStyleInHead(fontFaceCSS, { "data-ui5-font-face": "" });
	}
};

const insertOverrideFontFace = () => {
	if (!document.querySelector(`head>style[data-ui5-font-face-override]`)) {
		createStyleInHead(overrideFontFaceCSS, { "data-ui5-font-face-override": "" });
	}
};

const systemCSSVars = `
	:root {
		--_ui5_content_density:cozy;
	}
	
	[data-ui5-compact-size],
	.ui5-content-density-compact,
	.sapUiSizeCompact {
		--_ui5_content_density:compact;
	}
	
	[dir="rtl"] {
		--_ui5_dir:rtl;
	}
	
	[dir="ltr"] {
		--_ui5_dir:ltr;
	}
`;

const insertSystemCSSVars = () => {
	if (document.querySelector(`head>style[data-ui5-system-css-vars]`)) {
		return;
	}

	createStyleInHead(systemCSSVars, { "data-ui5-system-css-vars": "" });
};

let polyfillLoadedPromise;

const whenPolyfillLoaded = () => {
	if (polyfillLoadedPromise) {
		return polyfillLoadedPromise;
	}

	polyfillLoadedPromise = new Promise(resolve => {
		if (window.WebComponents
			&& !window.WebComponents.ready
			&& window.WebComponents.waitFor) {
			// the polyfill loader is present
			window.WebComponents.waitFor(() => {
				// the polyfills are loaded, safe to execute code depending on their APIs
				resolve();
			});
		} else {
			// polyfill loader missing, modern browsers only
			resolve();
		}
	});

	return polyfillLoadedPromise;
};

let bootPromise;

const boot = () => {
	if (bootPromise) {
		return bootPromise;
	}

	bootPromise = new Promise(async resolve => {
		const OpenUI5Support = getFeature("OpenUI5Support");
		if (OpenUI5Support) {
			await OpenUI5Support.init();
		}

		await whenDOMReady();
		await applyTheme(getTheme$1());
		OpenUI5Support && OpenUI5Support.attachListeners();
		insertFontFace();
		insertSystemCSSVars();
		await whenPolyfillLoaded();
		resolve();
	});

	return bootPromise;
};

const isDescendantOf = (klass, baseKlass, inclusive = false) => {
	if (typeof klass !== "function" || typeof baseKlass !== "function") {
		return false;
	}
	if (inclusive && klass === baseKlass) {
		return true;
	}
	let parent = klass;
	do {
		parent = Object.getPrototypeOf(parent);
	} while (parent !== null && parent !== baseKlass);
	return parent === baseKlass;
};

const kebabToCamelMap = new Map();
const camelToKebabMap = new Map();

const kebabToCamelCase = string => {
	if (!kebabToCamelMap.has(string)) {
		const result = toCamelCase(string.split("-"));
		kebabToCamelMap.set(string, result);
	}
	return kebabToCamelMap.get(string);
};

const camelToKebabCase = string => {
	if (!camelToKebabMap.has(string)) {
		const result = string.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
		camelToKebabMap.set(string, result);
	}
	return camelToKebabMap.get(string);
};

const toCamelCase = parts => {
	return parts.map((string, index) => {
		return index === 0 ? string.toLowerCase() : string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
	}).join("");
};

const isSlot = el => el && el instanceof HTMLElement && el.localName === "slot";

let suf;
let rulesObj = {
	include: [/^ui5-/],
	exclude: [],
};
const tagsCache = new Map(); // true/false means the tag should/should not be cached, undefined means not known yet.

/**
 * Returns the currently set scoping suffix, or undefined if not set.
 *
 * @public
 * @returns {String|undefined}
 */
const getCustomElementsScopingSuffix = () => {
	return suf;
};

/**
 * Determines whether custom elements with the given tag should be scoped or not.
 * The tag is first matched against the "include" rules and then against the "exclude" rules and the
 * result is cached until new rules are set.
 *
 * @public
 * @param tag
 */
const shouldScopeCustomElement = tag => {
	if (!tagsCache.has(tag)) {
		const result = rulesObj.include.some(rule => tag.match(rule)) && !rulesObj.exclude.some(rule => tag.match(rule));
		tagsCache.set(tag, result);
	}

	return tagsCache.get(tag);
};

/**
 * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.
 *
 * @public
 * @param tag
 * @returns {String}
 */
const getEffectiveScopingSuffixForTag = tag => {
	if (shouldScopeCustomElement(tag)) {
		return getCustomElementsScopingSuffix();
	}
};

/**
 *
 * @class
 * @public
 */
class UI5ElementMetadata {
	constructor(metadata) {
		this.metadata = metadata;
	}

	/**
	 * Only intended for use by UI5Element.js
	 * @protected
	 */
	static validatePropertyValue(value, propData) {
		const isMultiple = propData.multiple;
		if (isMultiple) {
			return value.map(propValue => validateSingleProperty(propValue, propData));
		}
		return validateSingleProperty(value, propData);
	}

	/**
	 * Only intended for use by UI5Element.js
	 * @protected
	 */
	static validateSlotValue(value, slotData) {
		return validateSingleSlot(value, slotData);
	}

	/**
	 * Returns the tag of the UI5 Element without the scope
	 * @public
	 */
	getPureTag() {
		return this.metadata.tag;
	}

	/**
	 * Returns the tag of the UI5 Element
	 * @public
	 */
	getTag() {
		const pureTag = this.metadata.tag;
		const suffix = getEffectiveScopingSuffixForTag(pureTag);
		if (!suffix) {
			return pureTag;
		}

		return `${pureTag}-${suffix}`;
	}

	/**
	 * Used to get the tag we need to register for backwards compatibility
	 * @public
	 */
	getAltTag() {
		const pureAltTag = this.metadata.altTag;
		if (!pureAltTag) {
			return;
		}

		const suffix = getEffectiveScopingSuffixForTag(pureAltTag);
		if (!suffix) {
			return pureAltTag;
		}

		return `${pureAltTag}-${suffix}`;
	}

	/**
	 * Determines whether a property should have an attribute counterpart
	 * @public
	 * @param propName
	 * @returns {boolean}
	 */
	hasAttribute(propName) {
		const propData = this.getProperties()[propName];
		return propData.type !== Object && !propData.noAttribute;
	}

	/**
	 * Returns an array with the properties of the UI5 Element (in camelCase)
	 * @public
	 * @returns {string[]}
	 */
	getPropertiesList() {
		return Object.keys(this.getProperties());
	}

	/**
	 * Returns an array with the attributes of the UI5 Element (in kebab-case)
	 * @public
	 * @returns {string[]}
	 */
	getAttributesList() {
		return this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);
	}

	/**
	 * Returns an object with key-value pairs of slots and their metadata definitions
	 * @public
	 */
	getSlots() {
		return this.metadata.slots || {};
	}

	/**
	 * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text
	 * @returns {boolean}
	 */
	canSlotText() {
		const defaultSlot = this.getSlots().default;
		return defaultSlot && defaultSlot.type === Node;
	}

	/**
	 * Determines whether this UI5 Element supports any slots
	 * @public
	 */
	hasSlots() {
		return !!Object.entries(this.getSlots()).length;
	}

	/**
	 * Determines whether this UI5 Element supports any slots with "individualSlots: true"
	 * @public
	 */
	hasIndividualSlots() {
		return this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);
	}

	/**
	 * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed
	 * @public
	 */
	slotsAreManaged() {
		return !!this.metadata.managedSlots;
	}

	/**
	 * Returns an object with key-value pairs of properties and their metadata definitions
	 * @public
	 */
	getProperties() {
		return this.metadata.properties || {};
	}

	/**
	 * Returns an object with key-value pairs of events and their metadata definitions
	 * @public
	 */
	getEvents() {
		return this.metadata.events || {};
	}

	/**
	 * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)
	 * @returns {boolean}
	 */
	isLanguageAware() {
		return !!this.metadata.languageAware;
	}
}

const validateSingleProperty = (value, propData) => {
	const propertyType = propData.type;

	if (propertyType === Boolean) {
		return typeof value === "boolean" ? value : false;
	}
	if (propertyType === String) {
		return (typeof value === "string" || typeof value === "undefined" || value === null) ? value : value.toString();
	}
	if (propertyType === Object) {
		return typeof value === "object" ? value : propData.defaultValue;
	}
	if (isDescendantOf(propertyType, DataType)) {
		return propertyType.isValid(value) ? value : propData.defaultValue;
	}
};

const validateSingleSlot = (value, slotData) => {
	if (value === null) {
		return value;
	}

	const getSlottedNodes = el => {
		if (isSlot(el)) {
			return el.assignedNodes({ flatten: true }).filter(item => item instanceof HTMLElement);
		}

		return [el];
	};

	const slottedNodes = getSlottedNodes(value);
	slottedNodes.forEach(el => {
		if (!(el instanceof slotData.type)) {
			throw new Error(`${el} is not of type ${slotData.type}`);
		}
	});

	return value;
};

/**
 * Runs a component's template with the component's current state, while also scoping HTML
 *
 * @param template - the template to execute
 * @param component - the component
 * @public
 * @returns {*}
 */
const executeTemplate = (template, component) => {
	const tagsToScope = component.constructor.getUniqueDependencies().map(dep => dep.getMetadata().getPureTag()).filter(shouldScopeCustomElement);
	const scope = getCustomElementsScopingSuffix();
	return template(component, tagsToScope, scope);
};

const getStaticAreaInstance = () => getSingletonElementInstance("ui5-static-area");

const removeStaticArea = () => {
	getStaticAreaInstance().destroy();
};

class StaticAreaElement extends HTMLElement {
	constructor() {
		super();
	}

	get isUI5Element() {
		return true;
	}

	destroy() {
		const staticAreaDomRef = document.querySelector(this.tagName.toLowerCase());
		staticAreaDomRef.parentElement.removeChild(staticAreaDomRef);
	}
}

if (!customElements.get("ui5-static-area")) {
	customElements.define("ui5-static-area", StaticAreaElement);
}

const getStylesString = styles => {
	if (Array.isArray(styles)) {
		return flatten(styles).join(" ");
	}

	return styles;
};

const flatten = arr => {
	return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatten(val) : val), []);
};

/**
 * @class
 * @author SAP SE
 * @private
 * Defines and takes care of ui5-static-are-item items
 */
class StaticAreaItem {
	constructor(_ui5ElementContext) {
		this.ui5ElementContext = _ui5ElementContext;
		this._rendered = false;
	}

	isRendered() {
		return this._rendered;
	}

	/**
	 * @protected
	 */
	_updateFragment() {
		const renderResult = executeTemplate(this.ui5ElementContext.constructor.staticAreaTemplate, this.ui5ElementContext),
			stylesToAdd = window.ShadyDOM ? false : getStylesString(this.ui5ElementContext.constructor.staticAreaStyles);

		if (!this.staticAreaItemDomRef) {
			// Initial rendering of fragment

			this.staticAreaItemDomRef = document.createElement("ui5-static-area-item");
			this.staticAreaItemDomRef.attachShadow({ mode: "open" });
			this.staticAreaItemDomRef.classList.add(this.ui5ElementContext._id); // used for getting the popover in the tests

			getStaticAreaInstance().appendChild(this.staticAreaItemDomRef);
			this._rendered = true;
		}

		this._updateContentDensity(this.ui5ElementContext.isCompact);
		this.ui5ElementContext.constructor.render(renderResult, this.staticAreaItemDomRef.shadowRoot, stylesToAdd, { eventContext: this.ui5ElementContext });
	}

	/**
	 * @protected
	 */
	_removeFragmentFromStaticArea() {
		if (!this.staticAreaItemDomRef) {
			return;
		}

		const staticArea = getStaticAreaInstance();

		staticArea.removeChild(this.staticAreaItemDomRef);

		this.staticAreaItemDomRef = null;

		// remove static area
		if (staticArea.childElementCount < 1) {
			removeStaticArea();
		}
	}

	/**
	 * @protected
	 */
	_updateContentDensity(isCompact) {
		if (!this.staticAreaItemDomRef) {
			return;
		}

		if (isCompact) {
			this.staticAreaItemDomRef.classList.add("sapUiSizeCompact");
			this.staticAreaItemDomRef.classList.add("ui5-content-density-compact");
		} else {
			this.staticAreaItemDomRef.classList.remove("sapUiSizeCompact");
			this.staticAreaItemDomRef.classList.remove("ui5-content-density-compact");
		}
	}

	/**
	 * @protected
	 * Returns reference to the DOM element where the current fragment is added.
	 */
	async getDomRef() {
		if (!this._rendered || !this.staticAreaItemDomRef) {
			this._updateFragment();
		}
		await RenderScheduler.whenDOMUpdated(); // Wait for the content of the ui5-static-area-item to be rendered
		return this.staticAreaItemDomRef && this.staticAreaItemDomRef.shadowRoot;
	}
}

class StaticAreaItemElement extends HTMLElement {
	constructor() {
		super();
	}

	get isUI5Element() {
		return true;
	}
}

if (!customElements.get("ui5-static-area-item")) {
	customElements.define("ui5-static-area-item", StaticAreaItemElement);
}

// Shorthands
const w = window;

// Map of observer objects per dom node
const observers = new WeakMap();

/**
 * Implements universal DOM node observation methods.
 */
class DOMObserver {
	constructor() {
		throw new Error("Static class");
	}

	/**
	 * This function abstracts out mutation observer usage inside shadow DOM.
	 * For native shadow DOM the native mutation observer is used.
	 * When the polyfill is used, the observeChildren ShadyDOM method is used instead.
	 *
	 * @throws Exception
	 * Note: does not allow several mutation observers per node. If there is a valid use-case, this behavior can be changed.
	 *
	 * @param node
	 * @param callback
	 * @param options - Only used for the native mutation observer
	 */
	static observeDOMNode(node, callback, options) {
		let observerObject = observers.get(node);
		if (observerObject) {
			throw new Error("A mutation/ShadyDOM observer is already assigned to this node.");
		}

		if (w.ShadyDOM) {
			observerObject = w.ShadyDOM.observeChildren(node, callback);
		} else {
			observerObject = new MutationObserver(callback);
			observerObject.observe(node, options);
		}

		observers.set(node, observerObject);
	}

	/**
	 * De-registers the mutation observer, depending on its type
	 * @param node
	 */
	static unobserveDOMNode(node) {
		const observerObject = observers.get(node);
		if (!observerObject) {
			return;
		}

		if (observerObject instanceof MutationObserver) {
			observerObject.disconnect();
		} else {
			w.ShadyDOM.unobserveChildren(observerObject);
		}
		observers.delete(node);
	}
}

// Fire these events even with noConflict: true
const excludeList = [
	"value-changed",
];

const shouldFireOriginalEvent = eventName => {
	return excludeList.includes(eventName);
};

let noConflict;

const shouldNotFireOriginalEvent = eventName => {
	const nc = getNoConflict$1();
	return !(nc.events && nc.events.includes && nc.events.includes(eventName));
};

const getNoConflict$1 = () => {
	if (noConflict === undefined) {
		noConflict = getNoConflict();
	}

	return noConflict;
};

const skipOriginalEvent = eventName => {
	const nc = getNoConflict$1();

	// Always fire these events
	if (shouldFireOriginalEvent(eventName)) {
		return false;
	}

	// Read from the configuration
	if (nc === true) {
		return true;
	}

	return !shouldNotFireOriginalEvent(eventName);
};

const setNoConflict = noConflictData => {
	noConflict = noConflictData;
};

const M_ISO639_OLD_TO_NEW$3 = {
	"iw": "he",
	"ji": "yi",
	"in": "id",
	"sh": "sr",
};

const A_RTL_LOCALES$1 = getDesigntimePropertyAsArray("$cldr-rtl-locales:ar,fa,he$") || [];

const impliesRTL = language => {
	language = (language && M_ISO639_OLD_TO_NEW$3[language]) || language;

	return A_RTL_LOCALES$1.indexOf(language) >= 0;
};

const getRTL$1 = () => {
	const configurationRTL = getRTL();

	if (configurationRTL !== null) {
		return !!configurationRTL;
	}

	return impliesRTL(getLanguage$1() || detectNavigatorLanguage());
};

const effectiveStyleMap = new Map();

attachCustomCSSChange(tag => {
	effectiveStyleMap.delete(tag);
});

const getEffectiveStyle = ElementClass => {
	const tag = ElementClass.getMetadata().getTag();

	if (!effectiveStyleMap.has(tag)) {
		const customStyle = getCustomCSS(tag) || "";
		const builtInStyles = getStylesString(ElementClass.styles);
		const effectiveStyle = `${builtInStyles} ${customStyle}`;
		effectiveStyleMap.set(tag, effectiveStyle);
	}

	return effectiveStyleMap.get(tag);
};

const constructableStyleMap = new Map();

attachCustomCSSChange(tag => {
	constructableStyleMap.delete(tag);
});

/**
 * Returns (and caches) a constructable style sheet for a web component class
 * Note: Chrome
 * @param ElementClass
 * @returns {*}
 */
const getConstructableStyle = ElementClass => {
	const tag = ElementClass.getMetadata().getTag();

	if (!constructableStyleMap.has(tag)) {
		const styleContent = getEffectiveStyle(ElementClass);
		const style = new CSSStyleSheet();
		style.replaceSync(styleContent);
		constructableStyleMap.set(tag, [style]);
	}

	return constructableStyleMap.get(tag);
};

const findClosingParenthesisPos = (str, openingParenthesisPos) => {
	let opened = 1;
	for (let pos = openingParenthesisPos + 1; pos < str.length; pos++) {
		const char = str.charAt(pos);
		if (char === "(") {
			opened++;
		} else if (char === ")") {
			opened--;
		}
		if (opened === 0) {
			return pos;
		}
	}
};

const replaceSelector = (str, selector, selectorStartPos, replacement) => {
	const charAfterSelectorPos = selectorStartPos + selector.length;
	const charAfterSelector = str.charAt(charAfterSelectorPos);

	const upToSelector = str.substring(0, selectorStartPos) + replacement;
	if (charAfterSelector === "(") {
		const closingParenthesisPos = findClosingParenthesisPos(str, charAfterSelectorPos);
		return upToSelector + str.substring(charAfterSelectorPos + 1, closingParenthesisPos) + str.substring(closingParenthesisPos + 1);
	}

	return upToSelector + str.substring(charAfterSelectorPos);
};

/**
 * :host => ui5-button
 * :host([expr]) => ui5-button[expr]
 * ::slotted(expr) => expr
 * @param str - source string
 * @param selector - :host or ::slotted
 * @param replacement - normally tag name
 * @returns {*}
 */
const replaceSelectors = (str, selector, replacement) => {
	let selectorStartPos = str.indexOf(selector);
	while (selectorStartPos !== -1) {
		str = replaceSelector(str, selector, selectorStartPos, replacement);
		selectorStartPos = str.indexOf(selector);
	}
	return str;
};

const adaptLinePart = (line, tag, pureTag) => {
	line = line.trim();
	line = replaceSelectors(line, "::slotted", ``); // first remove all ::slotted() occurrences

	// Host selector - replace it
	if (line.startsWith(":host")) {
		return replaceSelector(line, ":host", 0, tag);
	}

	// Leave out @keyframes and keyframe values (0%, 100%, etc...)
	// csso shortens '100%' -> 'to', make sure to leave it untouched
	if (line.match(/^[@0-9]/) || line === "to" || line === "to{") {
		return line;
	}

	// IE specific selector (directly written with the tag, f.e. ui5-button {}) - keep it
	if (line.match(new RegExp(`^${tag}[^a-zA-Z0-9-]`))) {
		return line;
	}

	// IE specific selector (directly written with the tag attribute, f.e. [ui5-button] {}) - keep it
	if (pureTag && line.startsWith(`[${pureTag}]`)) {
		return line;
	}

	// No host and no tag in the beginning of the selector - prepend the tag
	return `${tag} ${line}`;
};

const adaptCSSForIE = (str, tag, pureTag) => {
	str = str.replace(/\n/g, ` `);
	str = str.replace(/([{}])/g, `$1\n`);
	let result = ``;
	const lines = str.split(`\n`);
	lines.forEach(line => {
		const mustProcess = line.match(/{$/); // Only work on lines that end on {, otherwise just append to result
		if (mustProcess) {
			const lineParts = line.split(",");
			const processedLineParts = lineParts.map(linePart => {
				return adaptLinePart(linePart, tag, pureTag);
			});
			line = processedLineParts.join(",");
		}
		result = `${result}${line}`;
	});
	return result;
};

const IEStyleSet = new Set();

attachCustomCSSChange(tag => {
	IEStyleSet.delete(tag);
});

const getStaticStyle = ElementClass => {
	let componentStaticStyles = ElementClass.staticAreaStyles;
	if (Array.isArray(componentStaticStyles)) {
		componentStaticStyles = componentStaticStyles.join(" ");
	}

	return componentStaticStyles;
};

/**
 * Creates the needed CSS for a web component class in the head tag
 * Note: IE11, Edge
 * @param ElementClass
 */
const createComponentStyleTag = ElementClass => {
	const tag = ElementClass.getMetadata().getTag();
	const pureTag = ElementClass.getMetadata().getPureTag();
	if (IEStyleSet.has(tag)) {
		return;
	}

	let cssContent = getEffectiveStyle(ElementClass);
	cssContent = adaptCSSForIE(cssContent, tag, pureTag);

	// Append static CSS, if any, for IE
	let staticCssContent = getStaticStyle(ElementClass);
	if (staticCssContent) {
		staticCssContent = adaptCSSForIE(staticCssContent, "ui5-static-area-item");
		cssContent = `${cssContent} ${staticCssContent}`;
	}

	createStyleInHead(cssContent, {
		"data-ui5-element-styles": tag,
	});
	if (ponyfillNeeded()) {
		schedulePonyfill();
	}

	IEStyleSet.add(tag);
};

class Integer extends DataType {
	static isValid(value) {
		return Number.isInteger(value);
	}
}

class Float extends DataType {
	static isValid(value) {
		// Assuming that integers are floats as well!
		return Number(value) === value;
	}
}

// Note: disabled is present in IE so we explicitly allow it here.
// Others, such as title/hidden, we explicitly override, so valid too
const allowList = [
	"disabled",
	"title",
	"hidden",
	"role",
	"draggable",
];

/**
 * Checks whether a property name is valid (does not collide with existing DOM API properties)
 *
 * @param name
 * @returns {boolean}
 */
const isValidPropertyName = name => {
	if (allowList.includes(name) || name.startsWith("aria")) {
		return true;
	}
	const classes = [
		HTMLElement,
		Element,
		Node,
	];
	return !classes.some(klass => klass.prototype.hasOwnProperty(name)); // eslint-disable-line
};

const metadata = {
	events: {
		"_property-change": {},
	},
};

let autoId = 0;

const elementTimeouts = new Map();
const uniqueDependenciesCache = new Map();

const GLOBAL_CONTENT_DENSITY_CSS_VAR = "--_ui5_content_density";
const GLOBAL_DIR_CSS_VAR = "--_ui5_dir";

/**
 * Base class for all UI5 Web Components
 *
 * @class
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.base.UI5Element
 * @extends HTMLElement
 * @public
 */
class UI5Element extends HTMLElement {
	constructor() {
		super();
		this._propertyChangeListeners = new Set();
		this._initializeState();
		this._upgradeAllProperties();
		this._initializeContainers();
		this._upToDate = false;
		this._inDOM = false;
		this._fullyConnected = false;

		let deferredResolve;
		this._domRefReadyPromise = new Promise(resolve => {
			deferredResolve = resolve;
		});
		this._domRefReadyPromise._deferredResolve = deferredResolve;

		this._monitoredChildProps = new Map();
		this._shouldInvalidateParent = false;
	}

	addEventListener(type, listener, options) {
		if (type === "_property-change") {
			this._propertyChangeListeners.add(listener);
		}
		return super.addEventListener(type, listener, options);
	}

	removeEventListener(type, listener, options) {
		if (type === "_property-change") {
			this._propertyChangeListeners.delete(listener);
		}
		return super.removeEventListener(type, listener, options);
	}

	_hasPropertyChangeListeners() {
		return !!this._propertyChangeListeners.size;
	}

	/**
	 * Returns a unique ID for this UI5 Element
	 *
	 * @deprecated - This property is not guaranteed in future releases
	 * @protected
	 */
	get _id() {
		if (!this.__id) {
			this.__id = `ui5wc_${++autoId}`;
		}

		return this.__id;
	}

	/**
	 * @private
	 */
	_initializeContainers() {
		const needsShadowDOM = this.constructor._needsShadowDOM();
		const needsStaticArea = this.constructor._needsStaticArea();

		// Init Shadow Root
		if (needsShadowDOM) {
			this.attachShadow({ mode: "open" });
		}

		// Init StaticAreaItem only if needed
		if (needsStaticArea) {
			this.staticAreaItem = new StaticAreaItem(this);
		}
	}

	/**
	 * Do not call this method from derivatives of UI5Element, use "onEnterDOM" only
	 * @private
	 */
	async connectedCallback() {
		this.setAttribute(this.constructor.getMetadata().getPureTag(), "");

		const needsShadowDOM = this.constructor._needsShadowDOM();
		const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();

		this._inDOM = true;

		if (slotsAreManaged) {
			// always register the observer before yielding control to the main thread (await)
			this._startObservingDOMChildren();
			await this._processChildren();
		}

		// Render the Shadow DOM
		if (needsShadowDOM) {
			if (!this.shadowRoot) { // Workaround for Firefox74 bug
				await Promise.resolve();
			}

			if (!this._inDOM) { // Component removed from DOM while _processChildren was running
				return;
			}

			RenderScheduler.register(this);
			RenderScheduler.renderImmediately(this);
			this._domRefReadyPromise._deferredResolve();
			this._fullyConnected = true;
			if (typeof this.onEnterDOM === "function") {
				this.onEnterDOM();
			}
		}
	}

	/**
	 * Do not call this method from derivatives of UI5Element, use "onExitDOM" only
	 * @private
	 */
	disconnectedCallback() {
		const needsShadowDOM = this.constructor._needsShadowDOM();
		const needsStaticArea = this.constructor._needsStaticArea();
		const slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();

		this._inDOM = false;

		if (slotsAreManaged) {
			this._stopObservingDOMChildren();
		}

		if (needsShadowDOM) {
			RenderScheduler.deregister(this);
			if (this._fullyConnected) {
				if (typeof this.onExitDOM === "function") {
					this.onExitDOM();
				}
				this._fullyConnected = false;
			}
		}

		if (needsStaticArea) {
			this.staticAreaItem._removeFragmentFromStaticArea();
		}

		RenderScheduler.cancelRender(this);
	}

	/**
	 * @private
	 */
	_startObservingDOMChildren() {
		const shouldObserveChildren = this.constructor.getMetadata().hasSlots();
		if (!shouldObserveChildren) {
			return;
		}

		const canSlotText = this.constructor.getMetadata().canSlotText();
		const mutationObserverOptions = {
			childList: true,
			subtree: canSlotText,
			characterData: true,
		};
		DOMObserver.observeDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);
	}

	/**
	 * @private
	 */
	_stopObservingDOMChildren() {
		DOMObserver.unobserveDOMNode(this);
	}

	/**
	 * Note: this method is also manually called by "compatibility/patchNodeValue.js"
	 * @private
	 */
	async _processChildren() {
		const hasSlots = this.constructor.getMetadata().hasSlots();
		if (hasSlots) {
			await this._updateSlots();
		}
	}

	/**
	 * @private
	 */
	async _updateSlots() {
		const slotsMap = this.constructor.getMetadata().getSlots();
		const canSlotText = this.constructor.getMetadata().canSlotText();
		const domChildren = Array.from(canSlotText ? this.childNodes : this.children);

		// Init the _state object based on the supported slots
		for (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line
			this._clearSlot(slotName, slotData);
		}

		const autoIncrementMap = new Map();
		const slottedChildrenMap = new Map();

		const allChildrenUpgraded = domChildren.map(async (child, idx) => {
			// Determine the type of the child (mainly by the slot attribute)
			const slotName = this.constructor._getSlotName(child);
			const slotData = slotsMap[slotName];

			// Check if the slotName is supported
			if (slotData === undefined) {
				const validValues = Object.keys(slotsMap).join(", ");
				console.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line
				return;
			}

			// For children that need individual slots, calculate them
			if (slotData.individualSlots) {
				const nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;
				autoIncrementMap.set(slotName, nextIndex);
				child._individualSlot = `${slotName}-${nextIndex}`;
			}

			// Await for not-yet-defined custom elements
			if (child instanceof HTMLElement) {
				const localName = child.localName;
				const isCustomElement = localName.includes("-");
				if (isCustomElement) {
					const isDefined = window.customElements.get(localName);
					if (!isDefined) {
						const whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet
						let timeoutPromise = elementTimeouts.get(localName);
						if (!timeoutPromise) {
							timeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));
							elementTimeouts.set(localName, timeoutPromise);
						}
						await Promise.race([whenDefinedPromise, timeoutPromise]);
					}
					window.customElements.upgrade(child);
				}
			}

			child = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);

			if (child.isUI5Element && slotData.listenFor) {
				this._attachChildPropertyUpdated(child, slotData.listenFor);
			}

			if (child.isUI5Element && slotData.invalidateParent) {
				child._shouldInvalidateParent = true;
			}

			if (isSlot(child)) {
				this._attachSlotChange(child);
			}

			const propertyName = slotData.propertyName || slotName;

			if (slottedChildrenMap.has(propertyName)) {
				slottedChildrenMap.get(propertyName).push({ child, idx });
			} else {
				slottedChildrenMap.set(propertyName, [{ child, idx }]);
			}
		});

		await Promise.all(allChildrenUpgraded);

		// Distribute the child in the _state object, keeping the Light DOM order,
		// not the order elements are defined.
		slottedChildrenMap.forEach((children, slot) => {
			this._state[slot] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);
		});
		this._invalidate("slots");
	}

	/**
	 * Removes all children from the slot and detaches listeners, if any
	 * @private
	 */
	_clearSlot(slotName, slotData) {
		const propertyName = slotData.propertyName || slotName;

		let children = this._state[propertyName];
		if (!Array.isArray(children)) {
			children = [children];
		}

		children.forEach(child => {
			if (child && child.isUI5Element) {
				this._detachChildPropertyUpdated(child);
				child._shouldInvalidateParent = false;
			}

			if (isSlot(child)) {
				this._detachSlotChange(child);
			}
		});

		this._state[propertyName] = [];
		this._invalidate(propertyName, []);
	}

	/**
	 * Do not override this method in derivatives of UI5Element
	 * @private
	 */
	attributeChangedCallback(name, oldValue, newValue) {
		const properties = this.constructor.getMetadata().getProperties();
		const realName = name.replace(/^ui5-/, "");
		const nameInCamelCase = kebabToCamelCase(realName);
		if (properties.hasOwnProperty(nameInCamelCase)) { // eslint-disable-line
			const propertyTypeClass = properties[nameInCamelCase].type;
			if (propertyTypeClass === Boolean) {
				newValue = newValue !== null;
			}
			if (propertyTypeClass === Integer) {
				newValue = parseInt(newValue);
			}
			if (propertyTypeClass === Float) {
				newValue = parseFloat(newValue);
			}
			this[nameInCamelCase] = newValue;
		}
	}

	/**
	 * @private
	 */
	_updateAttribute(name, newValue) {
		if (!this.constructor.getMetadata().hasAttribute(name)) {
			return;
		}

		if (typeof newValue === "object") {
			return;
		}

		const attrName = camelToKebabCase(name);
		const attrValue = this.getAttribute(attrName);
		if (typeof newValue === "boolean") {
			if (newValue === true && attrValue === null) {
				this.setAttribute(attrName, "");
			} else if (newValue === false && attrValue !== null) {
				this.removeAttribute(attrName);
			}
		} else if (attrValue !== newValue) {
			this.setAttribute(attrName, newValue);
		}
	}

	/**
	 * @private
	 */
	_upgradeProperty(prop) {
		if (this.hasOwnProperty(prop)) { // eslint-disable-line
			const value = this[prop];
			delete this[prop];
			this[prop] = value;
		}
	}

	/**
	 * @private
	 */
	_upgradeAllProperties() {
		const allProps = this.constructor.getMetadata().getPropertiesList();
		allProps.forEach(this._upgradeProperty, this);
	}

	/**
	 * @private
	 */
	_initializeState() {
		const defaultState = this.constructor._getDefaultState();
		this._state = Object.assign({}, defaultState);
	}

	/**
	 * @private
	 */
	_attachChildPropertyUpdated(child, listenFor) {
		const slotName = this.constructor._getSlotName(child); // all slotted children have the same configuration

		let observedProps = [],
			notObservedProps = [];

		if (Array.isArray(listenFor)) {
			observedProps = listenFor;
		} else {
			observedProps = Array.isArray(listenFor.include) ? listenFor.include : [];
			notObservedProps = Array.isArray(listenFor.exclude) ? listenFor.exclude : [];
		}

		if (!this._monitoredChildProps.has(slotName)) {
			this._monitoredChildProps.set(slotName, { observedProps, notObservedProps });
		}

		child.addEventListener("_property-change", this._invalidateParentOnPropertyUpdate);
	}

	/**
	 * @private
	 */
	_detachChildPropertyUpdated(child) {
		child.removeEventListener("_property-change", this._invalidateParentOnPropertyUpdate);
	}

	/**
	 *  @private
	 */
	_propertyChange(name, value) {
		this._updateAttribute(name, value);

		if (this._hasPropertyChangeListeners()) {
			this.dispatchEvent(new CustomEvent("_property-change", {
				detail: { name, newValue: value },
				composed: false,
				bubbles: false,
			}));
		}
	}

	/**
	 * @private
	 */
	_invalidateParentOnPropertyUpdate(prop) {
		// The web component to be invalidated
		const parentNode = this.parentNode;
		if (!parentNode) {
			return;
		}

		const slotName = parentNode.constructor._getSlotName(this);
		const propsMetadata = parentNode._monitoredChildProps.get(slotName);

		if (!propsMetadata) {
			return;
		}
		const { observedProps, notObservedProps } = propsMetadata;

		const allPropertiesAreObserved = observedProps.length === 1 && observedProps[0] === "*";
		const shouldObserve = allPropertiesAreObserved || observedProps.includes(prop.detail.name);
		const shouldSkip = notObservedProps.includes(prop.detail.name);
		if (shouldObserve && !shouldSkip) {
			parentNode._invalidate("_parent_", this);
		}
	}

	/**
	 * @private
	 */
	_attachSlotChange(child) {
		if (!this._invalidateOnSlotChange) {
			this._invalidateOnSlotChange = () => {
				this._invalidate("slotchange");
			};
		}
		child.addEventListener("slotchange", this._invalidateOnSlotChange);
	}

	/**
	 * @private
	 */
	_detachSlotChange(child) {
		child.removeEventListener("slotchange", this._invalidateOnSlotChange);
	}

	/**
	 * Asynchronously re-renders an already rendered web component
	 * @private
	 */
	_invalidate() {
		if (this._shouldInvalidateParent) {
			this.parentNode._invalidate();
		}

		if (!this._upToDate) {
			// console.log("already invalidated", this, ...arguments);
			return;
		}

		if (this.getDomRef() && !this._suppressInvalidation) {
			this._upToDate = false;
			// console.log("INVAL", this, ...arguments);
			RenderScheduler.renderDeferred(this);
		}
	}

	/**
	 * Do not call this method directly, only intended to be called by RenderScheduler.js
	 * @protected
	 */
	_render() {
		const hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();

		// suppress invalidation to prevent state changes scheduling another rendering
		this._suppressInvalidation = true;

		if (typeof this.onBeforeRendering === "function") {
			this.onBeforeRendering();
		}

		// Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered
		if (this._onComponentStateFinalized) {
			this._onComponentStateFinalized();
		}

		// resume normal invalidation handling
		delete this._suppressInvalidation;

		// Update the shadow root with the render result
		// console.log(this.getDomRef() ? "RE-RENDER" : "FIRST RENDER", this);
		this._upToDate = true;
		this._updateShadowRoot();

		if (this._shouldUpdateFragment()) {
			this.staticAreaItem._updateFragment(this);
			this.staticAreaItemDomRef = this.staticAreaItem.staticAreaItemDomRef.shadowRoot;
		}

		// Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM
		if (hasIndividualSlots) {
			this._assignIndividualSlotsToChildren();
		}

		// Call the onAfterRendering hook
		if (typeof this.onAfterRendering === "function") {
			this.onAfterRendering();
		}
	}

	/**
	 * @private
	 */
	_updateShadowRoot() {
		if (!this.constructor._needsShadowDOM()) {
			return;
		}

		let styleToPrepend;
		const renderResult = executeTemplate(this.constructor.template, this);

		// IE11, Edge
		if (window.ShadyDOM) {
			createComponentStyleTag(this.constructor);
		}

		// Chrome
		if (document.adoptedStyleSheets) {
			this.shadowRoot.adoptedStyleSheets = getConstructableStyle(this.constructor);
		}

		// FF, Safari
		if (!document.adoptedStyleSheets && !window.ShadyDOM) {
			styleToPrepend = getEffectiveStyle(this.constructor);
		}

		this.constructor.render(renderResult, this.shadowRoot, styleToPrepend, { eventContext: this });
	}

	/**
	 * @private
	 */
	_assignIndividualSlotsToChildren() {
		const domChildren = Array.from(this.children);

		domChildren.forEach(child => {
			if (child._individualSlot) {
				child.setAttribute("slot", child._individualSlot);
			}
		});
	}

	/**
	 * @private
	 */
	_waitForDomRef() {
		return this._domRefReadyPromise;
	}

	/**
	 * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template
	 * Use this method instead of "this.shadowRoot" to read the Shadow DOM, if ever necessary
	 * @public
	 */
	getDomRef() {
		if (!this.shadowRoot || this.shadowRoot.children.length === 0) {
			return;
		}

		return this.shadowRoot.children.length === 1
			? this.shadowRoot.children[0] : this.shadowRoot.children[1];
	}

	/**
	 * Returns the DOM Element marked with "data-sap-focus-ref" inside the template.
	 * This is the element that will receive the focus by default.
	 * @public
	 */
	getFocusDomRef() {
		const domRef = this.getDomRef();
		if (domRef) {
			const focusRef = domRef.querySelector("[data-sap-focus-ref]");
			return focusRef || domRef;
		}
	}

	/**
	 * Use this method in order to get a reference to an element in the shadow root of the web component or the static area item of the component
	 * @public
	 * @method
	 * @param {String} refName Defines the name of the stable DOM ref
	 */
	getStableDomRef(refName) {
		const staticAreaResult = this.staticAreaItemDomRef && this.staticAreaItemDomRef.querySelector(`[data-ui5-stable=${refName}]`);

		return staticAreaResult
		|| this.getDomRef().querySelector(`[data-ui5-stable=${refName}]`);
	}

	/**
	 * Set the focus to the element, returned by "getFocusDomRef()" (marked by "data-sap-focus-ref")
	 * @public
	 */
	async focus() {
		await this._waitForDomRef();

		const focusDomRef = this.getFocusDomRef();

		if (focusDomRef && typeof focusDomRef.focus === "function") {
			focusDomRef.focus();
		}
	}

	/**
	 *
	 * @public
	 * @param name - name of the event
	 * @param data - additional data for the event
	 * @param cancelable - true, if the user can call preventDefault on the event object
	 * @param bubbles - true, if the event bubbles
	 * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise
	 */
	fireEvent(name, data, cancelable = false, bubbles = true) {
		const eventResult = this._fireEvent(name, data, cancelable, bubbles);
		const camelCaseEventName = kebabToCamelCase(name);

		if (camelCaseEventName !== name) {
			return eventResult && this._fireEvent(camelCaseEventName, data, cancelable);
		}

		return eventResult;
	}

	_fireEvent(name, data, cancelable = false, bubbles = true) {
		let compatEventResult = true; // Initialized to true, because if the event is not fired at all, it should be considered "not-prevented"

		const noConflictEvent = new CustomEvent(`ui5-${name}`, {
			detail: data,
			composed: false,
			bubbles,
			cancelable,
		});

		// This will be false if the compat event is prevented
		compatEventResult = this.dispatchEvent(noConflictEvent);

		if (skipOriginalEvent(name)) {
			return compatEventResult;
		}

		const customEvent = new CustomEvent(name, {
			detail: data,
			composed: false,
			bubbles,
			cancelable,
		});

		// This will be false if the normal event is prevented
		const normalEventResult = this.dispatchEvent(customEvent);

		// Return false if any of the two events was prevented (its result was false).
		return normalEventResult && compatEventResult;
	}

	/**
	 * Returns the actual children, associated with a slot.
	 * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.
	 * @public
	 */
	getSlottedNodes(slotName) {
		const reducer = (acc, curr) => {
			if (!isSlot(curr)) {
				return acc.concat([curr]);
			}
			return acc.concat(curr.assignedNodes({ flatten: true }).filter(item => item instanceof HTMLElement));
		};

		return this[slotName].reduce(reducer, []);
	}

	get isCompact() {
		return getComputedStyle(this).getPropertyValue(GLOBAL_CONTENT_DENSITY_CSS_VAR) === "compact";
	}

	/**
	 * Determines whether the component should be rendered in RTL mode or not.
	 * Returns: "rtl", "ltr" or undefined
	 *
	 * @public
	 * @returns {String|undefined}
	 */
	get effectiveDir() {
		markAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware

		const doc = window.document;
		const dirValues = ["ltr", "rtl"]; // exclude "auto" and "" from all calculations
		const locallyAppliedDir = getComputedStyle(this).getPropertyValue(GLOBAL_DIR_CSS_VAR);

		// In that order, inspect the CSS Var (for modern browsers), the element itself, html and body (for IE fallback)
		if (dirValues.includes(locallyAppliedDir)) {
			return locallyAppliedDir;
		}
		if (dirValues.includes(this.dir)) {
			return this.dir;
		}
		if (dirValues.includes(doc.documentElement.dir)) {
			return doc.documentElement.dir;
		}
		if (dirValues.includes(doc.body.dir)) {
			return doc.body.dir;
		}

		// Finally, check the configuration for explicitly set RTL or language-implied RTL
		return getRTL$1() ? "rtl" : undefined;
	}

	updateStaticAreaItemContentDensity() {
		if (this.staticAreaItem) {
			this.staticAreaItem._updateContentDensity(this.isCompact);
		}
	}

	/**
	 * Used to duck-type UI5 elements without using instanceof
	 * @returns {boolean}
	 * @public
	 */
	get isUI5Element() {
		return true;
	}

	/**
	 * Do not override this method in derivatives of UI5Element, use metadata properties instead
	 * @private
	 */
	static get observedAttributes() {
		return this.getMetadata().getAttributesList();
	}

	/**
	 * @private
	 */
	static _getSlotName(child) {
		// Text nodes can only go to the default slot
		if (!(child instanceof HTMLElement)) {
			return "default";
		}

		// Discover the slot based on the real slot name (f.e. footer => footer, or content-32 => content)
		const slot = child.getAttribute("slot");
		if (slot) {
			const match = slot.match(/^(.+?)-\d+$/);
			return match ? match[1] : slot;
		}

		// Use default slot as a fallback
		return "default";
	}

	/**
	 * @private
	 */
	static _needsShadowDOM() {
		return !!this.template;
	}

	_shouldUpdateFragment() {
		return this.constructor._needsStaticArea() && this.staticAreaItem.isRendered();
	}

	/**
	 * @private
	 */
	static _needsStaticArea() {
		return typeof this.staticAreaTemplate === "function";
	}

	/**
	 * @public
	 */
	getStaticAreaItemDomRef() {
		return this.staticAreaItem.getDomRef();
	}

	/**
	 * @private
	 */
	static _getDefaultState() {
		if (this._defaultState) {
			return this._defaultState;
		}

		const MetadataClass = this.getMetadata();
		const defaultState = {};
		const slotsAreManaged = MetadataClass.slotsAreManaged();

		// Initialize properties
		const props = MetadataClass.getProperties();
		for (const propName in props) { // eslint-disable-line
			const propType = props[propName].type;
			const propDefaultValue = props[propName].defaultValue;

			if (propType === Boolean) {
				defaultState[propName] = false;

				if (propDefaultValue !== undefined) {
					console.warn("The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default"); // eslint-disable-line
				}
			} else if (props[propName].multiple) {
				defaultState[propName] = [];
			} else if (propType === Object) {
				defaultState[propName] = "defaultValue" in props[propName] ? props[propName].defaultValue : {};
			} else if (propType === String) {
				defaultState[propName] = "defaultValue" in props[propName] ? props[propName].defaultValue : "";
			} else {
				defaultState[propName] = propDefaultValue;
			}
		}

		// Initialize slots
		if (slotsAreManaged) {
			const slots = MetadataClass.getSlots();
			for (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line
				const propertyName = slotData.propertyName || slotName;
				defaultState[propertyName] = [];
			}
		}

		this._defaultState = defaultState;
		return defaultState;
	}

	/**
	 * @private
	 */
	static _generateAccessors() {
		const proto = this.prototype;
		const slotsAreManaged = this.getMetadata().slotsAreManaged();

		// Properties
		const properties = this.getMetadata().getProperties();
		for (const [prop, propData] of Object.entries(properties)) { // eslint-disable-line
			if (!isValidPropertyName(prop)) {
				console.warn(`"${prop}" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */
			}

			if (propData.type === Boolean && propData.defaultValue) {
				throw new Error(`Cannot set a default value for property "${prop}". All booleans are false by default.`);
			}

			if (propData.type === Array) {
				throw new Error(`Wrong type for property "${prop}". Properties cannot be of type Array - use "multiple: true" and set "type" to the single value type, such as "String", "Object", etc...`);
			}

			if (propData.type === Object && propData.defaultValue) {
				throw new Error(`Cannot set a default value for property "${prop}". All properties of type "Object" are empty objects by default.`);
			}

			if (propData.multiple && propData.defaultValue) {
				throw new Error(`Cannot set a default value for property "${prop}". All multiple properties are empty arrays by default.`);
			}

			Object.defineProperty(proto, prop, {
				get() {
					if (this._state[prop] !== undefined) {
						return this._state[prop];
					}

					const propDefaultValue = propData.defaultValue;

					if (propData.type === Boolean) {
						return false;
					} else if (propData.type === String) {  // eslint-disable-line
						return propDefaultValue;
					} else if (propData.multiple) { // eslint-disable-line
						return [];
					} else {
						return propDefaultValue;
					}
				},
				set(value) {
					value = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);

					const oldState = this._state[prop];

					if (oldState !== value) {
						this._state[prop] = value;
						this._invalidate(prop, value);
						this._propertyChange(prop, value);
					}
				},
			});
		}

		// Slots
		if (slotsAreManaged) {
			const slots = this.getMetadata().getSlots();
			for (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line
				if (!isValidPropertyName(slotName)) {
					console.warn(`"${slotName}" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */
				}

				const propertyName = slotData.propertyName || slotName;
				Object.defineProperty(proto, propertyName, {
					get() {
						if (this._state[propertyName] !== undefined) {
							return this._state[propertyName];
						}
						return [];
					},
					set() {
						throw new Error("Cannot set slots directly, use the DOM APIs");
					},
				});
			}
		}
	}

	/**
	 * Returns the metadata object for this UI5 Web Component Class
	 * @protected
	 */
	static get metadata() {
		return metadata;
	}

	/**
	 * Returns the CSS for this UI5 Web Component Class
	 * @protected
	 */
	static get styles() {
		return "";
	}

	/**
	 * Returns the Static Area CSS for this UI5 Web Component Class
	 * @protected
	 */
	static get staticAreaStyles() {
		return "";
	}

	/**
	 * Returns an array with the dependencies for this UI5 Web Component, which could be:
	 *  - composed components (used in its shadow root or static area item)
	 *  - slotted components that the component may need to communicate with
	 *
	 * @protected
	 */
	static get dependencies() {
		return [];
	}

	/**
	 * Returns a list of the unique dependencies for this UI5 Web Component
	 *
	 * @public
	 */
	static getUniqueDependencies() {
		if (!uniqueDependenciesCache.has(this)) {
			const filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);
			uniqueDependenciesCache.set(this, filtered);
		}

		return uniqueDependenciesCache.get(this);
	}

	/**
	 * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved
	 *
	 * @returns {Promise<any[]>}
	 */
	static whenDependenciesDefined() {
		return Promise.all(this.getUniqueDependencies().map(dep => dep.define()));
	}

	/**
	 * Hook that will be called upon custom element definition
	 *
	 * @protected
	 * @returns {Promise<void>}
	 */
	static async onDefine() {
		return Promise.resolve();
	}

	/**
	 * Registers a UI5 Web Component in the browser window object
	 * @public
	 * @returns {Promise<UI5Element>}
	 */
	static async define() {
		await boot();

		await Promise.all([
			this.whenDependenciesDefined(),
			this.onDefine(),
		]);

		const tag = this.getMetadata().getTag();
		const altTag = this.getMetadata().getAltTag();

		const definedLocally = isTagRegistered(tag);
		const definedGlobally = customElements.get(tag);

		if (definedGlobally && !definedLocally) {
			recordTagRegistrationFailure(tag);
		} else if (!definedGlobally) {
			this._generateAccessors();
			registerTag(tag);
			window.customElements.define(tag, this);

			if (altTag && !customElements.get(altTag)) {
				class oldClassName extends this {}
				registerTag(altTag);
				window.customElements.define(altTag, oldClassName);
			}
		}
		return this;
	}

	/**
	 * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')
	 * Note: not to be confused with the "get metadata()" method, which returns an object for this class's metadata only
	 * @public
	 * @returns {UI5ElementMetadata}
	 */
	static getMetadata() {
		if (this.hasOwnProperty("_metadata")) { // eslint-disable-line
			return this._metadata;
		}

		const metadataObjects = [this.metadata];
		let klass = this; // eslint-disable-line
		while (klass !== UI5Element) {
			klass = Object.getPrototypeOf(klass);
			metadataObjects.unshift(klass.metadata);
		}
		const mergedMetadata = fnMerge$1({}, ...metadataObjects);

		this._metadata = new UI5ElementMetadata(mergedMetadata);
		return this._metadata;
	}
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const directives = new WeakMap();
/**
 * Brands a function as a directive factory function so that lit-html will call
 * the function during template rendering, rather than passing as a value.
 *
 * A _directive_ is a function that takes a Part as an argument. It has the
 * signature: `(part: Part) => void`.
 *
 * A directive _factory_ is a function that takes arguments for data and
 * configuration and returns a directive. Users of directive usually refer to
 * the directive factory as the directive. For example, "The repeat directive".
 *
 * Usually a template author will invoke a directive factory in their template
 * with relevant arguments, which will then return a directive function.
 *
 * Here's an example of using the `repeat()` directive factory that takes an
 * array and a function to render an item:
 *
 * ```js
 * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
 * ```
 *
 * When `repeat` is invoked, it returns a directive function that closes over
 * `items` and the template function. When the outer template is rendered, the
 * return directive function is called with the Part for the expression.
 * `repeat` then performs it's custom logic to render multiple items.
 *
 * @param f The directive factory function. Must be a function that returns a
 * function of the signature `(part: Part) => void`. The returned function will
 * be called with the part object.
 *
 * @example
 *
 * import {directive, html} from 'lit-html';
 *
 * const immutable = directive((v) => (part) => {
 *   if (part.value !== v) {
 *     part.setValue(v)
 *   }
 * });
 */
const directive = (f) => ((...args) => {
    const d = f(...args);
    directives.set(d, true);
    return d;
});
const isDirective = (o) => {
    return typeof o === 'function' && directives.has(o);
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * True if the custom elements polyfill is in use.
 */
const isCEPolyfill = window.customElements !== undefined &&
    window.customElements.polyfillWrapFlushCallback !==
        undefined;
/**
 * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),
 * into another container (could be the same container), before `before`. If
 * `before` is null, it appends the nodes to the container.
 */
const reparentNodes = (container, start, end = null, before = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.insertBefore(start, before);
        start = n;
    }
};
/**
 * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
 * `container`.
 */
const removeNodes = (container, start, end = null) => {
    while (start !== end) {
        const n = start.nextSibling;
        container.removeChild(start);
        start = n;
    }
};

/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = {};
/**
 * A sentinel value that signals a NodePart to fully clear its content.
 */
const nothing = {};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */
const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */
const nodeMarker = `<!--${marker}-->`;
const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
/**
 * Suffix appended to all bound attribute names.
 */
const boundAttributeSuffix = '$lit$';
/**
 * An updateable Template that tracks the location of dynamic parts.
 */
class Template {
    constructor(result, element) {
        this.parts = [];
        this.element = element;
        const nodesToRemove = [];
        const stack = [];
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        // Keeps track of the last index associated with a part. We try to delete
        // unnecessary nodes, but we never want to associate two different parts
        // to the same index. They must have a constant node between.
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings, values: { length } } = result;
        while (partIndex < length) {
            const node = walker.nextNode();
            if (node === null) {
                // We've exhausted the content inside a nested template element.
                // Because we still have parts (the outer for-loop), we know:
                // - There is a template in the stack
                // - The walker will find a nextNode outside the template
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length } = attributes;
                    // Per
                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                    // attributes are not guaranteed to be returned in document order.
                    // In particular, Edge/IE can return them out of order, so we cannot
                    // assume a correspondence between part index and attribute index.
                    let count = 0;
                    for (let i = 0; i < length; i++) {
                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                            count++;
                        }
                    }
                    while (count-- > 0) {
                        // Get the template literal section leading up to the first
                        // expression in this attribute
                        const stringForPart = strings[partIndex];
                        // Find the attribute name
                        const name = lastAttributeNameRegex.exec(stringForPart)[2];
                        // Find the corresponding attribute
                        // All bound attributes have had a suffix added in
                        // TemplateResult#getHTML to opt out of special attribute
                        // handling. To look up the attribute value we also need to add
                        // the suffix.
                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split(markerRegex);
                        this.parts.push({ type: 'attribute', index, name, strings: statics });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            }
            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                const data = node.data;
                if (data.indexOf(marker) >= 0) {
                    const parent = node.parentNode;
                    const strings = data.split(markerRegex);
                    const lastIndex = strings.length - 1;
                    // Generate a new text node for each literal section
                    // These nodes are also used as the markers for node parts
                    for (let i = 0; i < lastIndex; i++) {
                        let insert;
                        let s = strings[i];
                        if (s === '') {
                            insert = createMarker();
                        }
                        else {
                            const match = lastAttributeNameRegex.exec(s);
                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                s = s.slice(0, match.index) + match[1] +
                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                            }
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({ type: 'node', index: ++index });
                    }
                    // If there's no text, we must insert a comment to mark our place.
                    // Else, we can trust it will stick around after cloning.
                    if (strings[lastIndex] === '') {
                        parent.insertBefore(createMarker(), node);
                        nodesToRemove.push(node);
                    }
                    else {
                        node.data = strings[lastIndex];
                    }
                    // We have a part for each match found
                    partIndex += lastIndex;
                }
            }
            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                if (node.data === marker) {
                    const parent = node.parentNode;
                    // Add a new marker node to be the startNode of the Part if any of
                    // the following are true:
                    //  * We don't have a previousSibling
                    //  * The previousSibling is already the start of a previous part
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore(createMarker(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({ type: 'node', index });
                    // If we don't have a nextSibling, keep this node so we have an end.
                    // Else, we can remove it to save future costs.
                    if (node.nextSibling === null) {
                        node.data = '';
                    }
                    else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                }
                else {
                    let i = -1;
                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        // TODO (justinfagnani): consider whether it's even worth it to
                        // make bindings in comments work
                        this.parts.push({ type: 'node', index: -1 });
                        partIndex++;
                    }
                }
            }
        }
        // Remove text binding nodes after the walk to not disturb the TreeWalker
        for (const n of nodesToRemove) {
            n.parentNode.removeChild(n);
        }
    }
}
const endsWith = (str, suffix) => {
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
};
const isTemplatePartActive = (part) => part.index !== -1;
// Allows `document.createComment('')` to be renamed for a
// small manual size-savings.
const createMarker = () => document.createComment('');
/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-characters
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
 * space character except " ".
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */
class TemplateInstance {
    constructor(template, processor, options) {
        this.__parts = [];
        this.template = template;
        this.processor = processor;
        this.options = options;
    }
    update(values) {
        let i = 0;
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.setValue(values[i]);
            }
            i++;
        }
        for (const part of this.__parts) {
            if (part !== undefined) {
                part.commit();
            }
        }
    }
    _clone() {
        // There are a number of steps in the lifecycle of a template instance's
        // DOM fragment:
        //  1. Clone - create the instance fragment
        //  2. Adopt - adopt into the main document
        //  3. Process - find part markers and create parts
        //  4. Upgrade - upgrade custom elements
        //  5. Update - set node, attribute, property, etc., values
        //  6. Connect - connect to the document. Optional and outside of this
        //     method.
        //
        // We have a few constraints on the ordering of these steps:
        //  * We need to upgrade before updating, so that property values will pass
        //    through any property setters.
        //  * We would like to process before upgrading so that we're sure that the
        //    cloned fragment is inert and not disturbed by self-modifying DOM.
        //  * We want custom elements to upgrade even in disconnected fragments.
        //
        // Given these constraints, with full custom elements support we would
        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
        //
        // But Safari dooes not implement CustomElementRegistry#upgrade, so we
        // can not implement that order and still have upgrade-before-update and
        // upgrade disconnected fragments. So we instead sacrifice the
        // process-before-upgrade constraint, since in Custom Elements v1 elements
        // must not modify their light DOM in the constructor. We still have issues
        // when co-existing with CEv0 elements like Polymer 1, and with polyfills
        // that don't strictly adhere to the no-modification rule because shadow
        // DOM, which may be created in the constructor, is emulated by being placed
        // in the light DOM.
        //
        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
        // in one step.
        //
        // The Custom Elements v1 polyfill supports upgrade(), so the order when
        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
        // Connect.
        const fragment = isCEPolyfill ?
            this.template.element.content.cloneNode(true) :
            document.importNode(this.template.element.content, true);
        const stack = [];
        const parts = this.template.parts;
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
        let partIndex = 0;
        let nodeIndex = 0;
        let part;
        let node = walker.nextNode();
        // Loop through all the nodes and parts of a template
        while (partIndex < parts.length) {
            part = parts[partIndex];
            if (!isTemplatePartActive(part)) {
                this.__parts.push(undefined);
                partIndex++;
                continue;
            }
            // Progress the tree walker until we find our next part's node.
            // Note that multiple parts may share the same node (attribute parts
            // on a single element), so this loop may not run at all.
            while (nodeIndex < part.index) {
                nodeIndex++;
                if (node.nodeName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
                if ((node = walker.nextNode()) === null) {
                    // We've exhausted the content inside a nested template element.
                    // Because we still have parts (the outer for-loop), we know:
                    // - There is a template in the stack
                    // - The walker will find a nextNode outside the template
                    walker.currentNode = stack.pop();
                    node = walker.nextNode();
                }
            }
            // We've arrived at our part's node.
            if (part.type === 'node') {
                const part = this.processor.handleTextExpression(this.options);
                part.insertAfterNode(node.previousSibling);
                this.__parts.push(part);
            }
            else {
                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
            }
            partIndex++;
        }
        if (isCEPolyfill) {
            document.adoptNode(fragment);
            customElements.upgrade(fragment);
        }
        return fragment;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const commentMarker = ` ${marker} `;
/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */
class TemplateResult {
    constructor(strings, values, type, processor) {
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */
    getHTML() {
        const l = this.strings.length - 1;
        let html = '';
        let isCommentBinding = false;
        for (let i = 0; i < l; i++) {
            const s = this.strings[i];
            // For each binding we want to determine the kind of marker to insert
            // into the template source before it's parsed by the browser's HTML
            // parser. The marker type is based on whether the expression is in an
            // attribute, text, or comment poisition.
            //   * For node-position bindings we insert a comment with the marker
            //     sentinel as its text content, like <!--{{lit-guid}}-->.
            //   * For attribute bindings we insert just the marker sentinel for the
            //     first binding, so that we support unquoted attribute bindings.
            //     Subsequent bindings can use a comment marker because multi-binding
            //     attributes must be quoted.
            //   * For comment bindings we insert just the marker sentinel so we don't
            //     close the comment.
            //
            // The following code scans the template source, but is *not* an HTML
            // parser. We don't need to track the tree structure of the HTML, only
            // whether a binding is inside a comment, and if not, if it appears to be
            // the first binding in an attribute.
            const commentOpen = s.lastIndexOf('<!--');
            // We're in comment position if we have a comment open with no following
            // comment close. Because <-- can appear in an attribute value there can
            // be false positives.
            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                s.indexOf('-->', commentOpen + 1) === -1;
            // Check to see if we have an attribute-like sequence preceeding the
            // expression. This can match "name=value" like structures in text,
            // comments, and attribute values, so there can be false-positives.
            const attributeMatch = lastAttributeNameRegex.exec(s);
            if (attributeMatch === null) {
                // We're only in this branch if we don't have a attribute-like
                // preceeding sequence. For comments, this guards against unusual
                // attribute values like <div foo="<!--${'bar'}">. Cases like
                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                // below.
                html += s + (isCommentBinding ? commentMarker : nodeMarker);
            }
            else {
                // For attributes we use just a marker sentinel, and also append a
                // $lit$ suffix to the name to opt-out of attribute-specific parsing
                // that IE and Edge do for style and certain SVG attributes.
                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +
                    marker;
            }
        }
        html += this.strings[l];
        return html;
    }
    getTemplateElement() {
        const template = document.createElement('template');
        template.innerHTML = this.getHTML();
        return template;
    }
}
/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTML in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */
class SVGTemplateResult extends TemplateResult {
    getHTML() {
        return `<svg>${super.getHTML()}</svg>`;
    }
    getTemplateElement() {
        const template = super.getTemplateElement();
        const content = template.content;
        const svgElement = content.firstChild;
        content.removeChild(svgElement);
        reparentNodes(content, svgElement.firstChild);
        return template;
    }
}

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const isPrimitive = (value) => {
    return (value === null ||
        !(typeof value === 'object' || typeof value === 'function'));
};
const isIterable = (value) => {
    return Array.isArray(value) ||
        // tslint:disable-next-line:no-any
        !!(value && value[Symbol.iterator]);
};
/**
 * Writes attribute values to the DOM for a group of AttributeParts bound to a
 * single attibute. The value is only set once even if there are multiple parts
 * for an attribute.
 */
class AttributeCommitter {
    constructor(element, name, strings) {
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for (let i = 0; i < strings.length - 1; i++) {
            this.parts[i] = this._createPart();
        }
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */
    _createPart() {
        return new AttributePart(this);
    }
    _getValue() {
        const strings = this.strings;
        const l = strings.length - 1;
        let text = '';
        for (let i = 0; i < l; i++) {
            text += strings[i];
            const part = this.parts[i];
            if (part !== undefined) {
                const v = part.value;
                if (isPrimitive(v) || !isIterable(v)) {
                    text += typeof v === 'string' ? v : String(v);
                }
                else {
                    for (const t of v) {
                        text += typeof t === 'string' ? t : String(t);
                    }
                }
            }
        }
        text += strings[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
/**
 * A Part that controls all or part of an attribute value.
 */
class AttributePart {
    constructor(committer) {
        this.value = undefined;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
            this.value = value;
            // If the value is a not a directive, dirty the committer so that it'll
            // call setAttribute. If the value is a directive, it'll dirty the
            // committer if it calls setValue().
            if (!isDirective(value)) {
                this.committer.dirty = true;
            }
        }
    }
    commit() {
        while (isDirective(this.value)) {
            const directive = this.value;
            this.value = noChange;
            directive(this);
        }
        if (this.value === noChange) {
            return;
        }
        this.committer.commit();
    }
}
/**
 * A Part that controls a location within a Node tree. Like a Range, NodePart
 * has start and end locations and can set and update the Nodes between those
 * locations.
 *
 * NodeParts support several value types: primitives, Nodes, TemplateResults,
 * as well as arrays and iterables of those types.
 */
class NodePart {
    constructor(options) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.options = options;
    }
    /**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendInto(container) {
        this.startNode = container.appendChild(createMarker());
        this.endNode = container.appendChild(createMarker());
    }
    /**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendIntoPart(part) {
        part.__insert(this.startNode = createMarker());
        part.__insert(this.endNode = createMarker());
    }
    /**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterPart(ref) {
        ref.__insert(this.startNode = createMarker());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        const value = this.__pendingValue;
        if (value === noChange) {
            return;
        }
        if (isPrimitive(value)) {
            if (value !== this.value) {
                this.__commitText(value);
            }
        }
        else if (value instanceof TemplateResult) {
            this.__commitTemplateResult(value);
        }
        else if (value instanceof Node) {
            this.__commitNode(value);
        }
        else if (isIterable(value)) {
            this.__commitIterable(value);
        }
        else if (value === nothing) {
            this.value = nothing;
            this.clear();
        }
        else {
            // Fallback, will render the string representation
            this.__commitText(value);
        }
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) {
            return;
        }
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? '' : value;
        // If `value` isn't already a string, we explicitly convert it here in case
        // it can't be implicitly converted - i.e. it's a symbol.
        const valueAsString = typeof value === 'string' ? value : String(value);
        if (node === this.endNode.previousSibling &&
            node.nodeType === 3 /* Node.TEXT_NODE */) {
            // If we only have a single text node between the markers, we can just
            // set its value, rather than replacing it.
            // TODO(justinfagnani): Can we just check if this.value is primitive?
            node.data = valueAsString;
        }
        else {
            this.__commitNode(document.createTextNode(valueAsString));
        }
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value instanceof TemplateInstance &&
            this.value.template === template) {
            this.value.update(value.values);
        }
        else {
            // Make sure we propagate the template processor from the TemplateResult
            // so that we use its syntax extension, etc. The template factory comes
            // from the render function options so that it can control template
            // caching and preprocessing.
            const instance = new TemplateInstance(template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If _value is an array, then the previous render was of an
        // iterable and _value will contain the NodeParts from the previous
        // render. If _value is not an array, clear this part and make a new
        // array for NodeParts.
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            // Try to reuse an existing part
            itemPart = itemParts[partIndex];
            // If no existing part, create a new one
            if (itemPart === undefined) {
                itemPart = new NodePart(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) {
                    itemPart.appendIntoPart(this);
                }
                else {
                    itemPart.insertAfterPart(itemParts[partIndex - 1]);
                }
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */
class BooleanAttributePart {
    constructor(element, name, strings) {
        this.value = undefined;
        this.__pendingValue = undefined;
        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
            throw new Error('Boolean attributes can only contain a single expression');
        }
        this.element = element;
        this.name = name;
        this.strings = strings;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) {
                this.element.setAttribute(this.name, '');
            }
            else {
                this.element.removeAttribute(this.name);
            }
            this.value = value;
        }
        this.__pendingValue = noChange;
    }
}
/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */
class PropertyCommitter extends AttributeCommitter {
    constructor(element, name, strings) {
        super(element, name, strings);
        this.single =
            (strings.length === 2 && strings[0] === '' && strings[1] === '');
    }
    _createPart() {
        return new PropertyPart(this);
    }
    _getValue() {
        if (this.single) {
            return this.parts[0].value;
        }
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            // tslint:disable-next-line:no-any
            this.element[this.name] = this._getValue();
        }
    }
}
class PropertyPart extends AttributePart {
}
// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the thrid
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
let eventOptionsSupported = false;
try {
    const options = {
        get capture() {
            eventOptionsSupported = true;
            return false;
        }
    };
    // tslint:disable-next-line:no-any
    window.addEventListener('test', options, options);
    // tslint:disable-next-line:no-any
    window.removeEventListener('test', options, options);
}
catch (_e) {
}
class EventPart {
    constructor(element, eventName, eventContext) {
        this.value = undefined;
        this.__pendingValue = undefined;
        this.element = element;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e) => this.handleEvent(e);
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while (isDirective(this.__pendingValue)) {
            const directive = this.__pendingValue;
            this.__pendingValue = noChange;
            directive(this);
        }
        if (this.__pendingValue === noChange) {
            return;
        }
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null ||
            oldListener != null &&
                (newListener.capture !== oldListener.capture ||
                    newListener.once !== oldListener.once ||
                    newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        if (shouldAddListener) {
            this.__options = getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = noChange;
    }
    handleEvent(event) {
        if (typeof this.value === 'function') {
            this.value.call(this.eventContext || this.element, event);
        }
        else {
            this.value.handleEvent(event);
        }
    }
}
// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
const getOptions = (o) => o &&
    (eventOptionsSupported ?
        { capture: o.capture, passive: o.passive, once: o.once } :
        o.capture);

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Creates Parts when a template is instantiated.
 */
class DefaultTemplateProcessor {
    /**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */
    handleAttributeExpressions(element, name, strings, options) {
        const prefix = name[0];
        if (prefix === '.') {
            const committer = new PropertyCommitter(element, name.slice(1), strings);
            return committer.parts;
        }
        if (prefix === '@') {
            return [new EventPart(element, name.slice(1), options.eventContext)];
        }
        if (prefix === '?') {
            return [new BooleanAttributePart(element, name.slice(1), strings)];
        }
        const committer = new AttributeCommitter(element, name, strings);
        return committer.parts;
    }
    /**
     * Create parts for a text-position binding.
     * @param templateFactory
     */
    handleTextExpression(options) {
        return new NodePart(options);
    }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */
function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === undefined) {
        templateCache = {
            stringsArray: new WeakMap(),
            keyString: new Map()
        };
        templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== undefined) {
        return template;
    }
    // If the TemplateStringsArray is new, generate a key from the strings
    // This key is shared between all templates with identical content
    const key = result.strings.join(marker);
    // Check if we already have a Template for this key
    template = templateCache.keyString.get(key);
    if (template === undefined) {
        // If we have not seen this key before, create a new Template
        template = new Template(result, result.getTemplateElement());
        // Cache the Template for this key
        templateCache.keyString.set(key, template);
    }
    // Cache all future queries for this TemplateStringsArray
    templateCache.stringsArray.set(result.strings, template);
    return template;
}
const templateCaches = new Map();

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const parts = new WeakMap();
/**
 * Renders a template result or other value to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result Any value renderable by NodePart - typically a TemplateResult
 *     created by evaluating a template tag like `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */
const render = (result, container, options) => {
    let part = parts.get(container);
    if (part === undefined) {
        removeNodes(container, container.firstChild);
        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
        part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time
(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */
const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);
/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */
const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);

const cache = new Map();

const scopeHTML = (strings, tags, suffix) => {
	if (suffix && tags && tags.length) {
		strings = strings.map(string => {
			if (cache.has(string)) {
				return cache.get(string);
			}

			/*
			const allTags = [...string.matchAll(/<(ui5-.*?)[> ]/g)].map(x => x[1]);
			allTags.forEach(t => {
				if (!tags.includes(t)) {
					throw new Error(`${t} not found in ${string}`);
					// console.log(t, " in ", string);
				}
			});
			*/

			let result = string;
			tags.forEach(tag => {
				result = result.replace(new RegExp(`(</?)(${tag})(/?[> \t\n])`, "g"), `$1$2-${suffix}$3`);
			});
			cache.set(string, result);
			return result;
		});
	}

	return strings;
};

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// Helper functions for manipulating parts
// TODO(kschaaf): Refactor into Part API?
const createAndInsertPart = (containerPart, beforePart) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = beforePart === undefined ? containerPart.endNode :
        beforePart.startNode;
    const startNode = container.insertBefore(createMarker(), beforeNode);
    container.insertBefore(createMarker(), beforeNode);
    const newPart = new NodePart(containerPart.options);
    newPart.insertAfterNode(startNode);
    return newPart;
};
const updatePart = (part, value) => {
    part.setValue(value);
    part.commit();
    return part;
};
const insertPartBefore = (containerPart, part, ref) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = ref ? ref.startNode : containerPart.endNode;
    const endNode = part.endNode.nextSibling;
    if (endNode !== beforeNode) {
        reparentNodes(container, part.startNode, endNode, beforeNode);
    }
};
const removePart = (part) => {
    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);
};
// Helper for generating a map of array item to its index over a subset
// of an array (used to lazily generate `newKeyToIndexMap` and
// `oldKeyToIndexMap`)
const generateMap = (list, start, end) => {
    const map = new Map();
    for (let i = start; i <= end; i++) {
        map.set(list[i], i);
    }
    return map;
};
// Stores previous ordered list of parts and map of key to index
const partListCache = new WeakMap();
const keyListCache = new WeakMap();
/**
 * A directive that repeats a series of values (usually `TemplateResults`)
 * generated from an iterable, and updates those items efficiently when the
 * iterable changes based on user-provided `keys` associated with each item.
 *
 * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,
 * meaning previous DOM for a given key is moved into the new position if
 * needed, and DOM will never be reused with values for different keys (new DOM
 * will always be created for new keys). This is generally the most efficient
 * way to use `repeat` since it performs minimum unnecessary work for insertions
 * amd removals.
 *
 * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a
 * given call to `repeat`. The behavior when two or more items have the same key
 * is undefined.
 *
 * If no `keyFn` is provided, this directive will perform similar to mapping
 * items to values, and DOM will be reused against potentially different items.
 */
const repeat = directive((items, keyFnOrTemplate, template) => {
    let keyFn;
    if (template === undefined) {
        template = keyFnOrTemplate;
    }
    else if (keyFnOrTemplate !== undefined) {
        keyFn = keyFnOrTemplate;
    }
    return (containerPart) => {
        if (!(containerPart instanceof NodePart)) {
            throw new Error('repeat can only be used in text bindings');
        }
        // Old part & key lists are retrieved from the last update
        // (associated with the part for this instance of the directive)
        const oldParts = partListCache.get(containerPart) || [];
        const oldKeys = keyListCache.get(containerPart) || [];
        // New part list will be built up as we go (either reused from
        // old parts or created for new keys in this update). This is
        // saved in the above cache at the end of the update.
        const newParts = [];
        // New value list is eagerly generated from items along with a
        // parallel array indicating its key.
        const newValues = [];
        const newKeys = [];
        let index = 0;
        for (const item of items) {
            newKeys[index] = keyFn ? keyFn(item, index) : index;
            newValues[index] = template(item, index);
            index++;
        }
        // Maps from key to index for current and previous update; these
        // are generated lazily only when needed as a performance
        // optimization, since they are only required for multiple
        // non-contiguous changes in the list, which are less common.
        let newKeyToIndexMap;
        let oldKeyToIndexMap;
        // Head and tail pointers to old parts and new values
        let oldHead = 0;
        let oldTail = oldParts.length - 1;
        let newHead = 0;
        let newTail = newValues.length - 1;
        // Overview of O(n) reconciliation algorithm (general approach
        // based on ideas found in ivi, vue, snabbdom, etc.):
        //
        // * We start with the list of old parts and new values (and
        //   arrays of their respective keys), head/tail pointers into
        //   each, and we build up the new list of parts by updating
        //   (and when needed, moving) old parts or creating new ones.
        //   The initial scenario might look like this (for brevity of
        //   the diagrams, the numbers in the array reflect keys
        //   associated with the old parts or new values, although keys
        //   and parts/values are actually stored in parallel arrays
        //   indexed using the same head/tail pointers):
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [ ,  ,  ,  ,  ,  ,  ]
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new
        //                                      item order
        //      newHead ^                 ^ newTail
        //
        // * Iterate old & new lists from both sides, updating,
        //   swapping, or removing parts at the head/tail locations
        //   until neither head nor tail can move.
        //
        // * Example below: keys at head pointers match, so update old
        //   part 0 in-place (no need to move it) and record part 0 in
        //   the `newParts` list. The last thing we do is advance the
        //   `oldHead` and `newHead` pointers (will be reflected in the
        //   next diagram).
        //
        //      oldHead v                 v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //      newHead ^                 ^ newTail
        //
        // * Example below: head pointers don't match, but tail
        //   pointers do, so update part 6 in place (no need to move
        //   it), and record part 6 in the `newParts` list. Last,
        //   advance the `oldTail` and `oldHead` pointers.
        //
        //         oldHead v              v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail
        //                                      & newTail
        //         newHead ^              ^ newTail
        //
        // * If neither head nor tail match; next check if one of the
        //   old head/tail items was removed. We first need to generate
        //   the reverse map of new keys to index (`newKeyToIndexMap`),
        //   which is done once lazily as a performance optimization,
        //   since we only hit this case if multiple non-contiguous
        //   changes were made. Note that for contiguous removal
        //   anywhere in the list, the head and tails would advance
        //   from either end and pass each other before we get to this
        //   case and removals would be handled in the final while loop
        //   without needing to generate the map.
        //
        // * Example below: The key at `oldTail` was removed (no longer
        //   in the `newKeyToIndexMap`), so remove that part from the
        //   DOM and advance just the `oldTail` pointer.
        //
        //         oldHead v           v oldTail
        //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]
        //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail
        //         newHead ^           ^ newTail
        //
        // * Once head and tail cannot move, any mismatches are due to
        //   either new or moved items; if a new key is in the previous
        //   "old key to old index" map, move the old part to the new
        //   location, otherwise create and insert a new part. Note
        //   that when moving an old part we null its position in the
        //   oldParts array if it lies between the head and tail so we
        //   know to skip it when the pointers get there.
        //
        // * Example below: neither head nor tail match, and neither
        //   were removed; so find the `newHead` key in the
        //   `oldKeyToIndexMap`, and move that old part's DOM into the
        //   next head position (before `oldParts[oldHead]`). Last,
        //   null the part in the `oldPart` array since it was
        //   somewhere in the remaining oldParts still to be scanned
        //   (between the head and tail pointers) so that we know to
        //   skip that old part on future iterations.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance
        //                                      newHead
        //         newHead ^           ^ newTail
        //
        // * Note that for moves/insertions like the one above, a part
        //   inserted at the head pointer is inserted before the
        //   current `oldParts[oldHead]`, and a part inserted at the
        //   tail pointer is inserted before `newParts[newTail+1]`. The
        //   seeming asymmetry lies in the fact that new parts are
        //   moved into place outside in, so to the right of the head
        //   pointer are old parts, and to the right of the tail
        //   pointer are new parts.
        //
        // * We always restart back from the top of the algorithm,
        //   allowing matching and simple updates in place to
        //   continue...
        //
        // * Example below: the head pointers once again match, so
        //   simply update part 1 and record it in the `newParts`
        //   array.  Last, advance both head pointers.
        //
        //         oldHead v        v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead
        //                                      & newHead
        //            newHead ^        ^ newTail
        //
        // * As mentioned above, items that were moved as a result of
        //   being stuck (the final else clause in the code below) are
        //   marked with null, so we always advance old pointers over
        //   these so we're comparing the next actual old value on
        //   either end.
        //
        // * Example below: `oldHead` is null (already placed in
        //   newParts), so advance `oldHead`.
        //
        //            oldHead v     v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:
        //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //               newHead ^     ^ newTail
        //
        // * Note it's not critical to mark old parts as null when they
        //   are moved from head to tail or tail to head, since they
        //   will be outside the pointer range and never visited again.
        //
        // * Example below: Here the old tail key matches the new head
        //   key, so the part at the `oldTail` position and move its
        //   DOM to the new head position (before `oldParts[oldHead]`).
        //   Last, advance `oldTail` and `newHead` pointers.
        //
        //               oldHead v  v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,
        //                                     advance oldTail & newHead
        //               newHead ^     ^ newTail
        //
        // * Example below: Old and new head keys match, so update the
        //   old head part in place, and advance the `oldHead` and
        //   `newHead` pointers.
        //
        //               oldHead v oldTail
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &
        //                                      newHead
        //                  newHead ^  ^ newTail
        //
        // * Once the new or old pointers move past each other then all
        //   we have left is additions (if old list exhausted) or
        //   removals (if new list exhausted). Those are handled in the
        //   final while loops at the end.
        //
        // * Example below: `oldHead` exceeded `oldTail`, so we're done
        //   with the main loop.  Create the remaining part and insert
        //   it at the new head position, and the update is complete.
        //
        //                   (oldHead > oldTail)
        //   oldKeys:  [0, 1, -, 3, 4, 5, 6]
        //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7
        //   newKeys:  [0, 2, 1, 4, 3, 7, 6]
        //                     newHead ^ newTail
        //
        // * Note that the order of the if/else clauses is not
        //   important to the algorithm, as long as the null checks
        //   come first (to ensure we're always working on valid old
        //   parts) and that the final else clause comes last (since
        //   that's where the expensive moves occur). The order of
        //   remaining clauses is is just a simple guess at which cases
        //   will be most common.
        //
        // * TODO(kschaaf) Note, we could calculate the longest
        //   increasing subsequence (LIS) of old items in new position,
        //   and only move those not in the LIS set. However that costs
        //   O(nlogn) time and adds a bit more code, and only helps
        //   make rare types of mutations require fewer moves. The
        //   above handles removes, adds, reversal, swaps, and single
        //   moves of contiguous items in linear time, in the minimum
        //   number of moves. As the number of multiple moves where LIS
        //   might help approaches a random shuffle, the LIS
        //   optimization becomes less helpful, so it seems not worth
        //   the code at this point. Could reconsider if a compelling
        //   case arises.
        while (oldHead <= oldTail && newHead <= newTail) {
            if (oldParts[oldHead] === null) {
                // `null` means old part at head has already been used
                // below; skip
                oldHead++;
            }
            else if (oldParts[oldTail] === null) {
                // `null` means old part at tail has already been used
                // below; skip
                oldTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newHead]) {
                // Old head matches new head; update in place
                newParts[newHead] =
                    updatePart(oldParts[oldHead], newValues[newHead]);
                oldHead++;
                newHead++;
            }
            else if (oldKeys[oldTail] === newKeys[newTail]) {
                // Old tail matches new tail; update in place
                newParts[newTail] =
                    updatePart(oldParts[oldTail], newValues[newTail]);
                oldTail--;
                newTail--;
            }
            else if (oldKeys[oldHead] === newKeys[newTail]) {
                // Old head matches new tail; update and move to new tail
                newParts[newTail] =
                    updatePart(oldParts[oldHead], newValues[newTail]);
                insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);
                oldHead++;
                newTail--;
            }
            else if (oldKeys[oldTail] === newKeys[newHead]) {
                // Old tail matches new head; update and move to new head
                newParts[newHead] =
                    updatePart(oldParts[oldTail], newValues[newHead]);
                insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);
                oldTail--;
                newHead++;
            }
            else {
                if (newKeyToIndexMap === undefined) {
                    // Lazily generate key-to-index maps, used for removals &
                    // moves below
                    newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
                    oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
                }
                if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
                    // Old head is no longer in new list; remove
                    removePart(oldParts[oldHead]);
                    oldHead++;
                }
                else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
                    // Old tail is no longer in new list; remove
                    removePart(oldParts[oldTail]);
                    oldTail--;
                }
                else {
                    // Any mismatches at this point are due to additions or
                    // moves; see if we have an old part we can reuse and move
                    // into place
                    const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
                    const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;
                    if (oldPart === null) {
                        // No old part for this value; create a new one and
                        // insert it
                        const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);
                        updatePart(newPart, newValues[newHead]);
                        newParts[newHead] = newPart;
                    }
                    else {
                        // Reuse old part
                        newParts[newHead] =
                            updatePart(oldPart, newValues[newHead]);
                        insertPartBefore(containerPart, oldPart, oldParts[oldHead]);
                        // This marks the old part as having been used, so that
                        // it will be skipped in the first two checks above
                        oldParts[oldIndex] = null;
                    }
                    newHead++;
                }
            }
        }
        // Add parts for any remaining new values
        while (newHead <= newTail) {
            // For all remaining additions, we insert before last new
            // tail, since old pointers are no longer valid
            const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);
            updatePart(newPart, newValues[newHead]);
            newParts[newHead++] = newPart;
        }
        // Remove any remaining unused old parts
        while (oldHead <= oldTail) {
            const oldPart = oldParts[oldHead++];
            if (oldPart !== null) {
                removePart(oldPart);
            }
        }
        // Save order of new parts for next round
        partListCache.set(containerPart, newParts);
        keyListCache.set(containerPart, newKeys);
    };
});

/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Stores the ClassInfo object applied to a given AttributePart.
 * Used to unset existing values when a new ClassInfo object is applied.
 */
const classMapCache = new WeakMap();
/**
 * A directive that applies CSS classes. This must be used in the `class`
 * attribute and must be the only part used in the attribute. It takes each
 * property in the `classInfo` argument and adds the property name to the
 * element's `classList` if the property value is truthy; if the property value
 * is falsey, the property name is removed from the element's `classList`. For
 * example
 * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
 * @param classInfo {ClassInfo}
 */
const classMap = directive((classInfo) => (part) => {
    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
        part.committer.name !== 'class' || part.committer.parts.length > 1) {
        throw new Error('The `classMap` directive must be used in the `class` attribute ' +
            'and must be the only part in the attribute.');
    }
    const { committer } = part;
    const { element } = committer;
    // handle static classes
    if (!classMapCache.has(part)) {
        element.className = committer.strings.join(' ');
    }
    const { classList } = element;
    // remove old classes that no longer apply
    const oldInfo = classMapCache.get(part);
    for (const name in oldInfo) {
        if (!(name in classInfo)) {
            classList.remove(name);
        }
    }
    // add new classes
    for (const name in classInfo) {
        const value = classInfo[name];
        if (!oldInfo || value !== oldInfo[name]) {
            // We explicitly want a loose truthy check here because
            // it seems more convenient that '' and 0 are skipped.
            const method = value ? 'add' : 'remove';
            classList[method](name);
        }
    }
    classMapCache.set(part, classInfo);
});

/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * Stores the StyleInfo object applied to a given AttributePart.
 * Used to unset existing values when a new StyleInfo object is applied.
 */
const styleMapCache = new WeakMap();
/**
 * A directive that applies CSS properties to an element.
 *
 * `styleMap` can only be used in the `style` attribute and must be the only
 * expression in the attribute. It takes the property names in the `styleInfo`
 * object and adds the property values as CSS propertes. Property names with
 * dashes (`-`) are assumed to be valid CSS property names and set on the
 * element's style object using `setProperty()`. Names without dashes are
 * assumed to be camelCased JavaScript property names and set on the element's
 * style object using property assignment, allowing the style object to
 * translate JavaScript-style names to CSS property names.
 *
 * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
 * '0'})` sets the `background-color`, `border-top` and `--size` properties.
 *
 * @param styleInfo {StyleInfo}
 */
const styleMap = directive((styleInfo) => (part) => {
    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
        part.committer.name !== 'style' || part.committer.parts.length > 1) {
        throw new Error('The `styleMap` directive must be used in the style attribute ' +
            'and must be the only part in the attribute.');
    }
    const { committer } = part;
    const { style } = committer.element;
    // Handle static styles the first time we see a Part
    if (!styleMapCache.has(part)) {
        style.cssText = committer.strings.join(' ');
    }
    // Remove old properties that no longer exist in styleInfo
    const oldInfo = styleMapCache.get(part);
    for (const name in oldInfo) {
        if (!(name in styleInfo)) {
            if (name.indexOf('-') === -1) {
                // tslint:disable-next-line:no-any
                style[name] = null;
            }
            else {
                style.removeProperty(name);
            }
        }
    }
    // Add or update properties
    for (const name in styleInfo) {
        if (name.indexOf('-') === -1) {
            // tslint:disable-next-line:no-any
            style[name] = styleInfo[name];
        }
        else {
            style.setProperty(name, styleInfo[name]);
        }
    }
    styleMapCache.set(part, styleInfo);
});

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
// For each part, remember the value that was last rendered to the part by the
// unsafeHTML directive, and the DocumentFragment that was last set as a value.
// The DocumentFragment is used as a unique key to check if the last value
// rendered to the part was with unsafeHTML. If not, we'll always re-render the
// value passed to unsafeHTML.
const previousValues = new WeakMap();
/**
 * Renders the result as HTML, rather than text.
 *
 * Note, this is unsafe to use with any user-provided input that hasn't been
 * sanitized or escaped, as it may lead to cross-site-scripting
 * vulnerabilities.
 */
const unsafeHTML = directive((value) => (part) => {
    if (!(part instanceof NodePart)) {
        throw new Error('unsafeHTML can only be used in text bindings');
    }
    const previousValue = previousValues.get(part);
    if (previousValue !== undefined && isPrimitive(value) &&
        value === previousValue.value && part.value === previousValue.fragment) {
        return;
    }
    const template = document.createElement('template');
    template.innerHTML = value; // innerHTML casts to string internally
    const fragment = document.importNode(template.content, true);
    part.setValue(fragment);
    previousValues.set(part, { value, fragment });
});

let tags;
let	suffix;

const setTags = t => {
	tags = t;
};
const setSuffix = s => {
	suffix = s;
};

const litRender = (templateResult, domNode, styles, { eventContext } = {}) => {
	if (styles) {
		templateResult = html`<style>${styles}</style>${templateResult}`;
	}
	render(templateResult, domNode, { eventContext });
};

const scopedHtml = (strings, ...values) => html(scopeHTML(strings, tags, suffix), ...values);
const scopedSvg = (strings, ...values) => svg(scopeHTML(strings, tags, suffix), ...values);

const KeyCodes = {
	BACKSPACE: 8,
	TAB: 9,
	ENTER: 13,
	SHIFT: 16,
	CONTROL: 17,
	ALT: 18,
	BREAK: 19,
	CAPS_LOCK: 20,
	ESCAPE: 27,
	SPACE: 32,
	PAGE_UP: 33,
	PAGE_DOWN: 34,
	END: 35,
	HOME: 36,
	ARROW_LEFT: 37,
	ARROW_UP: 38,
	ARROW_RIGHT: 39,
	ARROW_DOWN: 40,
	PRINT: 44,
	INSERT: 45,
	DELETE: 46,
	DIGIT_0: 48,
	DIGIT_1: 49,
	DIGIT_2: 50,
	DIGIT_3: 51,
	DIGIT_4: 52,
	DIGIT_5: 53,
	DIGIT_6: 54,
	DIGIT_7: 55,
	DIGIT_8: 56,
	DIGIT_9: 57,
	A: 65,
	B: 66,
	C: 67,
	D: 68,
	E: 69,
	F: 70,
	G: 71,
	H: 72,
	I: 73,
	J: 74,
	K: 75,
	L: 76,
	M: 77,
	N: 78,
	O: 79,
	P: 80,
	Q: 81,
	R: 82,
	S: 83,
	T: 84,
	U: 85,
	V: 86,
	W: 87,
	X: 88,
	Y: 89,
	Z: 90,
	WINDOWS: 91,
	CONTEXT_MENU: 93,
	TURN_OFF: 94,
	SLEEP: 95,
	NUMPAD_0: 96,
	NUMPAD_1: 97,
	NUMPAD_2: 98,
	NUMPAD_3: 99,
	NUMPAD_4: 100,
	NUMPAD_5: 101,
	NUMPAD_6: 102,
	NUMPAD_7: 103,
	NUMPAD_8: 104,
	NUMPAD_9: 105,
	NUMPAD_ASTERISK: 106,
	NUMPAD_PLUS: 107,
	NUMPAD_MINUS: 109,
	NUMPAD_COMMA: 110,
	NUMPAD_SLASH: 111,
	F1: 112,
	F2: 113,
	F3: 114,
	F4: 115,
	F5: 116,
	F6: 117,
	F7: 118,
	F8: 119,
	F9: 120,
	F10: 121,
	F11: 122,
	F12: 123,
	NUM_LOCK: 144,
	SCROLL_LOCK: 145,
	OPEN_BRACKET: 186,
	PLUS: 187,
	COMMA: 188,
	SLASH: 189,
	DOT: 190,
	PIPE: 191,
	SEMICOLON: 192,
	MINUS: 219,
	GREAT_ACCENT: 220,
	EQUALS: 221,
	SINGLE_QUOTE: 222,
	BACKSLASH: 226,
};

const isEnter = event => (event.key ? event.key === "Enter" : event.keyCode === KeyCodes.ENTER) && !hasModifierKeys(event);

const isSpace = event => (event.key ? (event.key === "Spacebar" || event.key === " ") : event.keyCode === KeyCodes.SPACE) && !hasModifierKeys(event);

const isLeft = event => (event.key ? (event.key === "ArrowLeft" || event.key === "Left") : event.keyCode === KeyCodes.ARROW_LEFT) && !hasModifierKeys(event);

const isRight = event => (event.key ? (event.key === "ArrowRight" || event.key === "Right") : event.keyCode === KeyCodes.ARROW_RIGHT) && !hasModifierKeys(event);

const isUp = event => (event.key ? (event.key === "ArrowUp" || event.key === "Up") : event.keyCode === KeyCodes.ARROW_UP) && !hasModifierKeys(event);

const isDown = event => (event.key ? (event.key === "ArrowDown" || event.key === "Down") : event.keyCode === KeyCodes.ARROW_DOWN) && !hasModifierKeys(event);

const isHome = event => (event.key ? event.key === "Home" : event.keyCode === KeyCodes.HOME) && !hasModifierKeys(event);

const isEnd = event => (event.key ? event.key === "End" : event.keyCode === KeyCodes.END) && !hasModifierKeys(event);

const isHomeCtrl = event => (event.key ? event.key === "Home" : event.keyCode === KeyCodes.HOME) && checkModifierKeys(event, true, false, false);

const isEndCtrl = event => (event.key ? event.key === "End" : event.keyCode === KeyCodes.END) && checkModifierKeys(event, true, false, false);

const isEscape = event => (event.key ? event.key === "Escape" || event.key === "Esc" : event.keyCode === KeyCodes.ESCAPE) && !hasModifierKeys(event);

const isTabNext = event => (event.key ? event.key === "Tab" : event.keyCode === KeyCodes.TAB) && !hasModifierKeys(event);

const isTabPrevious = event => (event.key ? event.key === "Tab" : event.keyCode === KeyCodes.TAB) && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ false, /* Shift */ true);

const isBackSpace = event => (event.key ? event.key === "Backspace" : event.keyCode === KeyCodes.BACKSPACE) && !hasModifierKeys(event);

const isDelete = event => (event.key ? event.key === "Delete" : event.keyCode === KeyCodes.DELETE) && !hasModifierKeys(event);

const isPageUp = event => (event.key ? event.key === "PageUp" : event.keyCode === KeyCodes.PAGE_UP) && !hasModifierKeys(event);

const isPageDown = event => (event.key ? event.key === "PageDown" : event.keyCode === KeyCodes.PAGE_DOWN) && !hasModifierKeys(event);

const isPageUpShift = event => (event.key ? event.key === "PageUp" : event.keyCode === KeyCodes.PAGE_UP) && checkModifierKeys(event, false, false, true);

const isPageDownShift = event => (event.key ? event.key === "PageDown" : event.keyCode === KeyCodes.PAGE_DOWN) && checkModifierKeys(event, false, false, true);

const isPageUpShiftCtrl = event => (event.key ? event.key === "PageUp" : event.keyCode === KeyCodes.PAGE_UP) && checkModifierKeys(event, true, false, true);

const isPageDownShiftCtrl = event => (event.key ? event.key === "PageDown" : event.keyCode === KeyCodes.PAGE_DOWN) && checkModifierKeys(event, true, false, true);

const isShow = event => {
	if (event.key) {
		return isF4(event) || isShowByArrows(event);
	}

	return (event.keyCode === KeyCodes.F4 && !hasModifierKeys(event)) || (event.keyCode === KeyCodes.ARROW_DOWN && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ true, /* Shift */ false));
};

const isF4 = event => {
	return event.key === "F4" && !hasModifierKeys(event);
};

const isF4Shift = event => (event.key ? event.key === "F4" : event.keyCode === KeyCodes.F4) && checkModifierKeys(event, false, false, true);

const isShowByArrows = event => {
	return ((event.key === "ArrowDown" || event.key === "Down") || (event.key === "ArrowUp" || event.key === "Up")) && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ true, /* Shift */ false);
};

const hasModifierKeys = event => event.shiftKey || event.altKey || getCtrlKey(event);

const getCtrlKey = event => !!(event.metaKey || event.ctrlKey); // double negation doesn't have effect on boolean but ensures null and undefined are equivalent to false.

const checkModifierKeys = (event, bCtrlKey, bAltKey, bShiftKey) => event.shiftKey === bShiftKey && event.altKey === bAltKey && getCtrlKey(event) === bCtrlKey;

const NavigationMode = {
	Auto: "Auto",
	Vertical: "Vertical",
	Horizontal: "Horizontal",
	Paging: "Paging",
};

/**
 * @private
 * Different behavior for ItemNavigation.
 */
const ItemNavigationBehavior = {
	/**
	* Static behavior: when border of the items is reached, you can't go out of the cage.
 	*/
	Static: "Static",

	/**
	* Cycling behavior: when border of the items is reached, you can cycle through the items.
 	*/
	Cyclic: "Cyclic",

	/**
	* Paging behavior: when border of the items is reached, tou can go up/down based on the rowsize(e.g. DayPicker)
 	*/
	Paging: "Paging",
};

// navigatable items must have id and tabindex
class ItemNavigation extends EventProvider {
	constructor(rootWebComponent, options = {}) {
		super();

		this.currentIndex = options.currentIndex || 0;
		this.rowSize = options.rowSize || 1;
		this.behavior = options.behavior || ItemNavigationBehavior.Static;
		this.hasNextPage = true; // used in Paging mode and controlled from the rootWebComponent
		this.hasPrevPage = true; // used in Paging mode and controlled from the rootWebComponent
		const navigationMode = options.navigationMode;
		const autoNavigation = !navigationMode || navigationMode === NavigationMode.Auto;
		this.horizontalNavigationOn = autoNavigation || navigationMode === NavigationMode.Horizontal;
		this.verticalNavigationOn = autoNavigation || navigationMode === NavigationMode.Vertical;

		this.pageSize = options.pageSize;

		this.rootWebComponent = rootWebComponent;
		this.rootWebComponent.addEventListener("keydown", this.onkeydown.bind(this));
		this.rootWebComponent._onComponentStateFinalized = () => {
			this._init();
		};
	}

	_init() {
		this._getItems().forEach((item, idx) => {
			item._tabIndex = (idx === this.currentIndex) ? "0" : "-1";
		});
	}

	_horizontalNavigationOn() {
		return this.horizontalNavigationOn;
	}

	_verticalNavigationOn() {
		return this.verticalNavigationOn;
	}

	async _onKeyPress(event) {
		if (this.currentIndex >= this._getItems().length) {
			this.onOverflowBottomEdge(event);
		} else if (this.currentIndex < 0) {
			this.onOverflowTopEdge(event);
		}

		event.preventDefault();

		await RenderScheduler.whenFinished();

		this.update();
		this.focusCurrent();
		this.fireEvent(ItemNavigation.AFTER_FOCUS);
	}

	onkeydown(event) {
		if (isUp(event) && this._verticalNavigationOn()) {
			return this._handleUp(event);
		}

		if (isDown(event) && this._verticalNavigationOn()) {
			return this._handleDown(event);
		}

		if (isLeft(event) && this._horizontalNavigationOn()) {
			return this._handleLeft(event);
		}

		if (isRight(event) && this._horizontalNavigationOn()) {
			return this._handleRight(event);
		}

		if (isHome(event)) {
			return this._handleHome(event);
		}

		if (isEnd(event)) {
			return this._handleEnd(event);
		}

		if (isPageUp(event)) {
			return this._handlePageUp(event);
		}

		if (isPageDown(event)) {
			return this._handlePageDown(event);
		}
	}

	_handleUp(event) {
		if (this._canNavigate()) {
			this.currentIndex -= this.rowSize;
			this._onKeyPress(event);
		}
	}

	_handleDown(event) {
		if (this._canNavigate()) {
			this.currentIndex += this.rowSize;
			this._onKeyPress(event);
		}
	}

	_handleLeft(event) {
		if (this._canNavigate()) {
			this.currentIndex -= 1;
			this._onKeyPress(event);
		}
	}

	_handleRight(event) {
		if (this._canNavigate()) {
			this.currentIndex += 1;
			this._onKeyPress(event);
		}
	}

	_handleHome(event) {
		if (this._canNavigate()) {
			const homeEndRange = this.rowSize > 1 ? this.rowSize : this._getItems().length;
			this.currentIndex -= this.currentIndex % homeEndRange;
			this._onKeyPress(event);
		}
	}

	_handleEnd(event) {
		if (this._canNavigate()) {
			const homeEndRange = this.rowSize > 1 ? this.rowSize : this._getItems().length;
			this.currentIndex += (homeEndRange - 1 - this.currentIndex % homeEndRange); // eslint-disable-line
			this._onKeyPress(event);
		}
	}

	_handlePageUp(event) {
		if (this._canNavigate()) {
			this.currentIndex -= this.pageSize;
			this._onKeyPress(event);
		}
	}

	_handlePageDown(event) {
		if (this._canNavigate()) {
			this.currentIndex += this.pageSize;
			this._onKeyPress(event);
		}
	}

	update(current) {
		const origItems = this._getItems();

		if (current) {
			this.currentIndex = this._getItems().indexOf(current);
		}

		if (!origItems[this.currentIndex]
			|| (origItems[this.currentIndex]._tabIndex && origItems[this.currentIndex]._tabIndex === "0")) {
			return;
		}

		const items = origItems.slice(0);

		for (let i = 0; i < items.length; i++) {
			items[i]._tabIndex = (i === this.currentIndex ? "0" : "-1");
		}


		this.rootWebComponent._invalidate();
	}

	focusCurrent() {
		const currentItem = this._getCurrentItem();
		if (currentItem) {
			currentItem.focus();
		}
	}

	_canNavigate() {
		const currentItem = this._getCurrentItem();

		let activeElement = document.activeElement;

		while (activeElement.shadowRoot && activeElement.shadowRoot.activeElement) {
			activeElement = activeElement.shadowRoot.activeElement;
		}

		return currentItem && currentItem === activeElement;
	}

	_getCurrentItem() {
		const items = this._getItems();

		if (!items.length) {
			return null;
		}

		// normalize the index
		while (this.currentIndex >= items.length) {
			this.currentIndex -= this.rowSize;
		}

		if (this.currentIndex < 0) {
			this.currentIndex = 0;
		}

		const currentItem = items[this.currentIndex];

		if (!currentItem) {
			return;
		}

		if (currentItem.isUI5Element) {
			return currentItem.getFocusDomRef();
		}

		if (!this.rootWebComponent.getDomRef()) {
			return;
		}

		return this.rootWebComponent.getDomRef().querySelector(`#${currentItem.id}`);
	}

	set getItemsCallback(fn) {
		this._getItems = fn;
	}

	set current(val) {
		this.currentIndex = val;
	}

	onOverflowBottomEdge(event) {
		const items = this._getItems();
		const offset = (this.currentIndex - items.length) % this.rowSize;

		if (this.behavior === ItemNavigationBehavior.Cyclic) {
			this.currentIndex = 0;
			return;
		}

		if (this.behavior === ItemNavigationBehavior.Paging) {
			this._handleNextPage();
		} else {
			this.currentIndex = items.length - 1;
		}

		this.fireEvent(ItemNavigation.BORDER_REACH, {
			start: false,
			end: true,
			originalEvent: event,
			offset,
		});
	}

	onOverflowTopEdge(event) {
		const items = this._getItems();
		const offsetRight = (this.currentIndex + this.rowSize) % this.rowSize;
		const offset = offsetRight < 0 ? (this.rowSize + offsetRight) : offsetRight;

		if (this.behavior === ItemNavigationBehavior.Cyclic) {
			this.currentIndex = items.length - 1;
			return;
		}

		if (this.behavior === ItemNavigationBehavior.Paging) {
			this._handlePrevPage();
		} else {
			this.currentIndex = 0;
		}

		this.fireEvent(ItemNavigation.BORDER_REACH, {
			start: true,
			end: false,
			originalEvent: event,
			offset,
		});
	}

	_handleNextPage() {
		this.fireEvent(ItemNavigation.PAGE_BOTTOM);
		const items = this._getItems();

		if (!this.hasNextPage) {
			this.currentIndex = items.length - 1;
		} else {
			this.currentIndex -= this.pageSize;
		}
	}

	_handlePrevPage() {
		this.fireEvent(ItemNavigation.PAGE_TOP);

		if (!this.hasPrevPage) {
			this.currentIndex = 0;
		} else {
			this.currentIndex = this.pageSize + this.currentIndex;
		}
	}
}

ItemNavigation.PAGE_TOP = "PageTop";
ItemNavigation.PAGE_BOTTOM = "PageBottom";
ItemNavigation.BORDER_REACH = "_borderReach";
ItemNavigation.AFTER_FOCUS = "_afterFocus";

const isNodeHidden = node => {
	if (node.nodeName === "SLOT") {
		return false;
	}

	return (node.offsetWidth <= 0 && node.offsetHeight <= 0) || node.style.visibility === "hidden";
};

const isNodeTabbable = node => {
	if (!node) {
		return false;
	}

	const nodeName = node.nodeName.toLowerCase();

	if (node.hasAttribute("data-sap-no-tab-ref")) {
		return false;
	}

	if (isNodeHidden(node)) {
		return false;
	}

	if (nodeName === "a" || /input|select|textarea|button|object/.test(nodeName)) {
		return !node.disabled;
	}

	const tabIndex = node.getAttribute("tabindex");
	if (tabIndex !== null && tabIndex !== undefined) {
		return parseInt(tabIndex) >= 0;
	}
};

const getTabbableElements = node => {
	return getTabbables(node.children);
};

const getLastTabbableElement = node => {
	const tabbables = getTabbables(node.children);
	return tabbables.length ? tabbables[tabbables.length - 1] : null;
};

const getTabbables = (nodes, tabbables) => {
	const tabbablesNodes = tabbables || [];

	if (!nodes) {
		return tabbablesNodes;
	}

	Array.from(nodes).forEach(currentNode => {
		if (currentNode.nodeType === Node.TEXT_NODE || currentNode.nodeType === Node.COMMENT_NODE) {
			return;
		}

		if (currentNode.shadowRoot) {
			// get the root node of the ShadowDom (1st none style tag)
			const children = currentNode.shadowRoot.children;
			currentNode = Array.from(children).find(node => node.tagName !== "STYLE");
		}

		if (isNodeTabbable(currentNode)) {
			tabbablesNodes.push(currentNode);
		}

		if (currentNode.tagName === "SLOT") {
			getTabbables(currentNode.assignedNodes(), tabbablesNodes);
		} else {
			getTabbables(currentNode.children, tabbablesNodes);
		}
	});

	return tabbablesNodes;
};

const findNodeOwner = node => {
	if (!(node instanceof HTMLElement)) {
		throw new Error("Argument node should be of type HTMLElement");
	}

	const ownerTypes = [HTMLHtmlElement, HTMLIFrameElement];
	let currentShadowRootFlag = true;
	let currentCustomElementFlag = true;

	while (node) {
		if (node.toString() === "[object ShadowRoot]") {
			// Web Component
			// or the shadow root of web component with attached shadow root
			if (currentShadowRootFlag) {
				currentShadowRootFlag = false;
			}
			if (!currentCustomElementFlag && !currentShadowRootFlag) {
				return node;
			}
		} else if (node.tagName && node.tagName.indexOf("-") > -1) {
			if (currentCustomElementFlag) {
				currentCustomElementFlag = false;
			} else {
				return node;
			}
		} else if (ownerTypes.indexOf(node.constructor) > -1) {
			// Document or Iframe reached
			return node;
		}

		node = node.parentNode || node.host;
	}
};

const getEffectiveAriaLabelText = el => {
	if (!el.ariaLabelledby) {
		if (el.ariaLabel) {
			return el.ariaLabel;
		}

		return undefined;
	}

	return getAriaLabelledByTexts(el);
};

/**
 *
 * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts
 * @param {HTMLElement} ownerDocument (Optional) Defines the HTMLElement(might document or custom element) where the you want to search for the texts.
 * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument
 */
const getAriaLabelledByTexts = (el, ownerDocument, readyIds = "") => {
	const ids = (readyIds && readyIds.split(" ")) || el.ariaLabelledby.split(" ");
	const owner = ownerDocument || findNodeOwner(el);
	let result = "";

	ids.forEach((elementId, index) => {
		const element = owner.querySelector(`[id='${elementId}']`);
		result += `${element ? element.textContent : ""}`;

		if (index < ids.length - 1) {
			result += " ";
		}
	});

	return result;
};

/**
 * @lends sap.ui.webcomponents.main.types.ListMode.prototype
 * @public
 */
const ListModes = {
	/**
	 * Default mode (no selection).
	 * @public
	 * @type {None}
	 */
	None: "None",

	/**
	 * Right-positioned single selection mode (only one list item can be selected).
	 * @public
	 * @type {SingleSelect}
	 */
	SingleSelect: "SingleSelect",

	/**
	 * Left-positioned single selection mode (only one list item can be selected).
	 * @public
	 * @type {SingleSelectBegin}
	 */
	SingleSelectBegin: "SingleSelectBegin",

	/**
	 * Selected item is highlighted but no selection element is visible
	 * (only one list item can be selected).
	 * @public
	 * @type {SingleSelectEnd}
	 */
	SingleSelectEnd: "SingleSelectEnd",

	/**
	 * Selected item is highlighted and selection is changed upon arrow navigation
	 * (only one list item can be selected - this is always the focused item).
	 * @public
	 * @type {SingleSelectAuto}
	 */
	SingleSelectAuto: "SingleSelectAuto",

	/**
	 * Multi selection mode (more than one list item can be selected).
	 * @public
	 * @type {MultiSelect}
	 */
	MultiSelect: "MultiSelect",

	/**
	 * Delete mode (only one list item can be deleted via provided delete button)
	 * @public
	 * @type {Delete}
	 */
	Delete: "Delete",
};

/**
 * @class
 * Defines the type of <code>ui5-list</code>.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.ListMode
 * @public
 * @enum {string}
 */
class ListMode extends DataType {
	static isValid(value) {
		return !!ListModes[value];
	}
}

ListMode.generataTypeAcessors(ListModes);

/**
 * @lends sap.ui.webcomponents.main.types.ListSeparators.prototype
 * @public
 */
const ListSeparatorsTypes = {
	/**
	 * Separators between the items including the last and the first one.
	 * @public
	 * @type {All}
	 */
	All: "All",
	/**
	 * Separators between the items.
	 * <b>Note:</b> This enumeration depends on the theme.
	 * @public
	 * @type {Inner}
	 */
	Inner: "Inner",
	/**
	 * No item separators.
	 * @public
	 * @type {None}
	 */
	None: "None",
};

/**
 * @class
 * Defines which separator style will be applied for the list items.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.ListSeparators
 * @public
 * @enum {string}
 */
class ListSeparators extends DataType {
	static isValid(value) {
		return !!ListSeparatorsTypes[value];
	}
}

ListSeparators.generataTypeAcessors(ListSeparatorsTypes);

/**
 * Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events
 * like media queries, orientation change or resizing.
 *
 * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap
 * dynamically depending on the capabilities of the browser or device.
 *
 * @namespace
 * @name Device
 */

const Device$1 = {};

//* ******* OS Detection ********

/**
 * Contains information about the operating system of the Device.
 * @name Device.os
 */

/**
 * Enumeration containing the names of known operating systems.
 * @name Device.os.OS
 */

/**
 * The name of the operating system.
 * @name Device.os.name
 * @type String
 */

/**
 * The version of the operating system as <code>string</code>. Might be empty if no version can be determined.
 * @name Device.os.versionStr
 * @type String
 */

/**
 * The version of the operating system as <code>float</code>. Might be <code>-1</code> if no version can be determined.
 * @name Device.os.version
 * @type float
 */

/**
 * If this flag is set to <code>true</code>, a Windows operating system is used.
 * @name Device.os.windows
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, a Mac operating system is used.
 * @name Device.os.macintosh
 * @type boolean
 */

/*
 * If this flag is set to <code>true</code>, an iOS operating system is used.
 * @name Device.os.ios
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, an Android operating system is used.
 * @name Device.os.android
 * @type boolean
 */

/*
 * Windows operating system name.
 * @see Device.os.name
 * @name Device.os.OS.WINDOWS
 */

/**
 * MAC operating system name.
 * @see Device.os.name
 * @name Device.os.OS.MACINTOSH
 */

/**
 * iOS operating system name.
 * @see Device.os.name
 * @name Device.os.OS.IOS
 */

/**
 * Android operating system name.
 * @see Device.os.name
 * @name Device.os.OS.ANDROID
 */

const OS = {
	"WINDOWS": "win",
	"MACINTOSH": "mac",
	"IOS": "iOS",
	"ANDROID": "Android",
};

const _getMobileOS = () => {
	const userAgent = navigator.userAgent;

	let rPlatform, // regular expression for platform
		aMatches;

	// iOS, Android
	rPlatform = /\(([a-zA-Z ]+);\s(?:[U]?[;]?)([\D]+)((?:[\d._]*))(?:.*[)][^\d]*)([\d.]*)\s/;
	aMatches = userAgent.match(rPlatform);

	if (aMatches) {
		const rAppleDevices = /iPhone|iPad|iPod/;

		if (aMatches[0].match(rAppleDevices)) {
			aMatches[3] = aMatches[3].replace(/_/g, ".");

			return ({
				"name": OS.IOS,
				"versionStr": aMatches[3],
			});
		}

		if (aMatches[2].match(/Android/)) {
			aMatches[2] = aMatches[2].replace(/\s/g, "");
			return ({
				"name": OS.ANDROID,
				"versionStr": aMatches[3],
			});
		}
	}

	// Firefox on Android
	rPlatform = /\((Android)[\s]?([\d][.\d]*)?;.*Firefox\/[\d][.\d]*/;
	aMatches = userAgent.match(rPlatform);
	if (aMatches) {
		return ({
			"name": OS.ANDROID,
			"versionStr": aMatches.length === 3 ? aMatches[2] : "",
		});
	}
};

const _getDesktopOS = () => {
	const sPlatform = navigator.platform;
	if (sPlatform.indexOf("Win") !== -1) {
		const rVersion = /Windows NT (\d+).(\d)/i; // userAgent since windows 10: Windows NT 10[...]
		const uaResult = navigator.userAgent.match(rVersion);

		return {
			"name": OS.WINDOWS,
			"versionStr": (uaResult && uaResult[1]) || "",
		};
	}

	if (sPlatform.indexOf("Mac") !== -1) {
		return {
			"name": OS.MACINTOSH,
			"versionStr": "",
		};
	}

	return null;
};

const _getOS = () => {
	return _getMobileOS() || _getDesktopOS();
};

const _setOS = () => {
	if (Device$1.os) {
		return;
	}

	Device$1.os = _getOS() || {};
	Device$1.os.OS = OS;
	Device$1.os.version = Device$1.os.versionStr ? parseFloat(Device$1.os.versionStr) : -1;

	if (Device$1.os.name) {
		Object.keys(OS).forEach(name => {
			if (OS[name] === Device$1.os.name) {
				Device$1.os[name.toLowerCase()] = true;
			}
		});
	}
};

//* ******* Browser Detection ********

/**
 * Contains information about the used browser.
 * @name Device.browser
 */

/**
 * Enumeration containing the names of known browsers.
 * @name Device.browser.BROWSER
 *
 * The name of the browser.
 * @name Device.browser.name
 * @type String
 */

/**
 * The version of the browser as <code>string</code>. Might be empty if no version can be determined.
 * @name Device.browser.versionStr
 * @type String
 */

/**
 * The version of the browser as <code>float</code>. Might be <code>-1</code> if no version can be determined.
 * @name Device.browser.version
 * @type float
 */

/**
 * If this flag is set to <code>true</code>, the mobile variant of the browser is used or
 * a tablet or phone device is detected. This information might not be available for all browsers.
 * @name Device.browser.mobile
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.
 * @name Device.browser.internet_explorer
 * @type boolean
 * @deprecated since 1.20, use {@link Device.browser.msie} instead.
 */

/**
 * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.
 * @name Device.browser.msie
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Microsoft Edge browser is used.
 * @name Device.browser.edge
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.
 * @name Device.browser.firefox
 */

/**
 * If this flag is set to <code>true</code>, the Google Chrome browser is used.
 * @name Device.browser.chrome
 * @type boolean
 *
 * If this flag is set to <code>true</code>, the Apple Safari browser is used.
 *
 * <b>Note:</b>
 * This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices.
 * Please also note the flags {@link Device.browser.fullscreen} and {@link Device.browser.webview}.
 *
 * @name Device.browser.safari
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.
 *
 * <b>Note:</b>
 * This flag is also <code>true</code> when the used browser was based on the Webkit engine, but
 * uses another rendering engine in the meantime. For example the Chrome browser started from version 28 and above
 * uses the Blink rendering engine.
 *
 * @name Device.browser.webkit
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.
 *
 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
 * the availability of {@link Device.browser.version}.
 *
 * @name Device.browser.fullscreen
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.
 *
 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
 * the availability of {@link Device.browser.version}.
 *
 * @name Device.browser.webview
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the Phantom JS browser is used.
 * @name Device.browser.phantomJS
 * @type boolean
 */

/**
 * The version of the used Webkit engine, if available.
 * @name Device.browser.webkitVersion
 * @type String
 */

/**
 * If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.
 * @name Device.browser.mozilla
 * @type boolean
 */

/**
 * Internet Explorer browser name.
 * @name Device.browser.BROWSER.INTERNET_EXPLORER
 */

/**
 * Edge browser name.
 * @name Device.browser.BROWSER.EDGE
 */

/**
 * Firefox browser name.
 * @name Device.browser.BROWSER.FIREFOX
 */

/**
 * Chrome browser name.
 * @name Device.browser.BROWSER.CHROME
 */

/**
 * Safari browser name.
 * @name Device.browser.BROWSER.SAFARI
 */

/**
 * Android stock browser name.
 * @name Device.browser.BROWSER.ANDROID
 */

const BROWSER = {
	"INTERNET_EXPLORER": "ie",
	"EDGE": "ed",
	"FIREFOX": "ff",
	"CHROME": "cr",
	"SAFARI": "sf",
	"ANDROID": "an",
};

/*!
* Taken from jQuery JavaScript Library v1.7.1
* http://jquery.com/
*
* Copyright 2011, John Resig
* Dual licensed under the MIT or GPL Version 2 licenses.
* http://jquery.org/license
*
* Includes Sizzle.js
* http://sizzlejs.com/
* Copyright 2011, The Dojo Foundation
* Released under the MIT, BSD, and GPL Licenses.
*
* Date: Mon Nov 21 21:11:03 2011 -0500
*/
const _calcBrowser = () => {
	const sUserAgent = navigator.userAgent.toLowerCase();

	const rwebkit = /(webkit)[ /]([\w.]+)/;
	const rmsie = /(msie) ([\w.]+)/;
	const rmsie11 = /(trident)\/[\w.]+;.*rv:([\w.]+)/;
	const redge = /(edge)[ /]([\w.]+)/;
	const rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;

	// WinPhone IE11 and MS Edge userAgents contain "WebKit" and "Mozilla" and therefore must be checked first
	const browserMatch = redge.exec(sUserAgent)
		|| rmsie11.exec(sUserAgent)
		|| rwebkit.exec(sUserAgent)
		|| rmsie.exec(sUserAgent)
		|| (sUserAgent.indexOf("compatible") < 0 && rmozilla.exec(sUserAgent)) || [];

	const oRes = {
		browser: browserMatch[1] || "",
		version: browserMatch[2] || "0",
	};
	oRes[oRes.browser] = true;
	return oRes;
};

const _getBrowser = () => {
	const oBrowser = _calcBrowser();
	const sUserAgent = navigator.userAgent;
	const oNavigator = window.navigator;

	// jQuery checks for user agent strings. We differentiate between browsers
	let oExpMobile;
	let oResult;
	let fVersion;

	// Mozilla
	if (oBrowser.mozilla) {
		oExpMobile = /Mobile/;
		if (sUserAgent.match(/Firefox\/(\d+\.\d+)/)) {
			fVersion = parseFloat(RegExp.$1);
			oResult = {
				name: BROWSER.FIREFOX,
				versionStr: `${fVersion}`,
				version: fVersion,
				mozilla: true,
				mobile: oExpMobile.test(sUserAgent),
			};
		} else {
			// unknown mozilla browser
			oResult = {
				mobile: oExpMobile.test(sUserAgent),
				mozilla: true,
				version: -1,
			};
		}
	} else if (oBrowser.webkit) {
		// webkit version is needed for calculation if the mobile android device is a tablet (calculation of other mobile devices work without)
		const regExpWebkitVersion = sUserAgent.toLowerCase().match(/webkit[/]([\d.]+)/);
		let webkitVersion;
		if (regExpWebkitVersion) {
			webkitVersion = regExpWebkitVersion[1];
		}
		oExpMobile = /Mobile/;
		const aChromeMatch = sUserAgent.match(/(Chrome|CriOS)\/(\d+\.\d+).\d+/);
		const aFirefoxMatch = sUserAgent.match(/FxiOS\/(\d+\.\d+)/);
		const aAndroidMatch = sUserAgent.match(/Android .+ Version\/(\d+\.\d+)/);

		if (aChromeMatch || aFirefoxMatch || aAndroidMatch) {
			let sName,
				sVersion,
				bMobile;

			if (aChromeMatch) {
				sName = BROWSER.CHROME;
				bMobile = oExpMobile.test(sUserAgent);
				sVersion = parseFloat(aChromeMatch[2]);
			} else if (aFirefoxMatch) {
				sName = BROWSER.FIREFOX;
				bMobile = true;
				sVersion = parseFloat(aFirefoxMatch[1]);
			} else if (aAndroidMatch) {
				sName = BROWSER.ANDROID;
				bMobile = oExpMobile.test(sUserAgent);
				sVersion = parseFloat(aAndroidMatch[1]);
			}

			oResult = {
				name: sName,
				mobile: bMobile,
				versionStr: `${sVersion}`,
				version: sVersion,
				webkit: true,
				webkitVersion,
			};
		} else { // Safari might have an issue with sUserAgent.match(...); thus changing
			const oExp = /(Version|PhantomJS)\/(\d+\.\d+).*Safari/;
			const bStandalone = oNavigator.standalone;
			if (oExp.test(sUserAgent)) {
				const aParts = oExp.exec(sUserAgent);
				fVersion = parseFloat(aParts[2]);
				oResult = {
					name: BROWSER.SAFARI,
					versionStr: `${fVersion}`,
					fullscreen: false,
					webview: false,
					version: fVersion,
					mobile: oExpMobile.test(sUserAgent),
					webkit: true,
					webkitVersion,
					phantomJS: aParts[1] === "PhantomJS",
				};
			} else if (/iPhone|iPad|iPod/.test(sUserAgent) && !(/CriOS/.test(sUserAgent)) && !(/FxiOS/.test(sUserAgent)) && (bStandalone === true || bStandalone === false)) {
				// WebView or Standalone mode on iOS
				oResult = {
					name: BROWSER.SAFARI,
					version: -1,
					fullscreen: bStandalone,
					webview: !bStandalone,
					mobile: oExpMobile.test(sUserAgent),
					webkit: true,
					webkitVersion,
				};
			} else { // other webkit based browser
				oResult = {
					mobile: oExpMobile.test(sUserAgent),
					webkit: true,
					webkitVersion,
					version: -1,
				};
			}
		}
	} else if (oBrowser.msie || oBrowser.trident) {
		fVersion = parseFloat(oBrowser.version);

		oResult = {
			name: BROWSER.INTERNET_EXPLORER,
			versionStr: `${fVersion}`,
			version: fVersion,
			msie: true,
			mobile: false,
		};
	} else if (oBrowser.edge) {
		fVersion = parseFloat(oBrowser.version);
		oResult = {
			name: BROWSER.EDGE,
			versionStr: `${fVersion}`,
			version: fVersion,
			edge: true,
		};
	} else {
		oResult = {
			name: "",
			versionStr: "",
			version: -1,
			mobile: false,
		};
	}

	return oResult;
};

const _setBrowser = () => {
	Device$1.browser = _getBrowser();
	Device$1.browser.BROWSER = BROWSER;

	if (Device$1.browser.name) {
		Object.keys(BROWSER).forEach(b => {
			if (BROWSER[b] === Device$1.browser.name) {
				Device$1.browser[b.toLowerCase()] = true;
			}
		});
	}
};

const isIE = () => {
	if (!Device$1.browser) {
		_setBrowser();
	}
	return !!Device$1.browser.msie;
};

const isSafari = () => {
	if (!Device$1.browser) {
		_setBrowser();
	}
	return !!Device$1.browser.safari;
};

//* ******* Support Detection ********

const _setSupport = () => {
	if (Device$1.support) {
		return;
	}

	if (!Device$1.browser) {
		_setBrowser();
	}

	Device$1.support = {};
	Device$1.support.touch = !!(("ontouchstart" in window) || (navigator.maxTouchPoints > 0) || (window.DocumentTouch && document instanceof window.DocumentTouch));
};

const supportTouch = () => {
	if (!Device$1.support) {
		_setSupport();
	}

	return !!Device$1.support.touch;
};

//* ******* System Detection ********

/**
 * Provides a basic categorization of the used device based on various indicators.
 *
 * <b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.
 *
 * @namespace
 * @name Device.system
 */

/**
 * If this flag is set to <code>true</code>, the device is recognized as a tablet.
 *
 * <b>Note:</b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher.
 * Also see the documentation for {@link Device.system.combi} devices.
 * You can use the following logic to ensure that the current device is a tablet device:
 *
 * <pre>
 * if(Device.system.tablet && !Device.system.desktop){
 *	...tablet related commands...
 * }
 * </pre>
 *
 * @name Device.system.tablet
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the device is recognized as a phone.
 *
 * @name Device.system.phone
 * @type boolean
 */

/**
 * If this flag is set to <code>true</code>, the device is recognized as a desktop system.
 *
 * @name Device.system.desktop
 * @type boolean
 */

/**
 * Indicates if the device is recognized as a combination of a desktop system and tablet.
 *
 * <b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported
 * natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.
 *
 * @name Device.system.combi
 * @type boolean
 */

/**
 * @name Device.system.SYSTEMTYPE
 * Enumeration containing the names of known types of the devices.
 */

const SYSTEMTYPE = {
	"TABLET": "tablet",
	"PHONE": "phone",
	"DESKTOP": "desktop",
	"COMBI": "combi",
};

const _isTablet = () => {
	const sUserAgent = navigator.userAgent;
	if (Device$1.os.name === Device$1.os.OS.IOS) {
		return /ipad/i.test(sUserAgent);
	}
	// in real mobile device
	if (supportTouch()) {
		if (Device$1.os.windows && Device$1.os.version >= 8) {
			return true;
		}

		if (Device$1.browser.chrome && Device$1.os.android && Device$1.os.version >= 4.4) {
			// From Android version 4.4, WebView also uses Chrome as Kernel.
			// We can use the user agent pattern defined in Chrome to do phone/tablet detection
			// According to the information here: https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent,
			//  the existence of "Mobile" indicates it's a phone. But because the crosswalk framework which is used in Fiori Client
			//  inserts another "Mobile" to the user agent for both tablet and phone, we need to check whether "Mobile Safari/<Webkit Rev>" exists.
			return !/Mobile Safari\/[.0-9]+/.test(sUserAgent);
		}
		let densityFactor = window.devicePixelRatio ? window.devicePixelRatio : 1; // may be undefined in Windows Phone devices
		// On Android sometimes window.screen.width returns the logical CSS pixels, sometimes the physical device pixels;
		// Tests on multiple devices suggest this depends on the Webkit version.
		// The Webkit patch which changed the behavior was done here: https://bugs.webkit.org/show_bug.cgi?id=106460
		// Chrome 27 with Webkit 537.36 returns the logical pixels,
		// Chrome 18 with Webkit 535.19 returns the physical pixels.
		// The BlackBerry 10 browser with Webkit 537.10+ returns the physical pixels.
		// So it appears like somewhere above Webkit 537.10 we do not hve to divide by the devicePixelRatio anymore.
		if (Device$1.os.android && Device$1.browser.webkit && (parseFloat(Device$1.browser.webkitVersion) > 537.10)) {
			densityFactor = 1;
		}

		// this is how android distinguishes between tablet and phone
		// http://android-developers.blogspot.de/2011/07/new-tools-for-managing-screen-sizes.html
		const bTablet = (Math.min(window.screen.width / densityFactor, window.screen.height / densityFactor) >= 600);

		// special workaround for Nexus 7 where the window.screen.width is 600px or 601px in portrait mode (=> tablet)
		// but window.screen.height 552px in landscape mode (=> phone), because the browser UI takes some space on top.
		// So the detected device type depends on the orientation :-(
		// actually this is a Chrome bug, as "width"/"height" should return the entire screen's dimensions and
		// "availWidth"/"availHeight" should return the size available after subtracting the browser UI

		/*
				if (isLandscape() &&
					(window.screen.height === 552 || window.screen.height === 553) // old/new Nexus 7
					&&
					(/Nexus 7/i.test(sUserAgent))) {
					bTablet = true;
				}
				*/

		return bTablet;
	}
	// This simple android phone detection can be used here because this is the mobile emulation mode in desktop browser
	const bAndroidPhone = (/(?=android)(?=.*mobile)/i.test(sUserAgent));
	// in desktop browser, it's detected as tablet when
	// 1. Windows 8 device with a touch screen where "Touch" is contained in the userAgent
	// 2. Android emulation and it's not an Android phone
	return (Device$1.browser.msie && sUserAgent.indexOf("Touch") !== -1) || (Device$1.os.android && !bAndroidPhone);
};

const _getSystem = () => {
	const bTabletDetected = _isTablet();
	const isWin8Upwards = Device$1.os.windows && Device$1.os.version >= 8;

	const oSystem = {};
	oSystem.tablet = !!((Device$1.support.touch || isWin8Upwards) && bTabletDetected);
	oSystem.phone = !!((Device$1.os.windows_phone || (Device$1.support.touch)) && !bTabletDetected);
	oSystem.desktop = !!((!oSystem.tablet && !oSystem.phone) || isWin8Upwards);
	oSystem.combi = oSystem.desktop && oSystem.tablet;
	oSystem.SYSTEMTYPE = SYSTEMTYPE;

	return oSystem;
};

const _setSystem = () => {
	_setSupport();
	_setOS();

	Device$1.system = {};
	Device$1.system = _getSystem();
	if (Device$1.system.tablet || Device$1.system.phone) {
		Device$1.browser.mobile = true;
	}
};

const isDesktop = () => {
	if (!Device$1.system) {
		_setSystem();
	}

	return Device$1.system.desktop;
};

const isPhone = () => {
	if (!Device$1.system) {
		_setSystem();
	}

	return Device$1.system.phone;
};

/**
 * @lends sap.ui.webcomponents.main.types.BusyIndicatorSize.prototype
 * @public
 */
const BusyIndicatorSizes = {
	/**
	 * small size
	 * @public
	 * @type {Small}
	 */
	Small: "Small",

	/**
	 * medium size
	 * @public
	 * @type {Medium}
	 */
	Medium: "Medium",

	/**
	 * large size
	 * @public
	 * @type {Large}
	 */
	Large: "Large",
};

/**
 * @class
 * Different types of BusyIndicator.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.BusyIndicatorSize
 * @public
 * @enum {string}
 */
class BusyIndicatorSize extends DataType {
	static isValid(value) {
		return !!BusyIndicatorSizes[value];
	}
}

BusyIndicatorSize.generataTypeAcessors(BusyIndicatorSizes);

/*
	lit-html directive that removes and attribute if it is undefined
*/
var ifDefined = directive(value => part => {
	if ((value === undefined) && part instanceof AttributePart) {
		if (value !== part.value) {
			const name = part.committer.name;
			part.committer.element.removeAttribute(name);
		}
	} else if (part.committer && part.committer.element && part.committer.element.getAttribute(part.committer.name) === value) {
		part.setValue(noChange);
	} else {
		part.setValue(value);
	}
});

const block0 = (context) => { return scopedHtml`<label class="ui5-label-root" dir="${ifDefined(context.effectiveDir)}" @click=${context._onclick} for="${ifDefined(context.for)}"><span class="ui5-label-text-wrapper"><bdi id="${ifDefined(context._id)}-bdi"><slot></slot></bdi></span><span class="ui5-label-required-colon"></span></label>`; };


const main = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0(context);
};

var defaultThemeBase = ":root{--sapBrandColor:#0a6ed1;--sapHighlightColor:#0854a0;--sapBaseColor:#fff;--sapShellColor:#354a5f;--sapBackgroundColor:#f7f7f7;--sapFontFamily:\"72\",\"72full\",Arial,Helvetica,sans-serif;--sapFontLightFamily:\"72-Light\",\"72-Lightfull\",\"72\",\"72full\",Arial,Helvetica,sans-serif;--sapFontBoldFamily:\"72-Bold\",\"72-Boldfull\",\"72\",\"72full\",Arial,Helvetica,sans-serif;--sapFontHeaderFamily:\"72\",\"72full\",Arial,Helvetica,sans-serif;--sapFontSize:.875rem;--sapFontSmallSize:.75rem;--sapFontLargeSize:1rem;--sapFontHeader1Size:2.25rem;--sapFontHeader2Size:1.5rem;--sapFontHeader3Size:1.25rem;--sapFontHeader4Size:1.125rem;--sapFontHeader5Size:1rem;--sapFontHeader6Size:.875rem;--sapTextColor:#32363a;--sapLinkColor:#0a6ed1;--sapLink_Hover_Color:#0854a0;--sapLink_Active_Color:#0a6ed1;--sapLink_Visited_Color:#0a6ed1;--sapLink_InvertedColor:#d3e8fd;--sapLink_SubtleColor:#074888;--sapCompanyLogo:none;--sapBackgroundImage:none;--sapBackgroundImageOpacity:1.0;--sapBackgroundImageRepeat:false;--sapSelectedColor:#0854a0;--sapActiveColor:#0854a0;--sapHighlightTextColor:#fff;--sapTitleColor:#32363a;--sapNegativeColor:#b00;--sapCriticalColor:#e9730c;--sapPositiveColor:#107e3e;--sapInformativeColor:#0a6ed1;--sapNeutralColor:#6a6d70;--sapNegativeElementColor:#b00;--sapCriticalElementColor:#e9730c;--sapPositiveElementColor:#107e3e;--sapInformativeElementColor:#0a6ed1;--sapNeutralElementColor:#6a6d70;--sapNegativeTextColor:#b00;--sapPositiveTextColor:#107e3e;--sapCriticalTextColor:#e9730c;--sapInformativeTextColor:#053b70;--sapNeutralTextColor:#6a6d70;--sapNeutralBorderColor:#6a6d70;--sapErrorColor:#b00;--sapErrorBorderColor:#b00;--sapWarningColor:#e9730c;--sapWarningBorderColor:#e9730c;--sapSuccessColor:#107e3e;--sapSuccessBorderColor:#107e3e;--sapInformationColor:#0a6ed1;--sapInformationBorderColor:#0a6ed1;--sapErrorBackground:#ffebeb;--sapWarningBackground:#fef7f1;--sapSuccessBackground:#f1fdf6;--sapInformationBackground:#f5faff;--sapNeutralBackground:#f4f4f4;--sapIndicationColor_1:#800;--sapIndicationColor_1_Hover_Background:#6f0000;--sapIndicationColor_1_Active_Background:#500;--sapIndicationColor_1_TextColor:#fff;--sapIndicationColor_2:#b00;--sapIndicationColor_2_Hover_Background:#a20000;--sapIndicationColor_2_Active_Background:#800;--sapIndicationColor_2_TextColor:#fff;--sapIndicationColor_3:#e9730c;--sapIndicationColor_3_Hover_Background:#da6c0b;--sapIndicationColor_3_Active_Background:#cc650b;--sapIndicationColor_3_TextColor:#fff;--sapIndicationColor_4:#107e3e;--sapIndicationColor_4_Hover_Background:#0d6733;--sapIndicationColor_4_Active_Background:#0a5128;--sapIndicationColor_4_TextColor:#fff;--sapIndicationColor_5:#0a6ed1;--sapIndicationColor_5_Hover_Background:#0961b9;--sapIndicationColor_5_Active_Background:#0854a0;--sapIndicationColor_5_TextColor:#fff;--sapIndicationColor_6:#0f828f;--sapIndicationColor_6_Hover_Background:#0d6d78;--sapIndicationColor_6_Active_Background:#0a5861;--sapIndicationColor_6_TextColor:#fff;--sapIndicationColor_7:#925ace;--sapIndicationColor_7_Hover_Background:#8546c8;--sapIndicationColor_7_Active_Background:#7838bd;--sapIndicationColor_7_TextColor:#fff;--sapIndicationColor_8:#c0399f;--sapIndicationColor_8_Hover_Background:#ac338f;--sapIndicationColor_8_Active_Background:#992d7e;--sapIndicationColor_8_TextColor:#fff;--sapElement_LineHeight:2.75rem;--sapElement_Height:2.25rem;--sapElement_BorderWidth:.0625rem;--sapElement_BorderCornerRadius:.25rem;--sapElement_Compact_LineHeight:2rem;--sapElement_Compact_Height:1.625rem;--sapElement_Condensed_LineHeight:1.5rem;--sapElement_Condensed_Height:1.375rem;--sapContent_LineHeight:1.4;--sapContent_IconHeight:1rem;--sapContent_IconColor:#0854a0;--sapContent_ContrastIconColor:#fff;--sapContent_NonInteractiveIconColor:#6a6d70;--sapContent_MarkerIconColor:#286eb4;--sapContent_MarkerTextColor:#0e7581;--sapContent_ImagePlaceholderBackground:#ccc;--sapContent_ImagePlaceholderForegroundColor:#fff;--sapContent_RatedColor:#d08014;--sapContent_UnratedColor:#89919a;--sapContent_FocusColor:#000;--sapContent_FocusStyle:dotted;--sapContent_FocusWidth:.0625rem;--sapContent_ContrastFocusColor:#fff;--sapContent_ShadowColor:#000;--sapContent_ContrastShadowColor:#fff;--sapContent_Shadow0:0 0 0 0.0625rem rgba(0,0,0,0.1),0 0.125rem 0.5rem 0 rgba(0,0,0,0.1);--sapContent_Shadow1:0 0 0 0.0625rem rgba(0,0,0,0.42),0 0.125rem 0.5rem 0 rgba(0,0,0,0.3);--sapContent_Shadow2:0 0 0 0.0625rem rgba(0,0,0,0.42),0 0.625rem 1.875rem 0 rgba(0,0,0,0.3);--sapContent_Shadow3:0 0 0 0.0625rem rgba(0,0,0,0.42),0 1.25rem 5rem 0 rgba(0,0,0,0.3);--sapContent_TextShadow:0 0 0.125rem #fff;--sapContent_HeaderShadow:0 0 0.25rem 0 rgba(0,0,0,0.15),inset 0 -0.0625rem 0 0 #d9d9d9;--sapContent_SearchHighlightColor:#d4f7db;--sapContent_HelpColor:#3f8600;--sapContent_LabelColor:#6a6d70;--sapContent_MonospaceFontFamily:lucida console,monospace;--sapContent_DisabledTextColor:rgba(50,54,58,0.6);--sapContent_DisabledOpacity:0.4;--sapContent_ContrastTextThreshold:0.65;--sapContent_ContrastTextColor:#fff;--sapContent_ForegroundColor:#efefef;--sapContent_ForegroundBorderColor:#89919a;--sapContent_ForegroundTextColor:#32363a;--sapContent_BadgeBackground:#d04343;--sapContent_BadgeTextColor:#fff;--sapContent_Placeholderloading_Background:#e0e0e0;--sapContent_Placeholderloading_Gradient:linear-gradient(90deg,#e0e0e0 0%,#e0e0e0 35%,#d3d3d3 50%,#e0e0e0 65%,#e0e0e0);--sapContent_DragAndDropActiveColor:#0854a0;--sapContent_Selected_Background:#0854a0;--sapContent_Selected_TextColor:#fff;--sapContent_Selected_Hover_Background:#095caf;--sapContent_Illustrative_Color1:#0a6ed1;--sapContent_Illustrative_Color2:#72b5f8;--sapContent_Illustrative_Color3:#ffba10;--sapContent_Illustrative_Color4:#4a5055;--sapContent_Illustrative_Color5:#9da4aa;--sapContent_Illustrative_Color6:#c6cace;--sapContent_Illustrative_Color7:#e7e9ea;--sapContent_Illustrative_Color8:#fff;--sapShell_Background:#edeff0;--sapShell_BackgroundImage:linear-gradient(180deg,#dfe3e4,#f3f4f5);--sapShell_BackgroundGradient:linear-gradient(180deg,#dfe3e4,#f3f4f5);--sapShell_BackgroundImageOpacity:1.0;--sapShell_BackgroundImageRepeat:false;--sapShell_BorderColor:#354a5f;--sapShell_TextColor:#fff;--sapShell_InteractiveTextColor:#d1e8ff;--sapShell_InteractiveBorderColor:#7996b4;--sapShell_GroupTitleTextColor:#32363a;--sapShell_Hover_Background:#283848;--sapShell_Active_Background:#23303e;--sapShell_Active_TextColor:#fff;--sapShell_Selected_Background:#23303e;--sapShell_Selected_TextColor:#fff;--sapShell_Selected_Hover_Background:#23303e;--sapShell_Favicon:none;--sapShell_Navigation_Background:#fff;--sapShell_Navigation_SelectedColor:#0854a0;--sapShell_Navigation_Selected_TextColor:#0854a0;--sapShell_Navigation_TextColor:#32363a;--sapShell_Shadow:0 0 0.25rem 0 rgba(0,0,0,0.15),inset 0 -0.0625rem 0 0 rgba(0,0,0,0.2);--sapButton_BorderWidth:.0625rem;--sapButton_BorderCornerRadius:.25rem;--sapButton_Background:#fff;--sapButton_BorderColor:#0854a0;--sapButton_TextColor:#0854a0;--sapButton_Hover_Background:#ebf5fe;--sapButton_Hover_BorderColor:#0854a0;--sapButton_Hover_TextColor:#0854a0;--sapButton_IconColor:#0854a0;--sapButton_Active_Background:#0854a0;--sapButton_Active_BorderColor:#0854a0;--sapButton_Active_TextColor:#fff;--sapButton_Emphasized_Background:#0a6ed1;--sapButton_Emphasized_BorderColor:#0a6ed1;--sapButton_Emphasized_TextColor:#fff;--sapButton_Emphasized_Hover_Background:#085caf;--sapButton_Emphasized_Hover_BorderColor:#085caf;--sapButton_Emphasized_Hover_TextColor:#fff;--sapButton_Emphasized_Active_Background:#0854a0;--sapButton_Emphasized_Active_BorderColor:#0854a0;--sapButton_Emphasized_TextShadow:transparent;--sapButton_Accept_Background:#fff;--sapButton_Accept_BorderColor:#107e3e;--sapButton_Accept_Hover_Background:#f1fdf6;--sapButton_Accept_Hover_BorderColor:#107e3e;--sapButton_Accept_Hover_TextColor:#107e3e;--sapButton_Accept_Active_Background:#0d6733;--sapButton_Accept_Active_BorderColor:#0d6733;--sapButton_Accept_TextColor:#107e3e;--sapButton_Accept_Selected_Background:#0d6733;--sapButton_Accept_Selected_BorderColor:#0d6733;--sapButton_Accept_Selected_TextColor:#fff;--sapButton_Accept_Selected_Hover_Background:#107e3e;--sapButton_Accept_Selected_Hover_BorderColor:#107e3e;--sapButton_Reject_Background:#fff;--sapButton_Reject_BorderColor:#b00;--sapButton_Reject_Hover_Background:#ffebeb;--sapButton_Reject_Hover_BorderColor:#b00;--sapButton_Reject_Hover_TextColor:#b00;--sapButton_Reject_Active_Background:#a20000;--sapButton_Reject_Active_BorderColor:#a20000;--sapButton_Reject_TextColor:#b00;--sapButton_Reject_Selected_Background:#a20000;--sapButton_Reject_Selected_BorderColor:#a20000;--sapButton_Reject_Selected_TextColor:#fff;--sapButton_Reject_Selected_Hover_Background:#b00;--sapButton_Reject_Selected_Hover_BorderColor:#b00;--sapButton_Lite_Background:transparent;--sapButton_Lite_BorderColor:transparent;--sapButton_Lite_TextColor:#0854a0;--sapButton_Lite_Hover_Background:#ebf5fe;--sapButton_Lite_Hover_BorderColor:#0854a0;--sapButton_Lite_Hover_TextColor:#0854a0;--sapButton_Lite_Active_Background:#0854a0;--sapButton_Lite_Active_BorderColor:#0854a0;--sapButton_Selected_Background:#0854a0;--sapButton_Selected_BorderColor:#0854a0;--sapButton_Selected_TextColor:#fff;--sapButton_Selected_Hover_Background:#095caf;--sapButton_Selected_Hover_BorderColor:#095caf;--sapButton_Attention_Background:#fff;--sapButton_Attention_BorderColor:#e9730c;--sapButton_Attention_TextColor:#e9730c;--sapButton_Attention_Hover_Background:#fef7f1;--sapButton_Attention_Hover_BorderColor:#e9730c;--sapButton_Attention_Hover_TextColor:#e9730c;--sapButton_Attention_Active_Background:#d1670b;--sapButton_Attention_Active_BorderColor:#d1670b;--sapButton_Attention_Selected_Background:#d1670b;--sapButton_Attention_Selected_BorderColor:#d1670b;--sapButton_Attention_Selected_TextColor:#fff;--sapButton_Attention_Selected_Hover_Background:#e9730c;--sapButton_Attention_Selected_Hover_BorderColor:#e9730c;--sapButton_Negative_Background:#b00;--sapButton_Negative_BorderColor:#b00;--sapButton_Negative_TextColor:#fff;--sapButton_Negative_Hover_Background:#970000;--sapButton_Negative_Hover_BorderColor:#970000;--sapButton_Negative_Hover_TextColor:#fff;--sapButton_Negative_Active_Background:#800;--sapButton_Negative_Active_BorderColor:#800;--sapButton_Critical_Background:#e9730c;--sapButton_Critical_BorderColor:#e9730c;--sapButton_Critical_TextColor:#fff;--sapButton_Critical_Hover_Background:#c7620a;--sapButton_Critical_Hover_BorderColor:#c7620a;--sapButton_Critical_Hover_TextColor:#fff;--sapButton_Critical_Active_Background:#b85b0a;--sapButton_Critical_Active_BorderColor:#b85b0a;--sapButton_Success_Background:#107e3e;--sapButton_Success_BorderColor:#107e3e;--sapButton_Success_TextColor:#fff;--sapButton_Success_Hover_Background:#0c5e2e;--sapButton_Success_Hover_BorderColor:#0c5e2e;--sapButton_Success_Hover_TextColor:#fff;--sapButton_Success_Active_Background:#0a5128;--sapButton_Success_Active_BorderColor:#0a5128;--sapButton_Information_Background:#0a6ed1;--sapButton_Information_BorderColor:#0a6ed1;--sapButton_Information_TextColor:#fff;--sapButton_Information_Hover_Background:#0961b9;--sapButton_Information_Hover_BorderColor:#0961b9;--sapButton_Information_Hover_TextColor:#fff;--sapButton_Information_Active_Background:#0854a0;--sapButton_Information_Active_BorderColor:#0854a0;--sapButton_Neutral_Background:#6a6d70;--sapButton_Neutral_BorderColor:#6a6d70;--sapButton_Neutral_TextColor:#fff;--sapButton_Neutral_Hover_Background:#595b5e;--sapButton_Neutral_Hover_BorderColor:#595b5e;--sapButton_Neutral_Hover_TextColor:#fff;--sapButton_Neutral_Active_Background:#515456;--sapButton_Neutral_Active_BorderColor:#515456;--sapButton_Track_Selected_Background:#ebf5fe;--sapButton_Track_Selected_TextColor:#32363a;--sapButton_Track_Background:#ededed;--sapButton_Track_TextColor:#32363a;--sapButton_TokenBackground:#fafafa;--sapButton_TokenBorderColor:#c2c2c2;--sapField_Background:#fff;--sapField_TextColor:#32363a;--sapField_PlaceholderTextColor:#74777a;--sapField_BorderColor:#89919a;--sapField_HelpBackground:#fff;--sapField_BorderWidth:.0625rem;--sapField_BorderCornerRadius:.125rem;--sapField_Hover_Background:#fff;--sapField_Hover_BorderColor:#0854a0;--sapField_Hover_HelpBackground:#ebf5fe;--sapField_Active_BorderColor:#0854a0;--sapField_Focus_Background:#fff;--sapField_Focus_BorderColor:#89919a;--sapField_Focus_HelpBackground:#fff;--sapField_ReadOnly_Background:hsla(0,0%,94.9%,0.5);--sapField_ReadOnly_BorderColor:#89919a;--sapField_ReadOnly_HelpBackground:hsla(0,0%,94.9%,0.5);--sapField_RequiredColor:#ce3b3b;--sapField_InvalidColor:#b00;--sapField_InvalidBackground:#fff;--sapField_WarningColor:#e9730c;--sapField_WarningBackground:#fff;--sapField_SuccessColor:#107e3e;--sapField_SuccessBackground:#fff;--sapField_InformationColor:#0a6ed1;--sapField_InformationBackground:#fff;--sapGroup_TitleBackground:transparent;--sapGroup_TitleBorderColor:#d9d9d9;--sapGroup_TitleTextColor:#32363a;--sapGroup_ContentBackground:#fff;--sapGroup_ContentBorderColor:#d9d9d9;--sapGroup_BorderWidth:.0625rem;--sapGroup_BorderCornerRadius:0;--sapGroup_FooterBackground:transparent;--sapToolbar_Background:transparent;--sapToolbar_SeparatorColor:#d9d9d9;--sapList_HeaderBackground:#f2f2f2;--sapList_HeaderBorderColor:#e4e4e4;--sapList_HeaderTextColor:#32363a;--sapList_BorderColor:#e4e4e4;--sapList_TextColor:#32363a;--sapList_Active_TextColor:#fff;--sapList_BorderWidth:.0625rem;--sapList_SelectionBackgroundColor:#e5f0fa;--sapList_SelectionBorderColor:#0854a0;--sapList_Hover_SelectionBackground:#d8e9f8;--sapList_Background:#fff;--sapList_Hover_Background:#f5f5f5;--sapList_AlternatingBackground:#fafafa;--sapList_GroupHeaderBackground:#fff;--sapList_GroupHeaderBorderColor:#d8d8d8;--sapList_GroupHeaderTextColor:#32363a;--sapList_FooterBackground:#fafafa;--sapList_FooterTextColor:#32363a;--sapList_TableGroupHeaderBackground:#efefef;--sapList_TableGroupHeaderBorderColor:#d8d8d8;--sapList_TableGroupHeaderTextColor:#32363a;--sapList_TableFooterBorder:#d8d8d8;--sapList_TableFixedBorderColor:#d8d8d8;--sapList_Active_Background:#0854a0;--sapScrollBar_FaceColor:#949494;--sapScrollBar_TrackColor:#fff;--sapScrollBar_BorderColor:#949494;--sapScrollBar_SymbolColor:#0854a0;--sapScrollBar_Dimension:.75rem;--sapScrollBar_Hover_FaceColor:#8c8c8c;--sapPageHeader_Background:#fff;--sapPageHeader_BorderColor:#d9d9d9;--sapPageHeader_TextColor:#32363a;--sapPageFooter_Background:#fff;--sapPageFooter_BorderColor:#d9d9d9;--sapPageFooter_TextColor:#32363a;--sapInfobar_Background:#0f828f;--sapInfobar_Hover_Background:#0e7581;--sapInfobar_Active_Background:#0a545c;--sapObjectHeader_Background:#fff;--sapObjectHeader_BorderColor:#d9d9d9;--sapBlockLayer_Background:#000;--sapTile_Background:#fff;--sapTile_Hover_Background:#f5f5f5;--sapTile_Active_Background:#f5f5f5;--sapTile_BorderColor:transparent;--sapTile_TitleTextColor:#32363a;--sapTile_TextColor:#6a6d70;--sapTile_IconColor:#5a7da0;--sapTile_SeparatorColor:#ccc;--sapAccentColor1:#d08014;--sapAccentColor2:#d04343;--sapAccentColor3:#db1f77;--sapAccentColor4:#c0399f;--sapAccentColor5:#6367de;--sapAccentColor6:#286eb4;--sapAccentColor7:#0f828f;--sapAccentColor8:#7ca10c;--sapAccentColor9:#925ace;--sapAccentColor10:#647987;--sapLegend_WorkingBackground:#fafafa;--sapLegend_NonWorkingBackground:#dedede;--sapLegend_CurrentDateTime:#c0399f;--sapLegendColor1:#d58215;--sapLegendColor2:#dc5b5b;--sapLegendColor3:#db1f77;--sapLegendColor4:#9b3b3b;--sapLegendColor5:#cf5db3;--sapLegendColor6:#286eb4;--sapLegendColor7:#1193a2;--sapLegendColor8:#8b9668;--sapLegendColor9:#647987;--sapLegendColor10:#892971;--sapLegendColor11:#725a3a;--sapLegendColor12:#bb2f2f;--sapLegendColor13:#bc1b66;--sapLegendColor14:#8b714f;--sapLegendColor15:#606190;--sapLegendColor16:#597da1;--sapLegendColor17:#49797e;--sapLegendColor18:#687a33;--sapLegendColor19:#295989;--sapLegendColor20:#5154bd;--sapLegendBackgroundColor1:#fdf3e7;--sapLegendBackgroundColor2:#faeaea;--sapLegendBackgroundColor3:#fce9f2;--sapLegendBackgroundColor4:#f8ecec;--sapLegendBackgroundColor5:#f9ebf5;--sapLegendBackgroundColor6:#ebf3fa;--sapLegendBackgroundColor7:#e8fbfd;--sapLegendBackgroundColor8:#f3f4ef;--sapLegendBackgroundColor9:#f1f3f4;--sapLegendBackgroundColor10:#f9ebf6;--sapLegendBackgroundColor11:#f6f2ed;--sapLegendBackgroundColor12:#faeaea;--sapLegendBackgroundColor13:#fce9f2;--sapLegendBackgroundColor14:#f5f2ee;--sapLegendBackgroundColor15:#f0f0f5;--sapLegendBackgroundColor16:#eff2f6;--sapLegendBackgroundColor17:#eff5f6;--sapLegendBackgroundColor18:#f5f7ed;--sapLegendBackgroundColor19:#ebf2f9;--sapLegendBackgroundColor20:#ecedf8;--sapChart_OrderedColor_1:#5899da;--sapChart_OrderedColor_2:#e8743b;--sapChart_OrderedColor_3:#19a979;--sapChart_OrderedColor_4:#ed4a7b;--sapChart_OrderedColor_5:#945ecf;--sapChart_OrderedColor_6:#13a4b4;--sapChart_OrderedColor_7:#525df4;--sapChart_OrderedColor_8:#bf399e;--sapChart_OrderedColor_9:#6c8893;--sapChart_OrderedColor_10:#ee6868;--sapChart_OrderedColor_11:#2f6497;--sapChart_Bad:#dc0d0e;--sapChart_Critical:#de890d;--sapChart_Good:#3fa45b;--sapChart_Neutral:#848f94;--sapChart_Sequence_1:#5899da;--sapChart_Sequence_2:#e8743b;--sapChart_Sequence_3:#19a979;--sapChart_Sequence_4:#ed4a7b;--sapChart_Sequence_5:#945ecf;--sapChart_Sequence_6:#13a4b4;--sapChart_Sequence_7:#525df4;--sapChart_Sequence_8:#bf399e;--sapChart_Sequence_9:#6c8893;--sapChart_Sequence_10:#ee6868;--sapChart_Sequence_11:#2f6497;--sapChart_Sequence_Neutral:#848f94;}";

var defaultTheme = ":root{--_ui5_calendar_header_height:3rem;--_ui5_calendar_header_arrow_button_width:2.5rem;--_ui5_calendar_header_padding:0.25rem 0;--_ui5_checkbox_root_side_padding:.6875rem;--_ui5_checkbox_icon_size:1rem;--_ui5_custom_list_item_height:3rem;--_ui5_custom_list_item_rb_min_width:2.75rem;--_ui5_day_picker_item_width:2.25rem;--_ui5_day_picker_item_height:2.875rem;--_ui5_day_picker_empty_height:3rem;--_ui5_datetime_picker_width:40.0625rem;--_ui5_datetime_picker_height:25rem;--_ui5_datetime_timeview_phonemode_width:19.5rem;--_ui5_datetime_timeview_padding:1rem;--_ui5_dialog_content_min_height:2.75rem;--_ui5_input_inner_padding:0 0.625rem;--_ui5_input_inner_padding_with_icon:0 0.25rem 0 0.625rem;--_ui5_input_value_state_icon_padding:var(--_ui5-input-icon-padding);--_ui5_list_no_data_height:3rem;--_ui5_list_item_cb_margin_right:0;--_ui5_list_item_title_size:var(--sapMFontLargeSize);--_ui5_list_item_img_size:3rem;--_ui5_list_item_img_margin:0.5rem 0.75rem 0.5rem 0rem;--_ui5_list_item_base_height:2.75rem;--_ui5_list_item_icon_size:1.125rem;--_ui5_list_busy_row_height:3rem;--_ui5_month_picker_item_height:3rem;--_ui5_year_picker_item_height:3rem;--_ui5_tokenizer_root_padding:0.1875rem;--_ui5_token_height:1.625rem;--_ui5_token_icon_size:1rem;--_ui5_token_icon_padding:0.25rem 0.5rem;--_ui5_token_wrapper_right_padding:0.3125rem;--_ui5_tl_bubble_padding:1rem;--_ui5_tl_indicator_before_bottom:-1.625rem;--_ui5_tl_padding:1rem 1rem 1rem .5rem;--_ui5_tl_li_margin_bottom:1.625rem;--_ui5_rb_height:2.75rem;--_ui5_rb_label_side_padding:.875rem;--_ui5_rb_focus_dist:.5rem;--_ui5_rb_inner_size:2.75rem;--_ui5_rb_svg_size:1.375rem;--_ui5_rb_label_width:calc(100% - 2.75rem);--_ui5_rb_rtl_focus_right:0.5rem;--_ui5_switch_text_on_left:calc(-100% + 1.9125rem);--_ui5_switch_slide_transform:translateX(100%) translateX(-1.875rem);--_ui5_switch_rtl_transform:translateX(1.875rem) translateX(-100%);--_ui5_switch_text_right:calc(-100% + 1.9125rem);--_ui5_tc_item_text:3rem;--_ui5_tc_item_text_text_only:3rem;--_ui5_tc_item_text_line_height:normal;--_ui5_tc_item_icon_size:1.5rem;--_ui5_tc_item_add_text_margin_top:0.625rem;--_ui5_textarea_padding:0.5625rem 0.6875rem;--_ui5-responnsive_popover_header_height:2.75rem;--ui5_side_navigation_item_height:2.75rem;--_ui5-tree-indent-step:1.5rem;--_ui5-tree-toggle-box-width:2.75rem;--_ui5-tree-toggle-box-height:2.25rem;--_ui5-tree-toggle-icon-size:1.0625rem;--_ui5_segmented_btn_border_radius:0.375rem;--ui5-avatar-initials-color:var(--sapContent_ImagePlaceholderForegroundColor);--ui5-avatar-initials-border:none;--ui5-avatar-accent1:var(--sapAccentColor1);--ui5-avatar-accent2:var(--sapAccentColor2);--ui5-avatar-accent3:var(--sapAccentColor3);--ui5-avatar-accent4:var(--sapAccentColor4);--ui5-avatar-accent5:var(--sapAccentColor5);--ui5-avatar-accent6:var(--sapAccentColor6);--ui5-avatar-accent7:var(--sapAccentColor7);--ui5-avatar-accent8:var(--sapAccentColor8);--ui5-avatar-accent9:var(--sapAccentColor9);--ui5-avatar-accent10:var(--sapAccentColor10);--ui5-avatar-placeholder:var(--sapContent_ImagePlaceholderBackground);--ui5-badge-font-size:0.75em;--ui5-badge-color-scheme-1-background:var(--sapLegendBackgroundColor1);--ui5-badge-color-scheme-1-border:var(--sapLegendColor1);--ui5-badge-color-scheme-2-background:var(--sapLegendBackgroundColor2);--ui5-badge-color-scheme-2-border:var(--sapLegendColor2);--ui5-badge-color-scheme-3-background:var(--sapLegendBackgroundColor3);--ui5-badge-color-scheme-3-border:var(--sapLegendColor3);--ui5-badge-color-scheme-4-background:var(--sapLegendBackgroundColor5);--ui5-badge-color-scheme-4-border:var(--sapLegendColor5);--ui5-badge-color-scheme-5-background:var(--sapLegendBackgroundColor20);--ui5-badge-color-scheme-5-border:var(--sapLegendColor20);--ui5-badge-color-scheme-6-background:var(--sapLegendBackgroundColor6);--ui5-badge-color-scheme-6-border:var(--sapLegendColor6);--ui5-badge-color-scheme-7-background:var(--sapLegendBackgroundColor7);--ui5-badge-color-scheme-7-border:var(--sapLegendColor7);--ui5-badge-color-scheme-8-background:var(--sapLegendBackgroundColor8);--ui5-badge-color-scheme-8-border:var(--sapLegendColor8);--ui5-badge-color-scheme-9-background:var(--sapLegendBackgroundColor10);--ui5-badge-color-scheme-9-border:var(--sapLegendColor10);--ui5-badge-color-scheme-10-background:var(--sapLegendBackgroundColor9);--ui5-badge-color-scheme-10-border:var(--sapAccentColor9);--_ui5_button_base_min_compact_width:2rem;--_ui5_button_compact_height:1.625rem;--_ui5_button_compact_padding:0.4375rem;--_ui5_button_outline:1px dotted var(--sapContent_FocusColor);--_ui5_button_outline_offset:-0.1875rem;--_ui5_button_focus_offset:1px;--_ui5_button_focus_width:1px;--_ui5_button_focus_color:var(--sapContent_FocusColor);--_ui5_button_transparent_border_color:transparent;--_ui5_button_transparent_hover_border_color:var(--sapButton_BorderColor);--_ui5_button_active_border_color:var(--sapButton_Active_BorderColor);--_ui5_button_positive_border_color:var(--sapButton_Accept_BorderColor);--_ui5_button_positive_border_hover_color:var(--sapButton_Accept_Hover_BorderColor);--_ui5_button_positive_border_active_color:var(--sapButton_Accept_Active_BorderColor);--_ui5_button_positive_border_focus_hover_color:var(--sapContent_FocusColor);--_ui5_button_positive_focus_border_color:var(--sapButton_Accept_BorderColor);--_ui5_button_negative_focus_border_color:var(--sapButton_Reject_BorderColor);--_ui5_button_negative_active_border_color:var(--sapButton_Reject_Active_BorderColor);--_ui5_button_emphasized_focused_border_color:var(--sapButton_Emphasized_BorderColor);--_ui5_button_base_min_width:2.25rem;--_ui5_button_base_height:2.25rem;--_ui5_button_border_radius:0.25rem;--_ui5_button_base_padding:0.5625rem;--_ui5_button_base_icon_only_padding:0.5625rem;--_ui5_button_base_icon_margin:0.375rem;--_ui5_button_emphasized_font_weight:bold;--_ui5_button_text_shadow:none;--_ui5_card_border_color:var(--sapTile_SeparatorColor);--_ui5_card_content_padding:1rem;--_ui5_card_header_hover_bg:var(--sapList_Hover_Background);--_ui5_card_header_active_bg:var(--_ui5_card_header_hover_bg);--_ui5_card_header_border_color:var(--_ui5_card_border_color);--_ui5_card_header_focus_border:1px dotted var(--sapContent_FocusColor);--ui5_carousel_button_size:2.5rem;--ui5_carousel_height:0.25rem;--ui5_carousel_width:0.25rem;--ui5_carousel_margin:0 0.375rem;--ui5_carousel_border:1px solid var(--sapContent_ForegroundBorderColor);--ui5_carousel_dot_border:none;--ui5_carousel_dot_background:var(--sapContent_NonInteractiveIconColor);--_ui5_checkbox_hover_background:var(--sapField_Hover_Background);--_ui5_checkbox_inner_width_height:1.375rem;--_ui5_checkbox_inner_error_border:0.125rem solid var(--sapField_InvalidColor);--_ui5_checkbox_inner_warning_border:0.125rem solid var(--sapField_WarningColor);--_ui5_checkbox_inner_information_border:0.125rem solid var(--sapField_InformationColor);--_ui5_checkbox_checkmark_warning_color:var(--sapField_TextColor);--_ui5_checkbox_checkmark_color:var(--sapSelectedColor);--_ui5_checkbox_wrapped_focus_left_top_bottom_position:.5625rem;--_ui5_checkbox_focus_outline:1px dotted var(--sapContent_FocusColor);--_ui5_checkbox_compact_wrapper_padding:.5rem;--_ui5_checkbox_compact_width_height:2rem;--_ui5_checkbox_compact_inner_size:1rem;--_ui5_checkbox_compact_focus_position:.375rem;--_ui5_checkbox_wrapper_padding:.6875rem;--_ui5_checkbox_width_height:2.75rem;--_ui5_checkbox_inner_border:.0625rem solid var(--sapField_BorderColor);--_ui5_checkbox_focus_position:0.5625rem;--_ui5_checkbox_inner_border_radius:.125rem;--_ui5_checkbox_wrapped_content_margin_top:0;--_ui5_checkbox_wrapped_focus_padding:.5rem;--_ui5_checkbox_inner_readonly_border:1px solid var(--sapField_ReadOnly_BorderColor);--_ui5_checkbox_compact_wrapped_label_margin_top:-0.125rem;--_ui5_datepicker_icon_border:none;--_ui5_daypicker_item_margin:2px;--_ui5_daypicker_item_border:none;--_ui5_daypicker_item_selected_border_color:var(--sapList_Background);--_ui5_daypicker_item_outline_width:1px;--_ui5_daypicker_item_outline_offset:1px;--_ui5_daypicker_daynames_container_height:2rem;--_ui5_daypicker_item_othermonth_background_color:var(--sapList_Background);--_ui5_daypicker_item_othermonth_color:var(--sapContent_LabelColor);--_ui5_daypicker_item_othermonth_hover_color:var(--sapContent_LabelColor);--_ui5_daypicker_dayname_color:var(--sapContent_LabelColor);--_ui5_daypicker_weekname_color:var(--sapContent_LabelColor);--_ui5_daypicker_item_now_selected_focus_after_width:calc(100% - 0.125rem);--_ui5_daypicker_item_now_selected_focus_after_height:calc(100% - 0.125rem);--_ui5_daypicker_item_selected_hover_background_color:var(--sapActiveColor_Lighten3);--_ui5_daypicker_item_border_radius:0.25rem;--_ui5_daypicker_item_now_inner_border_radius:0.125rem;--_ui5_dialog_resize_handle_color:var(--sapButton_Lite_TextColor);--ui5-group-header-listitem-background-color:var(--sapList_GroupHeaderBackground);--_ui5_input_width:13.125rem;--_ui5_input_compact_height:1.625rem;--_ui5_input_state_border_width:0.125rem;--_ui5-input-information_border_width:0.125rem;--_ui5_input_error_font_weight:normal;--_ui5_input_focus_border_width:1px;--_ui5_input_error_warning_border_style:solid;--_ui5_input_error_warning_font_style:inherit;--_ui5_input_disabled_color:var(--sapContent_DisabledTextColor);--_ui5_input_disabled_font_weight:normal;--_ui5_input_disabled_border_color:var(--sapField_BorderColor);--_ui5_input_disabled_background:var(--sapField_Background);--_ui5_input_icon_min_width:2.375rem;--_ui5_input_compact_min_width:2rem;--_ui5_input_height:2.25rem;--_ui5_input_disabled_opacity:0.4;--_ui5_input_wrapper_border_radius:0.125rem;--_ui5_input_icon_padding:.5625rem .6875rem;--_ui5_link_opacity:0.4;--_ui5_link_text_decoration:none;--_ui5_link_hover_text_decoration:underline;--ui5_list_footer_text_color:var(--sapTextColor);--ui5-listitem-background-color:var(--sapList_Background);--ui5-listitem-border-bottom:1px solid var(--sapList_BorderColor);--ui5-listitem-selected-border-bottom:1px solid var(--sapList_SelectionBorderColor);--_ui5_listitembase_focus_width:1px;--_ui5_product_switch_item_border:none;--_ui5_monthpicker_item_border:none;--_ui5_monthpicker_item_margin:1px;--_ui5_monthpicker_item_focus_after_width:calc(100% - 0.375rem);--_ui5_monthpicker_item_focus_after_height:calc(100% - 0.375rem);--_ui5_monthpicker_item_focus_after_border:1px dotted var(--sapContent_FocusColor);--_ui5_monthpicker_item_focus_after_offset:2px;--_ui5_monthpicker_item_border_radius:0.25rem;--_ui5_messagestrip_icon_width:2.5rem;--_ui5_messagestrip_border_radius:0.1875rem;--_ui5_messagestrip_button_border_width:0;--_ui5_messagestrip_button_border_style:none;--_ui5_messagestrip_button_border_color:transparent;--_ui5_messagestrip_button_border_radius:0;--_ui5_messagestrip_padding:0.4375rem 2.5rem 0.4375rem 2.5rem;--_ui5_messagestrip_padding_no_icon:0.4375rem 2.5rem 0.4375rem 1rem;--_ui5_messagestrip_button_height:1.625rem;--_ui5_messagestrip_border_width:1px;--_ui5_messagestrip_close_button_border:none;--_ui5_messagestrip_close_button_size:1.625rem;--_ui5_messagestrip_icon_top:0.4375rem;--_ui5_messagestrip_focus_width:1px;--_ui5_messagestrip_focus_offset:-2px;--_ui5_panel_focus_border:1px dotted var(--sapContent_FocusColor);--_ui5_panel_header_height:2.75rem;--_ui5_panel_button_root_width:2.75rem;--_ui5_popup_content_padding:.4375em;--_ui5_progress_indicator_value_state_none:var(--sapNeutralElementColor);--_ui5_progress_indicator_value_state_error:var(--sapNegativeElementColor);--_ui5_progress_indicator_value_state_warning:var(--sapCriticalElementColor);--_ui5_progress_indicator_value_state_success:var(--sapPositiveElementColor);--_ui5_progress_indicator_value_state_information:var(--sapInformativeElementColor);--_ui5_progress_indicator_color:var(--sapTextColor);--_ui5_progress_indicator_bar_color:var(--sapContent_ContrastTextColor);--_ui5_progress_indicator_border:0.0625rem solid var(--sapField_BorderColor);--_ui5_progress_indicator_bar_border_max:none;--_ui5_progress_indicator_icon_visibility:none;--_ui5_radiobutton_min_width:2.75rem;--_ui5_radiobutton_min_width_compact:2rem;--_ui5_radiobutton_hover_fill:var(--sapField_Hover_Background);--_ui5_radiobutton_border_width:1px;--_ui5_radiobutton_selected_fill:var(--sapSelectedColor);--_ui5_radiobutton_selected_error_fill:var(--sapField_InvalidColor);--_ui5_radiobutton_selected_warning_fill:var(--sapField_TextColor);--_ui5_radiobutton_warning_error_border_dash:0;--_ui5_select_disabled_background:var(--sapField_Background);--_ui5_select_disabled_border_color:var(--sapField_BorderColor);--_ui5_select_state_error_warning_border_style:solid;--_ui5_select_state_error_warning_border_width:0.125rem;--_ui5_select_hover_icon_left_border:1px solid transparent;--_ui5_select_rtl_hover_icon_left_border:none;--_ui5_select_rtl_hover_icon_right_border:none;--_ui5_select_focus_width:1px;--_ui5_switch_height:2.75rem;--_ui5_switch_width:3.875rem;--_ui5_switch_no_label_width:3.25rem;--_ui5_switch_outline:1px;--_ui5_switch_compact_height:2rem;--_ui5_switch_compact_width:3.5rem;--_ui5_switch_compact_no_label_width:2.5rem;--_ui5_switch_track_height:1.375rem;--_ui5_switch_track_no_label_height:1.25rem;--_ui5_switch_track_compact_no_label_height:1rem;--_ui5_switch_track_hover_border_color:var(--_ui5_switch_track_checked_border_color);--_ui5_switch_track_hover_background_color:var(--sapButton_Track_Background);--_ui5_switch_track_hover_checked_background_color:var(--sapButton_Track_Selected_Background);--_ui5_switch_track_border_radius:0.75rem;--_ui5_switch_track_disabled_checked_bg:var(--_ui5_switch_track_checked_bg);--_ui5_switch_track_disabled_border_color:var(--sapContent_ForegroundBorderColor);--_ui5_switch_track_disabled_semantic_checked_bg:var(--sapSuccessBackground);--_ui5_switch_track_disabled_semantic_checked_border_color:var(--sapSuccessBorderColor);--_ui5_switch_track_disabled_semantic_bg:var(--sapErrorBackground);--_ui5_switch_track_disabled_semantic_border_color:var(--sapErrorBorderColor);--_ui5_switch_handle_width:2rem;--_ui5_switch_handle_height:2rem;--_ui5_switch_handle_border_width:1px;--_ui5_switch_handle_border_radius:1rem;--_ui5_switch_handle_bg:var(--sapButton_TokenBackground);--_ui5_switch_handle_checked_bg:var(--sapButton_Selected_Background);--_ui5_switch_handle_checked_border_color:var(--sapButton_Selected_BorderColor);--_ui5_switch_handle_semantic_hover_bg:var(--sapErrorBackground);--_ui5_switch_handle_semantic_checked_hover_bg:var(--sapSuccessBackground);--_ui5_switch_handle_semantic_hover_border_color:var(--sapErrorBorderColor);--_ui5_switch_handle_semantic_checked_hover_border_color:var(--sapSuccessBorderColor);--_ui5_switch_handle_compact_width:1.625rem;--_ui5_switch_handle_compact_height:1.625rem;--_ui5_switch_handle_disabled_bg:var(--_ui5_switch_handle_bg);--_ui5_switch_handle_disabled_checked_bg:var(--_ui5_switch_handle_checked_bg);--_ui5_switch_handle_disabled_border_color:var(--sapContent_ForegroundBorderColor);--_ui5_switch_handle_disabled_semantic_checked_bg:var(--sapButton_Background);--_ui5_switch_handle_disabled_semantic_checked_border_color:var(--sapSuccessBorderColor);--_ui5_switch_handle_disabled_semantic_border_color:var(--sapErrorBorderColor);--_ui5_switch_text_on_semantic_color:var(--sapPositiveElementColor);--_ui5_switch_text_off_semantic_color:var(--sapNegativeElementColor);--_ui5_switch_text_disabled_color:var(--sapTextColor);--_ui5_tc_header_height:4.6875rem;--_ui5_tc_header_height_compact:3.6875rem;--_ui5_tc_header_height_text_only:3rem;--_ui5_tc_header_height_text_only_compact:2rem;--_ui5_tc_headeritem_text_selected_color:var(--sapSelectedColor);--_ui5_tc_headerItem_neutral_color:var(--sapNeutralColor);--_ui5_tc_headerItem_positive_color:var(--sapPositiveColor);--_ui5_tc_headerItem_negative_color:var(--sapNegativeColor);--_ui5_tc_headerItem_critical_color:var(--sapCriticalColor);--_ui5_tc_headerItem_neutral_border_color:var(--_ui5_tc_headerItem_neutral_color);--_ui5_tc_headerItem_positive_border_color:var(--_ui5_tc_headerItem_positive_color);--_ui5_tc_headerItem_negative_border_color:var(--_ui5_tc_headerItem_negative_color);--_ui5_tc_headerItem_critical_border_color:var(--_ui5_tc_headerItem_critical_color);--_ui5_tc_headerItem_neutral_selected_border_color:var(--_ui5_tc_headerItem_neutral_color);--_ui5_tc_headerItem_positive_selected_border_color:var(--_ui5_tc_headerItem_positive_color);--_ui5_tc_headerItem_negative_selected_border_color:var(--_ui5_tc_headerItem_negative_color);--_ui5_tc_headerItem_critical_selected_border_color:var(--_ui5_tc_headerItem_critical_color);--_ui5_tc_headerItem_focus_border:1px dotted var(--sapContent_FocusColor);--_ui5_tc_headerItemSemanticIcon_display:none;--_ui5_tc_overflowItem_neutral_color:var(--sapNeutralColor);--_ui5_tc_overflowItem_positive_color:var(--sapPositiveColor);--_ui5_tc_overflowItem_negative_color:var(--sapNegativeColor);--_ui5_tc_overflowItem_critical_color:var(--sapCriticalColor);--_ui5_tc_headerItemIcon_border:1px solid var(--sapHighlightColor);--_ui5_tc_headerItemIcon_color:var(--sapHighlightColor);--_ui5_tc_headerItemIcon_selected_background:var(--sapHighlightColor);--_ui5_tc_headerItemIcon_selected_color:var(--sapGroup_ContentBackground);--_ui5_tc_headerItemIcon_positive_selected_background:var(--sapPositiveColor);--_ui5_tc_headerItemIcon_negative_selected_background:var(--sapNegativeColor);--_ui5_tc_headerItemIcon_critical_selected_background:var(--sapCriticalColor);--_ui5_tc_headerItemIcon_neutral_selected_background:var(--sapNeutralColor);--_ui5_tc_headerItemIcon_semantic_selected_color:var(--sapGroup_ContentBackground);--_ui5_tc_header_box_shadow:var(--sapContent_HeaderShadow);--_ui5_tc_header_border_bottom:0.0625rem solid var(--sapObjectHeader_Background);--_ui5_tc_headerItem_color:var(--sapContent_LabelColor);--_ui5_tc_headerItemContent_border_bottom:0.188rem solid var(--sapSelectedColor);--_ui5_tc_overflowItem_default_color:var(--sapHighlightColor);--_ui5_tc_overflowItem_current_color:CurrentColor;--_ui5_tc_content_border_bottom:0.0625rem solid var(--sapObjectHeader_BorderColor);--_ui5_textarea_focus_after_width:1px;--_ui5_textarea_warning_border_style:solid;--_ui5_textarea_warning_border_width:2px;--_ui5_TimelineItem_arrow_size:1.625rem;--_ui5_TimelineItem_bubble_outline_width:0.0625rem;--_ui5_TimelineItem_bubble_outline_top:-0.125rem;--_ui5_TimelineItem_bubble_outline_right:-0.125rem;--_ui5_TimelineItem_bubble_outline_bottom:-0.125rem;--_ui5_TimelineItem_bubble_outline_left:-0.625rem;--_ui5_TimelineItem_bubble_rtl_left_offset:-0.125rem;--_ui5_TimelineItem_bubble_rtl_right_offset:-0.625rem;--_ui5_time_picker_border:0.0625rem solid transparent;--_ui5_toast_vertical_offset:3rem;--_ui5_toast_horizontal_offset:2rem;--_ui5_toast_background:var(--sapList_Background);--_ui5_toast_shadow:var(--sapContent_Shadow2);--_ui5_wheelslider_item_text_size:var(--sapFontSize);--_ui5_wheelslider_label_text_size:var(--sapFontSmallSize);--_ui5_wheelslider_mobile_selection_frame_margin_top:calc(var(--_ui5_wheelslider_item_height)*4);--_ui5_wheelslider_label_text_color:var(--sapContent_LabelColor);--_ui5_wheelslider_height:15rem;--_ui5_wheelslider_mobile_height:27rem;--_ui5_wheelslider_arrows_visibility:hidden;--_ui5_wheelslider_item_background_color:var(--sapLegend_WorkingBackground);--_ui5_wheelslider_item_text_color:var(--sapTextColor);--_ui_wheelslider_item_hover_color:var(--sapButton_Emphasized_Hover_BorderColor);--_ui5_wheelslider_item_border_color:var(--sapList_Background);--_ui5_wheelslider_item_hovered_border_color:var(--sapList_Background);--_ui5_wheelslider_collapsed_item_text_color:var(--_ui5_wheelslider_item_border_color);--_ui5_wheelslider_selected_item_background_color:var(--sapContent_Selected_Background);--_ui5_wheelslider_selected_item_hover_background_color:var(--sapButton_Emphasized_Hover_BorderColor);--_ui5_wheelslider_active_item_background_color:var(--sapContent_Selected_Background);--_ui5_wheelslider_active_item_text_color:var(--sapContent_Selected_TextColor);--_ui5_wheelslider_item_width:3rem;--_ui5_wheelslider_item_height:2.875rem;--_ui5_wheelslider_selection_frame_color:var(--sapList_SelectionBorderColor);--_ui_wheelslider_item_border_radius:var(--_ui5_button_border_radius);--_ui5_toggle_button_pressed_focussed:var(--sapButton_Selected_BorderColor);--_ui5_toggle_button_pressed_focussed_hovered:var(--sapButton_Selected_BorderColor);--_ui5_yearpicker_item_selected_focus:var(--sapContent_Selected_Background);--_ui5_yearpicker_item_border:none;--_ui5_yearpicker_item_margin:1px;--_ui5_yearpicker_item_focus_after_width:calc(100% - 0.375rem);--_ui5_yearpicker_item_focus_after_height:calc(100% - 0.375rem);--_ui5_yearpicker_item_focus_after_border:1px dotted var(--sapContent_FocusColor);--_ui5_yearpicker_item_focus_after_offset:2px;--_ui5_yearpicker_item_border_radius:0.25rem;--_ui5_calendar_header_arrow_button_border:none;--_ui5_calendar_header_arrow_button_border_radius:0.25rem;--_ui5_calendar_header_middle_button_width:6.25rem;--_ui5_calendar_header_middle_button_flex:1 1 auto;--_ui5_calendar_header_middle_button_focus_border_radius:0.25rem;--_ui5_calendar_header_middle_button_focus_border:none;--_ui5_calendar_header_middle_button_focus_after_display:block;--_ui5_calendar_header_middle_button_focus_after_width:calc(100% - 0.375rem);--_ui5_calendar_header_middle_button_focus_after_height:calc(100% - 0.375rem);--_ui5_calendar_header_middle_button_focus_after_top_offset:0.125rem;--_ui5_calendar_header_middle_button_focus_after_left_offset:0.125rem;--ui5_table_header_row_outline_width:1px;--ui5_table_row_outline_width:1px;--ui5_title_level_1Size:1.625rem;--ui5_title_level_2Size:1.375rem;--ui5_title_level_3Size:1.250rem;--ui5_title_level_4Size:1.125rem;--ui5_title_level_5Size:1rem;--ui5_title_level_6Size:0.875rem;--_ui5_token_background:var(--sapButton_TokenBackground);--_ui5_token_border_radius:0.25rem;--_ui5_token_focus_outline_width:0.0625rem;--_ui5_token_text_color:var(--sapTextColor);--_ui5_token_icon_color:var(--sapContent_IconColor);--_ui5_value_state_message_border:none;--_ui5-multi_combobox_token_margin_top:1px}.sapUiSizeCompact,.ui5-content-density-compact,:root,[data-ui5-compact-size]{--_ui5_datetime_timeview_width:17rem;--_ui5_list_item_selection_btn_margin_top:calc(-1*var(--_ui5_checkbox_wrapper_padding));--_ui5_token_wrapper_left_padding:0;--_ui5_button_icon_font_size:1rem;--_ui5_daypicker_weeknumbers_container_padding_top:2rem;--_ui5_wheelslider_selection_frame_margin_top:calc(var(--_ui5_wheelslider_item_height)*2)}.sapUiSizeCompact,.ui5-content-density-compact,[data-ui5-compact-size]{--_ui5_button_base_height:1.625rem;--_ui5_button_base_padding:0.4375rem;--_ui5_button_base_min_width:2rem;--_ui5_calendar_header_height:2rem;--_ui5_calendar_header_padding:0;--_ui5_calendar_header_arrow_button_width:2rem;--_ui5_checkbox_root_side_padding:var(--_ui5_checkbox_wrapped_focus_padding);--_ui5_checkbox_wrapped_content_margin_top:var(--_ui5_checkbox_compact_wrapped_label_margin_top);--_ui5_checkbox_wrapped_focus_left_top_bottom_position:var(--_ui5_checkbox_compact_focus_position);--_ui5_checkbox_width_height:var(--_ui5_checkbox_compact_width_height);--_ui5_checkbox_wrapper_padding:var(--_ui5_checkbox_compact_wrapper_padding);--_ui5_checkbox_focus_position:var(--_ui5_checkbox_compact_focus_position);--_ui5_checkbox_inner_width_height:var(--_ui5_checkbox_compact_inner_size);--_ui5_checkbox_icon_size:.75rem;--_ui5_custom_list_item_height:2rem;--_ui5_custom_list_item_rb_min_width:2rem;--_ui5_day_picker_item_width:2rem;--_ui5_day_picker_item_height:2rem;--_ui5_day_picker_empty_height:2.125rem;--_ui5_datetime_picker_height:17rem;--_ui5_datetime_picker_width:34.0625rem;--_ui5_datetime_timeview_phonemode_width:18.5rem;--_ui5_datetime_timeview_padding:0.5rem;--_ui5_dialog_content_min_height:2.5rem;--_ui5_input_height:var(--_ui5_input_compact_height);--_ui5_input_inner_padding:0 0.5rem;--_ui5_input_icon_min_width:var(--_ui5_input_compact_min_width);--_ui5_input_icon_padding:.25rem .5rem;--_ui5_input_value_state_icon_padding:.1875rem .5rem;--_ui5_textarea_padding:.1875rem .5rem;--_ui5_list_no_data_height:2rem;--_ui5_list_item_cb_margin_right:.5rem;--_ui5_list_item_title_size:var(--sapFontSize);--_ui5_list_item_img_margin:0.55rem 0.75rem 0.5rem 0rem;--_ui5_list_item_base_height:2rem;--_ui5_list_item_icon_size:1rem;--_ui5_list_busy_row_height:2rem;--_ui5_month_picker_item_height:2rem;--_ui5_panel_header_height:2rem;--_ui5_year_picker_item_height:2rem;--_ui5_tokenizer_root_padding:0.125rem;--_ui5_token_height:1.125rem;--_ui5_token_icon_size:.75rem;--_ui5_token_icon_padding:0.1rem 0.25rem;--_ui5_token_wrapper_right_padding:0.25rem;--_ui5_tl_bubble_padding:.5rem;--_ui5_tl_indicator_before_bottom:-.5rem;--_ui5_tl_padding:.5rem;--_ui5_tl_li_margin_bottom:.5rem;--_ui5_rb_height:2rem;--_ui5_rb_label_side_padding:.5rem;--_ui5_rb_focus_dist:.375rem;--_ui5_rb_inner_size:2rem;--_ui5_rb_svg_size:1rem;--_ui5_rb_label_width:calc(100% - 2rem + 1px);--_ui5_rb_rtl_focus_right:0.375rem;--_ui5_wheelslider_item_width:4rem;--_ui5_wheelslider_item_height:2rem;--_ui5_wheelslider_height:14rem;--_ui5_wheelslider_arrows_visibility:visible;--_ui5_switch_height:var(--_ui5_switch_compact_height);--_ui5_switch_width:var(--_ui5_switch_compact_width);--_ui5_switch_handle_height:var(--_ui5_switch_handle_compact_height);--_ui5_switch_handle_width:var(--_ui5_switch_handle_compact_width);--_ui5_switch_text_on_left:calc(-100% + 1.5625rem);--_ui5_switch_slide_transform:translateX(100%) translateX(-1.5rem);--_ui5_switch_no_label_width:var(--_ui5_switch_compact_no_label_width);--_ui5_switch_track_no_label_height:var(--_ui5_switch_track_compact_no_label_height);--_ui5_switch_rtl_transform:translateX(-100%) translateX(1.5rem);--_ui5_switch_text_right:calc(-100% + 1.5625rem);--_ui5_tc_item_text:2rem;--_ui5_tc_item_text_line_height:1.325rem;--_ui5_tc_item_icon_size:1rem;--_ui5_tc_item_add_text_margin_top:0.3125rem;--_ui5_tc_header_height:var(--_ui5_tc_header_height_compact);--_ui5_radiobutton_min_width:var(--_ui5_radiobutton_min_width_compact);--_ui5-responnsive_popover_header_height:2.5rem;--ui5_side_navigation_item_height:2rem;--_ui5-tree-indent-step:0.5rem;--_ui5-tree-toggle-box-width:2rem;--_ui5-tree-toggle-box-height:1.5rem;--_ui5-tree-toggle-icon-size:0.8125rem}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var labelCss = ":host(:not([hidden])){display:inline-flex}:host{max-width:100%;color:var(--sapContent_LabelColor);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;cursor:text}:host(:not([wrap])) .ui5-label-root{width:100%;font-weight:inherit;display:inline-block;white-space:nowrap;cursor:inherit;overflow:hidden}bdi{content:\"\";padding-right:.15625rem}:host(:not([wrap])) .ui5-label-text-wrapper{text-overflow:ellipsis;overflow:hidden;display:inline-block;vertical-align:top;max-width:100%}:host(:not([wrap])[required][show-colon]) .ui5-label-text-wrapper{max-width:calc(100% - .85rem)}:host(:not([wrap])[required]) .ui5-label-text-wrapper{max-width:calc(100% - .475rem)}:host(:not([wrap])[show-colon]) .ui5-label-text-wrapper{max-width:calc(100% - .2rem)}:host([show-colon]) .ui5-label-required-colon:before{content:\":\"}:host([required]) .ui5-label-required-colon:after{content:\"*\";color:var(--sapField_RequiredColor);font-size:1.25rem;font-weight:700;position:relative;font-style:normal;vertical-align:middle;line-height:0}:host([required][show-colon]) .ui5-label-required-colon:after{margin-right:0;margin-left:.125rem}:host([required][show-colon]) [dir=rtl] .ui5-label-required-colon:after{margin-right:.125rem;margin-left:0}";

/**
 * @public
 */
const metadata$1 = {
	tag: "ui5-label",
	properties: /** @lends sap.ui.webcomponents.main.Label.prototype */  {

		/**
		 * Defines whether an asterisk character is added to the <code>ui5-label</code> text.
		 * <br><br>
		 * <b>Note:</b> Usually indicates that user input is required.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-label</code> should wrap, when there is not enough space.
		 * <br><br>
		 * <b>Note:</b> By default the text would truncate.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		wrap: {
			type: Boolean,
		},

		/**
		 * Defines whether semi-colon is added to the <code>ui5-label</code> text.
		 * <br><br>
		 * <b>Note:</b> Usually used in forms.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */

		showColon: {
			type: Boolean,
		},

		/**
		 * Defines the labeled input by providing its ID.
		 * <br><br>
		 * <b>Note:</b> Can be used with both <code>ui5-input</code> and native input.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		"for": {
			type: String,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.Label.prototype */ {
		/**
		 * Defines the text of the <code>ui5-label</code>.
		 * <br><b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-label</code> is a component used to represent a label,
 * providing valuable information to the user.
 * Usually it is placed next to a value holder, such as a text field.
 * It informs the user about what data is displayed or expected in the value holder.
 * <br><br>
 * The <code>ui5-label</code> appearance can be influenced by properties,
 * such as <code>required</code> and <code>wrap</code>.
 * The appearance of the Label can be configured in a limited way by using the design property.
 * For a broader choice of designs, you can use custom styles.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Label";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Label
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-label
 * @public
 */
class Label extends UI5Element {
	static get metadata() {
		return metadata$1;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main;
	}

	static get styles() {
		return labelCss;
	}

	_onclick() {
		const elementToFocus = document.getElementById(this.for);
		if (elementToFocus) {
			elementToFocus.focus();
		}
	}
}

Label.define();

const block0$1 = (context) => { return scopedHtml`<div class="${classMap(context.classes.root)}"><div class="ui5-busyindicator-wrapper">${ context.active ? block1(context) : undefined }${ context.text ? block2(context) : undefined }</div><slot></slot></div>`; };
const block1 = (context) => { return scopedHtml`<div class="ui5-busyindicator-dynamic-content" role="progressbar" aria-valuemin="0" aria-valuemax="100" title="${ifDefined(context.ariaTitle)}"><div class="ui5-busyindicator-circle circle-animation-0"></div><div class="ui5-busyindicator-circle circle-animation-1"></div><div class="ui5-busyindicator-circle circle-animation-2"></div></div>`; };
const block2 = (context) => { return scopedHtml`<ui5-label class="ui5-busyindicator-text">${ifDefined(context.text)}</ui5-label>`; };


const main$1 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1(context);
};

const ARIA_LABEL_CARD_CONTENT = {key: "ARIA_LABEL_CARD_CONTENT", defaultText: "Card Content"};const ARIA_ROLEDESCRIPTION_CARD = {key: "ARIA_ROLEDESCRIPTION_CARD", defaultText: "Card"};const ARIA_ROLEDESCRIPTION_CARD_HEADER = {key: "ARIA_ROLEDESCRIPTION_CARD_HEADER", defaultText: "Card Header"};const ARIA_ROLEDESCRIPTION_INTERACTIVE_CARD_HEADER = {key: "ARIA_ROLEDESCRIPTION_INTERACTIVE_CARD_HEADER", defaultText: "Interactive Card Header"};const AVATAR_TOOLTIP = {key: "AVATAR_TOOLTIP", defaultText: "Avatar"};const BADGE_DESCRIPTION = {key: "BADGE_DESCRIPTION", defaultText: "Badge"};const BUSY_INDICATOR_TITLE = {key: "BUSY_INDICATOR_TITLE", defaultText: "Please wait"};const BUTTON_ARIA_TYPE_ACCEPT = {key: "BUTTON_ARIA_TYPE_ACCEPT", defaultText: "Positive Action"};const BUTTON_ARIA_TYPE_REJECT = {key: "BUTTON_ARIA_TYPE_REJECT", defaultText: "Negative Action"};const BUTTON_ARIA_TYPE_EMPHASIZED = {key: "BUTTON_ARIA_TYPE_EMPHASIZED", defaultText: "Emphasized"};const DATEPICKER_DATE_ACC_TEXT = {key: "DATEPICKER_DATE_ACC_TEXT", defaultText: "Date"};const CAROUSEL_OF_TEXT = {key: "CAROUSEL_OF_TEXT", defaultText: "of"};const CAROUSEL_DOT_TEXT = {key: "CAROUSEL_DOT_TEXT", defaultText: "Item {0} of {1} displayed"};const DATEPICKER_OPEN_ICON_TITLE = {key: "DATEPICKER_OPEN_ICON_TITLE", defaultText: "Open Picker"};const DELETE = {key: "DELETE", defaultText: "Delete"};const FILEUPLOAD_BROWSE = {key: "FILEUPLOAD_BROWSE", defaultText: "Browse..."};const FILEUPLOADER_TITLE = {key: "FILEUPLOADER_TITLE", defaultText: "Upload File"};const GROUP_HEADER_TEXT = {key: "GROUP_HEADER_TEXT", defaultText: "Group Header"};const ICON_ACCESSIBLE_NAME = {key: "ICON_ACCESSIBLE_NAME", defaultText: "Select Options"};const INPUT_SUGGESTIONS = {key: "INPUT_SUGGESTIONS", defaultText: "Suggestions Available"};const INPUT_SUGGESTIONS_TITLE = {key: "INPUT_SUGGESTIONS_TITLE", defaultText: "Select"};const INPUT_SUGGESTIONS_ONE_HIT = {key: "INPUT_SUGGESTIONS_ONE_HIT", defaultText: "1 result available"};const INPUT_SUGGESTIONS_MORE_HITS = {key: "INPUT_SUGGESTIONS_MORE_HITS", defaultText: "{0} results are available"};const INPUT_SUGGESTIONS_NO_HIT = {key: "INPUT_SUGGESTIONS_NO_HIT", defaultText: "No results"};const LINK_SUBTLE = {key: "LINK_SUBTLE", defaultText: "Subtle"};const LINK_EMPHASIZED = {key: "LINK_EMPHASIZED", defaultText: "Emphasized"};const LIST_ITEM_POSITION = {key: "LIST_ITEM_POSITION", defaultText: "List item {0} of {1}"};const LIST_ITEM_SELECTED = {key: "LIST_ITEM_SELECTED", defaultText: "Is Selected"};const ARIA_LABEL_LIST_ITEM_CHECKBOX = {key: "ARIA_LABEL_LIST_ITEM_CHECKBOX", defaultText: "Multiple Selection Mode"};const MESSAGE_STRIP_CLOSE_BUTTON = {key: "MESSAGE_STRIP_CLOSE_BUTTON", defaultText: "Message Strip Close"};const MULTICOMBOBOX_DIALOG_OK_BUTTON = {key: "MULTICOMBOBOX_DIALOG_OK_BUTTON", defaultText: "OK"};const MULTIINPUT_SHOW_MORE_TOKENS = {key: "MULTIINPUT_SHOW_MORE_TOKENS", defaultText: "{0} More"};const PANEL_ICON = {key: "PANEL_ICON", defaultText: "Expand/Collapse"};const RATING_INDICATOR_TOOLTIP_TEXT = {key: "RATING_INDICATOR_TOOLTIP_TEXT", defaultText: "Rating"};const RATING_INDICATOR_TEXT = {key: "RATING_INDICATOR_TEXT", defaultText: "Rating Indicator"};const SEGMENTEDBUTTON_ARIA_DESCRIPTION = {key: "SEGMENTEDBUTTON_ARIA_DESCRIPTION", defaultText: "Segmented Button"};const SELECT_ROLE_DESCRIPTION = {key: "SELECT_ROLE_DESCRIPTION", defaultText: "Select"};const SWITCH_ON = {key: "SWITCH_ON", defaultText: "On"};const SWITCH_OFF = {key: "SWITCH_OFF", defaultText: "Off"};const TABCONTAINER_NEXT_ICON_ACC_NAME = {key: "TABCONTAINER_NEXT_ICON_ACC_NAME", defaultText: "Next"};const TABCONTAINER_PREVIOUS_ICON_ACC_NAME = {key: "TABCONTAINER_PREVIOUS_ICON_ACC_NAME", defaultText: "Previous"};const TABCONTAINER_OVERFLOW_MENU_TITLE = {key: "TABCONTAINER_OVERFLOW_MENU_TITLE", defaultText: "Overflow Menu"};const TEXTAREA_CHARACTERS_LEFT = {key: "TEXTAREA_CHARACTERS_LEFT", defaultText: "{0} characters remaining"};const TEXTAREA_CHARACTERS_EXCEEDED = {key: "TEXTAREA_CHARACTERS_EXCEEDED", defaultText: "{0} characters over limit"};const TIMELINE_ARIA_LABEL = {key: "TIMELINE_ARIA_LABEL", defaultText: "Timeline"};const TIMEPICKER_HOURS_LABEL = {key: "TIMEPICKER_HOURS_LABEL", defaultText: "Hours"};const TIMEPICKER_MINUTES_LABEL = {key: "TIMEPICKER_MINUTES_LABEL", defaultText: "Minutes"};const TIMEPICKER_SECONDS_LABEL = {key: "TIMEPICKER_SECONDS_LABEL", defaultText: "Seconds"};const TIMEPICKER_PERIODS_LABEL = {key: "TIMEPICKER_PERIODS_LABEL", defaultText: "AM/PM"};const TIMEPICKER_SUBMIT_BUTTON = {key: "TIMEPICKER_SUBMIT_BUTTON", defaultText: "OK"};const TIMEPICKER_CANCEL_BUTTON = {key: "TIMEPICKER_CANCEL_BUTTON", defaultText: "Cancel"};const DATETIME_PICKER_DATE_BUTTON = {key: "DATETIME_PICKER_DATE_BUTTON", defaultText: "Date"};const DATETIME_PICKER_TIME_BUTTON = {key: "DATETIME_PICKER_TIME_BUTTON", defaultText: "Time"};const TOKEN_ARIA_DELETABLE = {key: "TOKEN_ARIA_DELETABLE", defaultText: "Deletable"};const TOKENIZER_ARIA_CONTAIN_TOKEN = {key: "TOKENIZER_ARIA_CONTAIN_TOKEN", defaultText: "May contain tokens"};const TOKENIZER_ARIA_CONTAIN_ONE_TOKEN = {key: "TOKENIZER_ARIA_CONTAIN_ONE_TOKEN", defaultText: "Contains 1 token"};const TOKENIZER_ARIA_CONTAIN_SEVERAL_TOKENS = {key: "TOKENIZER_ARIA_CONTAIN_SEVERAL_TOKENS", defaultText: "Contains {0} tokens"};const TOKENIZER_ARIA_LABEL = {key: "TOKENIZER_ARIA_LABEL", defaultText: "Tokenizer"};const TOKENIZER_POPOVER_REMOVE = {key: "TOKENIZER_POPOVER_REMOVE", defaultText: "Remove"};const VALUE_STATE_ERROR = {key: "VALUE_STATE_ERROR", defaultText: "Invalid entry"};const VALUE_STATE_WARNING = {key: "VALUE_STATE_WARNING", defaultText: "Warning issued"};const VALUE_STATE_INFORMATION = {key: "VALUE_STATE_INFORMATION", defaultText: "Informative entry"};const VALUE_STATE_SUCCESS = {key: "VALUE_STATE_SUCCESS", defaultText: "Entry successfully validated"};const CALENDAR_HEADER_NEXT_BUTTON = {key: "CALENDAR_HEADER_NEXT_BUTTON", defaultText: "Next"};const CALENDAR_HEADER_PREVIOUS_BUTTON = {key: "CALENDAR_HEADER_PREVIOUS_BUTTON", defaultText: "Previous"};const DAY_PICKER_WEEK_NUMBER_TEXT = {key: "DAY_PICKER_WEEK_NUMBER_TEXT", defaultText: "Week number"};const DAY_PICKER_NON_WORKING_DAY = {key: "DAY_PICKER_NON_WORKING_DAY", defaultText: "Non-Working Day"};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var busyIndicatorCss = ":host(:not([hidden])){display:inline-block}:host(:not([active])) .ui5-busyindicator-wrapper{display:none}:host([active]){color:var(--sapContent_IconColor);pointer-events:none}:host([active]) :not(.ui5-busyindicator-root--ie) ::slotted(:not([class^=ui5-busyindicator-])){opacity:.6}:host([active]) .ui5-busyindicator-root--ie ::slotted(:not([class^=ui5-busyindicator-])){opacity:.95}:host([size=Small]) .ui5-busyindicator-root{min-width:1.5em;min-height:.5rem}:host([size=Small][text]:not([text=\"\"])) .ui5-busyindicator-root{min-height:1.75rem}:host([size=Small]) .ui5-busyindicator-circle{width:.5rem;height:.5rem}:host(:not([size])) .ui5-busyindicator-root,:host([size=Medium]) .ui5-busyindicator-root{min-width:3rem;min-height:1rem}:host(:not([size])[text]:not([text=\"\"])) .ui5-busyindicator-root,:host([size=Medium][text]:not([text=\"\"])) .ui5-busyindicator-root{min-height:2.25rem}:host(:not([size])) .ui5-busyindicator-circle,:host([size=Medium]) .ui5-busyindicator-circle{width:1rem;height:1rem}:host([size=Large]) .ui5-busyindicator-root{min-width:6rem;min-height:2rem}:host([size=Large][text]:not([text=\"\"])) .ui5-busyindicator-root{min-height:3.25rem}:host([size=Large]) .ui5-busyindicator-circle{width:2rem;height:2rem}.ui5-busyindicator-root{display:flex;justify-content:center;align-items:center;position:relative;background-color:inherit}.ui5-busyindicator-wrapper{position:absolute;z-index:99;width:100%;left:0;right:0;top:50%;transform:translateY(-50%)}.ui5-busyindicator-circle{display:inline-block;background-color:currentColor;border-radius:50%}.ui5-busyindicator-circle:before{content:\"\";width:100%;height:100%;border-radius:100%}.ui5-busyindicator-dynamic-content{height:100%;display:flex;justify-content:center;align-items:center;background-color:inherit}.circle-animation-0{animation:grow 1.6s cubic-bezier(.32,.06,.85,1.11) infinite}.circle-animation-1{animation:grow 1.6s cubic-bezier(.32,.06,.85,1.11) infinite;animation-delay:.2s}.circle-animation-2{animation:grow 1.6s cubic-bezier(.32,.06,.85,1.11) infinite;animation-delay:.4s}.ui5-busyindicator-text{width:100%;margin-top:.25rem;text-align:center}@keyframes grow{0%,50%,to{-webkit-transform:scale(.5);-moz-transform:scale(.5);-ms-transform:scale(.5);transform:scale(.5)}25%{-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}";

/**
 * @public
 */
const metadata$2 = {
	tag: "ui5-busyindicator",
	languageAware: true,
	slots: /** @lends sap.ui.webcomponents.main.BusyIndicator.prototype */ {

		/**
		 * Determines the content over which the <code>ui5-busyindicator</code> will appear.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.BusyIndicator.prototype */ {

		/**
		 * Defines text to be displayed below the busy indicator. It can be used to inform the user of the current operation.
		 * @type {String}
		 * @public
		 * @defaultvalue ""
		 * @since 1.0.0-rc.7
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the size of the <code>ui5-busyindicator</code>.
		 * <br><br>
		 * <b>Note:</b> Available options are "Small", "Medium", and "Large".
		 *
		 * @type {BusyIndicatorSize}
		 * @defaultvalue "Medium"
		 * @public
		 */
		size: {
			type: BusyIndicatorSize,
			defaultValue: BusyIndicatorSize.Medium,
		},

		/**
		 * Defines if the busy indicator is visible on the screen. By default it is not.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		active: {
			type: Boolean,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-busyindicator</code> signals that some operation is going on and that the
 *  user must wait. It does not block the current UI screen so other operations could be
 *  triggered in parallel.
 *
 * <h3>Usage</h3>
 * For the <code>ui5-busyindicator</code> you can define the size of the indicator, as well
 * as whether it is shown or hidden. In order to hide it, use the html attribute <code>hidden</code> or <code>display: none;</code>
 * <br><br>
 * In order to show busy state for an HTML element, simply nest the HTML element in a <code>ui5-busyindicator</code> instance.
 * <br>
 * <b>Note:</b> Since <code>ui5-busyindicator</code> has <code>display: inline-block;</code> by default and no width of its own,
 * whenever you need to wrap a block-level element, you should set <code>display: block</code> to the busy indicator as well.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/BusyIndicator";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.BusyIndicator
 * @extends UI5Element
 * @tagname ui5-busyindicator
 * @public
 * @since 0.12.0
 */
class BusyIndicator extends UI5Element {
	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
		this._preventHandler = this._preventEvent.bind(this);
	}

	onBeforeRendering() {
		if (this.active) {
			this.tabIndex = -1;
		} else {
			this.removeAttribute("tabindex");
		}
	}

	onEnterDOM() {
		this.addEventListener("keyup", this._preventHandler, {
			capture: true,
		});

		this.addEventListener("keydown", this._preventHandler, {
			capture: true,
		});
	}

	onExitDOM() {
		this.removeEventListener("keyup", this._preventHandler, true);
		this.removeEventListener("keydown", this._preventHandler, true);
	}

	static get metadata() {
		return metadata$2;
	}

	static get styles() {
		return busyIndicatorCss;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$1;
	}

	static get dependencies() {
		return [Label];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	get ariaTitle() {
		return this.i18nBundle.getText(BUSY_INDICATOR_TITLE);
	}

	get classes() {
		return {
			root: {
				"ui5-busyindicator-root": true,
				"ui5-busyindicator-root--ie": isIE(),
			},
		};
	}

	_preventEvent(event) {
		if (this.active) {
			event.stopImmediatePropagation();
		}
	}
}

BusyIndicator.define();

const block0$2 = (context) => { return scopedHtml`<div class="ui5-list-root" @focusin="${context._onfocusin}" @keydown="${context._onkeydown}" @scroll="${context._onScroll}"><!-- header -->${ context.header.length ? block1$1() : undefined }${ context.shouldRenderH1 ? block2$1(context) : undefined }<div id="${ifDefined(context._id)}-before" tabindex="0" class="ui5-list-focusarea"></div><ul id="${ifDefined(context._id)}-listUl" class="ui5-list-ul" role="${ifDefined(context.role)}" aria-label="${ifDefined(context.ariaLabelТxt)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" aria-multiselectable="${ifDefined(context.isMultiSelect)}"><slot></slot>${ context.showNoDataText ? block3(context) : undefined }</ul>${ context.footerText ? block4(context) : undefined }${ context.showBusy ? block5(context) : undefined }<div id="${ifDefined(context._id)}-after" tabindex="0" class="ui5-list-focusarea"></div></div>`; };
const block1$1 = (context) => { return scopedHtml`<slot name="header" />`; };
const block2$1 = (context) => { return scopedHtml`<header id="${ifDefined(context.headerID)}" class="ui5-list-header">${ifDefined(context.headerText)}</header>`; };
const block3 = (context) => { return scopedHtml`<li id="${ifDefined(context._id)}-nodata" class="ui5-list-nodata" tabindex="${ifDefined(context.noDataTabIndex)}" style="list-style-type: none;"><div id="${ifDefined(context._id)}-nodata-text" class="ui5-list-nodata-text">${ifDefined(context.noDataText)}</div></li>`; };
const block4 = (context) => { return scopedHtml`<footer id="${ifDefined(context._id)}-footer" class="ui5-list-footer">${ifDefined(context.footerText)}</footer>`; };
const block5 = (context) => { return scopedHtml`<div class="ui5-list-busy-row"><ui5-busyindicator ?active="${context.busy}" size="Medium" class="ui5-list-busy-ind"></ui5-busyindicator></div>`; };


const main$2 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$2(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var listCss = ":host(:not([hidden])){display:block;max-width:100%;width:100%}:host([inset]) .ui5-list-root{padding:2rem}:host([separators=None]) .ui5-list-nodata{border-bottom:0}.ui5-list-root{width:100%;height:100%;position:relative;box-sizing:border-box;overflow:auto}.ui5-list-ul{list-style-type:none;padding:0;margin:0}.ui5-list-ul:focus{outline:none}.ui5-list-focusarea{position:fixed}.ui5-list-header{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;font-size:var(--sapMFontHeader4Size);font-family:\"72override\",var(--sapFontFamily);color:var(--sapGroup_TitleTextColor);height:3rem;line-height:3rem;padding:0 1rem;background-color:var(--sapGroup_TitleBackground);border-bottom:1px solid var(--sapGroup_TitleBorderColor)}.ui5-list-footer{height:2rem;box-sizing:border-box;-webkit-text-size-adjust:none;font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);line-height:2rem;background-color:var(--sapList_FooterBackground);color:var(--ui5_list_footer_text_color);padding:0 1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-list-nodata{list-style-type:none;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;color:var(--sapTextColor);background-color:var(--sapList_Background);border-bottom:1px solid var(--sapList_BorderColor);padding:0 1rem!important;height:var(--_ui5_list_no_data_height);font-size:var(--sapFontSize)}.ui5-list-nodata-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ui5-list-busy-row{display:flex;align-items:center;height:var(--_ui5_list_busy_row_height);justify-content:center}";

const BUSYINDICATOR_HEIGHT = 48; // px
const INFINITE_SCROLL_DEBOUNCE_RATE = 250; // ms

/**
 * @public
 */
const metadata$3 = {
	tag: "ui5-list",
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.List.prototype */ {

		/**
		 * Defines the <code>ui5-list</code> header.
		 * <br><br>
		 * <b>Note:</b> When <code>header</code> is set, the
		 * <code>headerText</code> property is ignored.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},

		/**
		 * Defines the items of the <code>ui5-list</code>.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-li</code>, <code>ui5-li-custom</code>, and <code>ui5-li-groupheader</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.List.prototype */ {

		/**
		 * Defines the <code>ui5-list</code> header text.
		 * <br><br>
		 * <b>Note:</b> If <code>header</code> is set this property is ignored.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		headerText: {
			type: String,
		},

		/**
		 * Defines the footer text.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		footerText: {
			type: String,
		},

		/**
		 * Determines whether the list items are indented.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		inset: {
			type: Boolean,
		},

		/**
		 * Defines the mode of the <code>ui5-list</code>.
		 * <br><br>
		 * <b>Note:</b> Available options are <code>None</code>, <code>SingleSelect</code>, <code>SingleSelectBegin</code>,
		 * <code>SingleSelectEnd</code>, <code>MultiSelect</code>, and <code>Delete</code>.
		 *
		 * @type {ListMode}
		 * @defaultvalue "None"
		 * @public
		 */
		mode: {
			type: ListMode,
			defaultValue: ListMode.None,
		},

		/**
		 * Defines the text that is displayed when the <code>ui5-list</code> contains no items.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		noDataText: {
			type: String,
		},

		/**
		 * Defines the item separator style that is used.
		 * <br><br>
		 * <b>Notes:</b>
		 * <ul>
		 * <li>Avalaible options are <code>All</code>, <code>Inner</code>, and <code>None</code>.</li>
		 * <li>When set to <code>None</code>, none of the items are separated by horizontal lines.</li>
		 * <li>When set to <code>Inner</code>, the first item doesn't have a top separator and the last
		 * item doesn't have a bottom separator.</li>
		 * </ul>
		 *
		 * @type {ListSeparators}
		 * @defaultvalue "All"
		 * @public
		 */
		separators: {
			type: ListSeparators,
			defaultValue: ListSeparators.All,
		},

		/**
		 * Defines if the component would fire the <code>load-more</code> event
		 * when the user scrolls to the bottom of the list, and helps achieving an "infinite scroll" effect
		 * by adding new items each time.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.6
		 */
		infiniteScroll: {
			type: Boolean,
		},

		/**
		 * Defines if the component would display a loading indicator at the bottom of the list.
		 * It's especially useful, when combined with <code>infiniteScroll</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.6
		 */
		busy: {
			type: Boolean,
		},

		/**
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the input
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Used to externally manipulate the role of the list
		 *
		 * @private
		 * @type {String}
		 * @defaultvalue "listbox"
		 * @since 1.0.0-rc.9
		 */
		role: {
			type: String,
			defaultValue: "listbox",
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.List.prototype */ {

		/**
		 * Fired when an item is activated, unless the item's <code>type</code> property
		 * is set to <code>Inactive</code>.
		 *
		 * @event sap.ui.webcomponents.main.List#item-click
		 * @param {HTMLElement} item the clicked item.
		 * @public
		 */
		"item-click": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the <code>Close</code> button of any item is clicked
		 * <br><br>
		 * <b>Note:</b> This event is applicable to <code>ui5-li-notification</code> items only,
		 * not to be confused with <code>item-delete</code>.
		 *
		 * @event sap.ui.webcomponents.main.List#item-close
		 * @param {HTMLElement} item the item about to be closed.
		 * @public
		 * @since 1.0.0-rc.8
		 */
		"item-close": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the <code>Toggle</code> button of any item is clicked.
		 * <br><br>
		 * <b>Note:</b> This event is applicable to <code>ui5-li-notification-group</code> items only.
		 *
		 * @event sap.ui.webcomponents.main.List#item-toggle
		 * @param {HTMLElement} item the toggled item.
		 * @public
		 * @since 1.0.0-rc.8
		 */
		"item-toggle": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the Delete button of any item is pressed.
		 * <br><br>
		 * <b>Note:</b> A Delete button is displayed on each item,
		 * when the <code>ui5-list</code> <code>mode</code> property is set to <code>Delete</code>.
		 *
		 * @event sap.ui.webcomponents.main.List#item-delete
		 * @param {HTMLElement} item the deleted item.
		 * @public
		 */
		"item-delete": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when selection is changed by user interaction
		 * in <code>SingleSelect</code>, <code>SingleSelectBegin</code>, <code>SingleSelectEnd</code> and <code>MultiSelect</code> modes.
		 *
		 * @event sap.ui.webcomponents.main.List#selection-change
		 * @param {Array} selectedItems An array of the selected items.
		 * @param {Array} previouslySelectedItems An array of the previously selected items.
		 * @public
		 */
		"selection-change": {
			detail: {
				selectedItems: { type: Array },
				previouslySelectedItems: { type: Array },
				selectionComponentPressed: { type: Boolean }, // protected, indicates if the user used the selection components to change the selection
			},
		},

		/**
		 * Fired when the user scrolls to the bottom of the list.
		 * <br><br>
		 * <b>Note:</b> The event is fired when the <code>infiniteScroll</code> property is enabled.
		 *
		 * @event sap.ui.webcomponents.main.List#load-more
		 * @public
		 * @since 1.0.0-rc.6
		 */
		"load-more": {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-list</code> component allows displaying a list of items, advanced keyboard
 * handling support for navigating between items, and predefined modes to improve the development efficiency.
 * <br><br>
 * The <code>ui5-list</code> is а container for the available list items:
 * <ul>
 * <li><code>ui5-li</code></li>
 * <li><code>ui5-li-custom</code></li>
 * <li><code>ui5-li-groupheader</code></li>
 * </ul>
 * <br><br>
 * To benefit from the built-in selection mechanism, you can use the available
 * selection modes, such as
 * <code>SingleSelect</code>, <code>MultiSelect</code> and <code>Delete</code>.
 * <br><br>
 * Additionally, the <code>ui5-list</code> provides header, footer, and customization for the list item separators.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/List.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents/dist/StandardListItem.js";</code> (for <code>ui5-li</code>)
 * <br>
 * <code>import "@ui5/webcomponents/dist/CustomListItem.js";</code> (for <code>ui5-li-custom</code>)
 * <br>
 * <code>import "@ui5/webcomponents/dist/GroupHeaderListItem.js";</code> (for <code>ui5-li-groupheader</code>)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.List
 * @extends UI5Element
 * @tagname ui5-list
 * @appenddocs StandardListItem CustomListItem GroupHeaderListItem
 * @public
 */
class List extends UI5Element {
	static get metadata() {
		return metadata$3;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$2;
	}

	static get styles() {
		return listCss;
	}

	constructor() {
		super();
		this.initItemNavigation();

		// Stores the last focused item within the internal ul element.
		this._previouslyFocusedItem = null;

		// Indicates that the List is forwarding the focus before or after the internal ul.
		this._forwardingFocus = false;

		this._previouslySelectedItem = null;

		this.addEventListener("ui5-_press", this.onItemPress.bind(this));
		this.addEventListener("ui5-close", this.onItemClose.bind(this));
		this.addEventListener("ui5-toggle", this.onItemToggle.bind(this));
		this.addEventListener("ui5-_focused", this.onItemFocused.bind(this));
		this.addEventListener("ui5-_forward-after", this.onForwardAfter.bind(this));
		this.addEventListener("ui5-_forward-before", this.onForwardBefore.bind(this));
		this.addEventListener("ui5-_selection-requested", this.onSelectionRequested.bind(this));
		this.addEventListener("ui5-_focus-requested", this.focusUploadCollectionItem.bind(this));
	}

	get shouldRenderH1() {
		return !this.header.length && this.headerText;
	}

	get headerID() {
		return `${this._id}-header`;
	}

	get showNoDataText() {
		return this.items.length === 0 && this.noDataText;
	}

	get showBusy() {
		return this.busy || this.infiniteScroll;
	}

	get isMultiSelect() {
		return this.mode === ListMode.MultiSelect;
	}

	get ariaLabelledBy() {
		if (this.ariaLabelledby || this.ariaLabel) {
			return undefined;
		}

		return this.shouldRenderH1 ? this.headerID : undefined;
	}

	get ariaLabelТxt() {
		return getEffectiveAriaLabelText(this);
	}

	onBeforeRendering() {
		this.prepareListItems();
	}

	initItemNavigation() {
		this._itemNavigation = new ItemNavigation(this, {
			navigationMode: NavigationMode.Vertical,
		});

		this._itemNavigation.getItemsCallback = () => this.getSlottedNodes("items");
	}

	prepareListItems() {
		const slottedItems = this.getSlottedNodes("items");

		slottedItems.forEach((item, key) => {
			const isLastChild = key === slottedItems.length - 1;
			const showBottomBorder = this.separators === ListSeparators.All
				|| (this.separators === ListSeparators.Inner && !isLastChild);

			item._mode = this.mode;
			item.hasBorder = showBottomBorder;
		});

		this._previouslySelectedItem = null;
	}

	/*
	* ITEM SELECTION BASED ON THE CURRENT MODE
	*/
	onSelectionRequested(event) {
		const previouslySelectedItems = this.getSelectedItems();
		let selectionChange = false;
		this._selectionRequested = true;

		if (this[`handle${this.mode}`]) {
			selectionChange = this[`handle${this.mode}`](event.detail.item, event.detail.selected);
		}

		if (selectionChange) {
			this.fireEvent("selection-change", {
				selectedItems: this.getSelectedItems(),
				previouslySelectedItems,
				selectionComponentPressed: event.detail.selectionComponentPressed,
				key: event.detail.key,
			});
		}
	}

	handleSingleSelect(item) {
		if (item.selected) {
			return false;
		}

		this.deselectSelectedItems();
		item.selected = true;

		return true;
	}

	handleSingleSelectBegin(item) {
		return this.handleSingleSelect(item);
	}

	handleSingleSelectEnd(item) {
		return this.handleSingleSelect(item);
	}

	handleSingleSelectAuto(item) {
		return this.handleSingleSelect(item);
	}

	handleMultiSelect(item, selected) {
		item.selected = selected;
		return true;
	}

	handleDelete(item) {
		this.fireEvent("item-delete", { item });
	}

	deselectSelectedItems() {
		this.getSelectedItems().forEach(item => { item.selected = false; });
	}

	getSelectedItems() {
		return this.getSlottedNodes("items").filter(item => item.selected);
	}

	getFirstSelectedItem() {
		const slottedItems = this.getSlottedNodes("items");
		let firstSelectedItem = null;

		for (let i = 0; i < slottedItems.length; i++) {
			if (slottedItems[i].selected) {
				firstSelectedItem = slottedItems[i];
				break;
			}
		}

		return firstSelectedItem;
	}

	_onkeydown(event) {
		if (isTabNext(event)) {
			this._handleTabNext(event);
		}
	}

	/*
	* KEYBOARD SUPPORT
	*/
	_handleTabNext(event) {
		// If forward navigation is performed, we check if the List has headerToolbar.
		// If yes - we check if the target is at the last tabbable element of the headerToolbar
		// to forward correctly the focus to the selected, previously focused or to the first list item.
		let lastTabbableEl;
		const target = this.getNormalizedTarget(event.target);

		if (this.headerToolbar) {
			lastTabbableEl = this.getHeaderToolbarLastTabbableElement();
		}

		if (!lastTabbableEl) {
			return;
		}

		if (lastTabbableEl === target) {
			if (this.getFirstSelectedItem()) {
				this.focusFirstSelectedItem();
			} else if (this.getPreviouslyFocusedItem()) {
				this.focusPreviouslyFocusedItem();
			} else {
				this.focusFirstItem();
			}

			event.stopImmediatePropagation();
			event.preventDefault();
		}
	}

	_onScroll(event) {
		if (!this.infiniteScroll) {
			return;
		}
		this.debounce(this.loadMore.bind(this, event.target), INFINITE_SCROLL_DEBOUNCE_RATE);
	}

	_onfocusin(event) {
		// If the focusin event does not origin from one of the 'triggers' - ignore it.
		if (!this.isForwardElement(this.getNormalizedTarget(event.target))) {
			event.stopImmediatePropagation();
			return;
		}

		// The focus arrives in the List for the first time.
		// If there is selected item - focus it or focus the first item.
		if (!this.getPreviouslyFocusedItem()) {
			if (this.getFirstSelectedItem()) {
				this.focusFirstSelectedItem();
			} else {
				this.focusFirstItem();
			}

			event.stopImmediatePropagation();
			return;
		}

		// The focus returns to the List,
		// focus the first selected item or the previously focused element.
		if (!this.getForwardingFocus()) {
			if (this.getFirstSelectedItem()) {
				this.focusFirstSelectedItem();
			} else {
				this.focusPreviouslyFocusedItem();
			}
		}

		this.setForwardingFocus(false);
	}

	isForwardElement(node) {
		const nodeId = node.id;

		if (this._id === nodeId || this.getBeforeElement().id === nodeId) {
			return true;
		}

		return this.getAfterElement().id === nodeId;
	}

	onItemFocused(event) {
		const target = event.target;

		this._itemNavigation.update(target);
		this.fireEvent("item-focused", { item: target });

		if (this.mode === ListMode.SingleSelectAuto) {
			this.onSelectionRequested({
				detail: {
					item: target,
					selectionComponentPressed: false,
					selected: true,
					key: event.detail.key,
				},
			});
		}
	}

	onItemPress(event) {
		const pressedItem = event.detail.item;

		if (!this._selectionRequested && this.mode !== ListMode.Delete) {
			this._selectionRequested = true;
			this.onSelectionRequested({
				detail: {
					item: pressedItem,
					selectionComponentPressed: false,
					selected: !pressedItem.selected,
					key: event.detail.key,
				},
			});
		}

		this.fireEvent("item-press", { item: pressedItem });
		this.fireEvent("item-click", { item: pressedItem });

		this._selectionRequested = false;
	}

	// This is applicable to NoficationListItem
	onItemClose(event) {
		this.fireEvent("item-close", { item: event.detail.item });
	}

	onItemToggle(event) {
		this.fireEvent("item-toggle", { item: event.detail.item });
	}

	onForwardBefore(event) {
		this.setPreviouslyFocusedItem(event.target);
		this.focusBeforeElement();
	}

	onForwardAfter(event) {
		this.setPreviouslyFocusedItem(event.target);
		this.focusAfterElement();
	}

	focusBeforeElement() {
		this.setForwardingFocus(true);
		this.getBeforeElement().focus();
	}

	focusAfterElement() {
		this.setForwardingFocus(true);
		this.getAfterElement().focus();
	}

	focusFirstItem() {
		const firstItem = this.getFirstItem();

		if (firstItem) {
			firstItem.focus();
		}
	}

	focusPreviouslyFocusedItem() {
		const previouslyFocusedItem = this.getPreviouslyFocusedItem();

		if (previouslyFocusedItem) {
			previouslyFocusedItem.focus();
		}
	}

	focusFirstSelectedItem() {
		const firstSelectedItem = this.getFirstSelectedItem();

		if (firstSelectedItem) {
			firstSelectedItem.focus();
		}
	}

	focusItem(item) {
		item.focus();
	}


	focusUploadCollectionItem(event) {
		setTimeout(() => {
			this.setPreviouslyFocusedItem(event.target);
			this.focusPreviouslyFocusedItem();
		}, 0);
	}

	setForwardingFocus(forwardingFocus) {
		this._forwardingFocus = forwardingFocus;
	}

	getForwardingFocus() {
		return this._forwardingFocus;
	}

	setPreviouslyFocusedItem(item) {
		this._previouslyFocusedItem = item;
	}

	getPreviouslyFocusedItem() {
		return this._previouslyFocusedItem;
	}

	getFirstItem() {
		const slottedItems = this.getSlottedNodes("items");
		return !!slottedItems.length && slottedItems[0];
	}

	getAfterElement() {
		if (!this._afterElement) {
			this._afterElement = this.shadowRoot.querySelector(`#${this._id}-after`);
		}
		return this._afterElement;
	}

	getBeforeElement() {
		if (!this._beforeElement) {
			this._beforeElement = this.shadowRoot.querySelector(`#${this._id}-before`);
		}
		return this._beforeElement;
	}

	getHeaderToolbarLastTabbableElement() {
		return getLastTabbableElement(this.headerToolbar.getDomRef()) || this.headerToolbar.getDomRef();
	}

	getNormalizedTarget(target) {
		let focused = target;

		if (target.shadowRoot && target.shadowRoot.activeElement) {
			focused = target.shadowRoot.activeElement;
		}

		return focused;
	}

	loadMore(el) {
		const scrollTop = el.scrollTop;
		const height = el.offsetHeight;
		const scrollHeight = el.scrollHeight;

		if (this.previousScrollPosition > scrollTop) { // skip scrolling upwards
			this.previousScrollPosition = scrollTop;
			return;
		}
		this.previousScrollPosition = scrollTop;

		if (scrollHeight - BUSYINDICATOR_HEIGHT <= height + scrollTop) {
			this.fireEvent("load-more");
		}
	}

	debounce(fn, delay) {
		clearTimeout(this.debounceInterval);
		this.debounceInterval = setTimeout(() => {
			this.debounceInterval = null;
			fn();
		}, delay);
	}

	static get dependencies() {
		return [BusyIndicator];
	}
}

List.define();

let currentZIndex = 100;

const getFocusedElement = () => {
	let element = document.activeElement;

	while (element && element.shadowRoot && element.shadowRoot.activeElement) {
		element = element.shadowRoot.activeElement;
	}

	return (element && typeof element.focus === "function") ? element : null;
};

const isFocusedElementWithinNode = node => {
	const fe = getFocusedElement();

	if (fe) {
		return isNodeContainedWithin(node, fe);
	}

	return false;
};

const isNodeContainedWithin = (parent, child) => {
	let currentNode = parent;

	if (currentNode.shadowRoot) {
		currentNode = Array.from(currentNode.shadowRoot.children).find(n => n.localName !== "style");
	}

	if (currentNode === child) {
		return true;
	}

	const childNodes = currentNode.localName === "slot" ? currentNode.assignedNodes() : currentNode.children;

	if (childNodes) {
		return Array.from(childNodes).some(n => isNodeContainedWithin(n, child));
	}
};

const isPointInRect = (x, y, rect) => {
	return x >= rect.left && x <= rect.right
		&& y >= rect.top && y <= rect.bottom;
};

const isClickInRect = (event, rect) => {
	let x;
	let y;

	if (event.touches) {
		const touch = event.touches[0];
		x = touch.clientX;
		y = touch.clientY;
	} else {
		x = event.clientX;
		y = event.clientY;
	}

	return isPointInRect(x, y, rect);
};

const getClosedPopupParent = el => {
	const parent = el.parentElement || (el.getRootNode && el.getRootNode().host);

	if (parent && ((parent.openBy && parent.isUI5Element) || (parent.open && parent.isUI5Element) || parent === document.documentElement)) {
		return parent;
	}

	return getClosedPopupParent(parent);
};


const getNextZIndex = () => {
	currentZIndex += 2;
	return currentZIndex;
};

const block0$3 = (context) => { return scopedHtml`${ context._isPhone ? block1$2(context) : block5$1(context) }`; };
const block1$2 = (context) => { return scopedHtml`<ui5-dialog ?with-padding=${context.withPadding} stretch _disable-initial-focus @ui5-before-open="${ifDefined(context._propagateDialogEvent)}" @ui5-after-open="${ifDefined(context._afterDialogOpen)}" @ui5-before-close="${ifDefined(context._propagateDialogEvent)}" @ui5-after-close="${ifDefined(context._afterDialogClose)}">${ !context._hideHeader ? block2$2(context) : undefined }<slot></slot><slot slot="footer" name="footer"></slot></ui5-dialog>`; };
const block2$2 = (context) => { return scopedHtml`${ context.header.length ? block3$1() : block4$1(context) }`; };
const block3$1 = (context) => { return scopedHtml`<slot slot="header" name="header"></slot>`; };
const block4$1 = (context) => { return scopedHtml`<header class="ui5-responsive-popover-header"><ui5-title level="H5" class="ui5-responsive-popover-header-text">${ifDefined(context.headerText)}</ui5-title><ui5-button icon="decline" design="Transparent" @click="${context.close}"></ui5-button></header>`; };
const block5$1 = (context) => { return scopedHtml`<section style="${styleMap(context.styles.root)}" class="${classMap(context.classes.root)}" role="dialog" aria-modal="${ifDefined(context._ariaModal)}" aria-label="${ifDefined(context._ariaLabel)}" aria-labelledby="${ifDefined(context._ariaLabelledBy)}"><span class="first-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToLast}></span><span class="ui5-popover-arrow" style="${styleMap(context.styles.arrow)}"></span>${ context._displayHeader ? block6(context) : undefined }<div style="${styleMap(context.styles.content)}" class="${classMap(context.classes.content)}"  @scroll="${context._scroll}"><slot></slot></div>${ context._displayFooter ? block9(context) : undefined }<span class="last-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToFirst}></span></section>`; };
const block6 = (context) => { return scopedHtml`<header class="ui5-popup-header-root" id="ui5-popup-header">${ context.header.length ? block7() : block8(context) }</header>`; };
const block7 = (context) => { return scopedHtml`<slot name="header"></slot>`; };
const block8 = (context) => { return scopedHtml`<h2 class="ui5-popup-header-text">${ifDefined(context.headerText)}</h2>`; };
const block9 = (context) => { return scopedHtml`${ context.footer.length ? block10() : undefined }`; };
const block10 = (context) => { return scopedHtml`<footer class="ui5-popup-footer-root"><slot name="footer"></slot></footer>`; };


const main$3 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$3(context);
};

const rClickable = /^(?:a|area)$/i;
const rFocusable = /^(?:input|select|textarea|button)$/i;

const isNodeClickable = node => {
	if (node.disabled) {
		return false;
	}

	const tabIndex = node.getAttribute("tabindex");
	if (tabIndex !== null && tabIndex !== undefined) {
		return parseInt(tabIndex) >= 0;
	}

	return rFocusable.test(node.nodeName)
		|| (rClickable.test(node.nodeName)
		&& node.href);
};

const isFocusTrap = el => {
	return el.hasAttribute("data-ui5-focus-trap");
};

const getFirstFocusableElement = container => {
	if (!container || isNodeHidden(container)) {
		return null;
	}

	return findFocusableElement(container, true);
};

const getLastFocusableElement = container => {
	if (!container || isNodeHidden(container)) {
		return null;
	}

	return findFocusableElement(container, false);
};

const findFocusableElement = (container, forward) => {
	let child;

	if (container.shadowRoot) {
		child = forward ? container.shadowRoot.firstChild : container.shadowRoot.lastChild;
	} else if (container.assignedNodes && container.assignedNodes()) {
		const assignedElements = container.assignedNodes();
		child = forward ? assignedElements[0] : assignedElements[assignedElements.length - 1];
	} else {
		child = forward ? container.firstChild : container.lastChild;
	}

	let focusableDescendant;

	while (child) {
		const originalChild = child;

		child = child.isUI5Element ? child.getFocusDomRef() : child;
		if (!child) {
			return null;
		}

		if (child.nodeType === 1 && !isNodeHidden(child) && !isFocusTrap(child)) {
			if (isNodeClickable(child)) {
				return (child && typeof child.focus === "function") ? child : null;
			}

			focusableDescendant = findFocusableElement(child, forward);
			if (focusableDescendant) {
				return (focusableDescendant && typeof focusableDescendant.focus === "function") ? focusableDescendant : null;
			}
		}

		child = forward ? originalChild.nextSibling : originalChild.previousSibling;
	}

	return null;
};

const block0$4 = (context) => { return scopedHtml`<section style="${styleMap(context.styles.root)}" class="${classMap(context.classes.root)}" role="dialog" aria-modal="${ifDefined(context._ariaModal)}" aria-label="${ifDefined(context._ariaLabel)}" aria-labelledby="${ifDefined(context._ariaLabelledBy)}"><span class="first-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToLast}></span><div style="${styleMap(context.styles.content)}" class="${classMap(context.classes.content)}"  @scroll="${context._scroll}"><slot></slot></div><span class="last-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToFirst}></span></section> `; };


const main$4 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$4(context);
};

const block0$5 = (context) => { return scopedHtml`<div class="ui5-block-layer" ?hidden=${context._blockLayerHidden} tabindex="1" style="${styleMap(context.styles.blockLayer)}" @keydown="${context._preventBlockLayerFocus}" @mousedown="${context._preventBlockLayerFocus}"></div>`; };


const main$5 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$5(context);
};

let openedRegistry = [];

const addOpenedPopup = (instance, parentPopovers = []) => {
	if (!openedRegistry.includes(instance)) {
		openedRegistry.push({
			instance,
			parentPopovers,
		});
	}

	if (openedRegistry.length === 1) {
		attachGlobalListener();
	}
};

const removeOpenedPopup = instance => {
	openedRegistry = openedRegistry.filter(el => {
		return el.instance !== instance;
	});

	if (!openedRegistry.length) {
		detachGlobalListener();
	}
};

const getOpenedPopups = () => {
	return [...openedRegistry];
};

const _keydownListener = event => {
	if (!openedRegistry.length) {
		return;
	}

	if (isEscape(event)) {
		openedRegistry.pop().instance.close(true);
	}
};

const attachGlobalListener = () => {
	document.addEventListener("keydown", _keydownListener);
};

const detachGlobalListener = () => {
	document.removeEventListener("keydown", _keydownListener);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles = ":host{min-width:1px;display:none;position:fixed}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var staticAreaStyles = ".ui5-block-layer{display:none;position:fixed;background-color:var(--sapBlockLayer_Background);opacity:.6;top:-500px;left:-500px;right:-500px;bottom:-500px;outline:none;pointer-events:all;z-index:-1}.ui5-block-layer:not([hidden]){display:inline-block}";

/**
 * @public
 */
const metadata$4 = {
	managedSlots: true,
	slots: /** @lends  sap.ui.webcomponents.main.Popup.prototype */ {

		/**
		 * Defines the content of the Popup.
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.Popup.prototype */ {
		/**
		 * Defines the ID of the HTML Element, which will get the initial focus.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		initialFocus: {
			type: String,
		},

		/**
		 * Defines if the focus should be returned to the previously focused element,
		 * when the popup closes.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		*/
		preventFocusRestore: {
			type: Boolean,
		},

		/**
		 * Indicates if the elements is open
		 * @private
		 * @type {boolean}
		 * @defaultvalue false
		 */
		opened: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the popup
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * @private
		 */
		_disableInitialFocus: {
			type: Boolean,
		},

		_blockLayerHidden: {
			type: Boolean,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.Popup.prototype */ {

		/**
		 * Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. This event does not bubble.
		 *
		 * @public
		 * @event sap.ui.webcomponents.main.Popup#before-open
		 */
		"before-open": {},

		/**
		 * Fired after the component is opened. This event does not bubble.
		 *
		 * @public
		 * @event sap.ui.webcomponents.main.Popup#after-open
		 */
		"after-open": {},

		/**
		 * Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. This event does not bubble.
		 *
		 * @public
		 * @event sap.ui.webcomponents.main.Popup#before-close
		 * @param {Boolean} escPressed Indicates that <code>ESC</code> key has triggered the event.
		 */
		"before-close": {
			escPressed: { type: Boolean },
		},

		/**
		 * Fired after the component is closed. This event does not bubble.
		 *
		 * @public
		 * @event sap.ui.webcomponents.main.Popup#after-close
		 */
		"after-close": {},
	},
};

let customBlockingStyleInserted = false;

const createBlockingStyle = () => {
	if (customBlockingStyleInserted) {
		return;
	}

	createStyleInHead(`
		.ui5-popup-scroll-blocker {
			width: 100%;
			height: 100%;
			position: fixed;
			overflow: hidden;
		}
	`, { "data-ui5-popup-scroll-blocker": "" });

	customBlockingStyleInserted = true;
};

createBlockingStyle();

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 * Base class for all popup Web Components.
 *
 * If you need to create your own popup-like custom UI5 Web Components, it is highly recommended that you extend
 * at least Popup in order to have consistency with other popups in terms of modal behavior and z-index management.
 *
 * 1. The Popup class handles modality:
 *  - The "isModal" getter can be overridden by derivatives to provide their own conditions when they are modal or not
 *  - Derivatives may call the "blockBodyScrolling" and "unblockBodyScrolling" static methods to temporarily remove scrollbars on the body
 *  - Derivatives may call the "open" and "close" methods which handle focus, manage the popup registry and for modal popups, manage the blocking layer
 *
 *  2. Provides blocking layer (relevant for modal popups only):
 *   - It is in the static area
 *   - Controlled by the "open" and "close" methods
 *
 * 3. The Popup class "traps" focus:
 *  - Derivatives may call the "applyInitialFocus" method (usually when opening, to transfer focus inside the popup)
 *
 * 4. The Popup class automatically assigns "z-index"
 *  - Each time a popup is opened, it gets a higher than the previously opened popup z-index
 *
 * 5. The template of this component exposes two inline partials you can override in derivatives:
 *  - beforeContent (upper part of the box, useful for header/title/close button)
 *  - afterContent (lower part, useful for footer/action buttons)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Popup
 * @extends sap.ui.webcomponents.base.UI5Element
 * @public
 */
class Popup extends UI5Element {
	static get metadata() {
		return metadata$4;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return styles;
	}

	static get template() {
		return main$4;
	}

	static get staticAreaTemplate() {
		return main$5;
	}

	static get staticAreaStyles() {
		return staticAreaStyles;
	}

	/**
	 * Prevents the user from interacting with the content under the block layer
	 */
	_preventBlockLayerFocus(event) {
		event.preventDefault();
	}

	/**
	 * Temporarily removes scrollbars from the body
	 * @protected
	 */
	static blockBodyScrolling() {
		document.body.style.top = `-${window.pageYOffset}px`;
		document.body.classList.add("ui5-popup-scroll-blocker");
	}

	/**
	 * Restores scrollbars on the body, if needed
	 * @protected
	 */
	static unblockBodyScrolling() {
		document.body.classList.remove("ui5-popup-scroll-blocker");
		window.scrollTo(0, -parseFloat(document.body.style.top));
		document.body.style.top = "";
	}

	_scroll(e) {
		this.fireEvent("scroll", {
			scrollTop: e.target.scrollTop,
			targetRef: e.target,
		});
	}

	/**
	 * Focus trapping
	 * @private
	 */
	forwardToFirst() {
		const firstFocusable = getFirstFocusableElement(this);

		if (firstFocusable) {
			firstFocusable.focus();
		}
	}

	/**
	 * Focus trapping
	 * @private
	 */
	forwardToLast() {
		const lastFocusable = getLastFocusableElement(this);

		if (lastFocusable) {
			lastFocusable.focus();
		}
	}

	/**
	 * Use this method to focus the element denoted by "initialFocus", if provided, or the first focusable element otherwise.
	 * @protected
	 */
	applyInitialFocus() {
		this.applyFocus();
	}

	/**
	 * Focuses the element denoted by <code>initialFocus</code>, if provided,
	 * or the first focusable element otherwise.
	 * @public
	 */
	applyFocus() {
		const element = this.getRootNode().getElementById(this.initialFocus)
			|| document.getElementById(this.initialFocus)
			|| getFirstFocusableElement(this);

		if (element) {
			element.focus();
		}
	}

	/**
	 * Override this method to provide custom logic for the popup's open/closed state. Maps to the "opened" property by default.
	 * @public
	 * @returns {boolean}
	 */
	isOpen() {
		return this.opened;
	}

	isFocusWithin() {
		return isFocusedElementWithinNode(this.shadowRoot.querySelector(".ui5-popup-root"));
	}

	/**
	 * Shows the block layer (for modal popups only) and sets the correct z-index for the purpose of popup stacking
	 * @param {boolean} preventInitialFocus prevents applying the focus inside the popup
	 * @public
	 */
	open(preventInitialFocus) {
		const prevented = !this.fireEvent("before-open", {}, true, false);
		if (prevented) {
			return;
		}

		if (this.isModal && !this.shouldHideBlockLayer) {
			// create static area item ref for block layer
			this.getStaticAreaItemDomRef();
			this._blockLayerHidden = false;
			Popup.blockBodyScrolling();
		}

		this._zIndex = getNextZIndex();
		this.style.zIndex = this._zIndex;
		this._focusedElementBeforeOpen = getFocusedElement();
		this.show();

		if (!this._disableInitialFocus && !preventInitialFocus) {
			this.applyInitialFocus();
		}

		this._addOpenedPopup();

		this.opened = true;
		this.fireEvent("after-open", {}, false, false);
	}

	/**
	 * Adds the popup to the "opened popups registry"
	 * @protected
	 */
	_addOpenedPopup() {
		addOpenedPopup(this);
	}

	/**
	 * Hides the block layer (for modal popups only)
	 * @public
	 */
	close(escPressed = false, preventRegistryUpdate = false, preventFocusRestore = false) {
		if (!this.opened) {
			return;
		}

		const prevented = !this.fireEvent("before-close", { escPressed }, true, false);
		if (prevented) {
			return;
		}

		if (this.isModal) {
			this._blockLayerHidden = true;
			Popup.unblockBodyScrolling();
		}

		this.hide();
		this.opened = false;

		if (!preventRegistryUpdate) {
			this._removeOpenedPopup();
		}

		if (!this.preventFocusRestore && !preventFocusRestore) {
			this.resetFocus();
		}

		this.fireEvent("after-close", {}, false, false);
	}

	/**
	 * Removes the popup from the "opened popups registry"
	 * @protected
	 */
	_removeOpenedPopup() {
		removeOpenedPopup(this);
	}

	/**
	 * Returns the focus to the previously focused element
	 * @protected
	 */
	resetFocus() {
		if (!this._focusedElementBeforeOpen) {
			return;
		}

		this._focusedElementBeforeOpen.focus();
		this._focusedElementBeforeOpen = null;
	}

	/**
	 * Sets "block" display to the popup
	 * @protected
	 */
	show() {
		this.style.display = "block";
	}


	/**
	 * Sets "none" display to the popup
	 * @protected
	 */
	hide() {
		this.style.display = "none";
	}

	onExitDOM() {
		if (this.isOpen()) {
			Popup.unblockBodyScrolling();
			this._removeOpenedPopup();
		}
	}

	/**
	 * Implement this getter with relevant logic regarding the modality of the popup (f.e. based on a public property)
	 *
	 * @protected
	 * @abstract
	 * @returns {boolean}
	 */
	get isModal() {} // eslint-disable-line

	/**
	 * Implement this getter with relevant logic in order to hide the block layer (f.e. based on a public property)
	 *
	 * @protected
	 * @abstract
	 * @returns {boolean}
	 */
	get shouldHideBlockLayer() {} // eslint-disable-line

	/**
	 * Return the ID of an element in the shadow DOM that is going to label this popup
	 *
	 * @protected
	 * @abstract
	 * @returns {String}
	 */
	get _ariaLabelledBy() {} // eslint-disable-line

	/**
	 * Return the value for aria-modal for this popup
	 *
	 * @protected
	 * @abstract
	 * @returns {String}
	 */
	get _ariaModal() {} // eslint-disable-line

	/**
	 * Ensures ariaLabel is never null or empty string
	 * @returns {String|undefined}
	 * @protected
	 */
	get _ariaLabel() {
		return this.ariaLabel || undefined;
	}

	get styles() {
		return {
			root: {},
			content: {},
			blockLayer: {
				"zIndex": (this._zIndex - 1),
			},
		};
	}

	get classes() {
		return {
			root: {},
			content: {},
		};
	}
}

/**
 * @lends sap.ui.webcomponents.main.types.PopoverPlacementType.prototype
 * @public
 */
const PopoverPlacementTypes = {
	/**
	 * Popover will be placed at the left side of the reference element.
	 * @public
	 * @type {Left}
	 */
	Left: "Left",

	/**
	 * Popover will be placed at the right side of the reference element.
	 * @public
	 * @type {Right}
	 */
	Right: "Right",

	/**
	 * Popover will be placed at the top of the reference element.
	 * @public
	 * @type {Bottom}
	 */
	Top: "Top",

	/**
	 * Popover will be placed at the bottom of the reference element.
	 * @public
	 * @type {Bottom}
	 */
	Bottom: "Bottom",
};

/**
 * @class
 * Types for the placement of Popover control.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.PopoverPlacementType
 * @public
 * @enum {string}
 */
class PopoverPlacementType extends DataType {
	static isValid(value) {
		return !!PopoverPlacementTypes[value];
	}
}

PopoverPlacementType.generataTypeAcessors(PopoverPlacementTypes);

/**
 * @lends sap.ui.webcomponents.main.types.PopoverVerticalAlign.prototype
 * @public
 */
const PopoverVerticalAligns = {
	/**
	 *
	 * @public
	 * @type {Center}
	 */
	Center: "Center",

	/**
	 * Popover will be placed at the top of the reference control.
	 * @public
	 * @type {Top}
	 */
	Top: "Top",

	/**
	 * Popover will be placed at the bottom of the reference control.
	 * @public
	 * @type {Bottom}
	 */
	Bottom: "Bottom",

	/**
	 * Popover will be streched
	 * @public
	 * @type {Stretch}
	 */
	Stretch: "Stretch",
};

/**
 * @class
 * Types for the placement of message Popover control.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.PopoverVerticalAlign
 * @public
 * @enum {string}
 */
class PopoverVerticalAlign extends DataType {
	static isValid(value) {
		return !!PopoverVerticalAligns[value];
	}
}

PopoverVerticalAlign.generataTypeAcessors(PopoverVerticalAligns);

/**
 * @lends sap.ui.webcomponents.main.types.PopoverHorizontalAlign.prototype
 * @public
 */
const PopoverHorizontalAligns = {
	/**
	 * Popover is centered
	 * @public
	 * @type {Center}
	 */
	Center: "Center",

	/**
	 * Popover opens on the left side of the target
	 * @public
	 * @type {Left}
	 */
	Left: "Left",

	/**
	 * Popover opens on the right side of the target
	 * @public
	 * @type {Right}
	 */
	Right: "Right",

	/**
	 * Popover is stretched
	 * @public
	 * @type {Stretch}
	 */
	Stretch: "Stretch",
};

/**
 * @class
 * Defines the horizontal alignment of <code>ui5-popover</code>
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.PopoverHorizontalAlign
 * @public
 * @enum {string}
 */
class PopoverHorizontalAlign extends DataType {
	static isValid(value) {
		return !!PopoverHorizontalAligns[value];
	}
}

PopoverHorizontalAlign.generataTypeAcessors(PopoverHorizontalAligns);

let updateInterval = null;
const intervalTimeout = 300;
const openedRegistry$1 = [];

const repositionPopovers = event => {
	openedRegistry$1.forEach(popover => {
		popover.instance.reposition();
	});
};

const attachGlobalScrollHandler = () => {
	document.body.addEventListener("scroll", repositionPopovers, true);
};

const detachGlobalScrollHandler = () => {
	document.body.removeEventListener("scroll", repositionPopovers, true);
};

const runUpdateInterval = () => {
	updateInterval = setInterval(() => {
		repositionPopovers();
	}, intervalTimeout);
};

const stopUpdateInterval = () => {
	clearInterval(updateInterval);
};

const attachGlobalClickHandler = () => {
	document.addEventListener("mousedown", clickHandler);
};

const detachGlobalClickHandler = () => {
	document.removeEventListener("mousedown", clickHandler);
};

const clickHandler = event => {
	const openedPopups = getOpenedPopups();
	const isTopPopupPopover = openedPopups[openedPopups.length - 1].instance.openBy;

	if (openedPopups.length === 0 || !isTopPopupPopover) {
		return;
	}

	// loop all open popovers
	for (let i = (openedPopups.length - 1); i !== -1; i--) {
		const popup = openedPopups[i].instance;

		// if popup is modal, opener is clicked, popup is dialog skip closing
		if (popup.isModal || popup.isOpenerClicked(event)) {
			return;
		}

		if (isClickInRect(event, popup.getBoundingClientRect())) {
			break;
		}

		popup.close();
	}
};

const attachScrollHandler = popover => {
	popover && popover.shadowRoot.addEventListener("scroll", repositionPopovers, true);
};

const detachScrollHandler = popover => {
	popover && popover.shadowRoot.removeEventListener("scroll", repositionPopovers);
};

const addOpenedPopover = instance => {
	const parentPopovers = getParentPopoversIfNested(instance);

	addOpenedPopup(instance, parentPopovers);
	openedRegistry$1.push({
		instance,
		parentPopovers,
	});

	attachScrollHandler(instance);

	if (openedRegistry$1.length === 1) {
		attachGlobalScrollHandler();
		attachGlobalClickHandler();
		runUpdateInterval();
	}
};

const removeOpenedPopover = instance => {
	const popoversToClose = [instance];

	for (let i = 0; i < openedRegistry$1.length; i++) {
		const indexOfCurrentInstance = openedRegistry$1[i].parentPopovers.indexOf(instance);
		if (openedRegistry$1[i].parentPopovers.length > 0 && indexOfCurrentInstance > -1) {
			popoversToClose.push(openedRegistry$1[i].instance);
		}
	}

	for (let i = popoversToClose.length - 1; i >= 0; i--) {
		for (let j = 0; j < openedRegistry$1.length; j++) {
			let indexOfItemToRemove;
			if (popoversToClose[i] === openedRegistry$1[j].instance) {
				indexOfItemToRemove = j;
			}


			if (indexOfItemToRemove >= 0) {
				removeOpenedPopup(openedRegistry$1[indexOfItemToRemove].instance);
				detachScrollHandler(openedRegistry$1[indexOfItemToRemove].instance);
				const itemToClose = openedRegistry$1.splice(indexOfItemToRemove, 1);
				itemToClose[0].instance.close(false, true);
			}
		}
	}

	if (!openedRegistry$1.length) {
		detachGlobalScrollHandler();
		detachGlobalClickHandler();
		stopUpdateInterval();
	}
};

const getParentPopoversIfNested = instance => {
	let currentElement = instance.parentNode;
	const parentPopovers = [];

	while (currentElement.parentNode) {
		for (let i = 0; i < openedRegistry$1.length; i++) {
			if (currentElement && currentElement === openedRegistry$1[i].instance) {
				parentPopovers.push(currentElement);
			}
		}

		currentElement = currentElement.parentNode;
	}

	return parentPopovers;
};

const block0$6 = (context) => { return scopedHtml`<section style="${styleMap(context.styles.root)}" class="${classMap(context.classes.root)}" role="dialog" aria-modal="${ifDefined(context._ariaModal)}" aria-label="${ifDefined(context._ariaLabel)}" aria-labelledby="${ifDefined(context._ariaLabelledBy)}"><span class="first-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToLast}></span><span class="ui5-popover-arrow" style="${styleMap(context.styles.arrow)}"></span>${ context._displayHeader ? block1$3(context) : undefined }<div style="${styleMap(context.styles.content)}" class="${classMap(context.classes.content)}"  @scroll="${context._scroll}"><slot></slot></div>${ context._displayFooter ? block4$2(context) : undefined }<span class="last-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToFirst}></span></section> `; };
const block1$3 = (context) => { return scopedHtml`<header class="ui5-popup-header-root" id="ui5-popup-header">${ context.header.length ? block2$3() : block3$2(context) }</header>`; };
const block2$3 = (context) => { return scopedHtml`<slot name="header"></slot>`; };
const block3$2 = (context) => { return scopedHtml`<h2 class="ui5-popup-header-text">${ifDefined(context.headerText)}</h2>`; };
const block4$2 = (context) => { return scopedHtml`${ context.footer.length ? block5$2() : undefined }`; };
const block5$2 = (context) => { return scopedHtml`<footer class="ui5-popup-footer-root"><slot name="footer"></slot></footer>`; };


const main$6 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$6(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var PopupsCommonCss = ":host{display:none;position:fixed;min-width:6.25rem;background:var(--sapGroup_ContentBackground);box-shadow:var(--sapContent_Shadow2);border-radius:.25rem;min-height:2rem;box-sizing:border-box}.ui5-popup-root{background:inherit;border-radius:inherit;width:100%;height:100%;box-sizing:border-box;display:flex;flex-direction:column;overflow:hidden;max-height:94vh;max-width:90vw}@media screen and (-ms-high-contrast:active){.ui5-popup-root{border:1px solid var(--sapPageFooter_BorderColor)}}.ui5-popup-root .ui5-popup-header-root{box-shadow:var(--sapContent_Shadow0);margin-bottom:.125rem}.ui5-popup-footer-root{background:var(--sapPageFooter_Background);border-top:1px solid var(--sapPageFooter_BorderColor);color:var(--sapPageFooter_TextColor)}.ui5-popup-footer-root,.ui5-popup-header-root,:host([header-text]) .ui5-popup-header-text{margin:0;color:var(--sapPageHeader_TextColor);font-size:1rem;font-weight:400;font-family:\"72override\",var(--sapFontFamily);display:flex;justify-content:center;align-items:center}.ui5-popup-content{overflow:auto;padding:var(--_ui5_popup_content_padding);box-sizing:border-box}:host([no-padding]) .ui5-popup-content{padding:0}:host([header-text]) .ui5-popup-header-text{padding:0 .25rem;text-align:center;min-height:3rem;max-height:3rem;line-height:3rem;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:100%;display:inline-block}:host(:not([header-text])) .ui5-popup-header-text{display:none}:host([disable-scrolling]) .ui5-popup-content{overflow:hidden}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var PopoverCss = ".ui5-popover-arrow{pointer-events:none;display:block;width:1rem;height:1rem;position:absolute;overflow:hidden}.ui5-popover-arrow:after{content:\"\";display:block;width:.7rem;height:.7rem;background-color:var(--sapGroup_ContentBackground);box-shadow:var(--sapContent_Shadow3);transform:rotate(-45deg)}:host([actual-placement-type=Bottom]) .ui5-popover-arrow{left:calc(50% - .5625rem);top:-.5rem;height:.5625rem}:host([actual-placement-type=Bottom]) .ui5-popover-arrow:after{margin:.1875rem 0 0 .1875rem}:host([actual-placement-type=Left]) .ui5-popover-arrow{top:calc(50% - .5625rem);right:-.5625rem;width:.5625rem}:host([actual-placement-type=Left]) .ui5-popover-arrow:after{margin:.1875rem 0 0 -.375rem}:host([actual-placement-type=Top]) .ui5-popover-arrow{left:calc(50% - .5625rem);height:.5625rem;bottom:calc(-1*(var(--_ui5_popup_content_padding) + 2px))}:host([actual-placement-type=Top]) .ui5-popover-arrow:after{margin:-.375rem 0 0 .125rem}:host(:not([actual-placement-type])) .ui5-popover-arrow,:host([actual-placement-type=Right]) .ui5-popover-arrow{left:-.5625rem;top:calc(50% - .5625rem);width:.5625rem;height:1rem}:host(:not([actual-placement-type])) .ui5-popover-arrow:after,:host([actual-placement-type=Right]) .ui5-popover-arrow:after{margin:.125rem 0 0 .25rem}:host([no-arrow]) .ui5-popover-arrow{display:none}";

const arrowSize = 8;

/**
 * @public
 */
const metadata$5 = {
	tag: "ui5-popover",
	properties: /** @lends sap.ui.webcomponents.main.Popover.prototype */ {
		/**
		 * Defines the header text.
		 * <br><br>
		 * <b>Note:</b> If <code>header</code> slot is provided, the <code>headerText</code> is ignored.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		headerText: {
			type: String,
		},

		/**
		 * Determines on which side the <code>ui5-popover</code> is placed at.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Left</code></li>
		 * <li><code>Right</code></li>
		 * <li><code>Top</code></li>
		 * <li><code>Bottom</code></li>
		 * </ul>
		 *
		 * @type {PopoverPlacementType}
		 * @defaultvalue "Right"
		 * @public
		 */
		placementType: {
			type: PopoverPlacementType,
			defaultValue: PopoverPlacementType.Right,
		},

		/**
		 * Determines the horizontal alignment of the <code>ui5-popover</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Center</code></li>
		 * <li><code>Left</code></li>
		 * <li><code>Right</code></li>
		 * <li><code>Stretch</code></li>
		 * </ul>
		 *
		 * @type {PopoverHorizontalAlign}
		 * @defaultvalue "Center"
		 * @public
		 */
		horizontalAlign: {
			type: PopoverHorizontalAlign,
			defaultValue: PopoverHorizontalAlign.Center,
		},

		/**
		 * Determines the vertical alignment of the <code>ui5-popover</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Center</code></li>
		 * <li><code>Top</code></li>
		 * <li><code>Bottom</code></li>
		 * <li><code>Stretch</code></li>
		 * </ul>
		 *
		 * @type {PopoverVerticalAlign}
		 * @defaultvalue "Center"
		 * @public
		 */
		verticalAlign: {
			type: PopoverVerticalAlign,
			defaultValue: PopoverVerticalAlign.Center,
		},

		/**
		 * Defines whether the <code>ui5-popover</code> should close when
		 * clicking/tapping outside of the popover.
		 * If enabled, it blocks any interaction with the background.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		modal: {
			type: Boolean,
		},

		/**
		 * Defines whether the block layer will be shown if modal property is set to true.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.10
		 */
		hideBlockLayer: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-popover</code> arrow is hidden.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noArrow: {
			type: Boolean,
		},

		/**
		 * Determines if there is no enough space, the <code>ui5-popover</code> can be placed
		 * over the target.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		allowTargetOverlap: {
			type: Boolean,
		},

		/**
		 * Defines whether the content is scrollable.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		disableScrolling: {
			type: Boolean,
		},

		/**
		 * Sets the X translation of the arrow
		 *
		 * @private
		 */
		arrowTranslateX: {
			type: Integer,
			defaultValue: 0,
			noAttribute: true,
		},

		/**
		 * Sets the Y translation of the arrow
		 *
		 * @private
		 */
		arrowTranslateY: {
			type: Integer,
			defaultValue: 0,
			noAttribute: true,
		},

		/**
		 * Returns the calculated placement depending on the free space
		 *
		 * @private
		 */
		actualPlacementType: {
			type: PopoverPlacementType,
			defaultValue: PopoverPlacementType.Right,
		},

		_maxContentHeight: { type: Integer },
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Popover.prototype */ {
		/**
		 * Defines the header HTML Element.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},

		/**
		 * Defines the footer HTML Element.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		footer: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Popover.prototype */ {
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-popover</code> component displays additional information for an object
 * in a compact way and without leaving the page.
 * The Popover can contain various UI elements, such as fields, tables, images, and charts.
 * It can also include actions in the footer.
 *
 * <h3>Structure</h3>
 *
 * The popover has three main areas:
 * <ul>
 * <li>Header (optional)</li>
 * <li>Content</li>
 * <li>Footer (optional)</li>
 * </ul>
 *
 * <b>Note:</b> The <code>ui5-popover</code> is closed when the user clicks
 * or taps outside the popover
 * or selects an action within the popover. You can prevent this with the
 * <code>modal</code> property.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Popover.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Popover
 * @extends Popup
 * @tagname ui5-popover
 * @since 1.0.0-rc.6
 * @public
 */
class Popover extends Popup {
	static get metadata() {
		return metadata$5;
	}

	static get styles() {
		return [PopupsCommonCss, PopoverCss];
	}

	static get template() {
		return main$6;
	}

	static get MIN_OFFSET() {
		return 10; // px
	}

	isOpenerClicked(event) {
		const target = event.target;
		return target === this._opener || (target.getFocusDomRef && target.getFocusDomRef() === this._opener) || event.composedPath().indexOf(this._opener) > -1;
	}

	/**
	 * Opens the popover.
	 * @param {HTMLElement} opener the element that the popover is opened by
	 * @param {boolean} preventInitialFocus prevents applying the focus inside the popover
	 * @public
	 */
	openBy(opener, preventInitialFocus = false) {
		if (!opener || this.opened) {
			return;
		}

		this._opener = opener;

		super.open(preventInitialFocus);
	}

	/**
	 * Override for the _addOpenedPopup hook, which would otherwise just call addOpenedPopup(this)
	 * @private
	 */
	_addOpenedPopup() {
		addOpenedPopover(this);
	}

	/**
	 * Override for the _removeOpenedPopup hook, which would otherwise just call removeOpenedPopup(this)
	 * @private
	 */
	_removeOpenedPopup() {
		removeOpenedPopover(this);
	}

	shouldCloseDueToOverflow(placement, openerRect) {
		const threshold = 32;
		const limits = {
			"Right": openerRect.right,
			"Left": openerRect.left,
			"Top": openerRect.top,
			"Bottom": openerRect.bottom,
		};

		const closedPopupParent = getClosedPopupParent(this._opener);
		let overflowsBottom = false;
		let overflowsTop = false;

		if (closedPopupParent.openBy) {
			const contentRect = closedPopupParent.contentDOM.getBoundingClientRect();
			overflowsBottom = openerRect.top > (contentRect.top + contentRect.height);
			overflowsTop = (openerRect.top + openerRect.height) < contentRect.top;
		}

		return (limits[placement] < 0 || (limits[placement] + threshold > closedPopupParent.innerHeight)) || overflowsBottom || overflowsTop;
	}

	shouldCloseDueToNoOpener(openerRect) {
		return openerRect.top === 0
			&& openerRect.bottom === 0
			&& openerRect.left === 0
			&& openerRect.right === 0;
	}

	reposition() {
		this.show();
	}

	show() {
		let placement;
		const popoverSize = this.popoverSize;
		const openerRect = this._opener.getBoundingClientRect();

		if (this.shouldCloseDueToNoOpener(openerRect) && this.isFocusWithin()) {
			// reuse the old placement as the opener is not available,
			// but keep the popover open as the focus is within
			placement = this._oldPlacement;
		} else {
			placement = this.calcPlacement(openerRect, popoverSize);
		}

		const stretching = this.horizontalAlign === PopoverHorizontalAlign.Stretch;

		if (this._preventRepositionAndClose) {
			return this.close();
		}

		if (this._oldPlacement && (this._oldPlacement.left === placement.left) && (this._oldPlacement.top === placement.top) && stretching) {
			super.show();
			this.style.width = this._width;
			return;
		}

		this._oldPlacement = placement;

		const popoverOnLeftBorder = this._left === 0;
		const popoverOnTopBorder = this._top === 0;

		this.actualPlacementType = placement.placementType;
		this.arrowTranslateX = popoverOnLeftBorder ? placement.arrowX - Popover.MIN_OFFSET : placement.arrowX;
		this.arrowTranslateY = popoverOnTopBorder ? placement.arrowY - Popover.MIN_OFFSET : placement.arrowY;

		this.style.left = `${popoverOnLeftBorder ? Popover.MIN_OFFSET : this._left}px`;
		this.style.top = `${popoverOnTopBorder ? Popover.MIN_OFFSET : this._top}px`;
		super.show();

		if (stretching && this._width) {
			this.style.width = this._width;
		}
	}

	get popoverSize() {
		let width,
			height;
		let rect = this.getBoundingClientRect();

		if (this.opened) {
			width = rect.width;
			height = rect.height;

			return { width, height };
		}

		this.style.visibility = "hidden";
		this.style.display = "block";

		rect = this.getBoundingClientRect();

		width = rect.width;
		height = rect.height;

		this.hide();
		this.style.visibility = "visible";

		return { width, height };
	}

	get contentDOM() {
		return this.shadowRoot.querySelector(".ui5-popup-content");
	}

	get arrowDOM() {
		return this.shadowRoot.querySelector(".ui5-popover-arrow");
	}

	calcPlacement(targetRect, popoverSize) {
		let left = 0;
		let top = 0;
		const allowTargetOverlap = this.allowTargetOverlap;

		const clientWidth = document.documentElement.clientWidth;
		const clientHeight = document.documentElement.clientHeight;

		let maxHeight = clientHeight;

		let width = "";
		let height = "";

		const placementType = this.getActualPlacementType(targetRect, popoverSize);

		this._preventRepositionAndClose = this.shouldCloseDueToNoOpener(targetRect) || this.shouldCloseDueToOverflow(placementType, targetRect);

		const isVertical = placementType === PopoverPlacementType.Top
			|| placementType === PopoverPlacementType.Bottom;

		if (this.horizontalAlign === PopoverHorizontalAlign.Stretch && isVertical) {
			popoverSize.width = targetRect.width;
			width = `${targetRect.width}px`;
		} else if (this.verticalAlign === PopoverVerticalAlign.Stretch && !isVertical) {
			popoverSize.height = targetRect.height;
			height = `${targetRect.height}px`;
		}

		this._width = width;
		this._height = height;

		const arrowOffset = this.noArrow ? 0 : arrowSize;

		// calc popover positions
		switch (placementType) {
		case PopoverPlacementType.Top:
			left = this.getVerticalLeft(targetRect, popoverSize);
			top = Math.max(targetRect.top - popoverSize.height - arrowOffset, 0);

			if (!allowTargetOverlap) {
				maxHeight = targetRect.top - arrowOffset;
			}
			break;
		case PopoverPlacementType.Bottom:
			left = this.getVerticalLeft(targetRect, popoverSize);

			if (allowTargetOverlap) {
				top = Math.max(Math.min(targetRect.bottom + arrowOffset, clientHeight - popoverSize.height), 0);
			} else {
				top = targetRect.bottom + arrowOffset;
				maxHeight = clientHeight - targetRect.bottom - arrowOffset;
			}
			break;
		case PopoverPlacementType.Left:
			left = Math.max(targetRect.left - popoverSize.width - arrowOffset, 0);
			top = this.getHorizontalTop(targetRect, popoverSize);
			break;
		case PopoverPlacementType.Right:
			if (allowTargetOverlap) {
				left = Math.max(Math.min(targetRect.left + targetRect.width + arrowOffset, clientWidth - popoverSize.width), 0);
			} else {
				left = targetRect.left + targetRect.width + arrowOffset;
			}

			top = this.getHorizontalTop(targetRect, popoverSize);
			break;
		}

		// correct popover positions
		if (isVertical) {
			if (popoverSize.width > clientWidth || left < 0) {
				left = 0;
			} else if (left + popoverSize.width > clientWidth) {
				left -= left + popoverSize.width - clientWidth;
			}
		} else {
			if (popoverSize.height > clientHeight || top < 0) { // eslint-disable-line
				top = 0;
			} else if (top + popoverSize.height > clientHeight) {
				top -= top + popoverSize.height - clientHeight;
			}
		}

		let maxContentHeight = Math.round(maxHeight);

		const hasHeader = this.header.length || this.headerText;

		if (hasHeader) {
			const headerDomRef = this.shadowRoot.querySelector(".ui5-popup-header-root")
				|| this.shadowRoot.querySelector(".ui5-popup-header-text");

			if (headerDomRef) {
				maxContentHeight = Math.round(maxHeight - headerDomRef.offsetHeight);
			}
		}

		this._maxContentHeight = maxContentHeight;

		const arrowXCentered = this.horizontalAlign === PopoverHorizontalAlign.Center || this.horizontalAlign === PopoverHorizontalAlign.Stretch;
		const arrowTranslateX = isVertical && arrowXCentered ? targetRect.left + targetRect.width / 2 - left - popoverSize.width / 2 : 0;
		const arrowTranslateY = !isVertical ? targetRect.top + targetRect.height / 2 - top - popoverSize.height / 2 : 0;

		if (this._left === undefined || Math.abs(this._left - left) > 1.5) {
			this._left = Math.round(left);
		}

		if (this._top === undefined || Math.abs(this._top - top) > 1.5) {
			this._top = Math.round(top);
		}

		return {
			arrowX: Math.round(arrowTranslateX),
			arrowY: Math.round(arrowTranslateY),
			top: this._top,
			left: this._left,
			placementType,
		};
	}

	/**
	 * Fallbacks to new placement, prioritizing <code>Left</code> and <code>Right</code> placements.
	 * @private
	 */
	fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) {
		if (targetRect.left > popoverSize.width) {
			return PopoverPlacementType.Left;
		}

		if (clientWidth - targetRect.right > targetRect.left) {
			return PopoverPlacementType.Right;
		}

		if (clientHeight - targetRect.bottom > popoverSize.height) {
			return PopoverPlacementType.Bottom;
		}

		if (clientHeight - targetRect.bottom < targetRect.top) {
			return PopoverPlacementType.Top;
		}
	}

	getActualPlacementType(targetRect, popoverSize) {
		const placementType = this.placementType;
		let actualPlacementType = placementType;

		const clientWidth = document.documentElement.clientWidth;
		const clientHeight = document.documentElement.clientHeight;

		switch (placementType) {
		case PopoverPlacementType.Top:
			if (targetRect.top < popoverSize.height
				&& targetRect.top < clientHeight - targetRect.bottom) {
				actualPlacementType = PopoverPlacementType.Bottom;
			}
			break;
		case PopoverPlacementType.Bottom:
			if (clientHeight - targetRect.bottom < popoverSize.height
				&& clientHeight - targetRect.bottom < targetRect.top) {
				actualPlacementType = PopoverPlacementType.Top;
			}
			break;
		case PopoverPlacementType.Left:
			if (targetRect.left < popoverSize.width) {
				actualPlacementType = this.fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) || placementType;
			}
			break;
		case PopoverPlacementType.Right:
			if (clientWidth - targetRect.right < popoverSize.width) {
				actualPlacementType = this.fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) || placementType;
			}
			break;
		}

		return actualPlacementType;
	}

	getVerticalLeft(targetRect, popoverSize) {
		let left;

		switch (this.horizontalAlign) {
		case PopoverHorizontalAlign.Center:
		case PopoverHorizontalAlign.Stretch:
			left = targetRect.left - (popoverSize.width - targetRect.width) / 2;
			break;
		case PopoverHorizontalAlign.Left:
			left = targetRect.left;
			break;
		case PopoverHorizontalAlign.Right:
			left = targetRect.right - popoverSize.width;
			break;
		}

		return left;
	}

	getHorizontalTop(targetRect, popoverSize) {
		let top;

		switch (this.verticalAlign) {
		case PopoverVerticalAlign.Center:
		case PopoverVerticalAlign.Stretch:
			top = targetRect.top - (popoverSize.height - targetRect.height) / 2;
			break;
		case PopoverVerticalAlign.Top:
			top = targetRect.top;
			break;
		case PopoverVerticalAlign.Bottom:
			top = targetRect.bottom - popoverSize.height;
			break;
		}

		return top;
	}

	get isModal() { // Required by Popup.js
		return this.modal;
	}

	get shouldHideBlockLayer() { // Required by Popup.js
		return this.hideBlockLayer;
	}

	get _ariaLabelledBy() { // Required by Popup.js
		return this.ariaLabel ? undefined : "ui5-popup-header";
	}

	get _ariaModal() { // Required by Popup.js
		return true;
	}

	get styles() {
		return {
			...super.styles,
			content: {
				"max-height": `${this._maxContentHeight}px`,
			},
			arrow: {
				transform: `translate(${this.arrowTranslateX}px, ${this.arrowTranslateY}px)`,
			},
		};
	}

	get classes() {
		return {
			root: {
				"ui5-popup-root": true,
			},
			content: {
				"ui5-popup-content": true,
			},
		};
	}

	/**
	 * Hook for descendants to hide header.
	 */
	get _displayHeader() {
		return true;
	}

	/**
	 * Hook for descendants to hide footer.
	 */
	get _displayFooter() {
		return true;
	}
}

Popover.define();

const name = "resize-corner";
const pathData = "M384 224v32q0 12-10 22L182 470q-10 10-22 10h-32zM224 480l160-160v32q0 12-10 22l-96 96q-10 10-22 10h-32zm160-64v32q0 12-10 22t-22 10h-32z";
const ltr = false;

registerIcon(name, { pathData, ltr});

const block0$7 = (context) => { return scopedHtml`<svg class="ui5-icon-root" tabindex="${ifDefined(context.tabIndex)}" dir="${ifDefined(context._dir)}" viewBox="0 0 512 512" role="${ifDefined(context.role)}" focusable="false" preserveAspectRatio="xMidYMid meet" aria-label="${ifDefined(context.accessibleNameText)}" xmlns="http://www.w3.org/2000/svg" @focusin=${context._onfocusin} @focusout=${context._onfocusout} @keydown=${context._onkeydown} @keyup=${context._onkeyup} @click=${context._onclick}>${blockSVG1(context)}</svg>`; };
const block1$4 = (context) => { return scopedSvg`<title id="${ifDefined(context._id)}-tooltip">${ifDefined(context.accessibleNameText)}</title>`; };

const blockSVG1 = (context) => {return scopedSvg`${ context.hasIconTooltip ? block1$4(context) : undefined }<g role="presentation"><path d="${ifDefined(context.pathData)}"/></g>`};

const main$7 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$7(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var iconCss = ":host(:not([hidden])){display:inline-block}:host([invalid]){display:none}:host(:not([hidden]).ui5_hovered){opacity:.7}:host{width:1rem;height:1rem;color:var(--sapContent_NonInteractiveIconColor);fill:currentColor;outline:none}:host([interactive][focused]) .ui5-icon-root{outline:1px dotted var(--sapContent_FocusColor)}:host(:not([dir=ltr])) .ui5-icon-root[dir=rtl]{transform:scale(-1);transform-origin:center}.ui5-icon-root{display:flex;outline:none}";

const ICON_NOT_FOUND$1 = "ICON_NOT_FOUND";

/**
 * @public
 */
const metadata$6 = {
	tag: "ui5-icon",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Icon.prototype */ {
		/**
		 * Defines if the icon is interactive (focusable and pressable)
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		interactive: {
			type: Boolean,
		},

		/**
		 * Defines the unique identifier (icon name) of each <code>ui5-icon</code>.
		 * <br><br>
		 * To browse all available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 * <br><br>
		 * Example:
		 * <br>
		 * <code>name='add'</code>, <code>name='delete'</code>, <code>name='employee'</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		*/
		name: {
			type: String,
		},

		/**
		 * Defines the text alternative of the <code>ui5-icon</code>.
		 * If not provided a default text alternative will be set, if present.
		 * <br><br>
		 * <b>Note:</b> Every icon should have a text alternative in order to
		 * calculate its accessible name.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		accessibleName: {
			type: String,
		},

		/**
		 * Defines whether the <code>ui5-icon</code> should have a tooltip.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showTooltip: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		pathData: {
			type: String,
			noAttribute: true,
		},

		/**
		 * @private
		 */
		accData: {
			type: Object,
			noAttribute: true,
		},

		/**
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		/**
		* @private
		*/
		invalid: {
			type: Boolean,
		},
	},
	events: {
		/**
		 * Fired on mouseup, space and enter if icon is interactive
		 * @private
		 * @since 1.0.0-rc.8
		 */
		click: {},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-icon</code> component represents an SVG icon.
 * There are two main scenarios how the <code>ui5-icon</code> component is used:
 * as a purely decorative element; or as a visually appealing clickable area in the form of an icon button.
 * <br><br>
 * A large set of built-in icons is available
 * and they can be used by setting the <code>name</code> property on the <code>ui5-icon</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Icon.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Icon
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-icon
 * @public
 */
class Icon extends UI5Element {
	constructor() {
		super();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$6;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$7;
	}

	static get styles() {
		return iconCss;
	}

	static async onDefine() {
		this.createGlobalStyle(); // hide all icons until the first icon has rendered (and added the Icon.css)
		await fetchI18nBundle("@ui5/webcomponents");
	}

	_onfocusin(event) {
		if (this.interactive) {
			this.focused = true;
		}
	}

	_onfocusout(event) {
		this.focused = false;
	}

	_onkeydown(event) {
		if (this.interactive && isEnter(event)) {
			this.fireEvent("click");
		}
	}

	_onkeyup(event) {
		if (this.interactive && isSpace(event)) {
			this.fireEvent("click");
		}
	}

	_onclick(event) {
		if (this.interactive) {
			event.preventDefault();
			// Prevent the native event and fire custom event because otherwise the noConfict event won't be thrown
			this.fireEvent("click");
		}
	}

	get _dir() {
		if (!this.effectiveDir) {
			return;
		}

		if (this.ltr) {
			return "ltr";
		}

		return this.effectiveDir;
	}

	get tabIndex() {
		return this.interactive ? "0" : "-1";
	}

	get role() {
		if (this.interactive) {
			return "button";
		}

		return this.accessibleNameText ? "img" : "presentation";
	}

	static createGlobalStyle() {
		if (!window.ShadyDOM) {
			return;
		}
		const styleElement = document.head.querySelector(`style[data-ui5-icon-global]`);
		if (!styleElement) {
			createStyleInHead(`ui5-icon { display: none !important; }`, { "data-ui5-icon-global": "" });
		}
	}

	static removeGlobalStyle() {
		if (!window.ShadyDOM) {
			return;
		}
		const styleElement = document.head.querySelector(`style[data-ui5-icon-global]`);
		if (styleElement) {
			document.head.removeChild(styleElement);
		}
	}

	async onBeforeRendering() {
		const name = this.name;
		if (!name) {
			/* eslint-disable-next-line */
			return console.warn("Icon name property is required", this);
		}
		let iconData = getIconDataSync(name);
		if (!iconData) {
			iconData = await getIconData(name);
		}

		if (iconData === ICON_NOT_FOUND$1) {
			this.invalid = true;
			/* eslint-disable-next-line */
			return console.warn(`Required icon is not registered. You can either import the icon as a module in order to use it e.g. "@ui5/webcomponents-icons/dist/icons/${name.replace("sap-icon://", "")}.js", or setup a JSON build step and import "@ui5/webcomponents-icons/dist/Assets.js".`);
		}

		if (!iconData) {
			this.invalid = true;
			/* eslint-disable-next-line */
			return console.warn(`Required icon is not registered. Invalid icon name: ${this.name}`);
		}

		this.pathData = iconData.pathData;
		this.accData = iconData.accData;
		this.ltr = iconData.ltr;
	}

	get hasIconTooltip() {
		return this.showTooltip && this.accessibleNameText;
	}

	get accessibleNameText() {
		if (this.accessibleName) {
			return this.accessibleName;
		}

		return this.i18nBundle.getText(this.accData) || undefined;
	}

	async onEnterDOM() {
		setTimeout(() => {
			this.constructor.removeGlobalStyle(); // remove the global style as Icon.css is already in place
		}, 0);
	}
}

Icon.define();

const block0$8 = (context) => { return scopedHtml`<section style="${styleMap(context.styles.root)}" class="${classMap(context.classes.root)}" role="dialog" aria-modal="${ifDefined(context._ariaModal)}" aria-label="${ifDefined(context._ariaLabel)}" aria-labelledby="${ifDefined(context._ariaLabelledBy)}"><span class="first-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToLast}></span><header class="ui5-popup-header-root" id="ui5-popup-header" @mousedown="${context._onDragMouseDown}">${ context.header.length ? block1$5() : block2$4(context) }</header><div style="${styleMap(context.styles.content)}" class="${classMap(context.classes.content)}"  @scroll="${context._scroll}"><slot></slot></div>${ context.footer.length ? block3$3() : undefined }${ context.resizable ? block4$3(context) : undefined }<span class="last-fe" data-ui5-focus-trap tabindex="0" @focusin=${context.forwardToFirst}></span></section> `; };
const block1$5 = (context) => { return scopedHtml`<slot name="header"></slot>`; };
const block2$4 = (context) => { return scopedHtml`<h2 class="ui5-popup-header-text">${ifDefined(context.headerText)}</h2>`; };
const block3$3 = (context) => { return scopedHtml`<footer class="ui5-popup-footer-root"><slot name="footer"></slot></footer>`; };
const block4$3 = (context) => { return scopedHtml`<ui5-icon name="resize-corner" dir="${ifDefined(context.effectiveDir)}" class="ui5-popup-resize-handle" @mousedown="${context._onResizeMouseDown}"></ui5-icon>`; };


const main$8 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$8(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var dialogCSS = ":host{top:50%;left:50%;transform:translate(-50%,-50%);min-width:20rem;min-height:6rem;box-shadow:var(--sapContent_Shadow3)}:host([stretch]){width:90%;height:90%}:host([stretch][on-phone]){width:100%;height:100%}:host([stretch][on-phone]) .ui5-popup-root{max-height:100vh;max-width:100vw}:host([draggable]) .ui5-popup-header-root,:host([draggable]) ::slotted([slot=header]){cursor:move}:host([draggable]) .ui5-popup-header-root *{cursor:auto}.ui5-popup-root{display:flex;flex-direction:column;max-width:100vw}.ui5-popup-content{min-height:var(--_ui5_dialog_content_min_height);flex:1 1 auto}.ui5-popup-resize-handle{position:absolute;bottom:-.0625rem;right:-.25rem;cursor:se-resize;color:var(--_ui5_dialog_resize_handle_color)}.ui5-popup-resize-handle[dir=rtl]{left:-.25rem;right:unset;cursor:sw-resize}";

/**
 * @public
 */
const metadata$7 = {
	tag: "ui5-dialog",
	slots: /** @lends  sap.ui.webcomponents.main.Popup.prototype */ {
		/**
		 * Defines the header HTML Element.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},

		/**
		 * Defines the footer HTML Element.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		footer: {
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.Dialog.prototype */ {
		/**
		 * Defines the header text.
		 * <br><br>
		 * <b>Note:</b> If <code>header</code> slot is provided, the <code>headerText</code> is ignored.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		headerText: {
			type: String,
		},

		/**
		 * Determines whether the <code>ui5-dialog</code> should be stretched to fullscreen.
		 * <br><br>
		 * <b>Note:</b> The <code>ui5-dialog</code> will be stretched to approximately
		 * 90% of the viewport.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		stretch: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-dialog</code> is draggable.
		 * If this property is set to true, the Dialog will be draggable by its header.
		 * <br><br>
		 * <b>Note:</b> The <code>ui5-dialog</code> can be draggable only in desktop mode.
		 * @type {boolean}
		 * @defaultvalue false
		 * @since 1.0.0-rc.9
		 * @public
		 */
		draggable: {
			type: Boolean,
		},

		/**
		 * Configures the <code>ui5-dialog</code> to be resizable.
		 * If this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages.
		 * In RTL languages, the resize handle will be placed in the bottom left corner.
		 * <br><br>
		 * <b>Note:</b> The <code>ui5-dialog</code> can be resizable only in desktop mode.
		 * <br>
		 * <b>Note:</b> Upon resizing, externally defined height and width styling will be ignored.
		 * @type {boolean}
		 * @defaultvalue false
		 * @since 1.0.0-rc.10
		 * @public
		 */
		resizable: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		onPhone: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		onDesktop: {
			type: Boolean,
		},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-dialog</code> component is used to temporarily display some information in a
 * size-limited window in front of the regular app screen.
 * It is used to prompt the user for an action or a confirmation.
 * The <code>ui5-dialog</code> interrupts the current app processing as it is the only focused UI element and
 * the main screen is dimmed/blocked.
 * The dialog combines concepts known from other technologies where the windows have
 * names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.
 * <br><br>
 * The <code>ui5-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.
 * The content of the <code>ui5-dialog</code> is fully customizable.
 *
 * <h3>Structure</h3>
 * A <code>ui5-dialog</code> consists of a header, content, and a footer for action buttons.
 * The <code>ui5-dialog</code> is usually displayed at the center of the screen.
 * Its position can be changed by the user. To enable this, you need to set the property <code>draggable</code> accordingly.


 *
 * <h3>Responsive Behavior</h3>
 * The <code>stretch</code> property can be used to stretch the
 * <code>ui5-dialog</code> on full screen.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Dialog";</code>
 *
 * <b>Note:</b> We don't recommend nesting popup-like components (<code>ui5-dialog</code>, <code>ui5-popover</code>) inside <code>ui5-dialog</code>.
 * Ideally you should create all popups on the same level inside your HTML page and just open them from one another, rather than nesting them.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Dialog
 * @extends Popup
 * @tagname ui5-dialog
 * @public
 */
class Dialog extends Popup {
	static get metadata() {
		return metadata$7;
	}

	static get dependencies() {
		return [
			Icon,
		];
	}

	static get template() {
		return main$8;
	}

	static get styles() {
		return [PopupsCommonCss, dialogCSS];
	}

	get isModal() { // Required by Popup.js
		return true;
	}

	get shouldHideBlockLayer() { // Required by Popup.js
		return false;
	}

	get _ariaLabelledBy() { // Required by Popup.js
		return this.ariaLabel ? undefined : "ui5-popup-header";
	}

	get _ariaModal() { // Required by Popup.js
		return true;
	}

	get classes() {
		return {
			root: {
				"ui5-popup-root": true,
			},
			content: {
				"ui5-popup-content": true,
			},
		};
	}

	_clamp(val, min, max) {
		return Math.min(Math.max(val, min), max);
	}

	onBeforeRendering() {
		this._isRTL = this.effectiveDir === "rtl";
		this.onPhone = isPhone();
		this.onDesktop = isDesktop();
	}

	onEnterDOM() {
		this._dragMouseMoveHandler = this._onDragMouseMove.bind(this);
		this._dragMouseUpHandler = this._onDragMouseUp.bind(this);

		this._resizeMouseMoveHandler = this._onResizeMouseMove.bind(this);
		this._resizeMouseUpHandler = this._onResizeMouseUp.bind(this);
	}

	onExitDOM() {
		this._dragMouseMoveHandler = null;
		this._dragMouseUpHandler = null;
	}

	/**
	 * Event handlers
	 */
	_onDragMouseDown(event) {
		if (!(this.draggable && this.onDesktop)) {
			return;
		}

		// only allow dragging on the header's whitespace
		if (!event.target.classList.contains("ui5-popup-header-root")
			&& event.target.getAttribute("slot") !== "header") {
			return;
		}

		event.preventDefault();

		const {
			top,
			left,
		} = this.getBoundingClientRect();
		const {
			width,
			height,
		} = window.getComputedStyle(this);

		Object.assign(this.style, {
			transform: "none",
			top: `${top}px`,
			left: `${left}px`,
			width: `${Math.round(Number.parseFloat(width) * 100) / 100}px`,
			height: `${Math.round(Number.parseFloat(height) * 100) / 100}px`,
		});

		this._x = event.clientX;
		this._y = event.clientY;

		this._attachDragHandlers();
	}

	_onDragMouseMove(event) {
		event.preventDefault();

		const calcX = this._x - event.clientX;
		const calcY = this._y - event.clientY;
		const {
			left,
			top,
		} = this.getBoundingClientRect();

		Object.assign(this.style, {
			left: `${Math.floor(left - calcX)}px`,
			top: `${Math.floor(top - calcY)}px`,
		});

		this._x = event.clientX;
		this._y = event.clientY;
	}

	_onDragMouseUp() {
		this._x = null;
		this._y = null;

		this._detachDragHandlers();
	}

	_attachDragHandlers() {
		window.addEventListener("mousemove", this._dragMouseMoveHandler);
		window.addEventListener("mouseup", this._dragMouseUpHandler);
		this.addEventListener("ui5-before-close", this._recenter);
	}

	_detachDragHandlers() {
		window.removeEventListener("mousemove", this._dragMouseMoveHandler);
		window.removeEventListener("mouseup", this._dragMouseUpHandler);
	}

	_recenter() {
		Object.assign(this.style, {
			top: "",
			left: "",
			transform: "",
		});
		this.removeEventListener("ui5-before-close", this._recenter);
	}

	_onResizeMouseDown(event) {
		if (!(this.resizable && this.onDesktop)) {
			return;
		}

		event.preventDefault();

		const {
			top,
			left,
		} = this.getBoundingClientRect();
		const {
			width,
			height,
			minWidth,
			minHeight,
		} = window.getComputedStyle(this);

		this._initialX = event.clientX;
		this._initialY = event.clientY;
		this._initialWidth = Number.parseFloat(width);
		this._initialHeight = Number.parseFloat(height);
		this._initialTop = top;
		this._initialLeft = left;
		this._minWidth = Number.parseFloat(minWidth);
		this._minHeight = Number.parseFloat(minHeight);

		Object.assign(this.style, {
			transform: "none",
			top: `${top}px`,
			left: `${left}px`,
		});

		this._attachResizeHandlers();
	}

	_onResizeMouseMove(event) {
		const { clientX, clientY } = event;

		let newWidth;
		let newLeft;

		if (this._isRTL) {
			newWidth = this._clamp(
				this._initialWidth - (clientX - this._initialX),
				this._minWidth,
				this._initialLeft + this._initialWidth
			);

			newLeft = this._clamp(
				this._initialLeft + (clientX - this._initialX),
				0,
				this._initialX + this._initialWidth - this._minWidth
			);
		} else {
			newWidth = this._clamp(
				this._initialWidth + (clientX - this._initialX),
				this._minWidth,
				window.innerWidth - this._initialLeft
			);
		}

		const newHeight = this._clamp(
			this._initialHeight + (clientY - this._initialY),
			this._minHeight,
			window.innerHeight - this._initialTop
		);

		Object.assign(this.style, {
			height: `${newHeight}px`,
			width: `${newWidth}px`,
			left: newLeft ? `${newLeft}px` : undefined,
		});
	}

	_onResizeMouseUp() {
		this._initialX = null;
		this._initialY = null;
		this._initialWidth = null;
		this._initialHeight = null;
		this._initialTop = null;
		this._initialLeft = null;
		this._minWidth = null;
		this._minHeight = null;

		this._detachResizeHandlers();
	}

	_attachResizeHandlers() {
		window.addEventListener("mousemove", this._resizeMouseMoveHandler);
		window.addEventListener("mouseup", this._resizeMouseUpHandler);
		this.addEventListener("ui5-before-close", this._revertSize);
	}

	_detachResizeHandlers() {
		window.removeEventListener("mousemove", this._resizeMouseMoveHandler);
		window.removeEventListener("mouseup", this._resizeMouseUpHandler);
	}

	_revertSize() {
		Object.assign(this.style, {
			top: "",
			left: "",
			width: "",
			height: "",
			transform: "",
		});
		this.removeEventListener("ui5-before-close", this._revertSize);
	}
}

Dialog.define();

/**
 * @lends sap.ui.webcomponents.main.types.ButtonDesign.prototype
 * @public
 */
const ButtonTypes = {
	/**
	 * default type (no special styling)
	 * @public
	 * @type {Default}
	 */
	Default: "Default",

	/**
	 * accept type (green button)
	 * @public
	 * @type {Positive}
	 */
	Positive: "Positive",

	/**
	 * reject style (red button)
	 * @public
	 * @type {Negative}
	 */
	Negative: "Negative",

	/**
	 * transparent type
	 * @public
	 * @type {Transparent}
	 */
	Transparent: "Transparent",

	/**
	 * emphasized type
	 * @public
	 * @type {Emphasized}
	 */
	Emphasized: "Emphasized",
};

/**
 * @class
 * Different types of Button.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.ButtonDesign
 * @public
 * @enum {string}
 */
class ButtonDesign extends DataType {
	static isValid(value) {
		return !!ButtonTypes[value];
	}
}

ButtonDesign.generataTypeAcessors(ButtonTypes);

const block0$9 = (context) => { return scopedHtml`<button type="button" class="ui5-button-root" ?disabled="${context.disabled}" data-sap-focus-ref  dir="${ifDefined(context.effectiveDir)}" @focusout=${context._onfocusout} @focusin=${context._onfocusin} @click=${context._onclick} @mousedown=${context._onmousedown} @mouseup=${context._onmouseup} @keydown=${context._onkeydown} @keyup=${context._onkeyup} tabindex=${ifDefined(context.tabIndexValue)} aria-expanded="${ifDefined(context.accInfo.ariaExpanded)}" aria-controls="${ifDefined(context.accInfo.ariaControls)}" aria-haspopup="${ifDefined(context.accInfo.ariaHaspopup)}" aria-label="${ifDefined(context.ariaLabelText)}" title="${ifDefined(context.accInfo.title)}" part="button">${ context.icon ? block1$6(context) : undefined }<span id="${ifDefined(context._id)}-content" class="ui5-button-text"><bdi><slot></slot></bdi></span>${ context.hasButtonType ? block2$5(context) : undefined }</button> `; };
const block1$6 = (context) => { return scopedHtml`<ui5-icon style="${styleMap(context.styles.icon)}" class="ui5-button-icon" name="${ifDefined(context.icon)}" show-tooltip=${ifDefined(context.iconOnly)}></ui5-icon>`; };
const block2$5 = (context) => { return scopedHtml`<span class="ui5-hidden-text">${ifDefined(context.buttonTypeText)}</span>`; };


const main$9 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$9(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var buttonCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{min-width:var(--_ui5_button_base_min_width);height:var(--_ui5_button_base_height);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);text-shadow:var(--_ui5_button_text_shadow);border-radius:var(--_ui5_button_border_radius);border-width:.0625rem;cursor:pointer;background-color:var(--sapButton_Background);border:1px solid var(--sapButton_BorderColor);color:var(--sapButton_TextColor);box-sizing:border-box;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host([has-icon]) button[dir=rtl].ui5-button-root .ui5-button-text{margin-right:var(--_ui5_button_base_icon_margin);margin-left:0}:host([has-icon][icon-end]) button[dir=rtl].ui5-button-root .ui5-button-icon{margin-right:var(--_ui5_button_base_icon_margin);margin-left:0}.ui5-button-root{min-width:inherit;cursor:inherit;height:100%;width:100%;box-sizing:border-box;display:flex;justify-content:center;align-items:center;outline:none;padding:0 var(--_ui5_button_base_padding);position:relative;background:transparent;border:none;color:inherit;text-shadow:inherit;font:inherit;white-space:inherit;overflow:inherit;text-overflow:inherit;letter-spacing:inherit;word-spacing:inherit;line-height:inherit}:host(:not([active]):hover),:host(:not([hidden]).ui5_hovered){background:var(--sapButton_Hover_Background)}.ui5-button-icon{color:inherit;flex-shrink:0}:host([icon-end]) .ui5-button-root{flex-direction:row-reverse}:host([icon-end]) .ui5-button-icon{margin-left:var(--_ui5_button_base_icon_margin)}:host([icon-only]) .ui5-button-root{min-width:auto;padding:0}:host([icon-only]) .ui5-button-text{display:none}.ui5-button-text{outline:none;position:relative;white-space:inherit;overflow:inherit;text-overflow:inherit}:host([has-icon]:not([icon-end])) .ui5-button-text{margin-left:var(--_ui5_button_base_icon_margin)}:host([has-icon][icon-end]) .ui5-button-text{margin-left:0}:host([disabled]){opacity:.5;pointer-events:none}:host([focused]){outline:var(--_ui5_button_outline);outline-offset:var(--_ui5_button_outline_offset)}.ui5-button-root::-moz-focus-inner{border:0}bdi{display:block;white-space:inherit;overflow:inherit;text-overflow:inherit}:host([active]:not([disabled])){background-image:none;background-color:var(--sapButton_Active_Background);border-color:var(--_ui5_button_active_border_color);color:var(--sapButton_Active_TextColor);text-shadow:none}:host([active]){outline-color:var(--sapContent_ContrastFocusColor)}:host([design=Positive]){background-color:var(--sapButton_Accept_Background);border-color:var(--_ui5_button_positive_border_color);color:var(--sapButton_Accept_TextColor);text-shadow:var(--_ui5_button_text_shadow)}:host([design=Positive]:hover){background-color:var(--sapButton_Accept_Hover_Background);border-color:var(--_ui5_button_positive_border_hover_color)}:host([design=Positive][active]){background-color:var(--sapButton_Accept_Active_Background);border-color:var(--_ui5_button_positive_border_active_color);color:var(--sapButton_Active_TextColor);text-shadow:none}:host([design=Positive][focused]){outline-color:var(--_ui5_button_positive_border_focus_hover_color);border-color:var(--_ui5_button_positive_focus_border_color)}:host([design=Positive][active][focused]){outline-color:var(--sapContent_ContrastFocusColor)}:host([design=Negative]){background-color:var(--sapButton_Reject_Background);border-color:var(--sapButton_Reject_BorderColor);color:var(--sapButton_Reject_TextColor);text-shadow:var(--_ui5_button_text_shadow)}:host([design=Negative]:hover){background-color:var(--sapButton_Reject_Hover_Background);border-color:var(--sapButton_Reject_Hover_BorderColor)}:host([design=Negative][focused]){border-color:var(--_ui5_button_negative_focus_border_color);outline-color:var(--_ui5_button_positive_border_focus_hover_color)}:host([design=Negative][active]){background-color:var(--sapButton_Reject_Active_Background);border-color:var(--_ui5_button_negative_active_border_color);color:var(--sapButton_Active_TextColor);text-shadow:none}:host([design=Negative][active][focused]){outline-color:var(--sapContent_ContrastFocusColor)}:host([design=Emphasized]){background-color:var(--sapButton_Emphasized_Background);border-color:var(--sapButton_Emphasized_BorderColor);color:var(--sapButton_Emphasized_TextColor);text-shadow:0 0 .125rem var(--sapButton_Emphasized_TextShadow);font-weight:var(--_ui5_button_emphasized_font_weight)}:host([design=Emphasized]:not([active]):hover){background-color:var(--sapButton_Emphasized_Hover_Background);border-color:var(--sapButton_Emphasized_Hover_BorderColor)}:host([design=Empasized][active]){background-color:var(--sapButton_Emphasized_Active_Background);border-color:var(--sapButton_Emphasized_Active_BorderColor);color:var(--sapButton_Active_TextColor);text-shadow:none}:host([design=Emphasized][focused]){outline-color:var(--sapContent_ContrastFocusColor);border-color:var(--_ui5_button_emphasized_focused_border_color)}:host([design=Transparent]){background-color:var(--sapButton_Lite_Background);color:var(--sapButton_Lite_TextColor);text-shadow:var(--_ui5_button_text_shadow);border-color:var(--_ui5_button_transparent_border_color)}:host([design=Transparent]):hover{background-color:var(--sapButton_Lite_Hover_Background)}:host([design=Transparent][active]){background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor);text-shadow:none}:host([design=Transparent]:not([active]):hover){border-color:var(--_ui5_button_transparent_hover_border_color)}[ui5-button][focused]{outline:none}[ui5-button][focused] .ui5-button-root{position:relative}[ui5-button][focused] .ui5-button-root:after{content:\"\";position:absolute;border-width:1px;border-style:dotted;border-color:var(--_ui5_button_focus_color);top:var(--_ui5_button_focus_offset);bottom:var(--_ui5_button_focus_offset);left:var(--_ui5_button_focus_offset);right:var(--_ui5_button_focus_offset)}[ui5-button][active] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-button][design=Positive][focused] .ui5-button-root:after{border-color:var(--_ui5_button_positive_border_focus_hover_color)}[ui5-button][design=Positive][active][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-button][design=Negative][focused] .ui5-button-root:after{border-color:var(--_ui5_button_positive_border_focus_hover_color)}[ui5-button][design=Negative][active][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-button][design=Emphasized][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-button] [ui5-icon].ui5-button-icon{height:var(--_ui5_button_icon_font_size);top:0}";

let isGlobalHandlerAttached = false;
let activeButton = null;

/**
 * @public
 */
const metadata$8 = {
	tag: "ui5-button",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Button.prototype */ {

		/**
		 * Defines the <code>ui5-button</code> design.
		 * <br><br>
		 * <b>Note:</b> Available options are "Default", "Emphasized", "Positive",
		 * "Negative", and "Transparent".
		 *
		 * @type {ButtonDesign}
		 * @defaultvalue "Default"
		 * @public
		 */
		design: {
			type: ButtonDesign,
			defaultValue: ButtonDesign.Default,
		},

		/**
		 * Defines whether the <code>ui5-button</code> is disabled
		 * (default is set to <code>false</code>).
		 * A disabled <code>ui5-button</code> can't be pressed or
		 * focused, and it is not in the tab chain.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the icon to be displayed as graphical element within the <code>ui5-button</code>.
		 * The SAP-icons font provides numerous options.
		 * <br><br>
		 * Example:
		 * <br>
		 * <pre>ui5-button icon="palette"</pre>
		 *
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines whether the icon should be displayed after the <code>ui5-button</code> text.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		iconEnd: {
			type: Boolean,
		},

		/**
		 * Defines the size of the icon inside the <code>ui5-button</code>.
		 *
		 * @type {string}
		 * @defaultvalue undefined
		 * @public
		 * @since 1.0.0-rc.8
		 */
		iconSize: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * When set to <code>true</code>, the <code>ui5-button</code> will
		 * automatically submit the nearest form element upon <code>press</code>.
		 * <br><br>
		 * <b>Important:</b> For the <code>submits</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		submits: {
			type: Boolean,
		},

		/**
		 * Used to switch the active state (pressed or not) of the <code>ui5-button</code>.
		 * @private
		 */
		active: {
			type: Boolean,
		},

		/**
		 * Defines if a content has been added to the default slot
		 * @private
		 */
		iconOnly: {
			type: Boolean,
		},

		/**
		 * Indicates if the elements is on focus
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		/**
		 * Indicates if the elements has a slotted icon
		 * @private
		 */
		hasIcon: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the button
		 * @type {String}
		 * @defaultvalue: ""
		 * @private
		 * @since 1.0.0-rc.7
		 */
		ariaLabel: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Receives id(or many ids) of the elements that label the button
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.7
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		/**
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaExpanded: {
			type: String,
		},

		/**
		 * Indicates if the element if focusable
		 * @private
		 */
		nonFocusable: {
			type: Boolean,
		},

		_iconSettings: {
			type: Object,
		},
		_buttonAccInfo: {
			type: Object,
		},

		/**
		 * Defines the tabIndex of the component.
		 * @private
		 */
		_tabIndex: {
			type: String,
			defaultValue: "0",
			noAttribute: true,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Button.prototype */ {
		/**
		 * Defines the text of the <code>ui5-button</code>.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Button.prototype */ {

		/**
		 * Fired when the <code>ui5-button</code> is activated either with a
		 * mouse/tap or by using the Enter or Space key.
		 * <br><br>
		 * <b>Note:</b> The event will not be fired if the <code>disabled</code>
		 * property is set to <code>true</code>.
		 *
		 * @event
		 * @public
		 */
		click: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-button</code> component represents a simple push button.
 * It enables users to trigger actions by clicking or tapping the <code>ui5-button</code>, or by pressing
 * certain keyboard keys, such as Enter.
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>ui5-button</code> UI, you can define text, icon, or both. You can also specify
 * whether the text or the icon is displayed first.
 * <br><br>
 * You can choose from a set of predefined types that offer different
 * styling to correspond to the triggered action.
 * <br><br>
 * You can set the <code>ui5-button</code> as enabled or disabled. An enabled
 * <code>ui5-button</code> can be pressed by clicking or tapping it. The button changes
 * its style to provide visual feedback to the user that it is pressed or hovered over with
 * the mouse cursor. A disabled <code>ui5-button</code> appears inactive and cannot be pressed.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Button";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Button
 * @extends UI5Element
 * @tagname ui5-button
 * @public
 */
class Button extends UI5Element {
	static get metadata() {
		return metadata$8;
	}

	static get styles() {
		return buttonCss;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$9;
	}

	static get dependencies() {
		return [Icon];
	}

	constructor() {
		super();

		this._deactivate = () => {
			if (activeButton) {
				activeButton.active = false;
			}
		};

		if (!isGlobalHandlerAttached) {
			document.addEventListener("mouseup", this._deactivate);

			isGlobalHandlerAttached = true;
		}

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		const FormSupport = getFeature("FormSupport");
		if (this.submits && !FormSupport) {
			console.warn(`In order for the "submits" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}

		this.iconOnly = this.isIconOnly;
		this.hasIcon = !!this.icon;
	}

	_onclick(event) {
		event.isMarked = "button";
		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.triggerFormSubmit(this);
		}
	}

	_onmousedown(event) {
		event.isMarked = "button";
		this.active = true;
		activeButton = this; // eslint-disable-line
	}

	_onmouseup(event) {
		event.isMarked = "button";
	}

	_onkeydown(event) {
		event.isMarked = "button";

		if (isSpace(event) || isEnter(event)) {
			this.active = true;
		}
	}

	_onkeyup(event) {
		if (isSpace(event) || isEnter(event)) {
			this.active = false;
		}
	}

	_onfocusout(_event) {
		this.active = false;
		this.focused = false;
	}

	_onfocusin(event) {
		event.isMarked = "button";
		this.focused = true;
	}

	get hasButtonType() {
		return this.design !== ButtonDesign.Default && this.design !== ButtonDesign.Transparent;
	}

	get isIconOnly() {
		return !Array.from(this.childNodes).filter(node => node.nodeType !== Node.COMMENT_NODE).length;
	}

	get accInfo() {
		return {
			"ariaExpanded": this.ariaExpanded || (this._buttonAccInfo && this._buttonAccInfo.ariaExpanded),
			"ariaControls": this._buttonAccInfo && this._buttonAccInfo.ariaControls,
			"ariaHaspopup": this._buttonAccInfo && this._buttonAccInfo.ariaHaspopup,
			"title": this._buttonAccInfo && this._buttonAccInfo.title,
		};
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	static typeTextMappings() {
		return {
			"Positive": BUTTON_ARIA_TYPE_ACCEPT,
			"Negative": BUTTON_ARIA_TYPE_REJECT,
			"Emphasized": BUTTON_ARIA_TYPE_EMPHASIZED,
		};
	}

	get buttonTypeText() {
		return this.i18nBundle.getText(Button.typeTextMappings()[this.design]);
	}

	get tabIndexValue() {
		const tabindex = this.getAttribute("tabindex");

		if (tabindex) {
			return tabindex;
		}

		return this.nonFocusable ? "-1" : this._tabIndex;
	}

	get styles() {
		return {
			icon: {
				width: this.iconSize,
				height: this.iconSize,
			},
		};
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Button.define();

/**
 * @lends sap.ui.webcomponents.main.types.TitleLevel.prototype
 * @public
 */
const TitleLevels = {
	/**
	 * Renders <code>h1</code> tag.
	 * @public
	 * @type {H1}
	 */
	H1: "H1",

	/**
	 * Renders <code>h2</code> tag.
	 * @public
	 * @type {H2}
	 */
	H2: "H2",

	/**
	 * Renders <code>h3</code> tag.
	 * @public
	 * @type {H3}
	 */
	H3: "H3",

	/**
	 * Renders <code>h4</code> tag.
	 * @public
	 * @type {H4}
	 */
	H4: "H4",

	/**
	 * Renders <code>h5</code> tag.
	 * @public
	 * @type {H5}
	 */
	H5: "H5",

	/**
	 * Renders <code>h6</code> tag.
	 * @public
	 * @type {H6}
	 */
	H6: "H6",
};

/**
 * @class
 * Defines the <code>ui5-title</code> level
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.TitleLevel
 * @public
 * @enum {string}
 */
class TitleLevel extends DataType {
	static isValid(value) {
		return !!TitleLevels[value];
	}
}

TitleLevel.generataTypeAcessors(TitleLevels);

const block0$a = (context) => { return scopedHtml`${ context.h1 ? block1$7(context) : undefined }${ context.h2 ? block2$6(context) : undefined }${ context.h3 ? block3$4(context) : undefined }${ context.h4 ? block4$4(context) : undefined }${ context.h5 ? block5$3(context) : undefined }${ context.h6 ? block6$1(context) : undefined }`; };
const block1$7 = (context) => { return scopedHtml`<h1 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h1>`; };
const block2$6 = (context) => { return scopedHtml`<h2 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h2>`; };
const block3$4 = (context) => { return scopedHtml`<h3 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h3>`; };
const block4$4 = (context) => { return scopedHtml`<h4 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h4>`; };
const block5$3 = (context) => { return scopedHtml`<h5 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h5>`; };
const block6$1 = (context) => { return scopedHtml`<h6 class="ui5-title-root"><span id="${ifDefined(context._id)}-inner"><slot></slot></span></h6>`; };


const main$a = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$a(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var titleCss = ":host(:not([hidden])){display:block;cursor:text}:host{max-width:100%;color:var(--sapGroup_TitleTextColor);font-size:var(--ui5_title_level_2Size);font-family:\"72override\",var(--sapFontFamily);text-shadow:var(--sapContent_TextShadow)}.ui5-title-root{display:inline-block;position:relative;font-weight:400;font-size:inherit;box-sizing:border-box;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:100%;vertical-align:bottom;-webkit-margin-before:0;-webkit-margin-after:0;-webkit-margin-start:0;-webkit-margin-end:0;margin:0;cursor:inherit}:host([wrap]) .ui5-title-root{white-space:pre-line}:host([level=H1]){font-size:var(--ui5_title_level_1Size)}:host([level=H2]){font-size:var(--ui5_title_level_2Size)}:host([level=H3]){font-size:var(--ui5_title_level_3Size)}:host([level=H4]){font-size:var(--ui5_title_level_4Size)}:host([level=H5]){font-size:var(--ui5_title_level_5Size)}:host([level=H6]){font-size:var(--ui5_title_level_6Size)}";

/**
 * @public
 */
const metadata$9 = {
	tag: "ui5-title",
	properties: /** @lends sap.ui.webcomponents.main.Title.prototype */ {

		/**
		 * Defines whether the <code>ui5-title</code> would wrap.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		*/
		wrap: {
			type: Boolean,
		},

		/**
		 * Defines the <code>ui5-title</code> level.
		 * Available options are: <code>"H6"</code> to <code>"H1"</code>.
		 *
		 * @type {TitleLevel}
		 * @defaultvalue "H2"
		 * @public
		*/
		level: {
			type: TitleLevel,
			defaultValue: TitleLevel.H2,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.Title.prototype */ {
		/**
		 * Defines the text of the <code>ui5-title</code>.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-title</code> component is used to display titles inside a page.
 * It is a simple, large-sized text with explicit header/title semantics.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Title";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Title
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-title
 * @public
 */
class Title extends UI5Element {
	static get metadata() {
		return metadata$9;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$a;
	}

	static get styles() {
		return titleCss;
	}

	get normalizedLevel() {
		return this.level.toLowerCase();
	}

	get h1() {
		return this.normalizedLevel === "h1";
	}

	get h2() {
		return this.normalizedLevel === "h2";
	}

	get h3() {
		return this.normalizedLevel === "h3";
	}

	get h4() {
		return this.normalizedLevel === "h4";
	}

	get h5() {
		return this.normalizedLevel === "h5";
	}

	get h6() {
		return this.normalizedLevel === "h6";
	}
}

Title.define();

const name$1 = "decline";
const pathData$1 = "M86 109l22-23q5-5 12-5 6 0 11 5l124 125L380 86q5-5 11-5 7 0 12 5l22 23q12 11 0 23L301 256l124 125q11 11 0 22l-22 23q-8 5-12 5-3 0-11-5L255 301 131 426q-5 5-11 5-4 0-12-5l-22-23q-11-11 0-22l124-125L86 132q-12-12 0-23z";
const ltr$1 = false;

registerIcon(name$1, { pathData: pathData$1, ltr: ltr$1});

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ResponsivePopoverCss = ":host{--_ui5_input_width:100%;min-width:6.25rem;min-height:2rem}:host(:not([with-padding])){--_ui5_popup_content_padding:0}:host([opened]){display:inline-block}.ui5-responsive-popover-header{height:var(--_ui5-responnsive_popover_header_height);display:flex;justify-content:space-between;align-items:center;padding:0 1rem;box-shadow:var(--sapContent_HeaderShadow)}:host [dir=rtl] .ui5-responsive-popover-header{padding:0 1rem 0 0}.ui5-responsive-popover-header-text{display:flex;align-items:center;width:calc(100% - var(--_ui5_button_base_min_width))}";

const POPOVER_MIN_WIDTH = 100;

/**
 * @public
 */
const metadata$a = {
	tag: "ui5-responsive-popover",
	properties: /** @lends sap.ui.webcomponents.main.ResponsivePopover.prototype */ {

		/**
		 * Defines whether the component will stretch to fit its content.
		 * <br/><b>Note:</b> by default the popover will be as wide as its opener component and will grow if the content is not fitting.
		 * <br/><b>Note:</b> if set to true, it will take only as much space as it needs.
		 * @private
		 */
		noStretch: {
			type: Boolean,
		},

		/**
		 * Defines if padding would be added around the content.
		 * @private
		 */
		withPadding: {
			type: Boolean,
		},

		/**
		 * Defines if only the content would be displayed (without header and footer) in the popover on Desktop.
		 * By default both the header and footer would be displayed.
		 * @private
		 */
		contentOnlyOnDesktop: {
			type: Boolean,
		},

		/**
		 * Used internaly for controls which must not have header.
		 * @private
		 */
		_hideHeader: {
			type: Boolean,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-responsive-popover</code> acts as a Popover on desktop and tablet, while on phone it acts as a Dialog.
 * The component improves tremendously the user experience on mobile.
 *
 * <h3>Usage</h3>
 * Use it when you want to make sure that all the content is visible on any device.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ResponsivePopover
 * @extends Popover
 * @tagname ui5-responsive-popover
 * @since 1.0.0-rc.6
 * @public
 */
class ResponsivePopover extends Popover {
	static get metadata() {
		return metadata$a;
	}

	static get styles() {
		return [Popover.styles, ResponsivePopoverCss];
	}

	static get template() {
		return main$3;
	}

	static get dependencies() {
		return [
			Button,
			Dialog,
			Title,
		];
	}

	/**
	 * Opens popover on desktop and dialog on mobile.
	 * @param {HTMLElement} opener the element that the popover is opened by
	 * @public
	 */
	open(opener) {
		this.style.display = this._isPhone ? "contents" : "";

		if (this.isOpen() || (this._dialog && this._dialog.isOpen())) {
			return;
		}

		if (!isPhone()) {
			// make popover width be >= of the opener's width
			if (!this.noStretch) {
				this._minWidth = Math.max(POPOVER_MIN_WIDTH, opener.getBoundingClientRect().width);
			}

			this.openBy(opener);
		} else {
			this.style.zIndex = getNextZIndex();
			this._dialog.open();
		}
	}

	/**
	 * Closes the popover/dialog.
	 * @public
	 */
	close(escPressed = false, preventRegistryUpdate = false, preventFocusRestore = false) {
		if (!isPhone()) {
			super.close(escPressed, preventRegistryUpdate, preventFocusRestore);
		} else {
			this._dialog.close();
		}
	}

	toggle(opener) {
		if (this.isOpen()) {
			return this.close();
		}

		this.open(opener);
	}

	isOpen() {
		return isPhone() ? this._dialog.isOpen() : super.isOpen();
	}

	get styles() {
		const popoverStyles = super.styles;

		popoverStyles.root = {
			"min-width": `${this._minWidth}px`,
		};

		return popoverStyles;
	}

	get _dialog() {
		return this.shadowRoot.querySelector("[ui5-dialog]");
	}

	get _isPhone() {
		return isPhone();
	}

	get _displayHeader() {
		return this._isPhone || !this.contentOnlyOnDesktop;
	}

	get _displayFooter() {
		return this._isPhone || !this.contentOnlyOnDesktop;
	}

	_afterDialogOpen(event) {
		this.opened = true;
		this._propagateDialogEvent(event);
	}

	_afterDialogClose(event) {
		this.opened = false;
		this._propagateDialogEvent(event);
	}

	_propagateDialogEvent(event) {
		const type = event.type.replace("ui5-", "");

		this.fireEvent(type, event.detail);
	}
}

ResponsivePopover.define();

/**
 * Different states.
 */
const ValueStates = {
	None: "None",
	Success: "Success",
	Warning: "Warning",
	Error: "Error",
	Information: "Information",
};

class ValueState extends DataType {
	static isValid(value) {
		return !!ValueStates[value];
	}
}

ValueState.generataTypeAcessors(ValueStates);

const name$2 = "edit";
const pathData$2 = "M475 104q5 7 5 12 0 6-5 11L150 453q-4 4-8 4L32 480l22-110q0-5 4-9L384 36q4-4 11-4t11 4zm-121 99l-46-45L84 381l46 46zm87-88l-46-44-64 64 45 45z";
const ltr$2 = false;

registerIcon(name$2, { pathData: pathData$2, ltr: ltr$2});

/**
 * @lends sap.ui.webcomponents.main.types.ListItemType.prototype
 * @public
 */
const ListItemTypes = {
	/**
	 * Indicates the list item does not have any active feedback when item is pressed.
	 * @public
	 * @type {Inactive}
	 */
	Inactive: "Inactive",

	/**
	 * Indicates that the item is clickable via active feedback when item is pressed.
	 * @public
	 * @type {Active}
	 */
	Active: "Active",

	/**
	 * Enables detail button of the list item that fires detail-click event.
	 * @public
	 * @type {Detail}
	 */
	Detail: "Detail",
};

/**
 * @class
 * Different types of ListItem.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.ListItemType
 * @public
 * @enum {string}
 */
class ListItemType extends DataType {
	static isValid(value) {
		return !!ListItemTypes[value];
	}
}

ListItemType.generataTypeAcessors(ListItemTypes);

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$1 = ":host(:not([hidden])){display:block}:host{height:var(--_ui5_list_item_base_height);background:var(--ui5-listitem-background-color);box-sizing:border-box;border-bottom:1px solid transparent}:host([selected]){background:var(--sapList_SelectionBackgroundColor)}:host([has-border]){border-bottom:var(--ui5-listitem-border-bottom)}:host([selected]){border-bottom:var(--ui5-listitem-selected-border-bottom)}:host([selected][has-border]){border-bottom:var(--ui5-listitem-selected-border-bottom)}.ui5-li-root{position:relative;display:flex;align-items:center;width:100%;height:100%;padding:0 1rem 0 1rem;box-sizing:border-box}:host([focused]) .ui5-li-root.ui5-li--focusable{outline:none}:host([focused]) .ui5-li-root.ui5-li--focusable:after{content:\"\";border:var(--_ui5_listitembase_focus_width) dotted var(--sapContent_FocusColor);position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}:host([focused]) .ui5-li-content:focus:after{content:\"\";border:var(--_ui5_listitembase_focus_width) dotted var(--sapContent_FocusColor);position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}:host([active][focused]) .ui5-li-root.ui5-li--focusable:after{border-color:var(--sapContent_ContrastFocusColor)}.ui5-li-content{max-width:100%;min-height:1px;font-family:\"72override\",var(--sapFontFamily);pointer-events:none}";

/**
 * @public
 */
const metadata$b = {
	properties: /** @lends  sap.ui.webcomponents.main.ListItemBase.prototype */  {

		/**
		 * Defines the selected state of the <code>ListItem</code>.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: {
			type: Boolean,
		},

		/**
		* Defines if the list item should display its bottom border.
		* @private
		*/
		hasBorder: {
			type: Boolean,
		},

		_tabIndex: {
			type: String,
			defaultValue: "-1",
			noAttribute: true,
		},

		/**
		 * Indicates if the element is on focus
		 * @private
		 */
		focused: {
			type: Boolean,
		},
	},
	events: {
		_focused: {},
		"_forward-after": {},
		"_forward-before": {},
	},
};

/**
 * A class to serve as a foundation
 * for the <code>ListItem</code> and <code>GroupHeaderListItem</code> classes.
 *
 * @abstract
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ListItemBase
 * @extends UI5Element
 * @public
 */
class ListItemBase extends UI5Element {
	static get metadata() {
		return metadata$b;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return styles$1;
	}

	_onfocusin(event) {
		if (event.isMarked === "button" || event.isMarked === "link") {
			return;
		}

		this.focused = true;
		this.fireEvent("_focused", event);
	}

	_onfocusout(_event) {
		this.focused = false;
	}

	_onkeydown(event) {
		if (isTabNext(event)) {
			return this._handleTabNext(event);
		}

		if (isTabPrevious(event)) {
			return this._handleTabPrevious(event);
		}
	}

	_onkeyup() {}

	_handleTabNext(event) {
		const target = event.target;

		if (this.shouldForwardTabAfter(target)) {
			this.fireEvent("_forward-after", { item: target });
		}
	}

	_handleTabPrevious(event) {
		const target = event.target;

		if (this.shouldForwardTabBefore(target)) {
			const eventData = event;
			eventData.item = target;
			this.fireEvent("_forward-before", eventData);
		}
	}

	/*
	* Determines if th current list item either has no tabbable content or
	* [TAB] is performed onto the last tabbale content item.
	*/
	shouldForwardTabAfter(target) {
		const aContent = getTabbableElements(this.getDomRef());

		if (target.getFocusDomRef) {
			target = target.getFocusDomRef();
		}

		return !aContent.length || (aContent[aContent.length - 1] === target);
	}

	/*
	* Determines if the current list item is target of [SHIFT+TAB].
	*/
	shouldForwardTabBefore(target) {
		return this.getDomRef() === target;
	}

	get classes() {
		return {
			main: {
				"ui5-li-root": true,
				"ui5-li--focusable": true,
			},
		};
	}
}

class RadioButtonGroup {
	static hasGroup(groupName) {
		return this.groups.has(groupName);
	}

	static getGroup(groupName) {
		return this.groups.get(groupName);
	}

	static getSelectedRadioFromGroup(groupName) {
		return this.selectedRadios.get(groupName);
	}

	static removeGroup(groupName) {
		this.selectedRadios.delete(groupName);
		return this.groups.delete(groupName);
	}

	static addToGroup(radioBtn, groupName) {
		if (this.hasGroup(groupName)) {
			this.enforceSingleSelection(radioBtn, groupName);
			this.getGroup(groupName).push(radioBtn);
		} else {
			this.createGroup(radioBtn, groupName);
		}
	}

	static removeFromGroup(radioBtn, groupName) {
		if (!this.hasGroup(groupName)) {
			return;
		}

		const group = this.getGroup(groupName);
		const selectedRadio = this.getSelectedRadioFromGroup(groupName);

		// Remove the radio button from the given group
		group.forEach((_radioBtn, idx, arr) => {
			if (radioBtn._id === _radioBtn._id) {
				return arr.splice(idx, 1);
			}
		});

		if (selectedRadio === radioBtn) {
			this.selectedRadios.set(groupName, null);
		}

		// Remove the group if it is empty
		if (!group.length) {
			this.removeGroup(groupName);
		}
	}

	static createGroup(radioBtn, groupName) {
		if (radioBtn.selected) {
			this.selectedRadios.set(groupName, radioBtn);
		}

		this.groups.set(groupName, [radioBtn]);
	}

	static selectNextItem(item, groupName) {
		const group = this.getGroup(groupName),
			groupLength = group.length,
			currentItemPosition = group.indexOf(item);

		if (groupLength <= 1) {
			return;
		}

		const nextItemToSelect = this._nextSelectable(currentItemPosition, group);

		this.updateSelectionInGroup(nextItemToSelect, groupName);
	}

	static selectPreviousItem(item, groupName) {
		const group = this.getGroup(groupName),
			groupLength = group.length,
			currentItemPosition = group.indexOf(item);

		if (groupLength <= 1) {
			return;
		}

		const previousItemToSelect = this._previousSelectable(currentItemPosition, group);

		this.updateSelectionInGroup(previousItemToSelect, groupName);
	}

	static selectItem(item, groupName) {
		this.updateSelectionInGroup(item, groupName);
	}

	static updateSelectionInGroup(radioBtnToSelect, groupName) {
		const selectedRadio = this.getSelectedRadioFromGroup(groupName);

		this._deselectRadio(selectedRadio);
		this._selectRadio(radioBtnToSelect);
		this.selectedRadios.set(groupName, radioBtnToSelect);
	}

	static _deselectRadio(radioBtn) {
		if (radioBtn) {
			radioBtn.selected = false;
		}
	}

	static _selectRadio(radioBtn) {
		if (radioBtn) {
			radioBtn.focus();
			radioBtn.selected = true;
			radioBtn._selected = true;
			radioBtn.fireEvent("select");
		}
	}

	static _nextSelectable(pos, group) {
		const groupLength = group.length;
		let nextRadioToSelect = null;

		if (pos === groupLength - 1) {
			if (group[0].disabled || group[0].readonly) {
				return this._nextSelectable(1, group);
			}
			nextRadioToSelect = group[0];
		} else if (group[pos + 1].disabled || group[pos + 1].readonly) {
			return this._nextSelectable(pos + 1, group);
		} else {
			nextRadioToSelect = group[pos + 1];
		}

		return nextRadioToSelect;
	}

	static _previousSelectable(pos, group) {
		const groupLength = group.length;
		let previousRadioToSelect = null;
		if (pos === 0) {
			if (group[groupLength - 1].disabled || group[groupLength - 1].readonly) {
				return this._previousSelectable(groupLength - 1, group);
			}
			previousRadioToSelect = group[groupLength - 1];
		} else if (group[pos - 1].disabled || group[pos - 1].readonly) {
			return this._previousSelectable(pos - 1, group);
		} else {
			previousRadioToSelect = group[pos - 1];
		}

		return previousRadioToSelect;
	}

	static enforceSingleSelection(radioBtn, groupName) {
		const selectedRadio = this.getSelectedRadioFromGroup(groupName);

		if (radioBtn.selected) {
			if (!selectedRadio) {
				this.selectedRadios.set(groupName, radioBtn);
			} else if (radioBtn !== selectedRadio) {
				this._deselectRadio(selectedRadio);
				this.selectedRadios.set(groupName, radioBtn);
			}
		} else if (radioBtn === selectedRadio) {
			this.selectedRadios.set(groupName, null);
		}
	}

	static get groups() {
		if (!this._groups) {
			this._groups = new Map();
		}
		return this._groups;
	}

	static get selectedRadios() {
		if (!this._selectedRadios) {
			this._selectedRadios = new Map();
		}
		return this._selectedRadios;
	}
}

const block0$b = (context) => { return scopedHtml`<div class="ui5-radio-root ${classMap(context.classes.main)}" role="radio" aria-checked="${ifDefined(context.selected)}" aria-readonly="${ifDefined(context.ariaReadonly)}" aria-disabled="${ifDefined(context.ariaDisabled)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" aria-describedby="${ifDefined(context.ariaDescribedBy)}" tabindex="${ifDefined(context.tabIndex)}" dir="${ifDefined(context.effectiveDir)}" @click="${context._onclick}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}"><div class='ui5-radio-inner ${classMap(context.classes.inner)}'><svg class="ui5-radio-svg" focusable="false" aria-hidden="true">${blockSVG1$1()}</svg><input type='radio' ?checked="${context.selected}" ?readonly="${context.readonly}" ?disabled="${context.disabled}" name="${ifDefined(context.name)}" data-sap-no-tab-ref/></div>${ context.text ? block1$8(context) : undefined }${ context.hasValueState ? block2$7(context) : undefined }</div>`; };
const block1$8 = (context) => { return scopedHtml`<ui5-label id="${ifDefined(context._id)}-label" class="ui5-radio-label" for="${ifDefined(context._id)}" ?wrap="${context.wrap}">${ifDefined(context.text)}</ui5-label>`; };
const block2$7 = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-descr" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`; };

const blockSVG1$1 = (context) => {return scopedSvg`<circle class="ui5-radio-svg-outer" cx="50%" cy="50%" r="50%" /><circle class="ui5-radio-svg-inner" cx="50%" cy="50%" r="22%" />`};

const main$b = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$b(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var radioButtonCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{min-width:var(--_ui5_radiobutton_min_width);max-width:100%;text-overflow:ellipsis;overflow:hidden;color:var(--sapField_BorderColor)}:host([selected]){color:var(--_ui5_radiobutton_selected_fill)}:host([selected]) .ui5-radio-svg-inner{fill:currentColor}:host([selected]) .ui5-radio-svg-outer{stroke:var(--sapField_BorderColor)}:host([disabled]) .ui5-radio-root{opacity:var(--sapContent_DisabledOpacity)}:host(:not([disabled])) .ui5-radio-root:focus:before{content:\"\";display:block;position:absolute;top:var(--_ui5_rb_focus_dist);bottom:var(--_ui5_rb_focus_dist);left:var(--_ui5_rb_focus_dist);right:var(--_ui5_rb_focus_dist);pointer-events:none;border:var(--_ui5_radiobutton_border_width) dotted var(--sapContent_FocusColor)}:host(:not([value-state=Error]):not([value-state=Warning])) .ui5-radio-root:hover .ui5-radio-inner--hoverable .ui5-radio-svg-outer{fill:var(--_ui5_radiobutton_hover_fill);stroke:var(--sapField_Hover_BorderColor)}:host([text]) .ui5-radio-root:focus:before{right:0}:host([selected][readonly]) .ui5-radio-svg-inner{fill:var(--sapContent_NonInteractiveIconColor)}:host([readonly]) .ui5-radio-root .ui5-radio-svg-outer{fill:var(--sapField_ReadOnly_Background);stroke:var(--sapField_ReadOnly_BorderColor)}:host([value-state=Error]) .ui5-radio-svg-outer,:host([value-state=Warning]) .ui5-radio-svg-outer{stroke-width:2}:host([value-state=Error][selected]) .ui5-radio-svg-inner{fill:var(--_ui5_radiobutton_selected_error_fill)}:host([value-state=Error]) .ui5-radio-root:hover .ui5-radio-inner.ui5-radio-inner--hoverable:hover .ui5-radio-svg-outer,:host([value-state=Error]) .ui5-radio-svg-outer{stroke:var(--sapField_InvalidColor);fill:var(--sapField_InvalidBackground)}:host([value-state=Warning][selected]) .ui5-radio-svg-inner{fill:var(--_ui5_radiobutton_selected_warning_fill)}:host([value-state=Warning]) .ui5-radio-root:hover .ui5-radio-inner.ui5-radio-inner--hoverable:hover .ui5-radio-svg-outer,:host([value-state=Warning]) .ui5-radio-svg-outer{stroke:var(--sapField_WarningColor);fill:var(--sapField_WarningBackground)}:host([value-state=Error]) .ui5-radio-root,:host([value-state=Information]) .ui5-radio-root,:host([value-state=Warning]) .ui5-radio-root{stroke-dasharray:var(--_ui5_radiobutton_warning_error_border_dash)}.ui5-radio-root{height:var(--_ui5_rb_height);position:relative;display:flex;flex-wrap:nowrap;outline:none;max-width:100%}.ui5-radio-inner{display:flex;align-items:center;justify-content:center;flex-shrink:0;width:var(--_ui5_rb_inner_size);height:var(--_ui5_rb_inner_size);font-size:1rem;pointer-events:none;vertical-align:top}.ui5-radio-inner:focus{outline:none}.ui5-radio-inner input{-webkit-appearance:none;visibility:hidden;width:0;left:0;position:absolute;font-size:inherit;margin:0}[ui5-label].ui5-radio-label{display:flex;align-items:center;width:var(--_ui5_rb_label_width);padding-right:1px;vertical-align:top;cursor:default;max-width:100%;text-overflow:ellipsis;overflow:hidden;pointer-events:none}:host([wrap][text]) .ui5-radio-root{height:auto}:host([wrap][text]) [ui5-label].ui5-radio-label{padding:var(--_ui5_rb_label_side_padding) 0;word-break:break-all}.ui5-radio-svg{height:var(--_ui5_rb_svg_size);width:var(--_ui5_rb_svg_size);overflow:visible;pointer-events:none}.ui5-radio-svg-outer{fill:var(--sapField_Background);stroke:currentColor;stroke-width:1}.ui5-radio-svg-inner{fill:none}.ui5-radio-svg-inner,.ui5-radio-svg-outer{flex-shrink:0}:host([text]) [dir=rtl].ui5-radio-root:focus:before{left:0;right:var(--_ui5_rb_rtl_focus_right)}:host(.ui5-li-singlesel-radiobtn) .ui5-radio-root .ui5-radio-inner .ui5-radio-svg-outer{fill:var(--sapList_Background)}";

/**
 * @public
 */
const metadata$c = {
	tag: "ui5-radiobutton",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.RadioButton.prototype */  {

		/**
		 * Determines whether the <code>ui5-radiobutton</code> is disabled.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-radiobutton</code> is completely noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-radiobutton</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-radiobutton</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-radiobutton</code> is selected or not.
		 * <br><br>
		 * <b>Note:</b> The property value can be changed with user interaction,
		 * either by cliking/tapping on the <code>ui5-radiobutton</code>,
		 * or by using the Space or Enter key.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: {
			type: Boolean,
		},

		/**
		 * Defines the text of the <code>ui5-radiobutton</code>.
		 *
		 * @type  {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-radiobutton</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			defaultValue: ValueState.None,
			type: ValueState,
		},

		/**
		 * Defines the name of the <code>ui5-radiobutton</code>.
		 * Radio buttons with the same <code>name</code> will form a radio button group.
		 *
		 * <br><br>
		 * <b>Note:</b>
		 * The selection can be changed with <code>ARROW_UP/DOWN</code> and <code>ARROW_LEFT/RIGHT</code> keys between radio buttons in same group.
		 *
		 * <br><br>
		 * <b>Note:</b>
		 * Only one radio button can be selected per group.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect when submitting forms, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-radiobutton</code> so that it can be submitted as
		 * part of an HTML form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines the form value of the <code>ui5-radiobutton</code>.
		 * When a form with a radio button group is submitted, the group's value
		 * will be the value of the currently selected radio button.
		 * <br>
		 * <b>Important:</b> For the <code>value</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
		},

		/**
		 * Defines whether the <code>ui5-radiobutton</code> text wraps when there is not enough space.
		 * <br><br>
		 * <b>Note:</b> By default, the text truncates when there is not enough space.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		wrap: {
			type: Boolean,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.RadioButton.prototype */ {

		/**
		 * Fired when the <code>ui5-radiobutton</code> selected state changes.
		 *
		 * @event
		 * @public
		 */
		select: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-radiobutton</code> component enables users to select a single option from a set of options.
 * When a <code>ui5-radiobutton</code> is selected by the user, the
 * <code>select</code> event is fired.
 * When a <code>ui5-radiobutton</code> that is within a group is selected, the one
 * that was previously selected gets automatically deselected. You can group radio buttons by using the <code>name</code> property.
 * <br>
 * <b>Note:</b> If <code>ui5-radiobutton</code> is not part of a group, it can be selected once, but can not be deselected back.
 *
 * <h3>Keyboard Handling</h3>
 *
 * Once the <code>ui5-radiobutton</code> is on focus, it might be selected by pressing the Space and Enter keys.
 * <br>
 * The Arrow Down/Arrow Up and Arrow Left/Arrow Right keys can be used to change selection between next/previous radio buttons in one group,
 * while TAB and SHIFT + TAB can be used to enter or leave the radio button group.
 * <br>
 * <b>Note:</b> On entering radio button group, the focus goes to the currently selected radio button.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/RadioButton";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.RadioButton
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-radiobutton
 * @public
 */
class RadioButton extends UI5Element {
	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$c;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$b;
	}

	static get styles() {
		return radioButtonCss;
	}

	static get dependencies() {
		return [Label];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this.syncGroup();

		this._enableFormSupport();
	}

	syncGroup() {
		const oldGroup = this._name;
		const currentGroup = this.name;

		if (currentGroup !== oldGroup) {
			if (oldGroup) {
				// remove the control from the previous group
				RadioButtonGroup.removeFromGroup(this, oldGroup);
			}

			if (currentGroup) {
				// add the control to the existing group
				RadioButtonGroup.addToGroup(this, currentGroup);
			}
		} else if (currentGroup) {
			RadioButtonGroup.enforceSingleSelection(this, currentGroup);
		}

		this._name = this.name;
	}

	_enableFormSupport() {
		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this, (element, nativeInput) => {
				nativeInput.disabled = element.disabled || !element.selected;
				nativeInput.value = element.selected ? element.value : "";
			});
		} else if (this.value) {
			console.warn(`In order for the "value" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	_onclick() {
		return this.toggle();
	}

	_handleDown(event) {
		const currentGroup = this.name;

		if (!currentGroup) {
			return;
		}

		event.preventDefault();
		RadioButtonGroup.selectNextItem(this, currentGroup);
	}

	_handleUp(event) {
		const currentGroup = this.name;

		if (!currentGroup) {
			return;
		}

		event.preventDefault();
		RadioButtonGroup.selectPreviousItem(this, currentGroup);
	}

	_onkeydown(event) {
		if (isSpace(event)) {
			return event.preventDefault();
		}

		if (isEnter(event)) {
			return this.toggle();
		}

		if (isDown(event) || isRight(event)) {
			this._handleDown(event);
		}

		if (isUp(event) || isLeft(event)) {
			this._handleUp(event);
		}
	}

	_onkeyup(event) {
		if (isSpace(event)) {
			this.toggle();
		}
	}

	toggle() {
		if (!this.canToggle()) {
			return this;
		}

		if (!this.name) {
			this.selected = !this.selected;
			this.fireEvent("select");
			return this;
		}

		RadioButtonGroup.selectItem(this, this.name);
		return this;
	}

	canToggle() {
		return !(this.disabled || this.readonly || this.selected);
	}

	valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	get classes() {
		return {
			inner: {
				"ui5-radio-inner--hoverable": !this.disabled && !this.readonly && isDesktop(),
			},
		};
	}

	get ariaReadonly() {
		return this.readonly ? "true" : undefined;
	}

	get ariaDisabled() {
		return this.disabled ? "true" : undefined;
	}

	get ariaLabelledBy() {
		return this.text ? `${this._id}-label` : undefined;
	}

	get ariaDescribedBy() {
		return this.hasValueState ? `${this._id}-descr` : undefined;
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get valueStateText() {
		return this.valueStateTextMappings()[this.valueState];
	}

	get tabIndex() {
		const tabindex = this.getAttribute("tabindex");

		if (this.disabled) {
			return "-1";
		}

		if (this.name) {
			return this.selected ? "0" : "-1";
		}

		return tabindex || "0";
	}

	get strokeWidth() {
		return this.valueState === "None" ? "1" : "2";
	}
}

RadioButton.define();

const name$3 = "accept";
const pathData$3 = "M455.8 94q9 9 3 19l-222 326q-4 8-12 9t-14-5l-151-167q-5-5-4.5-11t5.5-11l25-25q12-12 23 0l96 96q5 5 13 4.5t12-8.5l175-249q4-7 11.5-8t13.5 4z";
const ltr$3 = true;

registerIcon(name$3, { pathData: pathData$3, ltr: ltr$3});

const block0$c = (context) => { return scopedHtml`<div class="ui5-checkbox-root ${classMap(context.classes.main)}" role="checkbox" aria-checked="${ifDefined(context.checked)}" aria-readonly="${ifDefined(context.ariaReadonly)}" aria-disabled="${ifDefined(context.ariaDisabled)}" aria-label="${ifDefined(context.ariaLabelText)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" aria-describedby="${ifDefined(context.ariaDescribedBy)}" tabindex="${ifDefined(context.tabIndex)}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click="${context._onclick}" dir="${ifDefined(context.effectiveDir)}"><div id="${ifDefined(context._id)}-CbBg" class="ui5-checkbox-inner">${ context.checked ? block1$9() : undefined }<input id="${ifDefined(context._id)}-CB" type='checkbox' ?checked="${context.checked}" ?readonly="${context.readonly}" ?disabled="${context.disabled}" role="none" data-sap-no-tab-ref /></div>${ context._label.text ? block2$8(context) : undefined }${ context.hasValueState ? block3$5(context) : undefined }<slot name="formSupport"></slot></div>`; };
const block1$9 = (context) => { return scopedHtml`<ui5-icon name="accept" class="ui5-checkbox-icon"></ui5-icon>`; };
const block2$8 = (context) => { return scopedHtml`<ui5-label id="${ifDefined(context._id)}-label" class="ui5-checkbox-label" ?wrap="${context._label.wrap}">${ifDefined(context._label.text)}</ui5-label>`; };
const block3$5 = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-descr" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`; };


const main$c = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$c(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var checkboxCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{overflow:hidden;max-width:100%;outline:none}:host([disabled]) .ui5-checkbox-root{opacity:.5}:host([readonly]:not([value-state=Warning]):not([value-state=Error])) .ui5-checkbox-inner{background:var(--sapField_ReadOnly_Background);border:var(--_ui5_checkbox_inner_readonly_border);color:var(--sapContent_NonInteractiveIconColor)}:host([wrap][text]) .ui5-checkbox-root{min-height:auto;box-sizing:border-box;align-items:flex-start;padding-top:var(--_ui5_checkbox_root_side_padding);padding-bottom:var(--_ui5_checkbox_root_side_padding)}:host([wrap][text]) .ui5-checkbox-root .ui5-checkbox-inner,:host([wrap][text]) .ui5-checkbox-root .ui5-checkbox-label{margin-top:var(--_ui5_checkbox_wrapped_content_margin_top)}:host([wrap][text]) .ui5-checkbox-root .ui5-checkbox-label{word-break:break-all}:host([wrap]) .ui5-checkbox-root:focus:before{bottom:var(--_ui5_checkbox_wrapped_focus_left_top_bottom_position)}:host([value-state=Error]) .ui5-checkbox--hoverable:hover .ui5-checkbox-inner,:host([value-state=Error]) .ui5-checkbox-inner{background:var(--sapField_InvalidBackground);border:var(--_ui5_checkbox_inner_error_border);color:var(--sapField_InvalidColor)}:host([value-state=Warning]) .ui5-checkbox--hoverable:hover .ui5-checkbox-inner,:host([value-state=Warning]) .ui5-checkbox-inner{background:var(--sapField_WarningBackground);border:var(--_ui5_checkbox_inner_warning_border);color:var(--sapField_WarningColor)}:host([value-state=Information]) .ui5-checkbox--hoverable:hover .ui5-checkbox-inner,:host([value-state=Information]) .ui5-checkbox-inner{background:var(--sapField_InformationBackground);border:var(--_ui5_checkbox_inner_information_border);color:var(--sapField_InformationColor)}:host([value-state=Warning]) .ui5-checkbox-icon{color:var(--_ui5_checkbox_checkmark_warning_color)}:host([text]) .ui5-checkbox-root{padding-right:0}:host([text]) .ui5-checkbox-root:focus:before{right:0}.ui5-checkbox-root{position:relative;display:inline-flex;align-items:center;justify-content:center;width:100%;min-height:var(--_ui5_checkbox_width_height);min-width:var(--_ui5_checkbox_width_height);padding:0 var(--_ui5_checkbox_wrapper_padding);box-sizing:border-box;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.ui5-checkbox-root:after{content:\"\";min-height:inherit;font-size:0}.ui5-checkbox-root:focus:before{content:\"\";position:absolute;top:var(--_ui5_checkbox_focus_position);left:var(--_ui5_checkbox_focus_position);right:var(--_ui5_checkbox_focus_position);bottom:var(--_ui5_checkbox_focus_position);border:var(--_ui5_checkbox_focus_outline)}.ui5-checkbox--hoverable:hover .ui5-checkbox-inner{background:var(--_ui5_checkbox_hover_background);border-color:var(--sapField_Hover_BorderColor)}.ui5-checkbox-inner{display:flex;justify-content:center;align-items:center;min-width:var(--_ui5_checkbox_inner_width_height);max-width:var(--_ui5_checkbox_inner_width_height);height:var(--_ui5_checkbox_inner_width_height);max-height:var(--_ui5_checkbox_inner_width_height);border:var(--_ui5_checkbox_inner_border);border-radius:var(--_ui5_checkbox_inner_border_radius);background:var(--sapField_Background);color:var(--_ui5_checkbox_checkmark_color);box-sizing:border-box;position:relative;cursor:default;pointer-events:none}.ui5-checkbox-icon{color:currentColor;cursor:default}.ui5-checkbox-inner input{-webkit-appearance:none;visibility:hidden;width:0;left:0;position:absolute;font-size:inherit}.ui5-checkbox-root .ui5-checkbox-label{margin-left:var(--_ui5_checkbox_wrapper_padding);cursor:default;text-overflow:ellipsis;overflow:hidden;pointer-events:none;user-select:none;-ms-user-select:none;-webkit-user-select:none}.ui5-checkbox-icon{width:var(--_ui5_checkbox_icon_size);height:var(--_ui5_checkbox_icon_size)}:host([text]) [dir=rtl].ui5-checkbox-root{padding-left:0;padding-right:var(--_ui5_checkbox_wrapper_padding)}:host([text]) [dir=rtl].ui5-checkbox-root:focus:before{left:0;right:var(--_ui5_checkbox_focus_position)}:host([text]) [dir=rtl].ui5-checkbox-root .ui5-checkbox-label{margin-left:0;margin-right:var(--_ui5_checkbox_compact_wrapper_padding)}";

/**
 * @public
 */
const metadata$d = {
	tag: "ui5-checkbox",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.CheckBox.prototype */ {

		/**
		 * Defines whether the <code>ui5-checkbox</code> is disabled.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-checkbox</code> is completely noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-checkbox</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A red-only <code>ui5-checkbox</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines if the <code>ui5-checkbox</code> is checked.
		 * <br><br>
		 * <b>Note:</b> The property can be changed with user interaction,
		 * either by cliking/tapping on the <code>ui5-checkbox</code>, or by
		 * pressing the Enter or Space key.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		checked: {
			type: Boolean,
		},

		/**
		 * Defines the text of the <code>ui5-checkbox</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-checkbox</code>.
		 * <br><br>
		 * <b>Note:</b> Available options are <code>Warning</code>, <code>Error</code>, and <code>None</code> (default).
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines whether the <code>ui5-checkbox</code> text wraps when there is not enough space.
		 * <br><br>
		 * <b>Note:</b> By default, the text truncates when there is not enough space.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		wrap: {
			type: Boolean,
		},

		/**
		 * Determines the name with which the <code>ui5-checkbox</code> will be submitted in an HTML form.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-checkbox</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Determines the <code>aria-label</code>, set on the component root tag.
		 * @type {string}
		 * @defaultvalue undefined
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Receives id(or many ids) of the elements that label the checkbox
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_label: {
			type: Object,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.CheckBox.prototype */ {

		/**
		 * Fired when the <code>ui5-checkbox</code> checked state changes.
		 *
		 * @public
		 * @event
		 */
		change: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * Allows the user to set a binary value, such as true/false or yes/no for an item.
 * <br><br>
 * The <code>ui5-checkbox</code> component consists of a box and a label that describes its purpose.
 * If it's checked, an indicator is displayed inside the box.
 * To check/uncheck the <code>ui5-checkbox</code>, the user has to click or tap the square
 * box or its label.
 * <br><br>
 * The <code>ui5-checkbox</code> component only has 2 states - checked and unchecked.
 * Clicking or tapping toggles the <code>ui5-checkbox</code> between checked and unchecked state.
 *
 * <h3>Usage</h3>
 *
 * You can manually set the width of the element containing the box and the label using the <code>width</code> property.
 * If the text exceeds the available width, it is truncated.
 * The touchable area for toggling the <code>ui5-checkbox</code> ends where the text ends.
 * <br><br>
 * You can disable the <code>ui5-checkbox</code> by setting the <code>disabled</code> property to
 * <code>true</code>,
 * or use the <code>ui5-checkbox</code> in read-only mode by setting the <code>readonly</code>
 * property to <code>true</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/CheckBox";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.CheckBox
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-checkbox
 * @public
 */
class CheckBox extends UI5Element {
	static get metadata() {
		return metadata$d;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$c;
	}

	static get styles() {
		return checkboxCss;
	}

	constructor() {
		super();

		this._label = {};
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this.syncLabel();

		this._enableFormSupport();
	}

	syncLabel() {
		this._label = Object.assign({}, this._label);
		this._label.text = this.text;
		this._label.wrap = this.wrap;
		this._label.textDirection = this.textDirection;
	}

	_enableFormSupport() {
		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this, (element, nativeInput) => {
				nativeInput.disabled = element.disabled || !element.checked;
				nativeInput.value = element.checked ? "on" : "";
			});
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	_onclick() {
		this.toggle();
	}

	_onkeydown(event) {
		if (isSpace(event)) {
			event.preventDefault();
		}

		if (isEnter(event)) {
			this.toggle();
		}
	}

	_onkeyup(event) {
		if (isSpace(event)) {
			this.toggle();
		}
	}

	toggle() {
		if (this.canToggle()) {
			this.checked = !this.checked;
			this.fireEvent("change");
			// Angular two way data binding
			this.fireEvent("value-changed");
		}
		return this;
	}

	canToggle() {
		return !(this.disabled || this.readonly);
	}

	valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	get classes() {
		return {
			main: {
				"ui5-checkbox--hoverable": !this.disabled && !this.readonly && isDesktop(),
			},
		};
	}

	get ariaReadonly() {
		return this.readonly ? "true" : undefined;
	}

	get ariaDisabled() {
		return this.disabled ? "true" : undefined;
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	get ariaLabelledBy() {
		if (!this.ariaLabelText) {
			return this.text ? `${this._id}-label` : undefined;
		}

		return undefined;
	}

	get ariaDescribedBy() {
		return this.hasValueState ? `${this._id}-descr` : undefined;
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get valueStateText() {
		return this.valueStateTextMappings()[this.valueState];
	}

	get tabIndex() {
		const tabindex = this.getAttribute("tabindex");
		return this.disabled ? undefined : tabindex || "0";
	}

	static get dependencies() {
		return [
			Label,
			Icon,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

CheckBox.define();

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$2 = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host([actionable]){cursor:pointer}:host([selected][actionable]:not([active]):hover){background:var(--sapList_Hover_SelectionBackground)}:host([active][actionable]),:host([selected][active][actionable]){background:var(--sapList_Active_Background)}:host([actionable]:not([active]):not([selected]):hover){background:var(--sapList_Hover_Background)}:host([active][actionable]) .ui5-li-root.ui5-li--focusable .ui5-li-content:focus,:host([active][actionable]) .ui5-li-root.ui5-li--focusable:focus{outline-color:var(--sapContent_ContrastFocusColor)}:host([active][actionable]) .ui5-li-root .ui5-li-icon{color:var(--sapList_Active_TextColor)}:host([active][actionable]) .ui5-li-desc,:host([active][actionable]) .ui5-li-info,:host([active][actionable]) .ui5-li-title{color:var(--sapList_Active_TextColor)}:host([info-state=Warning]) .ui5-li-info{color:var(--sapCriticalTextColor)}:host([info-state=Success]) .ui5-li-info{color:var(--sapPositiveTextColor)}:host([info-state=Error]) .ui5-li-info{color:var(--sapNegativeTextColor)}:host([info-state=Information]) .ui5-li-info{color:var(--sapInformativeTextColor)}:host([has-title][description]){height:5rem}:host([has-title][image]){height:5rem}:host([image]) .ui5-li-content{height:3rem}:host([description]) .ui5-li-root{padding:1rem}:host([description]) .ui5-li-content{height:3rem}:host([has-title][description]) .ui5-li-title{padding-bottom:.375rem}.ui5-li-title-wrapper{display:flex;flex-direction:column;flex:auto;min-width:1px;line-height:normal}:host([description]) .ui5-li-title-wrapper{height:100%;justify-content:space-between;padding:.125rem 0}.ui5-li-title{color:var(--sapTextColor);font-size:var(--_ui5_list_item_title_size)}.ui5-li-desc,.ui5-li-title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-li-desc{color:var(--sapContent_LabelColor);font-size:var(--sapFontSize)}.ui5-li-info{margin:0 .25rem;color:var(--sapNeutralTextColor);font-size:.875rem;flex-shrink:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host([description]) .ui5-li-info{align-self:flex-end}.ui5-li-img{width:var(--_ui5_list_item_img_size);min-width:var(--_ui5_list_item_img_size);height:var(--_ui5_list_item_img_size);min-height:var(--_ui5_list_item_img_size);margin:var(--_ui5_list_item_img_margin);border-radius:.25rem}.ui5-li-icon{min-width:var(--_ui5_list_item_icon_size);min-height:var(--_ui5_list_item_icon_size);color:var(--sapContent_NonInteractiveIconColor);padding-right:.5rem}.ui5-li-content{display:flex;align-items:center;flex:auto;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;pointer-events:none}.ui5-li-deletebtn{display:flex;align-items:center}.ui5-li-multisel-cb,.ui5-li-singlesel-radiobtn{flex-shrink:0}:host([description]) .ui5-li-singlesel-radiobtn{align-self:flex-start;margin-top:var(--_ui5_list_item_selection_btn_margin_top)}:host([description]) .ui5-li-multisel-cb{align-self:flex-start;margin-top:var(--_ui5_list_item_selection_btn_margin_top)}:host([_mode=SingleSelectBegin]) .ui5-li-root{padding-right:1rem;padding-left:0}:host([_mode=MultiSelect]) .ui5-li-root{padding-right:1rem;padding-left:0}:host([_mode=SingleSelectEnd]) .ui5-li-root{padding-right:0;padding-left:1rem}:host [ui5-checkbox].ui5-li-singlesel-radiobtn{margin-right:var(--_ui5_list_item_cb_margin_right)}:host [dir=rtl] .ui5-li-icon{padding-left:.5rem;padding-right:0}:host [dir=rtl] .ui5-li-img{margin:.5rem 0 .5rem .75rem}:host([_mode=SingleSelectBegin]) [dir=rtl].ui5-li-root{padding-right:0;padding-left:1rem}:host([_mode=MultiSelect]) [dir=rtl].ui5-li-root{padding-right:0;padding-left:1rem}:host([_mode=SingleSelectEnd]) [dir=rtl].ui5-li-root{padding-right:1rem;padding-left:0}";

/**
 * @public
 */
const metadata$e = {
	languageAware: true,
	properties: /** @lends  sap.ui.webcomponents.main.ListItem.prototype */ {

		/**
		 * Defines the visual indication and behavior of the list items.
		 * Available options are <code>Active</code> (by default), <code>Inactive</code> and <code>Detail</code>.
		 * <br><br>
		 * <b>Note:</b> When set to <code>Active</code>, the item will provide visual response upon press and hover,
		 * while with type <code>Inactive</code> and <code>Detail</code> - will not.
		 *
		 * @type {ListItemType}
		 * @defaultvalue "Active"
		 * @public
		*/
		type: {
			type: ListItemType,
			defaultValue: ListItemType.Active,
		},

		/**
		 * Indicates if the list item is active, e.g pressed down with the mouse or the keyboard keys.
		 *
		 * @type {boolean}
		 * @private
		*/
		active: {
			type: Boolean,
		},

		/**
		 * Indicates if the list item is actionable, e.g has hover and pressed effects.
		 *
		 * @type {boolean}
		 * @private
		*/
		actionable: {
			type: Boolean,
		},

		/**
		 * Used to define the role of the list item.
		 *
		 * @private
		 * @type {String}
		 * @defaultvalue "option"
		 * @since 1.0.0-rc.9
		 *
		 */
		role: {
			type: String,
			defaultValue: "option",
		},

		_mode: {
			type: ListMode,
			defaultValue: ListMode.None,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.ListItem.prototype */ {
		/**
		 * Fired when the user clicks on the detail button when type is <code>Detail</code>.
		 *
		 * @event sap.ui.webcomponents.main.ListItem#detail-click
		 * @public
		 */
		"detail-click": {},
		_press: {},
		_focused: {},
		"_selection-requested": {},
	},
};

/**
 * @class
 * A class to serve as a base
 * for the <code>StandardListItem</code> and <code>CustomListItem</code> classes.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ListItem
 * @extends ListItemBase
 * @public
 */
class ListItem extends ListItemBase {
	static get metadata() {
		return metadata$e;
	}

	static get styles() {
		return [ListItemBase.styles, styles$2];
	}

	static get dependencies() {
		return [
			Button,
			RadioButton,
			CheckBox,
		];
	}

	constructor() {
		super();

		this.deactivateByKey = event => {
			if (isEnter(event)) {
				this.deactivate();
			}
		};

		this.deactivate = () => {
			if (this.active) {
				this.active = false;
			}
		};

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering(...params) {
		this.actionable = (this.type === ListItemType.Active) && (this._mode !== ListMode.Delete);
	}

	onEnterDOM() {
		document.addEventListener("mouseup", this.deactivate);
		document.addEventListener("touchend", this.deactivate);
		document.addEventListener("keyup", this.deactivateByKey);
	}

	onExitDOM() {
		document.removeEventListener("mouseup", this.deactivate);
		document.removeEventListener("keyup", this.deactivateByKey);
		document.removeEventListener("touchend", this.deactivate);
	}

	_onkeydown(event) {
		super._onkeydown(event);

		const itemActive = this.type === ListItemType.Active;

		if (isSpace(event)) {
			event.preventDefault();
		}

		if ((isSpace(event) || isEnter(event)) && itemActive) {
			this.activate();
		}

		if (isEnter(event)) {
			this.fireItemPress(event);
		}
	}

	_onkeyup(event) {
		if (isSpace(event) || isEnter(event)) {
			this.deactivate();
		}

		if (isSpace(event)) {
			this.fireItemPress(event);
		}
	}

	_onmousedown(event) {
		if (event.isMarked === "button") {
			return;
		}
		this.activate();
	}

	_onmouseup(event) {
		if (event.isMarked === "button") {
			return;
		}
		this.deactivate();
	}

	_ontouchstart(event) {
		this._onmousedown(event);
	}

	_ontouchend(event) {
		this._onmouseup(event);
	}

	_onfocusout() {
		super._onfocusout();
		this.deactivate();
	}

	_onclick(event) {
		if (event.isMarked === "button") {
			return;
		}
		this.fireItemPress(event);
	}

	/*
	 * Called when selection components in Single (ui5-radiobutton)
	 * and Multi (ui5-checkbox) selection modes are used.
	 */
	onMultiSelectionComponentPress(event) {
		if (this.isInactive) {
			return;
		}

		this.fireEvent("_selection-requested", { item: this, selected: event.target.checked, selectionComponentPressed: true });
	}

	onSingleSelectionComponentPress(event) {
		if (this.isInactive) {
			return;
		}

		this.fireEvent("_selection-requested", { item: this, selected: !event.target.selected, selectionComponentPressed: true });
	}

	activate() {
		if (this.type === ListItemType.Active) {
			this.active = true;
		}
	}

	onDelete(event) {
		this.fireEvent("_selection-requested", { item: this, selectionComponentPressed: false });
	}

	onDetailClick(event) {
		this.fireEvent("detail-click", { item: this, selected: this.selected });
	}

	fireItemPress(event) {
		if (this.isInactive) {
			return;
		}

		this.fireEvent("_press", { item: this, selected: this.selected, key: event.key });
	}

	get isInactive() {
		return this.type === ListItemType.Inactive || this.type === ListItemType.Detail;
	}

	get placeSelectionElementBefore() {
		return this._mode === ListMode.MultiSelect
			|| this._mode === ListMode.SingleSelectBegin;
	}

	get placeSelectionElementAfter() {
		return !this.placeSelectionElementBefore
			&& (this._mode === ListMode.SingleSelectEnd || this._mode === ListMode.Delete);
	}

	get modeSingleSelect() {
		return [
			ListMode.SingleSelectBegin,
			ListMode.SingleSelectEnd,
			ListMode.SingleSelect,
		].includes(this._mode);
	}

	get modeMultiSelect() {
		return this._mode === ListMode.MultiSelect;
	}

	get modeDelete() {
		return this._mode === ListMode.Delete;
	}

	get typeDetail() {
		return this.type === ListItemType.Detail;
	}

	get typeActive() {
		return this.type === ListItemType.Active;
	}

	get ariaSelected() {
		if (this.modeMultiSelect || this.modeSingleSelect) {
			return this.selected;
		}

		return undefined;
	}

	get deleteText() {
		return this.i18nBundle.getText(DELETE);
	}

	get _accInfo() {
		return {
			role: this.role,
			ariaExpanded: undefined,
			ariaLevel: undefined,
			ariaLabel: this.i18nBundle.getText(ARIA_LABEL_LIST_ITEM_CHECKBOX),
		};
	}

	static async onDefine() {
		await Promise.all([
			fetchI18nBundle("@ui5/webcomponents"),
		]);
	}
}

const block0$d = (context) => { return scopedHtml`<div class="ui5-avatar-root">${ context.image ? block1$a(context) : block2$9(context) }</div>`; };
const block1$a = (context) => { return scopedHtml`<span class="ui5-avatar-img" style="${styleMap(context.styles.img)}" role="img" aria-label="${ifDefined(context.accessibleNameText)}"></span>`; };
const block2$9 = (context) => { return scopedHtml`${ context.icon ? block3$6(context) : block4$5(context) }`; };
const block3$6 = (context) => { return scopedHtml`<ui5-icon class="ui5-avatar-icon" name="${ifDefined(context.icon)}" accessible-name="${ifDefined(context.accessibleNameText)}"></ui5-icon>`; };
const block4$5 = (context) => { return scopedHtml`${ context.initials ? block5$4(context) : undefined }`; };
const block5$4 = (context) => { return scopedHtml`<span class="ui5-avatar-initials">${ifDefined(context.validInitials)}</span>`; };


const main$d = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$d(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var AvatarCss = ":host(:not([hidden])){display:inline-block;box-sizing:border-box}:host(:not([hidden]).ui5_hovered){opacity:.7}:host{height:3rem;width:3rem;border-radius:50%;border:var(--ui5-avatar-initials-border);outline:none;color:var(--ui5-avatar-initials-color)}:host([shape=Square]){border-radius:.25rem}:host([shape=Square]) .ui5-avatar-root{border-radius:inherit}:host([shape=Square]) .ui5-avatar-img{border-radius:inherit}:host([size=XS]){height:2rem;width:2rem;font-size:.75rem}:host([size=S]){height:3rem;width:3rem;font-size:1.125rem}:host([size=M]){height:4rem;width:4rem;font-size:1.625rem}:host([size=L]){height:5rem;width:5rem;font-size:2rem}:host([size=XL]){height:7rem;width:7rem;font-size:2.75rem}:host .ui5-avatar-icon{height:1.5rem;width:1.5rem}:host([size=XS]) .ui5-avatar-icon{height:1rem;width:1rem}:host([size=S]) .ui5-avatar-icon{height:1.5rem;width:1.5rem}:host([size=M]) .ui5-avatar-icon{height:2rem;width:2rem}:host([size=L]) .ui5-avatar-icon{height:2.5rem;width:2.5rem}:host([size=XL]) .ui5-avatar-icon{height:3rem;width:3rem}:host(:not([image])){background-color:var(--ui5-avatar-accent6)}:host([background-color=Accent1]){background-color:var(--ui5-avatar-accent1)}:host([background-color=Accent2]){background-color:var(--ui5-avatar-accent2)}:host([background-color=Accent3]){background-color:var(--ui5-avatar-accent3)}:host([background-color=Accent4]){background-color:var(--ui5-avatar-accent4)}:host([background-color=Accent5]){background-color:var(--ui5-avatar-accent5)}:host([background-color=Accent6]){background-color:var(--ui5-avatar-accent6)}:host([background-color=Accent7]){background-color:var(--ui5-avatar-accent7)}:host([background-color=Accent8]){background-color:var(--ui5-avatar-accent8)}:host([background-color=Accent9]){background-color:var(--ui5-avatar-accent9)}:host([background-color=Accent10]){background-color:var(--ui5-avatar-accent10)}:host([background-color=Placeholder]){background-color:var(--ui5-avatar-placeholder)}:host(:not([image])) .ui5-avatar-icon{color:inherit}:host([image-fit-type=Contain]) .ui5-avatar-img{background-size:contain}.ui5-avatar-root{display:flex;align-items:center;justify-content:center}.ui5-avatar-img,.ui5-avatar-root{height:100%;width:100%;border-radius:50%}.ui5-avatar-img{background-repeat:no-repeat;background-position:50%;background-size:cover}.ui5-avatar-initials{color:inherit}";

/**
 * Different types of AvatarSize.
 * @lends sap.ui.webcomponents.main.types.AvatarSize.prototype
 * @public
 */
const AvatarSizes = {
	/**
	 * component size - 2rem
	 * font size - 1rem
	 * @public
	 * @type {XS}
	 */
	XS: "XS",

	/**
	 * component size - 3rem
	 * font size - 1.5rem
	 * @public
	 * @type {S}
	 */
	S: "S",

	/**
	 * component size - 4rem
	 * font size - 2rem
	 * @public
	 * @type {M}
	 */
	M: "M",

	/**
	 * component size - 5rem
	 * font size - 2.5rem
	 * @public
	 * @type {L}
	 */
	L: "L",

	/**
	 * component size - 7rem
	 * font size - 3rem
	 * @public
	 * @type {XL}
	 */
	XL: "XL",
};

/**
 * @class
 * Different types of AvatarSize.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.AvatarSize
 * @public
 * @enum {string}
 */
class AvatarSize extends DataType {
	static isValid(value) {
		return !!AvatarSizes[value];
	}
}

AvatarSize.generataTypeAcessors(AvatarSizes);

/**
 * Different types of AvatarShape.
 * @lends sap.ui.webcomponents.main.types.AvatarShape.prototype
 * @public
 */
const AvatarShapes = {
	/**
	 * Circular shape.
	 * @public
	 * @type {Circle}
	 */
	Circle: "Circle",

	/**
	 * Square shape.
	 * @public
	 * @type {Square}
	 */
	Square: "Square",
};

/**
 * @class
 * Different types of AvatarShape.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.AvatarShape
 * @public
 * @enum {string}
 */
class AvatarShape extends DataType {
	static isValid(value) {
		return !!AvatarShapes[value];
	}
}

AvatarShape.generataTypeAcessors(AvatarShapes);

/**
 * Different types of AvatarFitType.
 * @lends sap.ui.webcomponents.main.types.AvatarFitType.prototype
 * @public
 */
const AvatarFitTypes = {
	/**
	 *
	 * @type {Cover}
	 * @public
	 */
	Cover: "Cover",

	/**
	 * @type {Contain}
	 * @public
	 */
	Contain: "Contain",
};

/**
 * @class
 * Different types of AvatarFitType.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.AvatarFitType
 * @public
 * @enum {string}
 */
class AvatarFitType extends DataType {
	static isValid(value) {
		return !!AvatarFitTypes[value];
	}
}

AvatarFitType.generataTypeAcessors(AvatarFitTypes);

/**
 * Different types of AvatarBackgroundColor.
 * @lends sap.ui.webcomponents.main.types.AvatarBackgroundColor.prototype
 * @public
 */
const AvatarBackGroundColors = {
	/**
	 *
	 * @public
	 * @type {Accent1}
	 */
	Accent1: "Accent1",

	/**
	 *
	 * @public
	 * @type {Accent2}
	 */
	Accent2: "Accent2",

	/**
	 *
	 * @public
	 * @type {Accent3}
	 */
	Accent3: "Accent3",

	/**
	 *
	 * @public
	 * @type {Accent4}
	 */
	Accent4: "Accent4",

	/**
	 *
	 * @public
	 * @type {Accent5}
	 */
	Accent5: "Accent5",

	/**
	 *
	 * @public
	 * @type {Accent6}
	 */
	Accent6: "Accent6",

	/**
	 *
	 * @public
	 * @type {Accent7}
	 */
	Accent7: "Accent7",

	/**
	 *
	 * @public
	 * @type {Accent8}
	 */
	Accent8: "Accent8",

	/**
	 *
	 * @public
	 * @type {Accent9}
	 */
	Accent9: "Accent9",

	/**
	 *
	 * @public
	 * @type {Accent10}
	 */
	Accent10: "Accent10",

	/**
	 *
	 * @public
	 * @type {Placeholder}
	 */
	Placeholder: "Placeholder",
};

/**
 * @class
 * Different types of AvatarBackgroundColor.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.AvatarBackgroundColor
 * @public
 * @enum {string}
 */
class AvatarBackgroundColor extends DataType {
	static isValid(value) {
		return !!AvatarBackGroundColors[value];
	}
}

AvatarBackgroundColor.generataTypeAcessors(AvatarBackGroundColors);

/**
 * @public
 */
const metadata$f = {
	tag: "ui5-avatar",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Avatar.prototype */ {

		/**
		 * Defines the source path to the desired image.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		image: {
			type: String,
		},

		/**
		 * Defines the name of the UI5 Icon, that would be displayed.
		 * <br>
		 * <b>Note:</b> If <code>image</code> is set, the property would be ignored.
		 * <br>
		 * <b>Note:</b> You should import the desired icon first, then use its name as "icon".
		 * <br><br>
		 * import "@ui5/webcomponents-icons/dist/icons/{icon_name}.js"
		 * <br>
		 * <pre>&lt;ui5-avatar icon-src="employee"></pre>
		 *
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines the displayed initials.
		 * <br>
		 * Up to two Latin letters can be displayed as initials in a <code>ui5-avatar</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		initials: {
			type: String,
		},

		/**
		 * Defines the shape of the <code>ui5-avatar</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Circle</code></li>
		 * <li><code>Square</code></li>
		 * <ul>
		 * @type {AvatarShape}
		 * @defaultvalue "Circle"
		 * @public
		 */
		shape: {
			type: String,
			defaultValue: AvatarShape.Circle,
		},

		/**
		 * Defines predefined size of the <code>ui5-avatar</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>XS</code></li>
		 * <li><code>S</code></li>
		 * <li><code>M</code></li>
		 * <li><code>L</code></li>
		 * <li><code>XL</code></li>
		 * <ul>
		 * @type {AvatarSize}
		 * @defaultvalue "S"
		 * @public
		 */
		size: {
			type: String,
			defaultValue: AvatarSize.S,
		},

		/**
		 * Defines the fit type of the desired image.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Cover</code></li>
		 * <li><code>Contain</code></li>
		 * <ul>
		 * @type {AvatarFitType}
		 * @defaultvalue "Cover"
		 * @public
		 */
		imageFitType: {
			type: String,
			defaultValue: AvatarFitType.Cover,
		},

		/**
		 * Defines the background color of the desired image.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Accent1</code></li>
		 * <li><code>Accent2</code></li>
		 * <li><code>Accent3</code></li>
		 * <li><code>Accent4</code></li>
		 * <li><code>Accent5</code></li>
		 * <li><code>Accent6</code></li>
		 * <li><code>Accent7</code></li>
		 * <li><code>Accent8</code></li>
		 * <li><code>Accent9</code></li>
		 * <li><code>Accent10</code></li>
		 * <li><code>Placeholder</code></li>
		 * <ul>
		 * @type {AvatarBackgroundColor}
		 * @defaultvalue "Accent6"
		 * @public
		 */
		backgroundColor: {
			type: String,
			defaultValue: AvatarBackgroundColor.Accent6,
		},

		/**
		 * Defines the text alternative of the <code>ui5-avatar</code>.
		 * If not provided a default text alternative will be set, if present.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 * @since 1.0.0-rc.7
		 */
		accessibleName: {
			type: String,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.Avatar.prototype */ {
	},
	events: /** @lends sap.ui.webcomponents.main.Avatar.prototype */ {
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * An image-like control that has different display options for representing images and icons
 * in different shapes and sizes, depending on the use case.
 *
 * The shape can be circular or square. There are several predefined sizes, as well as an option to
 * set a custom size.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/Avatar.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Avatar
 * @extends UI5Element
 * @tagname ui5-avatar
 * @since 1.0.0-rc.6
 * @public
 */
class Avatar extends UI5Element {
	constructor() {
		super();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$f;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return AvatarCss;
	}

	static get template() {
		return main$d;
	}

	static get dependencies() {
		return [Icon];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	get validInitials() {
		const validInitials = /^[a-zA-Z]{1,2}$/;

		if (this.initials && validInitials.test(this.initials)) {
			return this.initials;
		}

		return null;
	}

	get accessibleNameText() {
		if (this.accessibleName) {
			return this.accessibleName;
		}

		return this.i18nBundle.getText(AVATAR_TOOLTIP) || undefined;
	}

	get styles() {
		const image = this.image.replace(/%/g, "%25").replace(/#/g, "%23");
		return {
			img: {
				"background-image": `url("${image}")`,
			},
		};
	}
}

Avatar.define();

const block0$e = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" @mouseup="${context._onmouseup}" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @touchend="${context._ontouchend}" @click="${context._onclick}" aria-selected="${ifDefined(context.ariaSelected)}" role="${ifDefined(context._accInfo.role)}" aria-expanded="${ifDefined(context._accInfo.ariaExpanded)}" aria-level="${ifDefined(context._accInfo.ariaLevel)}" style="list-style-type: none;">${ context.placeSelectionElementBefore ? block1$b(context) : undefined }<div id="${ifDefined(context._id)}-content" class="ui5-li-content">${ context.displayImage ? block5$5(context) : undefined }${ context.displayIconBegin ? block6$2(context) : undefined }<div class="ui5-li-title-wrapper"><span part="title" class="ui5-li-title"><slot></slot></span>${ context.description ? block7$1(context) : undefined }${ !context.typeActive ? block8$1(context) : undefined }</div>${ context.info ? block9$1(context) : undefined }</div>${ context.displayIconEnd ? block10$1(context) : undefined }${ context.typeDetail ? block11(context) : undefined }${ context.placeSelectionElementAfter ? block12(context) : undefined }</li> `; };
const block1$b = (context) => { return scopedHtml`${ context.modeSingleSelect ? block2$a(context) : undefined }${ context.modeMultiSelect ? block3$7(context) : undefined }${ context.modeDelete ? block4$6(context) : undefined }`; };
const block2$a = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block3$7 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block4$6 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };
const block5$5 = (context) => { return scopedHtml`<ui5-avatar image="${ifDefined(context.image)}" image-fit-type="Contain" shape="Square" class="ui5-li-img"></ui5-avatar>`; };
const block6$2 = (context) => { return scopedHtml`<ui5-icon part="icon" name="${ifDefined(context.icon)}" class="ui5-li-icon"></ui5-icon>`; };
const block7$1 = (context) => { return scopedHtml`<span part="description" class="ui5-li-desc">${ifDefined(context.description)}</span>`; };
const block8$1 = (context) => { return scopedHtml`<span class="ui5-hidden-text">${ifDefined(context.type)}</span>`; };
const block9$1 = (context) => { return scopedHtml`<span part="info" class="ui5-li-info">${ifDefined(context.info)}</span>`; };
const block10$1 = (context) => { return scopedHtml`<ui5-icon part="icon" name="${ifDefined(context.icon)}" class="ui5-li-icon"></ui5-icon>`; };
const block11 = (context) => { return scopedHtml`<div class="ui5-li-detailbtn"><ui5-button design="Transparent" icon="edit" @click="${context.onDetailClick}"></ui5-button></div>`; };
const block12 = (context) => { return scopedHtml`${ context.modeSingleSelect ? block13(context) : undefined }${ context.modeMultiSelect ? block14(context) : undefined }${ context.modeDelete ? block15(context) : undefined }`; };
const block13 = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block14 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block15 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };


const main$e = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$e(context);
};

/**
 * @public
 */
const metadata$g = {
	tag: "ui5-li",
	properties: /** @lends sap.ui.webcomponents.main.StandardListItem.prototype */ {

		/**
		 * Defines the description displayed right under the item text, if such is present.
		 * @type {string}
		 * @defaultvalue: ""
		 * @public
		 * @since 0.8.0
		 */
		description: {
			type: String,
		},

		/**
		 * Defines the <code>icon</code> source URI.
		 * <br><br>
		 * <b>Note:</b>
		 * SAP-icons font provides numerous buil-in icons. To find all the available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines whether the <code>icon</code> should be displayed in the beginning of the list item or in the end.
		 * <br><br>
		 * <b>Note:</b> If <code>image</code> is set, the <code>icon</code> would be displayed after the <code>image</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		iconEnd: {
			type: Boolean,
		},

		/**
		 * Defines the <code>image</code> source URI.
		 * <br><br>
		 * <b>Note:</b> The <code>image</code> would be displayed in the beginning of the list item.
		 *
		 * @type {string}
		 * @public
		 */
		image: {
			type: String,
		},

		/**
		 * Defines the <code>info</code>, displayed in the end of the list item.
		 * @type {string}
		 * @public
		 * @since 0.13.0
		 */
		info: {
			type: String,
		},

		/**
		 * Defines the state of the <code>info</code>.
		 * <br>
		 * Available options are: <code>"None"</code> (by default), <code>"Success"</code>, <code>"Warning"</code>, <code>"Information"</code> and <code>"Erorr"</code>.
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 * @since 0.13.0
		 */
		infoState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Indicates if the list item has text content.
		 * @type {boolean}
		 * @private
		 */
		hasTitle: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.StandardListItem.prototype */ {
		/**
		 * Defines the text of the <code>ui5-li</code>.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
};

/**
 * @class
 * The <code>ui5-li</code> represents the simplest type of item for a <code>ui5-list</code>.
 *
 * This is a list item,
 * providing the most common use cases such as <code>text</code>,
 * <code>image</code> and <code>icon</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.StandardListItem
 * @extends ListItem
 * @tagname ui5-li
 * @public
 */
class StandardListItem extends ListItem {
	static get template() {
		return main$e;
	}

	static get metadata() {
		return metadata$g;
	}

	onBeforeRendering(...params) {
		super.onBeforeRendering(...params);
		this.hasTitle = !!this.textContent;
	}

	get displayImage() {
		return !!this.image;
	}

	get displayIconBegin() {
		return (this.icon && !this.iconEnd);
	}

	get displayIconEnd() {
		return (this.icon && this.iconEnd);
	}

	static get dependencies() {
		return [
			...ListItem.dependencies,
			Icon,
			Avatar,
		];
	}
}

StandardListItem.define();

const block0$f = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" @mouseup="${context._onmouseup}" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @touchend="${context._ontouchend}" @click="${context._onclick}" aria-selected="${ifDefined(context.ariaSelected)}" role="${ifDefined(context._accInfo.role)}" aria-expanded="${ifDefined(context._accInfo.ariaExpanded)}" aria-level="${ifDefined(context._accInfo.ariaLevel)}" style="list-style-type: none;">${ context.placeSelectionElementBefore ? block1$c(context) : undefined }<div id="${ifDefined(context._id)}-content" class="ui5-li-content">${ context.displayImage ? block5$6(context) : undefined }${ context.displayIconBegin ? block6$3(context) : undefined }<div class="ui5-li-title-wrapper">${ context.hasTitle ? block7$2() : undefined }${ context.hasDescription ? block8$2(context) : undefined }${ !context.typeActive ? block11$1(context) : undefined }</div>${ context.info ? block12$1(context) : undefined }</div>${ context.displayIconEnd ? block13$1(context) : undefined }${ context.typeDetail ? block14$1(context) : undefined }${ context.placeSelectionElementAfter ? block15$1(context) : undefined }</li> `; };
const block1$c = (context) => { return scopedHtml`${ context.modeSingleSelect ? block2$b(context) : undefined }${ context.modeMultiSelect ? block3$8(context) : undefined }${ context.modeDelete ? block4$7(context) : undefined }`; };
const block2$b = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block3$8 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block4$7 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };
const block5$6 = (context) => { return scopedHtml`<ui5-avatar image="${ifDefined(context.image)}" image-fit-type="Contain" shape="Square" class="ui5-li-img"></ui5-avatar>`; };
const block6$3 = (context) => { return scopedHtml`<ui5-icon part="icon" name="${ifDefined(context.icon)}" class="ui5-li-icon"></ui5-icon>`; };
const block7$2 = (context) => { return scopedHtml`<span part="title" class="ui5-li-title"><slot></slot></span>`; };
const block8$2 = (context) => { return scopedHtml`<span part="description" class="ui5-li-desc">${ context.richDescription.length ? block9$2() : block10$2(context) }</span>`; };
const block9$2 = (context) => { return scopedHtml`<slot name="richDescription"></slot>`; };
const block10$2 = (context) => { return scopedHtml`${ifDefined(context.description)}`; };
const block11$1 = (context) => { return scopedHtml`<span class="ui5-hidden-text">${ifDefined(context.type)}</span>`; };
const block12$1 = (context) => { return scopedHtml`<span part="info" class="ui5-li-info">${ifDefined(context.info)}</span>`; };
const block13$1 = (context) => { return scopedHtml`<ui5-icon part="icon" name="${ifDefined(context.icon)}" class="ui5-li-icon"></ui5-icon>`; };
const block14$1 = (context) => { return scopedHtml`<div class="ui5-li-detailbtn"><ui5-button design="Transparent" icon="edit" @click="${context.onDetailClick}"></ui5-button></div>`; };
const block15$1 = (context) => { return scopedHtml`${ context.modeSingleSelect ? block16(context) : undefined }${ context.modeMultiSelect ? block17(context) : undefined }${ context.modeDelete ? block18(context) : undefined }`; };
const block16 = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block17 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block18 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };


const main$f = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$f(context);
};

/**
 * @public
 */
const metadata$h = {
	tag: "ui5-li-suggestion-item",
	managedSlots: true,
	slots: {
		/**
		 * Defines a description that can contain HTML.
		 * <b>Note:</b> If not specified, the <code>description</code> property will be used.
		 * <br>
		 * @type {HTMLElement}
		 * @since 1.0.0-rc.8
		 * @slot
		 * @public
		 */
		richDescription: {
			type: HTMLElement,
		},
		"default": {
			propertyName: "title",
		},
	},
};

/**
 * @class
 * The <code>ui5-li-suggestion-item</code> represents the suggestion item in the <code>ui5-input</code>
 * suggestion popover.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.SuggestionListItem
 * @extends UI5Element
 * @tagname ui5-suggestion-item
 */
class SuggestionListItem extends StandardListItem {
	static get metadata() {
		return metadata$h;
	}

	static get template() {
		return main$f;
	}

	onBeforeRendering(...params) {
		super.onBeforeRendering(...params);
		this.hasTitle = !!this.title.length;
	}

	get effectiveTitle() {
		return this.title.map(el => el.textContent).join("");
	}

	get hasDescription() {
		return this.richDescription.length || this.description;
	}
}

SuggestionListItem.define();

const block0$g = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="ui5-ghli-root ${classMap(context.classes.main)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keydown="${context._onkeydown}" role="option" style="list-style-type: none;"><span class="ui5-hidden-text">${ifDefined(context.groupHeaderText)}</span><div id="${ifDefined(context._id)}-content" class="ui5-li-content"><span class="ui5-ghli-title"><slot></slot></span></div></li>`; };


const main$g = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$g(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var groupheaderListItemCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host{background:var(--ui5-group-header-listitem-background-color);border-bottom:1px solid var(--sapList_TableGroupHeaderBorderColor);color:var(--sapList_TableGroupHeaderTextColor)}.ui5-li-root.ui5-ghli-root{padding-top:1rem;color:currentColor;font-size:var(--sapMFontHeader6Size);font-weight:400;line-height:2rem}.ui5-ghli-title{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-weight:700}";

/**
 * @public
 */
const metadata$i = {
	tag: "ui5-li-groupheader",
	languageAware: true,
	properties: /** @lends  sap.ui.webcomponents.main.GroupHeaderListItem.prototype */ {
	},
	slots: /** @lends sap.ui.webcomponents.main.GroupHeaderListItem.prototype */ {
		/**
		 * Defines the text of the <code>ui5-li-groupheader</code>.
		 * <br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.GroupHeaderListItem.prototype */ {
	},
};

/**
 * @class
 * The <code>ui5-li-groupheader</code> is a special list item, used only to separate other list items into logical groups.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.GroupHeaderListItem
 * @extends ListItemBase
 * @tagname ui5-li-groupheader
 * @public
 */
class GroupHeaderListItem extends ListItemBase {
	static get template() {
		return main$g;
	}

	static get metadata() {
		return metadata$i;
	}

	static get styles() {
		return [ListItemBase.styles, groupheaderListItemCss];
	}

	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	get group() {
		return true;
	}

	get groupHeaderText() {
		return this.i18nBundle.getText(GROUP_HEADER_TEXT);
	}

	static async onDefine() {
		await Promise.all([
			fetchI18nBundle("@ui5/webcomponents"),
		]);
	}
}

GroupHeaderListItem.define();

/**
 * @public
 */
const metadata$j = {
	tag: "ui5-suggestion-item",
	properties: /** @lends  sap.ui.webcomponents.main.SuggestionItem.prototype */ {
		/**
		 * Defines the text of the <code>ui5-suggestion-item</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the visual indication and behavior of the item.
		 * Available options are <code>Active</code> (by default), <code>Inactive</code> and <code>Detail</code>.
		 * <br><br>
		 * <b>Note:</b> When set to <code>Active</code>, the item will provide visual response upon press and hover,
		 * while when <code>Inactive</code> or <code>Detail</code> - will not.
		 *
		 * @type {ListItemType}
		 * @defaultvalue "Active"
		 * @public
		 * @since 1.0.0-rc.8
		*/
		type: {
			type: ListItemType,
			defaultValue: ListItemType.Active,
		},

		/**
		 * Defines the description displayed right under the item text, if such is present.
		 * @type {string}
		 * @defaultvalue: ""
		 * @public
		 */
		description: {
			type: String,
		},

		/**
		 * Defines the <code>icon</code> source URI.
		 * <br><br>
		 * <b>Note:</b>
		 * SAP-icons font provides numerous buil-in icons. To find all the available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines whether the <code>icon</code> should be displayed in the beginning of the item or in the end.
		 * <br><br>
		 * <b>Note:</b> If <code>image</code> is set, the <code>icon</code> would be displayed after the <code>image</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		iconEnd: {
			type: Boolean,
		},

		/**
		 * Defines the <code>image</code> source URI.
		 * <br><br>
		 * <b>Note:</b> The <code>image</code> would be displayed in the beginning of the item.
		 *
		 * @type {string}
		 * @public
		 */
		image: {
			type: String,
		},

		/**
		 * Defines the <code>info</code>, displayed in the end of the item.
		 * @type {string}
		 * @public
		 */
		info: {
			type: String,
		},

		/**
		 * Defines the state of the <code>info</code>.
		 * <br><br>
		 * Available options are: <code>"None"</code> (by default), <code>"Success"</code>, <code>"Warning"</code> and <code>"Erorr"</code>.
		 * @type {ValueState}
         * @defaultvalue "None"
		 * @public
		 */
		infoState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines the item to be displayed as a group item.
		 * <br><br>
		 * <b>Note:</b>
		 * When set, the other properties, such as <code>image</code>, <code>icon</code>, <code>description</code>, etc. will be omitted
		 * and only the <code>text</code> will be displayed.
		 * @type {boolean}
         * @defaultvalue false
		 * @public
		 */
		group: {
			type: Boolean,
		},
	},
	slots: {
	},
	events: {
	},
};

/**
 * @class
 * The <code>ui5-suggestion-item</code> represents the suggestion item of the <code>ui5-input</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.SuggestionItem
 * @extends UI5Element
 * @tagname ui5-suggestion-item
 * @public
 */
class SuggestionItem extends UI5Element {
	static get metadata() {
		return metadata$j;
	}

	static get dependencies() {
		return [
			SuggestionListItem,
			GroupHeaderListItem,
		];
	}
}

SuggestionItem.define();

/**
 * A class to manage the <code>Input</code suggestion items.
 *
 * @class
 * @private
 * @author SAP SE
 */
class Suggestions {
	constructor(component, slotName, highlight, handleFocus) {
		// The component, that the suggestion would plug into.
		this.component = component;

		// Defines the items` slot name.
		this.slotName = slotName;

		// Defines, if the focus will be moved via the arrow keys.
		this.handleFocus = handleFocus;

		// Defines, if the suggestions should highlight.
		this.highlight = highlight;

		// Press and Focus handlers
		this.fnOnSuggestionItemPress = this.onItemPress.bind(this);
		this.fnOnSuggestionItemFocus = this.onItemFocused.bind(this);
		this.fnOnSuggestionItemMouseOver = this.onItemMouseOver.bind(this);
		this.fnOnSuggestionItemMouseOut = this.onItemMouseOut.bind(this);

		// An integer value to store the currently selected item position,
		// that changes due to user interaction.
		this.selectedItemIndex = null;

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");

		this.accInfo = {};
	}

	/* Public methods */
	defaultSlotProperties(hightlightValue) {
		const inputSuggestionItems = this._getComponent().suggestionItems;
		const highlight = this.highlight && !!hightlightValue;
		const suggestions = [];

		inputSuggestionItems.map((suggestion, idx) => {
			const text = highlight ? this.getHighlightedText(suggestion, hightlightValue) : this.getRowText(suggestion);
			const description = highlight ? this.getHighlightedDesc(suggestion, hightlightValue) : this.getRowDesc(suggestion);

			return suggestions.push({
				text,
				description,
				image: suggestion.image || undefined,
				icon: suggestion.icon || undefined,
				type: suggestion.type || undefined,
				info: suggestion.info || undefined,
				infoState: suggestion.infoState,
				group: suggestion.group,
				key: idx,
			});
		});

		return suggestions;
	}

	onUp(event) {
		event.preventDefault();
		this._handleItemNavigation(false /* forward */);
		return true;
	}

	onDown(event) {
		event.preventDefault();
		this._handleItemNavigation(true /* forward */);
		return true;
	}

	onSpace(event) {
		if (this._isItemOnTarget()) {
			event.preventDefault();
			this.onItemSelected(null, true /* keyboardUsed */);
			return true;
		}
		return false;
	}

	onEnter(event) {
		if (this._isItemOnTarget()) {
			this.onItemSelected(null, true /* keyboardUsed */);
			return true;
		}
		return false;
	}

	toggle(bToggle, { preventFocusRestore }) {
		const toggle = bToggle !== undefined ? bToggle : !this.isOpened();

		if (toggle) {
			this.open();
		} else {
			this.close(preventFocusRestore);
		}
	}

	async _isScrollable() {
		const sc = await this._getScrollContainer();
		return sc.offsetHeight < sc.scrollHeight;
	}

	async open() {
		this.responsivePopover = await this._respPopover();
		this._beforeOpen();

		if (this._getItems().length) {
			this.responsivePopover.open(this._getComponent());
		}
	}

	async close(preventFocusRestore = false) {
		this.responsivePopover = await this._respPopover();
		this.responsivePopover.close(false, false, preventFocusRestore);
	}

	updateSelectedItemPosition(pos) {
		this.selectedItemIndex = pos;
	}

	/* Interface methods */
	onItemFocused() {
		this._getComponent().onItemFocused();
	}

	onItemMouseOver(event) {
		this._getComponent().onItemMouseOver(event);
	}

	onItemMouseOut(event) {
		this._getComponent().onItemMouseOut(event);
	}

	onItemSelected(selectedItem, keyboardUsed) {
		const allItems = this._getItems();
		const item = selectedItem || allItems[this.selectedItemIndex];

		this.selectedItemIndex = allItems.indexOf(item);

		this.accInfo = {
			currentPos: this.selectedItemIndex + 1,
			listSize: allItems.length,
			itemText: item.textContent,
		};

		// If the item is "Inactive", prevent selection with SPACE or ENTER
		// to have consistency with the way "Inactive" items behave in the ui5-list
		if (item.type === "Inactive") {
			return;
		}

		this._getComponent().onItemSelected(this._getRealItems()[this.selectedItemIndex], keyboardUsed);
		item.selected = false;
		this.close();
	}

	onItemPreviewed(item) {
		this._getComponent().onItemPreviewed(item);
	}

	/* Private methods */
	onItemPress(oEvent) {
		this.onItemSelected(oEvent.detail.item, false /* keyboardUsed */);
	}

	_beforeOpen() {
		this._attachItemsListeners();
		this._attachPopupListeners();
	}

	async _attachItemsListeners() {
		const list = await this._getList();
		list.removeEventListener("ui5-item-press", this.fnOnSuggestionItemPress);
		list.addEventListener("ui5-item-press", this.fnOnSuggestionItemPress);
		list.removeEventListener("ui5-item-focused", this.fnOnSuggestionItemFocus);
		list.addEventListener("ui5-item-focused", this.fnOnSuggestionItemFocus);
		list.removeEventListener("mouseover", this.fnOnSuggestionItemMouseOver);
		list.addEventListener("mouseover", this.fnOnSuggestionItemMouseOver);
		list.removeEventListener("mouseout", this.fnOnSuggestionItemMouseOut);
		list.addEventListener("mouseout", this.fnOnSuggestionItemMouseOut);
	}

	_attachPopupListeners() {
		if (!this.handleFocus) {
			return;
		}

		if (!this.attachedAfterOpened) {
			this._respPopover.addEventListener("ui5-after-open", this._onOpen.bind(this));
			this.attachedAfterOpened = true;
		}

		if (!this.attachedAfterClose) {
			this._respPopover.addEventListener("ui5-after-close", this._onClose.bind(this));
			this.attachedAfterClose = true;
		}
	}

	_onOpen() {
		this._applyFocus();
		this._getComponent().onOpen();
	}

	_onClose() {
		this._getComponent().onClose();
	}

	_applyFocus() {
		if (this.selectedItemIndex) {
			this._getItems()[this.selectedItemIndex].focus();
		}
	}

	_isItemOnTarget() {
		return this.isOpened() && this.selectedItemIndex !== null;
	}

	isOpened() {
		return !!(this.responsivePopover && this.responsivePopover.opened);
	}

	_handleItemNavigation(forward) {
		if (!this._getItems().length) {
			return;
		}

		if (forward) {
			this._selectNextItem();
		} else {
			this._selectPreviousItem();
		}
	}

	_selectNextItem() {
		const itemsCount = this._getItems().length;
		const previousSelectedIdx = this.selectedItemIndex;

		if ((this.selectedItemIndex === null) || (++this.selectedItemIndex > itemsCount - 1)) {
			this.selectedItemIndex = 0;
		}

		this._moveItemSelection(previousSelectedIdx, this.selectedItemIndex);
	}

	_selectPreviousItem() {
		const itemsCount = this._getItems().length;
		const previousSelectedIdx = this.selectedItemIndex;

		if ((this.selectedItemIndex === null) || (--this.selectedItemIndex < 0)) {
			this.selectedItemIndex = itemsCount - 1;
		}

		this._moveItemSelection(previousSelectedIdx, this.selectedItemIndex);
	}

	_moveItemSelection(previousIdx, nextIdx) {
		const items = this._getItems();
		const currentItem = items[nextIdx];
		const previousItem = items[previousIdx];

		this.accInfo = {
			currentPos: nextIdx + 1,
			listSize: items.length,
			itemText: currentItem.textContent,
		};

		if (previousItem) {
			previousItem.selected = false;
		}

		if (currentItem) {
			currentItem.selected = true;

			if (this.handleFocus) {
				currentItem.focus();
			}
		}

		this.onItemPreviewed(currentItem);

		if (!this._isItemIntoView(currentItem)) {
			this._scrollItemIntoView(currentItem);
		}
	}

	_deselectItems() {
		const items = this._getItems();
		items.forEach(item => {
			item.selected = false;
		});
	}

	_isItemIntoView(item) {
		const rectItem = item.getDomRef().getBoundingClientRect();
		const rectInput = this._getComponent().getDomRef().getBoundingClientRect();
		const windowHeight = (window.innerHeight || document.documentElement.clientHeight);

		return (rectItem.top + Suggestions.SCROLL_STEP <= windowHeight) && (rectItem.top >= rectInput.top);
	}

	async _scrollItemIntoView(item) {
		const pos = item.getDomRef().offsetTop;
		const scrollContainer = await this._getScrollContainer();
		scrollContainer.scrollTop = pos;
	}

	async _getScrollContainer() {
		if (!this._scrollContainer) {
			await this._respPopover();
			this._scrollContainer = this.responsivePopover.shadowRoot.querySelector(".ui5-popup-content");
		}

		return this._scrollContainer;
	}

	_getItems() {
		return [...this.responsivePopover.querySelector("[ui5-list]").children];
	}

	_getComponent() {
		return this.component;
	}

	async _getList() {
		this.responsivePopover = await this._respPopover();
		return this.responsivePopover.querySelector("[ui5-list]");
	}

	async _getListWidth() {
		const list = await this._getList();
		return list.offsetWidth;
	}

	_getRealItems() {
		return this._getComponent().getSlottedNodes(this.slotName);
	}

	async _respPopover() {
		if (this.responsivePopover) {
			return this.responsivePopover;
		}

		const staticAreaItem = await this._getComponent().getStaticAreaItemDomRef();
		this.responsivePopover = staticAreaItem.querySelector("[ui5-responsive-popover]");
		return this.responsivePopover;
	}

	get itemSelectionAnnounce() {
		const i18nBundle = this.i18nBundle,
			itemPositionText = i18nBundle.getText(LIST_ITEM_POSITION, [this.accInfo.currentPos], [this.accInfo.listSize]),
			itemSelectionText = i18nBundle.getText(LIST_ITEM_SELECTED);

		return `${itemPositionText} ${this.accInfo.itemText} ${itemSelectionText}`;
	}

	getRowText(suggestion) {
		return this.sanitizeText(suggestion.text || suggestion.textContent);
	}

	getRowDesc(suggestion) {
		if (suggestion.description) {
			return this.sanitizeText(suggestion.description);
		}
	}

	getHighlightedText(suggestion, input) {
		let text = suggestion.text || suggestion.textContent;
		text = this.sanitizeText(text);

		return this.hightlightInput(text, input);
	}

	getHighlightedDesc(suggestion, input) {
		let text = suggestion.description;
		text = this.sanitizeText(text);

		return this.hightlightInput(text, input);
	}

	hightlightInput(text, input) {
		if (!text) {
			return text;
		}

		const inputEscaped = input.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
		const regEx = new RegExp(inputEscaped, "ig");
		return text.replace(regEx, match => `<b>${match}</b>`);
	}

	sanitizeText(text) {
		return text && text.replace("<", "&lt");
	}

	static get dependencies() {
		return [
			SuggestionItem,
			ResponsivePopover,
			List,
			SuggestionListItem,
			GroupHeaderListItem,
			Button,
		];
	}
}

Suggestions.SCROLL_STEP = 60;

// Add suggestions support to the global features registry so that Input.js can use it
registerFeature("InputSuggestions", Suggestions);

const block0$h = (context) => { return scopedHtml`<div class="ui5-badge-root" dir="${ifDefined(context.effectiveDir)}">${ context.hasIcon ? block1$d() : undefined }${ context.hasText ? block2$c() : undefined }<span class="ui5-hidden-text">${ifDefined(context.badgeDescription)}</span></div>`; };
const block1$d = (context) => { return scopedHtml`<slot name="icon"></slot>`; };
const block2$c = (context) => { return scopedHtml`<label class="ui5-badge-text"><bdi><slot></slot></bdi></label>`; };


const main$h = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$h(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var badgeCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block;height:1.125em;min-width:1.125em;max-width:100%;padding:0 .625em;color:var(--sapTextColor);background:var(--sapLegendBackgroundColor1);border:solid 1px var(--sapLegendColor1);border-radius:1.125em;box-sizing:border-box;font-family:\"72override\",var(--sapFontFamily);text-align:center}:host([__has-icon]){padding:0 .3125em}::slotted([ui5-icon]){width:.75em;height:.75em}[ui5-badge] [ui5-icon][slot=icon]{display:flex}:host([__has-icon]) .ui5-badge-text{padding-left:.1875em}:host([__has-icon]) .ui5-badge-root[rtl] .ui5-badge-text{padding-right:.1875em}:host([color-scheme=\"1\"]){background-color:var(--ui5-badge-color-scheme-1-background);border-color:var(--ui5-badge-color-scheme-1-border)}:host([color-scheme=\"2\"]){background-color:var(--ui5-badge-color-scheme-2-background);border-color:var(--ui5-badge-color-scheme-2-border)}:host([color-scheme=\"3\"]){background-color:var(--ui5-badge-color-scheme-3-background);border-color:var(--ui5-badge-color-scheme-3-border)}:host([color-scheme=\"4\"]){background-color:var(--ui5-badge-color-scheme-4-background);border-color:var(--ui5-badge-color-scheme-4-border)}:host([color-scheme=\"5\"]){background-color:var(--ui5-badge-color-scheme-5-background);border-color:var(--ui5-badge-color-scheme-5-border)}:host([color-scheme=\"6\"]){background-color:var(--ui5-badge-color-scheme-6-background);border-color:var(--ui5-badge-color-scheme-6-border)}:host([color-scheme=\"7\"]){background-color:var(--ui5-badge-color-scheme-7-background);border-color:var(--ui5-badge-color-scheme-7-border)}:host([color-scheme=\"8\"]){background-color:var(--ui5-badge-color-scheme-8-background);border-color:var(--ui5-badge-color-scheme-8-border)}:host([color-scheme=\"9\"]){background-color:var(--ui5-badge-color-scheme-9-background);border-color:var(--ui5-badge-color-scheme-9-border)}:host([color-scheme=\"10\"]){background-color:var(--ui5-badge-color-scheme-10-background);border-color:var(--ui5-badge-color-scheme-10-border)}.ui5-badge-root{display:flex;align-items:center;width:100%;height:100%;box-sizing:border-box}.ui5-badge-text{width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;text-transform:uppercase;letter-spacing:.0125em;font-size:var(--ui5-badge-font-size)}";

/**
 * @public
 */
const metadata$k = {
	tag: "ui5-badge",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Badge.prototype */  {

		/**
		 * Defines the color scheme of the <code>ui5-badge</code>.
		 * There are 10 predefined schemes. Each scheme applies different values for the <code>background-color</code> and <code>border-color</code>.
		 * To use one you can set a number from <code>"1"</code> to <code>"10"</code>. The <code>colorScheme</code> <code>"1"</code> will be set by default.
		 * <br><br>
		 * <b>Note:</b> Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.
		 * @type {string}
		 * @defaultvalue "1"
		 * @public
		 */
		colorScheme: {
			type: String,
			defaultValue: "1",
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Badge.prototype */ {
		/**
		 * Defines the text of the <code>ui5-badge</code>.
		 * <br><b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},

		/**
		 * Defines the <code>ui5-icon</code> to be displayed in the <code>ui5-badge</code>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		icon: {
			type: HTMLElement,
		},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-badge</code> is a small non-interactive component which contains text information and color chosen from a list of predefined color schemes.
 * It serves the purpose to attract the user attention to some piece of information (state, quantity, condition, etc.).
 *
 * <h3>Usage Guidelines</h3>
 * <ul>
 * <li>If the text is longer than the width of the component, it doesn’t wrap, it shows ellipsis.</li>
 * <li>When truncated, the full text is not visible, therefore, it’s recommended to make more space for longer texts to be fully displayed.</li>
 * <li>Colors are not semantic and have no visual representation in High Contrast Black (sap_belize_hcb) theme.</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Badge";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Badge
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-badge
 * @since 0.12.0
 * @public
 */
class Badge extends UI5Element {
	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$k;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$h;
	}

	static get styles() {
		return badgeCss;
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		if (this.hasIcon) {
			this.setAttribute("__has-icon", "");
		} else {
			this.removeAttribute("__has-icon");
		}
	}

	get hasText() {
		return !!this.textContent.trim().length;
	}

	get hasIcon() {
		return !!this.icon.length;
	}

	get badgeDescription() {
		return this.i18nBundle.getText(BADGE_DESCRIPTION);
	}
}

Badge.define();

const block0$i = (context) => { return scopedHtml`<div class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" role="region" aria-label="${ifDefined(context.ariaLabelText)}" aria-labelledby="${ifDefined(context._id)}-desc ${ifDefined(context._id)}-heading">${ context.hasHeader ? block1$e(context) : undefined }<section role="group" aria-label="${ifDefined(context.ariaCardContentLabel)}"><slot></slot></section><span id="${ifDefined(context._id)}-desc" class="ui5-hidden-text">${ifDefined(context.ariaCardRoleDescription)}</span></div>`; };
const block1$e = (context) => { return scopedHtml`<div class="${classMap(context.classes.header)}" @click="${context._headerClick}" @keydown="${context._headerKeydown}" @keyup="${context._headerKeyup}" role="${ifDefined(context.ariaHeaderRole)}" aria-labelledby="${ifDefined(context._id)}-subheading ${ifDefined(context._id)}-status" aria-level="${ifDefined(context.ariaLevel)}" aria-roledescription="${ifDefined(context.ariaCardHeaderRoleDescription)}" tabindex="0">${ context.hasAvatar ? block2$d(context) : undefined }<div class="ui5-card-header-text">${ context.heading ? block3$9(context) : undefined }${ context.subheading ? block4$8(context) : undefined }</div>${ context.hasAction ? block5$7() : block6$4(context) }</div>`; };
const block2$d = (context) => { return scopedHtml`<div class="ui5-card-avatar" aria-label="${ifDefined(context.ariaCardAvatarLabel)}"><slot name="avatar"></slot></div>`; };
const block3$9 = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}-heading" class="ui5-card-heading" part="heading">${ifDefined(context.heading)}</div>`; };
const block4$8 = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}-subheading" class="ui5-card-subheading" part="subheading">${ifDefined(context.subheading)}</div>`; };
const block5$7 = (context) => { return scopedHtml`<slot name="action"></slot>`; };
const block6$4 = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-status" part="status" class="ui5-card-status">${ifDefined(context.status)}</span>`; };


const main$i = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$i(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var cardCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block;width:100%}.ui5-card-root{width:100%;height:100%;color:var(--sapGroup_TitleTextColor);background:var(--sapTile_Background);box-shadow:var(--sapContent_Shadow0);border-radius:.25rem;border:1px solid var(--_ui5_card_border_color);overflow:hidden;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);box-sizing:border-box}.ui5-card-header{position:relative;display:flex;align-items:center;background:var(--sapTile_Background);border-bottom:1px solid var(--_ui5_card_header_border_color);padding:var(--_ui5_card_content_padding);outline:none}:host([subheading]) .ui5-card-header{align-items:flex-start}.ui5-card-root.ui5-card--nocontent{height:auto}.ui5-card-root.ui5-card--nocontent .ui5-card-header{border-bottom:none}.ui5-card-header:focus:before{outline:none;content:\"\";position:absolute;border:var(--_ui5_card_header_focus_border);pointer-events:none;top:1px;left:1px;right:1px;bottom:1px}.ui5-card-header.ui5-card-header--interactive:hover{cursor:pointer;background:var(--_ui5_card_header_hover_bg)}.ui5-card-header.ui5-card-header--active,.ui5-card-header.ui5-card-header--interactive:active{background:var(--_ui5_card_header_active_bg)}.ui5-card-header .ui5-card-header-text{flex:1;pointer-events:none}.ui5-card-header .ui5-card-avatar{height:3rem;width:3rem;display:flex;align-items:center;justify-content:center;margin-right:.75rem;pointer-events:none}::slotted([ui5-icon]){width:1.5rem;height:1.5rem;color:var(--sapTile_IconColor)}::slotted(img){width:100%;height:100%;border-radius:50%}.ui5-card-header .ui5-card-status{display:inline-block;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSmallSize);color:var(--sapTile_TextColor);text-align:left;line-height:1.125rem;padding-left:1rem;margin-left:auto;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.ui5-card-header .ui5-card-header-text .ui5-card-heading{font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapMFontHeader5Size);font-weight:400;color:var(--sapTile_TitleTextColor);max-height:3.5rem}.ui5-card-header .ui5-card-header-text .ui5-card-subheading{font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;color:var(--sapTile_TextColor);margin-top:.5rem;max-height:2.1rem}.ui5-card-header .ui5-card-header-text .ui5-card-heading,.ui5-card-header .ui5-card-header-text .ui5-card-subheading{text-align:left;text-overflow:ellipsis;white-space:normal;word-wrap:break-word;overflow:hidden;-webkit-line-clamp:2;-webkit-box-orient:vertical;display:-webkit-box;max-width:100%}[dir=rtl] .ui5-card-header .ui5-card-avatar{margin-left:.75rem;margin-right:0}[dir=rtl] .ui5-card-header .ui5-card-status{padding-right:1rem;padding-left:0;margin-right:auto}[dir=rtl] .ui5-card-header .ui5-card-header-text .ui5-card-heading{text-align:right}[dir=rtl] .ui5-card-header .ui5-card-header-text .ui5-card-subheading{text-align:right}";

/**
 * @public
 */
const metadata$l = {
	tag: "ui5-card",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Card.prototype */ {

		/**
		 * Defines the content of the <code>ui5-card</code>.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "content",
			type: HTMLElement,
		},

		/**
		 * Defines the visual representation in the header of the card.
		 * Supports images and icons.
		 * <br><br>
		 * <b>Note:</b>
		 * SAP-icons font provides numerous options. To find all the available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		avatar: {
			type: HTMLElement,
		},

		/**
		 * Defines an action, displayed in the right most part of the header.
		 * <br><br>
		 * <b>Note:</b> If set, the <code>status</code> text will not be displayed,
		 * you can either have <code>action</code>, or <code>status</code>.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 * @since 1.0.0-rc.8
		 */
		action: {
			type: HTMLElement,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.Card.prototype */ {

		/**
		 * Defines the title displayed in the <code>ui5-card</code> header.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		heading: {
			type: String,
		},

		/**
		 * Defines the subheading displayed in the <code>ui5-card</code> header.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		subheading: {
			type: String,
		},

		/**
		 * Defines the status displayed in the <code>ui5-card</code> header.
		 * <br><br>
		 * <b>Note:</b> If the <code>action</code> slot is set, the <code>status</code> will not be displayed,
		 * you can either have <code>action</code>, or <code>status</code>.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		status: {
			type: String,
		},

		/**
		 * Defines if the <code>ui5-card</code> header would be interactive,
		 * e.g gets hover effect, gets focused and <code>headerPress</code> event is fired, when it is pressed.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		headerInteractive: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the <code>ui5-card</code>
		 *
		 * @type {String}
		 * @since 1.0.0-rc.9
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the <code>ui5-card</code>
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_headerActive: {
			type: Boolean,
			noAttribute: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Card.prototype */ {

		/**
		 * Fired when the <code>ui5-card</code> header is activated
		 * by mouse/tap or by using the Enter or Space key.
		 * <br><br>
		 * <b>Note:</b> The event would be fired only if the <code>headerInteractive</code> property is set to true.
		 * @event sap.ui.webcomponents.main.Card#header-click
		 * @public
		 * @since 0.10.0
		 */
		"header-click": {},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-card</code> is a component that represents information in the form of a
 * tile with separate header and content areas.
 * The content area of a <code>ui5-card</code> can be arbitrary HTML content.
 * The header can be used through several properties, such as: <code>heading</code>, <code>subheading</code>, <code>status</code>
 * and two slots: <code>avatar</code> and <code>action</code>.
 *
 * <h3>Keyboard handling</h3>
 * In case you enable <code>headerInteractive</code> property, you can press the <code>ui5-card</code> header by Space and Enter keys.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Card";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Card
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-card
 * @public
 */
class Card extends UI5Element {
	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$l;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$i;
	}

	static get styles() {
		return cardCss;
	}

	get classes() {
		return {
			main: {
				"ui5-card-root": true,
				"ui5-card--nocontent": !this.content.length,
			},
			header: {
				"ui5-card-header": true,
				"ui5-card-header--interactive": this.headerInteractive,
				"ui5-card-header--active": this.headerInteractive && this._headerActive,
			},
		};
	}

	get icon() {
		return !!this.avatar && this.avatar.startsWith("sap-icon://");
	}

	get image() {
		return !!this.avatar && !this.icon;
	}

	get ariaHeaderRole() {
		return this.headerInteractive ? "button" : "heading";
	}

	get ariaLevel() {
		return this.headerInteractive ? undefined : "3";
	}

	get hasHeader() {
		return !!(this.heading || this.subheading || this.status || this.hasAction || this.avatar);
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	get ariaCardRoleDescription() {
		return this.i18nBundle.getText(ARIA_ROLEDESCRIPTION_CARD);
	}

	get ariaCardHeaderRoleDescription() {
		return this.headerInteractive ? this.i18nBundle.getText(ARIA_ROLEDESCRIPTION_INTERACTIVE_CARD_HEADER) : this.i18nBundle.getText(ARIA_ROLEDESCRIPTION_CARD_HEADER);
	}

	get ariaCardAvatarLabel() {
		return this.i18nBundle.getText(AVATAR_TOOLTIP);
	}

	get ariaCardContentLabel() {
		return this.i18nBundle.getText(ARIA_LABEL_CARD_CONTENT);
	}

	get hasAvatar() {
		return !!this.avatar.length;
	}

	get hasAction() {
		return !!this.action.length;
	}

	static get dependencies() {
		return [Icon];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	_headerClick() {
		if (this.headerInteractive) {
			this.fireEvent("header-click");
		}
	}

	_headerKeydown(event) {
		if (!this.headerInteractive) {
			return;
		}

		const enter = isEnter(event);
		const space = isSpace(event);

		this._headerActive = enter || space;

		if (enter) {
			this.fireEvent("header-click");
			return;
		}

		if (space) {
			event.preventDefault();
		}
	}

	_headerKeyup(event) {
		if (!this.headerInteractive) {
			return;
		}

		const space = isSpace(event);

		this._headerActive = false;

		if (space) {
			this.fireEvent("header-click");
		}
	}
}

Card.define();

const tasks = new WeakMap();

class AnimationQueue {
	static get tasks() {
		return tasks;
	}

	static enqueue(element, task) {
		if (!tasks.has(element)) {
			tasks.set(element, []);
		}

		tasks.get(element).push(task);
	}

	static run(element, task) {
		if (!tasks.has(element)) {
			tasks.set(element, []);
		}

		return task().then(() => {
			const elementTasks = tasks.get(element);

			if (elementTasks.length > 0) {
				return AnimationQueue.run(element, elementTasks.shift());
			}
			tasks.delete(element);
		});
	}

	static push(element, task) {
		const elementTasks = tasks.get(element);

		if (elementTasks) {
			AnimationQueue.enqueue(element, task);
		} else {
			AnimationQueue.run(element, task);
		}
	}
}

var animationConfig = {
	defaultDuration: 400,
	element: document.createElement("DIV"),
	identity: () => {},
};

var animate = ({
	beforeStart = animationConfig.identity,
	duration = animationConfig.defaultDuration,
	element = animationConfig.element,
	progress: progressCallback = animationConfig.identity,
}) => {
	let start = null;
	let stopped = false;
	let animationFrame;
	let stop;
	let animate;

	const promise = new Promise((resolve, reject) => {
		animate = timestamp => {
			start = start || timestamp;

			const timeElapsed = timestamp - start;
			const remaining = duration - timeElapsed;

			if (timeElapsed <= duration) {
				const progress = 1 - remaining / duration; // easing formula (currently linear)
				progressCallback(progress);
				animationFrame = !stopped && requestAnimationFrame(animate);
			} else {
				progressCallback(1);
				resolve();
			}
		};

		stop = () => {
			stopped = true;
			cancelAnimationFrame(animationFrame);
			reject(new Error("animation stopped"));
		};
	}).catch(oReason => oReason);

	AnimationQueue.push(element, () => {
		beforeStart();
		requestAnimationFrame(animate);

		return new Promise(resolve => {
			promise.then(() => resolve());
		});
	});

	return {
		promise: () => promise,
		stop: () => stop,
	};
};

var scroll = ({
	element = animationConfig.element,
	duration = animationConfig.duration,
	progress: progressCallback = animationConfig.identity,
	dx = 0,
	dy = 0,
}) => {
	let scrollLeft;
	let scrollTop;

	return animate({
		beforeStart: () => {
			scrollLeft = element.scrollLeft;
			scrollTop = element.scrollTop;
		},
		duration,
		element,
		progress: progress => {
			progressCallback(progress);

			element.scrollLeft = scrollLeft + (progress * dx); // easing - linear
			element.scrollTop = scrollTop + (progress * dy); // easing - linear
		},
	});
};

const scrollEventName = "scroll";
const touchEndEventName = isPhone() ? "touchend" : "mouseup";

class ScrollEnablement extends EventProvider {
	constructor(containerComponent) {
		super();
		this.containerComponent = containerComponent;
		this.mouseMove = this.ontouchmove.bind(this);
		this.mouseUp = this.ontouchend.bind(this);
		this.touchStart = this.ontouchstart.bind(this);

		this.isPhone = isPhone();

		// On Android devices touchmove is thrown one more time than neccessary (together with touchend)
		// so we have to cache the previus coordinates in order to provide correct parameters in the
		// event for Android
		this.cachedValue = {};

		// In components like Carousel you need to know if the user has clicked on something or swiped
		// in order to throw the needed event or not
		this.startX = 0;
		this.startY = 0;

		if (this.isPhone) {
			containerComponent.addEventListener("touchstart", this.touchStart, { passive: true });
			containerComponent.addEventListener("touchmove", this.mouseMove, { passive: true });
			containerComponent.addEventListener("touchend", this.mouseUp, { passive: true });
		} else {
			containerComponent.addEventListener("mousedown", this.touchStart, { passive: true });
		}
	}

	set scrollContainer(container) {
		this._container = container;
	}

	get scrollContainer() {
		return this._container;
	}

	scrollTo(left, top) {
		this._container.scrollLeft = left;
		this._container.scrollTop = top;
	}

	move(dx, dy) {
		return scroll({
			element: this._container,
			dx,
			dy,
		});
	}

	getScrollLeft() {
		return this._container.scrollLeft;
	}

	getScrollTop() {
		return this._container.scrollTop;
	}

	_isTouchInside(touch) {
		const rect = this._container.getBoundingClientRect();
		const x = this.isPhone ? touch.clientX : touch.x;
		const y = this.isPhone ? touch.clientY : touch.y;

		return x >= rect.left && x <= rect.right
			&& y >= rect.top && y <= rect.bottom;
	}

	ontouchstart(event) {
		const touch = this.isPhone ? event.touches[0] : null;

		if (!this.isPhone) {
			document.addEventListener("mouseup", this.mouseUp, { passive: true });
			document.addEventListener("mousemove", this.mouseMove, { passive: true });
		} else {
			// Needed only on mobile
			this.startX = touch.pageX;
			this.startY = touch.pageY;
		}

		this._prevDragX = this.isPhone ? touch.pageX : event.x;
		this._prevDragY = this.isPhone ? touch.pageY : event.y;

		this._canScroll = this._isTouchInside(this.isPhone ? touch : event);
	}

	ontouchmove(event) {
		if (!this._canScroll) {
			return;
		}

		const container = this._container;
		const touch = this.isPhone ? event.touches[0] : null;

		const dragX = this.isPhone ? touch.pageX : event.x;
		const dragY = this.isPhone ? touch.pageY : event.y;

		container.scrollLeft += this._prevDragX - dragX;
		container.scrollTop += this._prevDragY - dragY;

		this.fireEvent(scrollEventName, {
			isLeft: dragX > this._prevDragX,
			isRight: dragX < this._prevDragX,
		});

		this.cachedValue.dragX = this._prevDragX;
		this.cachedValue.dragY = this._prevDragY;

		this._prevDragX = dragX;
		this._prevDragY = dragY;
	}

	ontouchend(event) {
		if (this.isPhone) {
			const deltaX = Math.abs(event.changedTouches[0].pageX - this.startX);
			const deltaY = Math.abs(event.changedTouches[0].pageY - this.startY);

			if (deltaX < 10 && deltaY < 10) {
				return;
			}
		}

		if (!this._canScroll) {
			return;
		}

		const container = this._container;
		const dragX = this.isPhone ? event.changedTouches[0].pageX : event.x;
		const dragY = this.isPhone ? event.changedTouches[0].pageY : event.y;

		container.scrollLeft += this._prevDragX - dragX;
		container.scrollTop += this._prevDragY - dragY;

		const useCachedValues = dragX === this._prevDragX;
		const _dragX = useCachedValues ? this.cachedValue.dragX : dragX;
		// const _dragY = useCachedValues ? this.cachedValue.dragY : dragY; add if needed

		this.fireEvent(touchEndEventName, {
			isLeft: _dragX < this._prevDragX,
			isRight: _dragX > this._prevDragX,
		});

		this._prevDragX = dragX;
		this._prevDragY = dragY;

		if (!this.isPhone) {
			document.removeEventListener("mousemove", this.mouseMove, { passive: true });
			document.removeEventListener("mouseup", this.mouseUp);
		}
	}
}

class NativeResize {
	static initialize() {
		NativeResize.resizeObserver = new window.ResizeObserver(entries => {
			// call attached callbacks
			entries.forEach(entry => {
				const callbacks = NativeResize.observedObjects.get(entry.target);

				callbacks.forEach(el => el());
			});
		});

		NativeResize.observedObjects = new Map();
	}

	static attachListener(ref, callback) {
		const observedDOMs = NativeResize.observedObjects;
		const callbacks = observedDOMs.get(ref) || [];

		// if no callbacks has been added for this ref - start observing it
		if (!callbacks.length) {
			NativeResize.resizeObserver.observe(ref);
		}

		// save the callbacks in an array
		observedDOMs.set(ref, [...callbacks, callback]);
	}

	static detachListener(ref, callback) {
		const callbacks = NativeResize.observedObjects.get(ref) || [];
		const filteredCallbacks = callbacks.filter(fn => fn !== callback);

		if (!callbacks.length || (callbacks.length === filteredCallbacks.length && callbacks.length !== 0)) {
			return;
		}

		NativeResize.observedObjects.set(ref, filteredCallbacks);

		if (!filteredCallbacks.length) {
			NativeResize.resizeObserver.unobserve(ref);
			NativeResize.observedObjects.delete(ref);
		}
	}
}

const INTERVAL = 300;

class CustomResize {
	static initialize() {
		CustomResize.initialized = false;
		CustomResize.resizeInterval = undefined;
		CustomResize.resizeListeners = new Map();
	}

	static attachListener(ref, callback) {
		const observedObject = CustomResize.resizeListeners.get(ref);
		const existingCallbacks = observedObject ? observedObject.callbacks : [];

		CustomResize.resizeListeners.set(ref, {
			width: ref ? ref.offsetWidth : 0,
			height: ref ? ref.offsetHeight : 0,
			callbacks: existingCallbacks.concat(callback),
		});

		CustomResize.initListener();
	}

	static initListener() {
		if (CustomResize.resizeListeners.size > 0 && !CustomResize.initialized) {
			CustomResize.resizeInterval = setInterval(CustomResize.checkListeners.bind(CustomResize), INTERVAL);
		}
	}

	static checkListeners() {
		CustomResize.resizeListeners.forEach((entry, ref) => {
			const changed = CustomResize.checkSizes(entry, ref);

			if (changed || (entry && !entry._hasBeenRendered)) {
				CustomResize.updateSizes(entry, ref.offsetWidth, ref.offsetHeight);
				entry.callbacks.forEach(el => el());
				entry._hasBeenRendered = true;
			}
		});
	}

	static updateSizes(sizes, newWidth, newHeight) {
		sizes.width = newWidth;
		sizes.height = newHeight;
	}

	static checkSizes(entry, ref) {
		const oldHeight = entry.height;
		const oldWidth = entry.width;
		const newHeight = ref.offsetHeight;
		const newWidth = ref.offsetWidth;

		return ((oldHeight !== newHeight) || oldWidth !== newWidth);
	}

	static detachListener(ref, callback) {
		const listenerObject = CustomResize.resizeListeners.get(ref);
		const callbacks = listenerObject ? listenerObject.callbacks : [];
		const filteredCallbacks = callbacks.filter(fn => fn !== callback);

		if (!listenerObject || (callbacks.length === filteredCallbacks.length && callbacks.length !== 0)) {
			return;
		}

		CustomResize.resizeListeners.set(ref, Object.assign(listenerObject, { callbacks: filteredCallbacks }));

		if (!filteredCallbacks.length) {
			listenerObject.callbacks = null;
			CustomResize.resizeListeners.delete(ref);
		}

		if (CustomResize.resizeListeners.size === 0) {
			CustomResize.initialized = false;
			clearInterval(CustomResize.resizeInterval);
		}
	}
}

class ResizeHandler {
	static initialize() {
		ResizeHandler.Implementation = window.ResizeObserver ? NativeResize : CustomResize;
		ResizeHandler.Implementation.initialize();
	}

	/**
	 * @static
	 * @private
	 * @param {*} ref Reference to be observed
	 * @param {*} callback Callback to be executed
	 * @memberof ResizeHandler
	 */
	static attachListener(ref, callback) {
		ResizeHandler.Implementation.attachListener.call(ResizeHandler.Implementation, ref, callback);
	}

	/**
	 * @static
	 * @private
	 * @param {*} ref Reference to be unobserved
	 * @memberof ResizeHandler
	 */
	static detachListener(ref, callback) {
		ResizeHandler.Implementation.detachListener.call(ResizeHandler.Implementation, ref, callback);
	}


	/**
	 * @static
	 * @public
	 * @param {*} ref Reference to a UI5 Web Component or DOM Element to be observed
	 * @param {*} callback Callback to be executed
	 * @memberof ResizeHandler
	 */
	static register(ref, callback) {
		if (ref.isUI5Element) {
			ref = ref.getDomRef();
		}

		ResizeHandler.attachListener(ref, callback);
	}


	/**
	 * @static
	 * @public
	 * @param {*} ref Reference to UI5 Web Component or DOM Element to be unobserved
	 * @memberof ResizeHandler
	 */
	static deregister(ref, callback) {
		if (ref.isUI5Element) {
			ref = ref.getDomRef();
		}

		ResizeHandler.detachListener(ref, callback);
	}
}

ResizeHandler.initialize();

const AnimationMode = {
	Full: "full",
	Basic: "basic",
	Minimal: "minimal",
	None: "none",
};

let animationMode;

const getAnimationMode$1 = () => {
	if (animationMode === undefined) {
		animationMode = getAnimationMode();
	}

	return animationMode;
};

const setAnimationMode = newAnimationMode => {
	if (Object.values(AnimationMode).includes(newAnimationMode)) {
		animationMode = newAnimationMode;
	}
};

/**
 * @lends sap.ui.webcomponents.main.types.CarouselArrowsPlacement.prototype
 * @public
 */
const CarouselArrowsPlacementTypes = {
	/**
	 * Carousel arrows are placed on the sides of the current Carousel page.
	 * @public
	 * @type {Default}
	 */
	Content: "Content",

	/**
	 * Carousel arrows are placed on the sides of the page indicator of the Carousel.
	 * @public
	 * @type {Positive}
	 */
	Navigation: "Navigation",
};

/**
 * @class
 * Different types of Arrow Placement for <code>ui5-carousel</code>.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.CarouselArrowsPlacement
 * @public
 * @enum {string}
 */
class CarouselArrowsPlacement extends DataType {
	static isValid(value) {
		return !!CarouselArrowsPlacementTypes[value];
	}
}

CarouselArrowsPlacement.generataTypeAcessors(CarouselArrowsPlacementTypes);

const block0$j = (context) => { return scopedHtml`<section class="ui5-carousel-root" tabindex="0" role="listbox" aria-activedescendant="${ifDefined(context.ariaActiveDescendant)}" @keydown=${context._onkeydown}><div class="ui5-carousel-viewport ${classMap(context.classes.viewport)}"><div class="${classMap(context.classes.content)}" style="${styleMap(context.styles.content)}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block1$f(item)) }</div></div>${ context.arrows.content ? block2$e(context) : undefined }${ context.showNavigationArrows ? block3$a(context) : undefined }</div></section>`; };
const block1$f = (item, index, context) => { return scopedHtml`<div id="${ifDefined(item.id)}" class="ui5-carousel-item ${ifDefined(item.classes)}" style="width: ${ifDefined(item.width)}px;" role="option" aria-posinset="${ifDefined(item.posinset)}" aria-setsize="${ifDefined(item.setsize)}"><slot name="${ifDefined(item.item._individualSlot)}" tabindex="${ifDefined(item.tabIndex)}"></slot></div>`; };
const block2$e = (context) => { return scopedHtml`<div class="ui5-carousel-navigation-arrows"><ui5-button arrow-back class="ui5-carousel-navigation-button ${classMap(context.classes.navPrevButton)}" icon="slim-arrow-left" tabindex="-1" @click=${context.navigateLeft}></ui5-button><ui5-button arrow-forward class="ui5-carousel-navigation-button ${classMap(context.classes.navNextButton)}" icon="slim-arrow-right" tabindex="-1" @click=${context.navigateRight}></ui5-button></div>`; };
const block3$a = (context) => { return scopedHtml`<div class="${classMap(context.classes.navigation)}">${ context.arrows.navigation ? block4$9(context) : undefined }<div class="ui5-carousel-navigation">${ context.isPageTypeDots ? block5$8(context) : block7$3(context) }</div>${ context.arrows.navigation ? block8$3(context) : undefined }</div>`; };
const block4$9 = (context) => { return scopedHtml`<ui5-button arrow-back class="ui5-carousel-navigation-button ${classMap(context.classes.navPrevButton)}" icon="slim-arrow-left" tabindex="-1" @click=${context.navigateLeft}></ui5-button>`; };
const block5$8 = (context) => { return scopedHtml`${ repeat(context.dots, (item, index) => item._id || index, (item, index) => block6$5(item)) }`; };
const block6$5 = (item, index, context) => { return scopedHtml`<div role="img" aria-label="${ifDefined(item.ariaLabel)}" ?active="${item.active}" class="ui5-carousel-navigation-dot"></div>`; };
const block7$3 = (context) => { return scopedHtml`<ui5-label>${ifDefined(context.selectedIndexToShow)}&nbsp;${ifDefined(context.ofText)}&nbsp;${ifDefined(context.pagesCount)}</ui5-label>`; };
const block8$3 = (context) => { return scopedHtml`<ui5-button arrow-forward class="ui5-carousel-navigation-button ${classMap(context.classes.navNextButton)}" icon="slim-arrow-right" tabindex="-1" @click=${context.navigateRight}></ui5-button>`; };


const main$j = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$j(context);
};

const name$4 = "slim-arrow-left";
const pathData$4 = "M351.5 421q12 12 0 23-5 5-11 5t-11-5l-166-165q-9-10-9-23t9-23l165-164q5-5 11.5-5t11.5 5 5 11-5 11l-159 159q-6 6 0 12z";
const ltr$4 = false;

registerIcon(name$4, { pathData: pathData$4, ltr: ltr$4});

const name$5 = "slim-arrow-right";
const pathData$5 = "M357.5 233q10 10 10 23t-10 23l-165 165q-12 11-23 0t0-23l160-159q6-6 0-12l-159-159q-5-5-5-11t5-11 11-5 11 5z";
const ltr$5 = false;

registerIcon(name$5, { pathData: pathData$5, ltr: ltr$5});

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var CarouselCss = ":host(:not([hidden])){display:inline-block}:host{width:100%;min-width:15.5rem;height:100%}.ui5-carousel-root:focus{outline:1px dotted var(--sapContent_FocusColor)}.ui5-carousel-root{height:inherit;position:relative;display:flex;flex-direction:column;align-items:center}.ui5-carousel-viewport{width:100%;height:inherit;position:relative;display:flex;flex-direction:column;align-items:flex-start;overflow:hidden}.ui5-carousel-viewport.ui5-carousel-viewport--single{align-items:center}.ui5-carousel-content{height:100%;position:relative;display:flex;flex-direction:row;flex-wrap:nowrap;background:var(--sapBackgroundColor);transition:transform .5s cubic-bezier(.46,0,.44,1);will-change:transform}.ui5-carousel-content.ui5-carousel-content-no-animation{transition:none}.ui5-carousel-content.ui5-carousel-content-has-navigation{height:calc(100% - 2.75rem)}.ui5-carousel-content.ui5-carousel-content-has-navigation.ui5-carousel-content-has-navigation-and-buttons{height:calc(100% - 3.5rem)}.ui5-carousel-item{height:100%;display:flex;align-items:center;justify-content:center;padding:0 .75rem;box-sizing:border-box;transition:visibility .5s linear;will-change:visibility}.ui5-carousel-item--hidden{visibility:hidden}.ui5-carousel-navigation-arrows{width:100%;padding:0 1.5rem;position:absolute;top:calc(50% - 2.5rem);left:0;display:flex;justify-content:space-between;box-sizing:border-box;pointer-events:none}.ui5-carousel-navigation-arrows>[ui5-button]{pointer-events:all}.ui5-carousel-navigation-wrapper{width:100%;height:2.75rem;display:flex;flex-wrap:nowrap;justify-content:center;align-items:center;background:var(--sapPageFooter_Background);border-top:1px solid var(--sapPageFooter_BorderColor)}.ui5-carousel-navigation-wrapper.ui5-carousel-navigation-with-buttons{height:3.5rem}.ui5-carousel-navigation-button{width:var(--ui5_carousel_button_size);height:var(--ui5_carousel_button_size);border-radius:50%;box-shadow:none;cursor:pointer;outline-offset:.1rem}.ui5-carousel-navigation-button--hidden{visibility:hidden;padding:0}.ui5-carousel-navigation{width:9rem;height:2rem;display:flex;justify-content:center;align-items:center}.ui5-carousel-navigation-dot{width:var(--ui5_carousel_width);height:var(--ui5_carousel_height);margin:var(--ui5_carousel_margin);border-radius:50%;background-color:var(--ui5_carousel_dot_background);border:var(--ui5_carousel_dot_border);transition:background-color .1s ease-in}.ui5-carousel-navigation-dot[active]{width:.5rem;height:.5rem;margin:0 .25rem;background-color:var(--sapSelectedColor);border:var(--ui5_carousel_dot_border)}";

/**
 * @public
 */
const metadata$m = {
	tag: "ui5-carousel",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Carousel.prototype */ {
		/**
		 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		cyclic: {
			type: Boolean,
		},

		/**
		 * Sets the number of items per page on small size (up to 640px). One item per page shown by default.
		 * @type {Integer}
		 * @defaultvalue 1
		 * @public
		 */
		itemsPerPageS: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * Sets the number of items per page on medium size (from 640px to 1024px). One item per page shown by default.
		 * @type {Integer}
		 * @defaultvalue 1
		 * @public
		 */
		itemsPerPageM: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * Sets the number of items per page on large size (more than 1024px). One item per page shown by default.
		 * @type {Integer}
		 * @defaultvalue 1
		 * @public
		 */
		itemsPerPageL: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * If set to true the navigation is hidden.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		hideNavigation: {
			type: Boolean,
		},

		/**
		 * Defines the index of the initially selected item.
		 * @type {Integer}
		 * @defaultvalue 0
		 * @public
		 */
		selectedIndex: {
			type: Integer,
			defaultValue: 0,
		},

		/**
		 * Defines when the <code>load-more</code> event is thrown. If not applied the event will not be thrown.
		 * @type {Integer}
		 * @defaultvalue 1
		 * @public
		 * @since 1.0.0-rc.8
		 */
		infiniteScrollOffset: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * Defines the position of arrows.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Content</code></li>
		 * <li><code>Navigation</code></li>
		 * </ul>
		 * <br>
		 * When set to "Content", the arrows are placed on the sides of the current page.
		 * <br>
		 * When set to "Navigation", the arrows are placed on the sides of the page indicator.
		 * @type {CarouselArrowsPlacement}
		 * @defaultvalue "Content"
		 * @public
		 */
		arrowsPlacement: {
			type: CarouselArrowsPlacement,
			defaultValue: CarouselArrowsPlacement.Content,
		},

		/**
		 * Defines the carousel width in pixels
		 * @private
		 */
		_width: {
			type: Integer,
		},

		/**
		 * Defines the carousel item width in pixels
		 * @private
		 */
		_itemWidth: {
			type: Integer,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Carousel.prototype */ {
		/**
		 * Defines the content of the <code>ui5-carousel</code>.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "content",
			type: HTMLElement,
			individualSlots: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Carousel.prototype */ {

		/**
		 * Fired whenever the <code>selectedIndex</code> changes due to user interaction,
		 * when the user clicks on the navigation arrows or while resizing,
		 * based on the <code>items-per-page-l</code>, <code>items-per-page-m</code> and <code>items-per-page-s</code> properties.
		 *
		 * @event
		 * @param {Integer} selectedIndex the current <code>selectedIndex</code>.
		 * @public
		 * @since 1.0.0-rc.7
		 */
		navigate: {
			detail: {
				selectedIndex: { type: Integer },
			},
		},

		/**
		 * Fired for the last items of the <code>ui5-carousel</code> if it is scrolled and the direction of scrolling is to the end.
		 * The number of items for which the event is thrown is controlled by the <code>infiniteScrollOffset</code> property.
		 * @event sap.ui.webcomponents.main.Carousel#load-more
		 * @public
		 * @since 1.0.0-rc.8
		 */
		"load-more": {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The carousel allows the user to browse through a set of items by swiping right or left.
 * The component is mostly used for showing a gallery of images, but can hold any other HTML element.
 *
 * <h3>Usage</h3>
 *
 * When to use
 *
 * - The items you want to display are very different from each other.
 * - You want to display the items one after the other.
 * When not to use
 *
 * - The items you want to display need to be visible at the same time.
 * - The items you want to display are uniform and very similar
 *
 * For the <code>ui5-carousel</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/Carousel.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Carousel
 * @extends UI5Element
 * @tagname ui5-carousel
 * @since 1.0.0-rc.6
 * @public
 */
class Carousel extends UI5Element {
	static get metadata() {
		return metadata$m;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return CarouselCss;
	}

	static get template() {
		return main$j;
	}

	static get pageTypeLimit() {
		return 9;
	}

	constructor() {
		super();

		this._scrollEnablement = new ScrollEnablement(this);
		this._scrollEnablement.attachEvent("touchend", event => {
			this._updateScrolling(event);
		});

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
		this._onResizeBound = this._onResize.bind(this);
		this._resizing = false; // indicates if the carousel is in process of resizing
	}

	onBeforeRendering() {
		this.validateSelectedIndex();
	}

	onAfterRendering() {
		this._scrollEnablement.scrollContainer = this.getDomRef();
		this._resizing = false; // not invalidating
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._onResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this._onResizeBound);
	}

	validateSelectedIndex() {
		if (!this.isIndexInRange(this.selectedIndex)) {
			this.selectedIndex = 0;
			console.warn(`The "selectedIndex" is out of range, changed to: ${0}`); // eslint-disable-line
		}
	}

	_onResize() {
		const previousItemsPerPage = this.effectiveItemsPerPage;

		// Set the resizing flag to suppress animation while resizing
		this._resizing = true;

		// Change transitively effectiveItemsPerPage by modifying _width
		this._width = this.offsetWidth;
		this._itemWidth = Math.floor(this._width / this.effectiveItemsPerPage);

		// Items per page did not change or the current,
		// therefore page index does not need to be re-adjusted
		if (this.effectiveItemsPerPage === previousItemsPerPage) {
			return;
		}

		if (this.selectedIndex > this.pagesCount - 1) {
			this.selectedIndex = this.pagesCount - 1;
			this.fireEvent("navigate", { selectedIndex: this.selectedIndex });
		}
	}

	_updateScrolling(event) {
		if (!event) {
			return;
		}

		if (event.isLeft) {
			this.navigateLeft();
		} else if (event.isRight) {
			this.navigateRight();
		}
	}

	_onkeydown(event) {
		if (event.target !== this.getDomRef()) {
			return;
		}

		if (isLeft(event) || isDown(event)) {
			this.navigateLeft();
		} else if (isRight(event) || isUp(event)) {
			this.navigateRight();
		}
	}

	navigateLeft() {
		this._resizing = false;

		const peviousSelectedIndex = this.selectedIndex;

		if (this.selectedIndex - 1 < 0) {
			if (this.cyclic) {
				this.selectedIndex = this.pagesCount - 1;
			}
		} else {
			--this.selectedIndex;
		}

		if (peviousSelectedIndex !== this.selectedIndex) {
			this.fireEvent("navigate", { selectedIndex: this.selectedIndex });
		}
	}

	navigateRight() {
		this._resizing = false;

		const peviousSelectedIndex = this.selectedIndex;

		if (this.selectedIndex + 1 > this.pagesCount - 1) {
			if (this.cyclic) {
				this.selectedIndex = 0;
			} else {
				return;
			}
		} else {
			++this.selectedIndex;
		}

		if (peviousSelectedIndex !== this.selectedIndex) {
			this.fireEvent("navigate", { selectedIndex: this.selectedIndex });
		}

		if (this.pagesCount - this.selectedIndex <= this.infiniteScrollOffset + 1) {
			this.fireEvent("load-more");
		}
	}

	/**
	 * Assuming that all items have the same width
	 * @private
	 */
	get items() {
		return this.content.map((item, idx) => {
			return {
				id: `${this._id}-carousel-item-${idx + 1}`,
				item,
				tabIndex: idx === this.selectedIndex ? "0" : "-1",
				posinset: idx + 1,
				setsize: this.content.length,
				width: this._itemWidth,
				classes: this.isItemInViewport(idx) ? "" : "ui5-carousel-item--hidden",
			};
		});
	}

	get effectiveItemsPerPage() {
		if (this._width <= 640) {
			return this.itemsPerPageS;
		}

		if (this._width <= 1024) {
			return this.itemsPerPageM;
		}

		return this.itemsPerPageL;
	}

	isItemInViewport(index) {
		return index >= this.selectedIndex && index <= this.selectedIndex + this.effectiveItemsPerPage - 1;
	}

	isIndexInRange(index) {
		return index >= 0 && index <= this.pagesCount - 1;
	}

	get styles() {
		return {
			content: {
				transform: `translateX(${this._isRTL ? "" : "-"}${this.selectedIndex * this._itemWidth}px`,
			},
		};
	}

	get classes() {
		return {
			viewport: {
				"ui5-carousel-viewport--single": this.pagesCount === 1,
			},
			content: {
				"ui5-carousel-content": true,
				"ui5-carousel-content-no-animation": this.supressAimation,
				"ui5-carousel-content-has-navigation": this.showNavigationArrows,
				"ui5-carousel-content-has-navigation-and-buttons": this.showNavigationArrows && this.arrowsPlacement === CarouselArrowsPlacement.Navigation,
			},
			navigation: {
				"ui5-carousel-navigation-wrapper": true,
				"ui5-carousel-navigation-with-buttons": this.showNavigationArrows && this.arrowsPlacement === CarouselArrowsPlacement.Navigation,
			},
			navPrevButton: {
				"ui5-carousel-navigation-button--hidden": !this.hasPrev,
			},
			navNextButton: {
				"ui5-carousel-navigation-button--hidden": !this.hasNext,
			},
		};
	}

	get pagesCount() {
		const items = this.content.length;
		return items > this.effectiveItemsPerPage ? items - this.effectiveItemsPerPage + 1 : 1;
	}

	get isPageTypeDots() {
		return this.pagesCount < Carousel.pageTypeLimit;
	}

	get dots() {
		const dots = [];
		const pages = this.pagesCount;

		for (let index = 0; index < pages; index++) {
			dots.push({
				active: index === this.selectedIndex,
				ariaLabel: this.i18nBundle.getText(CAROUSEL_DOT_TEXT, [index + 1], [pages]),
			});
		}

		return dots;
	}

	get arrows() {
		const showArrows = this.showNavigationArrows && isDesktop();

		return {
			content: showArrows && this.arrowsPlacement === CarouselArrowsPlacement.Content,
			navigation: showArrows && this.arrowsPlacement === CarouselArrowsPlacement.Navigation,
		};
	}

	get hasPrev() {
		return this.cyclic || this.selectedIndex - 1 >= 0;
	}

	get hasNext() {
		return this.cyclic || this.selectedIndex + 1 <= this.pagesCount - 1;
	}

	get supressAimation() {
		return this._resizing || getAnimationMode$1() === AnimationMode.None;
	}

	get _isRTL() {
		return this.effectiveDir === "rtl";
	}

	get selectedIndexToShow() {
		return this._isRTL ? this.pagesCount - (this.pagesCount - this.selectedIndex) + 1 : this.selectedIndex + 1;
	}

	get showNavigationArrows() {
		return !this.hideNavigation && this.pagesCount > 1;
	}

	get ofText() {
		return this.i18nBundle.getText(CAROUSEL_OF_TEXT);
	}

	get ariaActiveDescendant() {
		return this.content.length ? `${this._id}-carousel-item-${this.selectedIndex + 1}` : undefined;
	}

	static get dependencies() {
		return [
			Button,
			Label,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Carousel.define();

const name$6 = "slim-arrow-down";
const pathData$6 = "M420.5 187q11-12 23 0 5 5 5 11t-5 11l-165 165q-10 9-23 9t-22-9l-166-165q-5-5-5-11.5t5-11.5 11.5-5 11.5 5l160 160q5 6 11 0z";
const ltr$6 = false;

registerIcon(name$6, { pathData: pathData$6, ltr: ltr$6});

const escapeReg = /[[\]{}()*+?.\\^$|]/g;

const escapeRegExp = str => {
	return str.replace(escapeReg, "\\$&");
};

const StartsWith = (value, items) => {
	return items.filter(item => {
		const lowerText = item.text.toLowerCase();

		return lowerText.startsWith(value.toLowerCase());
	});
};

const StartsWithPerTerm = (value, items) => {
	const reg = new RegExp(`(^|\\s)${escapeRegExp(value.toLowerCase())}.*`, "g");

	return items.filter(item => {
		reg.lastIndex = 0;

		return reg.test(item.text.toLowerCase());
	});
};

const Contains = (value, items) => {
	return items.filter(item => {
		const lowerText = item.text.toLowerCase();

		return lowerText.includes(value.toLowerCase());
	});
};

var Filters = /*#__PURE__*/Object.freeze({
  __proto__: null,
  StartsWithPerTerm: StartsWithPerTerm,
  StartsWith: StartsWith,
  Contains: Contains
});

const block0$k = (context) => { return scopedHtml`<div class="ui5-combobox-root">${ context.hasValueState ? block1$g(context) : undefined }<input id="ui5-combobox-input" .value="${ifDefined(context._tempValue)}" inner-input placeholder="${ifDefined(context.placeholder)}" ?disabled=${context.disabled} ?readonly=${context.readonly} ?required=${context.required} value-state="${ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @click=${context._click} @keydown="${context._keydown}" @focusin="${context._focusin}" @focusout="${context._focusout}" aria-expanded="${ifDefined(context.open)}" role="combobox" aria-haspopup="listbox" aria-autocomplete="both" aria-describedby="${ifDefined(context.valueStateTextId)}" aria-label="${ifDefined(context.ariaLabelText)}" />${ context.icon ? block2$f() : undefined }${ !context.readonly ? block3$b(context) : undefined }</div>`; };
const block1$g = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`; };
const block2$f = (context) => { return scopedHtml`<slot name="icon"></slot>`; };
const block3$b = (context) => { return scopedHtml`<ui5-icon name="slim-arrow-down" slot="icon" tabindex="-1" input-icon ?pressed="${context._iconPressed}" @click="${context._arrowClick}" dir="${ifDefined(context.effectiveDir)}" accessible-name="${ifDefined(context._iconAccessibleNameText)}"></ui5-icon>`; };


const main$k = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$k(context);
};

const block0$l = (context) => { return scopedHtml`<ui5-responsive-popover no-arrow content-only-on-desktop _disable-initial-focus placement-type="Bottom" horizontal-align="Left" @ui5-after-open=${ifDefined(context._afterOpenPopover)} @ui5-after-close=${ifDefined(context._afterClosePopover)}><ui5-busyindicator ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></ui5-busyindicator><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></ui5-button></div><div class="row"><div class="input-root-phone" value-state="${ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${ifDefined(context._tempValue)}" inner-input placeholder="${ifDefined(context.placeholder)}" value-state="${ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block1$h(context) : undefined }</div>${ !context._isPhone ? block5$9(context) : undefined }<ui5-list separators="None" @ui5-item-click=${ifDefined(context._selectItem)} @ui5-item-focused=${ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block10$3(item)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">OK</ui5-button></div></ui5-responsive-popover>${ context.shouldOpenValueStateMessagePopover ? block11$2(context) : undefined }`; };
const block1$h = (context) => { return scopedHtml`<div class="row ${classMap(context.classes.popoverValueState)}">${ context.shouldDisplayDefaultValueStateMessage ? block2$g(context) : block3$c(context) }</div>`; };
const block2$g = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block3$c = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block4$a(item)) }`; };
const block4$a = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block5$9 = (context) => { return scopedHtml`${ context.hasValueStateText ? block6$6(context) : undefined }`; };
const block6$6 = (context) => { return scopedHtml`<div class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.suggestionPopoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block7$4(context) : block8$4(context) }</div>`; };
const block7$4 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block8$4 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block9$3(item)) }`; };
const block9$3 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block10$3 = (item, index, context) => { return scopedHtml`<ui5-li type="Active" ._tabIndex=${ifDefined(item.itemTabIndex)} .mappedItem=${ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${ifDefined(item.text)}</ui5-li>`; };
const block11$2 = (context) => { return scopedHtml`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block12$2(context) : block13$2(context) }</div></ui5-popover>`; };
const block12$2 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block13$2 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block14$2(item)) }`; };
const block14$2 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };


const main$l = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$l(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ComboBoxCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{width:var(--_ui5_input_width);min-width:var(--_ui5_input_width);height:var(--_ui5_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);font-style:normal;background-color:var(--sapField_Background);border:1px solid var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}:host([focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-3px}:host([value-state]:not([value-state=None])[focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}.ui5-input-root{width:100%;height:100%;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit}:host([disabled]){opacity:var(--_ui5_input_disabled_opacity);cursor:default;pointer-events:none;background:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor)}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5_input_inner_padding_with_icon)}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]:-ms-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]:-ms-input-placeholder{visibility:hidden}[inner-input]:-ms-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit}:host([readonly]){border-color:var(--sapField_ReadOnly_BorderColor);background:var(--sapField_ReadOnly_Background)}:host(:not([value-state]):not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state=None]:not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state]:not([value-state=None])){border-width:var(--_ui5_input_state_border_width)}:host([value-state=Error]) [inner-input],:host([value-state=Warning]) [inner-input]{font-style:var(--_ui5_input_error_warning_font_style)}:host([value-state=Error]) [inner-input]{font-weight:var(--_ui5_input_error_font_weight)}:host([value-state=Error]:not([readonly])){background-color:var(--sapField_InvalidBackground);border-color:var(--sapField_InvalidColor)}:host([value-state=Error]:not([readonly]):not([disabled])),:host([value-state=Information]:not([readonly]):not([disabled])),:host([value-state=Warning]:not([readonly]):not([disabled])){border-style:var(--_ui5_input_error_warning_border_style)}:host([value-state=Warning]:not([readonly])){background-color:var(--sapField_WarningBackground);border-color:var(--sapField_WarningColor)}:host([value-state=Success]:not([readonly])){background-color:var(--sapField_SuccessBackground);border-color:var(--sapField_SuccessColor);border-width:1px}:host([value-state=Information]:not([readonly])){background-color:var(--sapField_InformationBackground);border-color:var(--sapField_InformationColor);border-width:var(--_ui5-input-information_border_width)}[inner-input]::-ms-clear{height:0;width:0}.ui5-input-icon-root{min-width:var(--_ui5_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot=icon]){padding:var(--_ui5_input_icon_padding)}[input-icon]{color:var(--sapContent_IconColor);cursor:pointer;outline:none;padding:var(--_ui5_input_icon_padding);border-left:1px solid transparent;min-width:1rem;min-height:1rem}[input-icon][pressed]{background:var(--sapButton_Selected_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:not([pressed]):not(:active):hover{background:var(--sapButton_Lite_Hover_Background)}[input-icon]:hover{border-left:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]:hover{border-left:none;border-right:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]{border-left:none;border-right:1px solid transparent}.ui5-combobox-root{display:flex;overflow:hidden;width:100%;height:100%}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ComboBoxPopoverCss = ".ui5-combobox-busy{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);z-index:42;width:100%;height:100%;display:flex;justify-content:center;align-items:center;pointer-events:all}.ui5-combobox-busy:not([active]){display:none}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ResponsivePopoverCommonCss = ".input-root-phone{flex:1;height:var(--_ui5_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);background-color:var(--sapField_Background);border:1px solid var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}.input-root-phone [inner-input]{padding:0 .5rem;width:100%;height:100%}.input-root-phone[value-state]:not([value-state=None])[focused]{outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}.input-root-phone [value-state=Error] [input-icon][data-ui5-compact-size],.input-root-phone [value-state=Success] [input-icon][data-ui5-compact-size],.input-root-phone [value-state=Warning] [input-icon][data-ui5-compact-size]{padding:.1875rem .5rem}[inner-input]{background:transparent;color:inherit;border:none;font-style:normal;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit}[inner-input]::-moz-selection,[inner-input]::selection{background:var(--sapSelected);color:var(--sapContent_contrastTextColor)}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}[inner-input]:-ms-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.input-root-phone[value-state]:not([value-state=None]){border-width:var(--_ui5_input_state_border_width)}.input-root-phone[value-state=Error] [inner-input],.input-root-phone[value-state=Warning] [inner-input]{font-style:var(--_ui5_input_error_warning_font_style)}.input-root-phone[value-state=Error] [inner-input]{font-weight:var(--_ui5_input_error_font_weight)}.input-root-phone[value-state=Error]:not([readonly]){background-color:var(--sapField_InvalidBackground);border-color:var(--sapField_InvalidColor)}.input-root-phone[value-state=Error]:not([readonly]):not([disabled]),.input-root-phone[value-state=Warning]:not([readonly]):not([disabled]){border-style:var(--_ui5_input_error_warning_border_style)}.input-root-phone[value-state=Warning]:not([readonly]){background-color:var(--sapField_WarningBackground);border-color:var(--sapField_WarningColor)}.input-root-phone[value-state=Success]:not([readonly]){background-color:var(--sapField_SuccessBackground);border-color:var(--sapField_SuccessColor)}[inner-input]::-ms-clear{height:0;width:0}.ui5-multi-combobox-toggle-button{margin-left:.5rem}.ui5-responsive-popover-header{width:100%;min-height:2.5rem;display:flex;flex-direction:column}.ui5-responsive-popover-header-text{display:flex;align-items:center;width:calc(100% - var(--_ui5_button_base_min_width))}.ui5-responsive-popover-header .row{box-sizing:border-box;padding:.25rem 1rem;min-height:2.5rem;display:flex;justify-content:center;align-items:center;font-size:var(--sapFontHeader5Size)}.ui5-responsive-popover-footer{display:flex;justify-content:flex-end;padding:.25rem;width:100%}.ui5-responsive-popover-close-btn{position:absolute;right:1rem}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var valueStateMessageStyles = ".ui5-valuestatemessage-popover{min-height:1rem;box-shadow:none}.ui5-valuestatemessage-root{box-sizing:border-box;display:inline-block;color:var(--sapUiBaseColor);font-size:var(--sapFontSmallSize);font-family:\"72override\",var(--sapFontFamily);padding:.3rem .625rem;overflow:hidden;text-overflow:ellipsis;min-width:6.25rem;border:var(--_ui5_value_state_message_border)}.ui5-valuestatemessage--success{background:var(--sapSuccessBackground)}.ui5-valuestatemessage--warning{background:var(--sapWarningBackground)}.ui5-valuestatemessage--error{background:var(--sapErrorBackground)}.ui5-valuestatemessage--information{background:var(--sapInformationBackground)}";

const block0$m = (context) => { return scopedHtml``; };


const main$m = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$m();
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ComboBoxItemCss = "";

/**
 * @public
 */
const metadata$n = {
	tag: "ui5-cb-item",
	properties: /** @lends  sap.ui.webcomponents.main.ComboBoxItem.prototype */ {
		/**
		 * Defines the text of the <code>ui5-cb-item</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: { type: String },
	},
	slots: {
		//
	},
	events: {
		//
	},
};

/**
 * @class
 * The <code>ui5-cb-item</code> represents the item for a <code>ui5-combobox</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ComboBoxItem
 * @extends UI5Element
 * @tagname ui5-cb-item
 * @public
 */
class ComboBoxItem extends UI5Element {
	static get metadata() {
		return metadata$n;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ComboBoxItemCss;
	}

	static get template() {
		return main$m;
	}
}

ComboBoxItem.define();

/**
 * @public
 */
const metadata$o = {
	tag: "ui5-combobox",
	languageAware: true,
	defaultSlot: "items",
	properties: /** @lends sap.ui.webcomponents.main.ComboBox.prototype */ {
		/**
		 * Defines the value of the <code>ui5-combobox</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Defines the "live" value of the <code>ui5-combobox</code>.
		 * <br><br>
		 * <b>Note:</b> The property is updated upon typing.
		 *
		 * <br><br>
		 * <b>Note:</b> Initially the filter value is synced with value.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		filterValue: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Defines a short hint intended to aid the user with data entry when the
		 * <code>ui5-combobox</code> has no value.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		placeholder: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Defines whether <code>ui5-combobox</code> is in disabled state.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-combobox</code> is completely uninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the value state of the <code>ui5-combobox</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines whether the <code>ui5-combobox</code> is readonly.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-combobox</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-combobox</code> is required.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Indicates whether a loading indicator should be shown in the picker.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		loading: {
			type: Boolean,
		},

		/**
		 * Defines the filter type of the <code>ui5-combobox</code>.
		 * Available options are: <code>StartsWithPerTerm</code>, <code>StartsWith</code> and <code>Contains</code>.
		 *
		 * @type {string}
		 * @defaultvalue "StartsWithPerTerm"
		 * @public
		 */
		filter: {
			type: String,
			defaultValue: "StartsWithPerTerm",
		},

		/**
		 * Indicates whether the input is focssed
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the combo box
		 * @type {String}
		 * @defaultvalue: ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Receives id(or many ids) of the elements that label the combo box
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_iconPressed: {
			type: Boolean,
			noAttribute: true,
		},

		_tempValue: {
			type: String,
			defaultValue: "",
		},

		_filteredItems: {
			type: Object,
		},

		_listWidth: {
			type: Integer,
			defaultValue: 0,
			noAttribute: true,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.ComboBox.prototype */ {
		/**
		 * Defines the <code>ui5-combobox</code> items.
		 * <br><br>
		 * Example: <br>
		 * &lt;ui5-combobox><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-li>Item #1&lt;/ui5-li><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-li>Item #2&lt;/ui5-li><br>
		 * &lt;/ui5-combobox>
		 * <br> <br>
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
			listenFor: { include: ["*"] },
		},

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-combobox</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-select</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.9
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},

		/**
		 * Defines the icon to be displayed in the input field.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 * @since 1.0.0-rc.9
		 */
		icon: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.ComboBox.prototype */ {
		/**
		 * Fired when the input operation has finished by pressing Enter, focusout or an item is selected.
		 *
		 * @event
		 * @public
		 */
		change: {},

		/**
		 * Fired when typing in input.
		 * <br><br>
		 * <b>Note:</b> filterValue property is updated, input is changed.
		 * @event
		 * @public
		 */
		input: {},

		/**
		 * Fired when selection is changed by user interaction
		 *
		 * @event sap.ui.webcomponents.main.Combobox#selection-change
		 * @param {HTMLElement} item item to be selected.
		 * @public
		 */
		"selection-change": {
			detail: {
				item: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-combobox</code> component represents a drop-down menu with a list of the available options and a text input field to narrow down the options.
 *
 * It is commonly used to enable users to select one or more options from a predefined list.
 * <h3>Structure</h3>
 * The <code>ui5-combobox</code> consists of the following elements:
 * <ul>
 * <li> Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.
 * <li> Drop-down arrow - expands\collapses the option list.</li>
 * <li> Option list - the list of available options.</li>
 * </ul>
 * <h3>Keyboard Handling</h3>
 *
 * The <code>ui5-combobox</code> provides advanced keyboard handling.
 *
 * <h4>Picker</h4>
 * If the <code>ui5-combobox</code> is focused,
 * you can open or close the drop-down by pressing <code>F4</code>, <code>ALT+UP</code> or <code>ALT+DOWN</code> keys.
 * <br>
 *
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/ComboBox";</code>
 *
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ComboBox
 * @extends UI5Element
 * @tagname ui5-combobox
 * @appenddocs ComboBoxItem
 * @public
 * @since 1.0.0-rc.6
 */
class ComboBox extends UI5Element {
	static get metadata() {
		return metadata$o;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ComboBoxCss;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles, ComboBoxPopoverCss];
	}

	static get template() {
		return main$k;
	}

	static get staticAreaTemplate() {
		return main$l;
	}

	constructor(props) {
		super(props);

		this._filteredItems = [];
		this._initialRendering = true;
		this._itemFocused = false;
		this._tempFilterValue = "";
		this._selectionChanged = false;
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		let domValue;

		if (this._initialRendering) {
			domValue = this.value;
			this._filteredItems = this.items;
		} else {
			domValue = this.filterValue;
		}

		if (this._autocomplete && domValue !== "") {
			const item = this._autoCompleteValue(domValue);

			if (!this._selectionChanged && (item && !item.selected)) {
				this.fireEvent("selection-change", {
					item,
				});

				this._selectionChanged = false;
			}
		} else {
			this._tempValue = domValue;
		}

		if (!this._initialRendering && this.popover && document.activeElement === this && !this._filteredItems.length) {
			this.popover.close();
		}

		this._selectMatchingItem();

		if (this._isKeyNavigation && this.responsivePopover && this.responsivePopover.opened) {
			this.focused = false;
		} else {
			this.focused = this === document.activeElement;
		}

		this._initialRendering = false;
		this._isKeyNavigation = false;
	}

	async onAfterRendering() {
		await this._respPopover();
		if (isPhone() && this.responsivePopover.opened) {
			// Set initial focus to the native input
			this.inner.focus();
		}

		if (this.shouldClosePopover()) {
			this.responsivePopover.close(false, false, true);
		}

		this._itemFocused = false;

		this.toggleValueStatePopover(this.shouldOpenValueStateMessagePopover);
		this.storeResponsivePopoverWidth();
	}

	shouldClosePopover() {
		return this.responsivePopover.opened && !this.focused && !this._itemFocused;
	}

	_focusin(event) {
		this.focused = true;

		if (this.filterValue !== this.value) {
			this.filterValue = this.value;
		}

		event.target.setSelectionRange(0, this.value.length);
	}

	_focusout() {
		this.focused = false;

		this._inputChange();
	}

	_afterOpenPopover() {
		this._iconPressed = true;
		this._clearFocus();
	}

	_afterClosePopover() {
		this._iconPressed = false;
		this._filteredItems = this.items;
		this._tempFilterValue = "";

		// close device's keyboard and prevent further typing
		if (isPhone()) {
			this.blur();
		}
	}

	_toggleRespPopover() {
		if (this.responsivePopover.opened) {
			this._closeRespPopover();
		} else {
			this._openRespPopover();
		}
	}

	storeResponsivePopoverWidth() {
		if (this.open && !this._listWidth) {
			this._listWidth = this.responsivePopover.offsetWidth;
		}
	}

	toggleValueStatePopover(open) {
		if (open) {
			this.openValueStatePopover();
		} else {
			this.closeValueStatePopover();
		}
	}

	async openValueStatePopover() {
		this.popover = await this._getPopover();
		this.popover && this.popover.openBy(this);
	}

	async closeValueStatePopover() {
		this.popover = await this._getPopover();
		this.popover && this.popover.close();
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector(".ui5-valuestatemessage-popover");
	}

	_resetFilter() {
		this._filteredItems = this._filterItems("");
		this._selectMatchingItem();
	}

	_arrowClick() {
		this.inner.focus();
		this._resetFilter();

		this._toggleRespPopover();
	}

	_input(event) {
		const { value } = event.target;

		if (event.target === this.inner) {
			// stop the native event, as the semantic "input" would be fired.
			event.stopImmediatePropagation();
		}

		this._clearFocus();
		this._tempFilterValue = value;
		this.filterValue = value;
		this.fireEvent("input");

		this._filteredItems = this._filterItems(value);

		if (!this._filteredItems.length) {
			this._closeRespPopover();
		} else {
			this._openRespPopover();
		}
	}

	_startsWithMatchingItems(str) {
		return StartsWith(str, this._filteredItems);
	}

	_clearFocus() {
		this._filteredItems.map(item => {
			item.focused = false;

			return item;
		});
	}

	handleArrowKeyPress(event) {
		if (this.readonly || !this._filteredItems.length) {
			return;
		}

		const isArrowDown = isDown(event);
		const isArrowUp = isUp(event);
		const currentItem = this._filteredItems.find(item => {
			return this.responsivePopover.opened ? item.focused : item.selected;
		});
		let indexOfItem = this._filteredItems.indexOf(currentItem);

		event.preventDefault();

		if ((indexOfItem === 0 && isArrowUp) || (this._filteredItems.length - 1 === indexOfItem && isArrowDown)) {
			return;
		}

		this._clearFocus();

		indexOfItem += isArrowDown ? 1 : -1;
		indexOfItem = indexOfItem < 0 ? 0 : indexOfItem;

		this._filteredItems[indexOfItem].focused = true;
		this.filterValue = this._filteredItems[indexOfItem].text;
		this._isKeyNavigation = true;
		this._itemFocused = true;
		this.fireEvent("input");

		this.fireEvent("selection-change", {
			item: this._filteredItems[indexOfItem],
		});

		this._selectionChanged = true;
	}

	_keydown(event) {
		const isArrowKey = isDown(event) || isUp(event);
		this._autocomplete = !(isBackSpace(event) || isDelete(event));

		if (isArrowKey) {
			this.handleArrowKeyPress(event);
		}

		if (isEnter(event)) {
			this._inputChange();
		}

		if (isShow(event) && !this.readonly && !this.disabled) {
			event.preventDefault();
			this._resetFilter();
			this._toggleRespPopover();
		}
	}

	_click(event) {
		if (isPhone() && !this.readonly) {
			this._openRespPopover();
		}
	}

	_closeRespPopover() {
		this.responsivePopover.close();
	}

	_openRespPopover() {
		this.responsivePopover.open(this);
	}

	_filterItems(str) {
		return (Filters[this.filter] || StartsWithPerTerm)(str, this.items);
	}

	_autoCompleteValue(current) {
		const currentValue = current;
		const matchingItems = this._startsWithMatchingItems(currentValue);
		const selectionValue = this._tempFilterValue ? this._tempFilterValue : currentValue;

		if (matchingItems.length) {
			this._tempValue = matchingItems[0] ? matchingItems[0].text : current;
		} else {
			this._tempValue = current;
		}

		if (matchingItems.length && (selectionValue !== this._tempValue)) {
			setTimeout(() => {
				this.inner.setSelectionRange(selectionValue.length, this._tempValue.length);
			}, 0);
		} else if (this._isKeyNavigation) {
			setTimeout(() => {
				this.inner.setSelectionRange(0, this._tempValue.length);
			}, 0);
		}

		if (matchingItems.length) {
			return matchingItems[0];
		}
	}

	_selectMatchingItem() {
		this._filteredItems = this._filteredItems.map(item => {
			item.selected = (item.text === this._tempValue);

			return item;
		});
	}

	_inputChange() {
		if (this.value !== this._tempValue) {
			this.value = this._tempValue;
			this.fireEvent("change");
			this.inner.setSelectionRange(this.value.length, this.value.length);
		}

		this._closeRespPopover();
	}

	_itemMousedown(event) {
		event.preventDefault();
	}

	_selectItem(event) {
		const listItem = event.detail.item;

		this._tempValue = listItem.mappedItem.text;
		this.filterValue = this._tempValue;

		if (!listItem.mappedItem.selected) {
			this.fireEvent("selection-change", {
				item: listItem.mappedItem,
			});

			this._selectionChanged = true;
		}

		this._filteredItems.map(item => {
			item.selected = (item === listItem.mappedItem);

			return item;
		});

		this._inputChange();
	}

	_onItemFocus(event) {
		this._itemFocused = true;
	}

	get _headerTitleText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
	}

	get _iconAccessibleNameText() {
		return this.i18nBundle.getText(ICON_ACCESSIBLE_NAME);
	}

	get inner() {
		return isPhone() ? this.responsivePopover.querySelector(".ui5-input-inner-phone") : this.shadowRoot.querySelector("[inner-input]");
	}

	async _respPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.responsivePopover = staticAreaItem.querySelector("[ui5-responsive-popover]");
		return this.responsivePopover;
	}

	get editable() {
		return !this.readonly;
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get hasValueStateText() {
		return this.hasValueState && this.valueState !== ValueState.Success;
	}

	get valueStateText() {
		return this.valueStateTextMappings[this.valueState];
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get valueStateTextId() {
		return this.hasValueState ? `${this._id}-valueStateDesc` : undefined;
	}

	get valueStateTextMappings() {
		return {
			"Success": this.i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Error": this.i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": this.i18nBundle.getText(VALUE_STATE_WARNING),
			"Information": this.i18nBundle.getText(VALUE_STATE_INFORMATION),
		};
	}

	get shouldOpenValueStateMessagePopover() {
		return this.focused && this.hasValueStateText && !this._iconPressed
			&& !this.open && !this._isPhone;
	}

	get shouldDisplayDefaultValueStateMessage() {
		return !this.valueStateMessage.length && this.hasValueStateText;
	}

	get open() {
		return this.responsivePopover ? this.responsivePopover.opened : false;
	}

	get _isPhone() {
		return isPhone();
	}

	get itemTabIndex() {
		return undefined;
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	static get dependencies() {
		return [
			ComboBoxItem,
			Icon,
			ResponsivePopover,
			List,
			BusyIndicator,
			Button,
			StandardListItem,
			Popover,
		];
	}

	get styles() {
		return {
			popoverHeader: {
				"width": `${this.offsetWidth}px`,
			},
			suggestionPopoverHeader: {
				"display": this._listWidth === 0 ? "none" : "inline-block",
				"width": `${this._listWidth}px`,
				"padding": "0.5625rem 1rem",
			},
		};
	}

	get classes() {
		return {
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}
}

ComboBox.define();

var fnEqual = function (a, b, maxDepth, contains, depth) {
    if (typeof maxDepth == 'boolean') {
        contains = maxDepth;
        maxDepth = undefined;
    }
    if (!depth) {
        depth = 0;
    }
    if (!maxDepth) {
        maxDepth = 10;
    }
    if (depth > maxDepth) {
        Log.warning('deepEqual comparison exceeded maximum recursion depth of ' + maxDepth + '. Treating values as unequal');
        return false;
    }
    if (a === b) {
        return true;
    }
    var bIsReallyNaN = typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    if (bIsReallyNaN) {
        return true;
    }
    if (Array.isArray(a) && Array.isArray(b)) {
        if (!contains && a.length !== b.length) {
            return false;
        }
        if (a.length > b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (!fnEqual(a[i], b[i], maxDepth, contains, depth + 1)) {
                return false;
            }
        }
        return true;
    }
    if (typeof a == 'object' && typeof b == 'object') {
        if (!a || !b) {
            return false;
        }
        if (a.constructor !== b.constructor) {
            return false;
        }
        if (!contains && Object.keys(a).length !== Object.keys(b).length) {
            return false;
        }
        if (a instanceof Node) {
            return a.isEqualNode(b);
        }
        if (a instanceof Date) {
            return a.valueOf() === b.valueOf();
        }
        for (var i in a) {
            if (!fnEqual(a[i], b[i], maxDepth, contains, depth + 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
};

var rMessageFormat = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\{([0-9]+(?:\s*,[^{}]*)?)\}|[{}]/g;
var fnFormatMessage = function (sPattern, aValues) {
    fnAssert(typeof sPattern === 'string' || sPattern instanceof String, 'pattern must be string');
    if (arguments.length > 2 || aValues != null && !Array.isArray(aValues)) {
        aValues = Array.prototype.slice.call(arguments, 1);
    }
    aValues = aValues || [];
    return sPattern.replace(rMessageFormat, function ($0, $1, $2, $3, offset) {
        if ($1) {
            return '\'';
        } else if ($2) {
            return $2.replace(/''/g, '\'');
        } else if ($3) {
            return String(aValues[parseInt($3)]);
        }
        throw new Error('formatMessage: pattern syntax error at pos. ' + offset);
    });
};

var DateFormat = function () {
    throw new Error();
};
var mCldrDatePattern = {};
DateFormat.oDateInfo = {
    oDefaultFormatOptions: {
        style: 'medium',
        relativeScale: 'day',
        relativeStyle: 'wide'
    },
    aFallbackFormatOptions: [
        { style: 'short' },
        { style: 'medium' },
        { pattern: 'yyyy-MM-dd' },
        {
            pattern: 'yyyyMMdd',
            strictParsing: true
        }
    ],
    bShortFallbackFormatOptions: true,
    bPatternFallbackWithoutDelimiter: true,
    getPattern: function (oLocaleData, sStyle, sCalendarType) {
        return oLocaleData.getDatePattern(sStyle, sCalendarType);
    },
    oRequiredParts: {
        'text': true,
        'year': true,
        'weekYear': true,
        'month': true,
        'day': true
    },
    aRelativeScales: [
        'year',
        'month',
        'week',
        'day'
    ],
    aRelativeParseScales: [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second'
    ],
    aIntervalCompareFields: [
        'Era',
        'FullYear',
        'Quarter',
        'Month',
        'Week',
        'Date'
    ]
};
DateFormat.oDateTimeInfo = {
    oDefaultFormatOptions: {
        style: 'medium',
        relativeScale: 'auto',
        relativeStyle: 'wide'
    },
    aFallbackFormatOptions: [
        { style: 'short' },
        { style: 'medium' },
        { pattern: 'yyyy-MM-dd\'T\'HH:mm:ss' },
        { pattern: 'yyyyMMdd HHmmss' }
    ],
    getPattern: function (oLocaleData, sStyle, sCalendarType) {
        var iSlashIndex = sStyle.indexOf('/');
        if (iSlashIndex > 0) {
            return oLocaleData.getCombinedDateTimePattern(sStyle.substr(0, iSlashIndex), sStyle.substr(iSlashIndex + 1), sCalendarType);
        } else {
            return oLocaleData.getCombinedDateTimePattern(sStyle, sStyle, sCalendarType);
        }
    },
    oRequiredParts: {
        'text': true,
        'year': true,
        'weekYear': true,
        'month': true,
        'day': true,
        'hour0_23': true,
        'hour1_24': true,
        'hour0_11': true,
        'hour1_12': true
    },
    aRelativeScales: [
        'year',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second'
    ],
    aRelativeParseScales: [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second'
    ],
    aIntervalCompareFields: [
        'Era',
        'FullYear',
        'Quarter',
        'Month',
        'Week',
        'Date',
        'DayPeriod',
        'Hours',
        'Minutes',
        'Seconds'
    ]
};
DateFormat.oTimeInfo = {
    oDefaultFormatOptions: {
        style: 'medium',
        relativeScale: 'auto',
        relativeStyle: 'wide'
    },
    aFallbackFormatOptions: [
        { style: 'short' },
        { style: 'medium' },
        { pattern: 'HH:mm:ss' },
        { pattern: 'HHmmss' }
    ],
    getPattern: function (oLocaleData, sStyle, sCalendarType) {
        return oLocaleData.getTimePattern(sStyle, sCalendarType);
    },
    oRequiredParts: {
        'text': true,
        'hour0_23': true,
        'hour1_24': true,
        'hour0_11': true,
        'hour1_12': true
    },
    aRelativeScales: [
        'hour',
        'minute',
        'second'
    ],
    aRelativeParseScales: [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second'
    ],
    aIntervalCompareFields: [
        'DayPeriod',
        'Hours',
        'Minutes',
        'Seconds'
    ]
};
DateFormat.getInstance = function (oFormatOptions, oLocale) {
    return this.getDateInstance(oFormatOptions, oLocale);
};
DateFormat.getDateInstance = function (oFormatOptions, oLocale) {
    return this.createInstance(oFormatOptions, oLocale, this.oDateInfo);
};
DateFormat.getDateTimeInstance = function (oFormatOptions, oLocale) {
    return this.createInstance(oFormatOptions, oLocale, this.oDateTimeInfo);
};
DateFormat.getTimeInstance = function (oFormatOptions, oLocale) {
    return this.createInstance(oFormatOptions, oLocale, this.oTimeInfo);
};
function createIntervalPatternWithNormalConnector(oFormat) {
    var sPattern = oFormat.oLocaleData.getIntervalPattern('', oFormat.oFormatOptions.calendarType);
    sPattern = sPattern.replace(/[^\{\}01 ]/, '-');
    return sPattern.replace(/\{(0|1)\}/g, oFormat.oFormatOptions.pattern);
}
DateFormat.createInstance = function (oFormatOptions, oLocale, oInfo) {
    var oFormat = Object.create(this.prototype);
    if (oFormatOptions instanceof Locale$1) {
        oLocale = oFormatOptions;
        oFormatOptions = undefined;
    }
    if (!oLocale) {
        oLocale = Core.getConfiguration().getFormatSettings().getFormatLocale();
    }
    oFormat.oLocale = oLocale;
    oFormat.oLocaleData = LocaleData.getInstance(oLocale);
    oFormat.oFormatOptions = fnExtend({}, oInfo.oDefaultFormatOptions, oFormatOptions);
    if (!oFormat.oFormatOptions.calendarType) {
        oFormat.oFormatOptions.calendarType = Core.getConfiguration().getCalendarType();
    }
    if (!oFormat.oFormatOptions.pattern) {
        if (oFormat.oFormatOptions.format) {
            oFormat.oFormatOptions.pattern = oFormat.oLocaleData.getCustomDateTimePattern(oFormat.oFormatOptions.format, oFormat.oFormatOptions.calendarType);
        } else {
            oFormat.oFormatOptions.pattern = oInfo.getPattern(oFormat.oLocaleData, oFormat.oFormatOptions.style, oFormat.oFormatOptions.calendarType);
        }
    }
    if (oFormat.oFormatOptions.interval) {
        if (oFormat.oFormatOptions.format) {
            oFormat.intervalPatterns = oFormat.oLocaleData.getCustomIntervalPattern(oFormat.oFormatOptions.format, null, oFormat.oFormatOptions.calendarType);
            if (typeof oFormat.intervalPatterns === 'string') {
                oFormat.intervalPatterns = [oFormat.intervalPatterns];
            }
            oFormat.intervalPatterns.push(oFormat.oLocaleData.getCustomDateTimePattern(oFormat.oFormatOptions.format, oFormat.oFormatOptions.calendarType));
        } else {
            oFormat.intervalPatterns = [
                oFormat.oLocaleData.getCombinedIntervalPattern(oFormat.oFormatOptions.pattern, oFormat.oFormatOptions.calendarType),
                oFormat.oFormatOptions.pattern
            ];
        }
        var sCommonConnectorPattern = createIntervalPatternWithNormalConnector(oFormat);
        oFormat.intervalPatterns.push(sCommonConnectorPattern);
    }
    if (!oFormat.oFormatOptions.fallback) {
        if (!oInfo.oFallbackFormats) {
            oInfo.oFallbackFormats = {};
        }
        var sLocale = oLocale.toString(), sCalendarType = oFormat.oFormatOptions.calendarType, sKey = sLocale + '-' + sCalendarType, sPattern, aFallbackFormatOptions;
        if (oFormat.oFormatOptions.pattern && oInfo.bPatternFallbackWithoutDelimiter) {
            sKey = sKey + '-' + oFormat.oFormatOptions.pattern;
        }
        if (oFormat.oFormatOptions.interval) {
            sKey = sKey + '-' + 'interval';
        }
        var oFallbackFormats = oInfo.oFallbackFormats[sKey] ? Object.assign({}, oInfo.oFallbackFormats[sKey]) : undefined;
        if (!oFallbackFormats) {
            aFallbackFormatOptions = oInfo.aFallbackFormatOptions;
            if (oInfo.bShortFallbackFormatOptions) {
                sPattern = oInfo.getPattern(oFormat.oLocaleData, 'short');
                aFallbackFormatOptions = aFallbackFormatOptions.concat(DateFormat._createFallbackOptionsWithoutDelimiter(sPattern));
            }
            if (oFormat.oFormatOptions.pattern && oInfo.bPatternFallbackWithoutDelimiter) {
                aFallbackFormatOptions = DateFormat._createFallbackOptionsWithoutDelimiter(oFormat.oFormatOptions.pattern).concat(aFallbackFormatOptions);
            }
            oFallbackFormats = DateFormat._createFallbackFormat(aFallbackFormatOptions, sCalendarType, oLocale, oInfo, oFormat.oFormatOptions.interval);
        }
        oFormat.aFallbackFormats = oFallbackFormats;
    }
    oFormat.oRequiredParts = oInfo.oRequiredParts;
    oFormat.aRelativeScales = oInfo.aRelativeScales;
    oFormat.aRelativeParseScales = oInfo.aRelativeParseScales;
    oFormat.aIntervalCompareFields = oInfo.aIntervalCompareFields;
    oFormat.init();
    return oFormat;
};
DateFormat.prototype.init = function () {
    var sCalendarType = this.oFormatOptions.calendarType;
    this.aMonthsAbbrev = this.oLocaleData.getMonths('abbreviated', sCalendarType);
    this.aMonthsWide = this.oLocaleData.getMonths('wide', sCalendarType);
    this.aMonthsNarrow = this.oLocaleData.getMonths('narrow', sCalendarType);
    this.aMonthsAbbrevSt = this.oLocaleData.getMonthsStandAlone('abbreviated', sCalendarType);
    this.aMonthsWideSt = this.oLocaleData.getMonthsStandAlone('wide', sCalendarType);
    this.aMonthsNarrowSt = this.oLocaleData.getMonthsStandAlone('narrow', sCalendarType);
    this.aDaysAbbrev = this.oLocaleData.getDays('abbreviated', sCalendarType);
    this.aDaysWide = this.oLocaleData.getDays('wide', sCalendarType);
    this.aDaysNarrow = this.oLocaleData.getDays('narrow', sCalendarType);
    this.aDaysShort = this.oLocaleData.getDays('short', sCalendarType);
    this.aDaysAbbrevSt = this.oLocaleData.getDaysStandAlone('abbreviated', sCalendarType);
    this.aDaysWideSt = this.oLocaleData.getDaysStandAlone('wide', sCalendarType);
    this.aDaysNarrowSt = this.oLocaleData.getDaysStandAlone('narrow', sCalendarType);
    this.aDaysShortSt = this.oLocaleData.getDaysStandAlone('short', sCalendarType);
    this.aQuartersAbbrev = this.oLocaleData.getQuarters('abbreviated', sCalendarType);
    this.aQuartersWide = this.oLocaleData.getQuarters('wide', sCalendarType);
    this.aQuartersNarrow = this.oLocaleData.getQuarters('narrow', sCalendarType);
    this.aQuartersAbbrevSt = this.oLocaleData.getQuartersStandAlone('abbreviated', sCalendarType);
    this.aQuartersWideSt = this.oLocaleData.getQuartersStandAlone('wide', sCalendarType);
    this.aQuartersNarrowSt = this.oLocaleData.getQuartersStandAlone('narrow', sCalendarType);
    this.aErasNarrow = this.oLocaleData.getEras('narrow', sCalendarType);
    this.aErasAbbrev = this.oLocaleData.getEras('abbreviated', sCalendarType);
    this.aErasWide = this.oLocaleData.getEras('wide', sCalendarType);
    this.aDayPeriods = this.oLocaleData.getDayPeriods('abbreviated', sCalendarType);
    this.aFormatArray = this.parseCldrDatePattern(this.oFormatOptions.pattern);
    this.sAllowedCharacters = this.getAllowedCharacters(this.aFormatArray);
};
DateFormat._createFallbackFormat = function (aFallbackFormatOptions, sCalendarType, oLocale, oInfo, bInterval) {
    return aFallbackFormatOptions.map(function (oOptions) {
        var oFormatOptions = Object.assign({}, oOptions);
        if (bInterval) {
            oFormatOptions.interval = true;
        }
        oFormatOptions.calendarType = sCalendarType;
        oFormatOptions.fallback = true;
        var oFallbackFormat = DateFormat.createInstance(oFormatOptions, oLocale, oInfo);
        oFallbackFormat.bIsFallback = true;
        return oFallbackFormat;
    });
};
DateFormat._createFallbackOptionsWithoutDelimiter = function (sBasePattern) {
    var rNonDateFields = /[^dMyGU]/g, oDayReplace = {
            regex: /d+/g,
            replace: 'dd'
        }, oMonthReplace = {
            regex: /M+/g,
            replace: 'MM'
        }, oYearReplace = {
            regex: /[yU]+/g,
            replace: [
                'yyyy',
                'yy'
            ]
        };
    sBasePattern = sBasePattern.replace(rNonDateFields, '');
    sBasePattern = sBasePattern.replace(oDayReplace.regex, oDayReplace.replace);
    sBasePattern = sBasePattern.replace(oMonthReplace.regex, oMonthReplace.replace);
    return oYearReplace.replace.map(function (sReplace) {
        return {
            pattern: sBasePattern.replace(oYearReplace.regex, sReplace),
            strictParsing: true
        };
    });
};
var oParseHelper = {
    isNumber: function (iCharCode) {
        return iCharCode >= 48 && iCharCode <= 57;
    },
    findNumbers: function (sValue, iMaxLength) {
        var iLength = 0;
        while (iLength < iMaxLength && this.isNumber(sValue.charCodeAt(iLength))) {
            iLength++;
        }
        if (typeof sValue !== 'string') {
            sValue = sValue.toString();
        }
        return sValue.substr(0, iLength);
    },
    findEntry: function (sValue, aList) {
        var iFoundIndex = -1, iMatchedLength = 0;
        for (var j = 0; j < aList.length; j++) {
            if (aList[j] && aList[j].length > iMatchedLength && sValue.indexOf(aList[j]) === 0) {
                iFoundIndex = j;
                iMatchedLength = aList[j].length;
            }
        }
        return {
            index: iFoundIndex,
            value: iFoundIndex === -1 ? null : aList[iFoundIndex]
        };
    },
    parseTZ: function (sValue, bISO) {
        var iLength = 0;
        var iTZFactor = sValue.charAt(0) == '+' ? -1 : 1;
        var sPart;
        iLength++;
        sPart = this.findNumbers(sValue.substr(iLength), 2);
        var iTZDiffHour = parseInt(sPart);
        iLength += 2;
        if (bISO) {
            iLength++;
        }
        sPart = this.findNumbers(sValue.substr(iLength), 2);
        iLength += 2;
        var iTZDiff = parseInt(sPart);
        return {
            length: iLength,
            tzDiff: (iTZDiff + 60 * iTZDiffHour) * iTZFactor
        };
    },
    checkValid: function (sType, bPartInvalid, oFormat) {
        if (sType in oFormat.oRequiredParts && bPartInvalid) {
            return false;
        }
    }
};
DateFormat.prototype.oSymbols = {
    '': {
        name: 'text',
        format: function (oField, oDate, bUTC, oFormat) {
            return oField.value;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sChar;
            var bValid = true;
            var iValueIndex = 0;
            var iPatternIndex = 0;
            var sDelimiter = '-~\u2010\u2011\u2012\u2013\u2014\uFE58\uFE63\uFF0D\uFF5E';
            for (; iPatternIndex < oPart.value.length; iPatternIndex++) {
                sChar = oPart.value.charAt(iPatternIndex);
                if (sChar === ' ') {
                    while (sValue.charAt(iValueIndex) === ' ') {
                        iValueIndex++;
                    }
                } else if (sDelimiter.includes(sChar)) {
                    if (!sDelimiter.includes(sValue.charAt(iValueIndex))) {
                        bValid = false;
                    }
                    iValueIndex++;
                } else {
                    if (sValue.charAt(iValueIndex) !== sChar) {
                        bValid = false;
                    }
                    iValueIndex++;
                }
                if (!bValid) {
                    break;
                }
            }
            if (bValid) {
                return { length: iValueIndex };
            } else {
                var bPartInvalid = false;
                if (oConfig.index < oConfig.formatArray.length - 1) {
                    bPartInvalid = oConfig.formatArray[oConfig.index + 1].type in oFormat.oRequiredParts;
                }
                return { valid: oParseHelper.checkValid(oPart.type, bPartInvalid, oFormat) };
            }
        }
    },
    'G': {
        name: 'era',
        format: function (oField, oDate, bUTC, oFormat) {
            var iEra = bUTC ? oDate.getUTCEra() : oDate.getEra();
            if (oField.digits <= 3) {
                return oFormat.aErasAbbrev[iEra];
            } else if (oField.digits === 4) {
                return oFormat.aErasWide[iEra];
            } else {
                return oFormat.aErasNarrow[iEra];
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var aErasVariants = [
                oFormat.aErasWide,
                oFormat.aErasAbbrev,
                oFormat.aErasNarrow
            ];
            for (var i = 0; i < aErasVariants.length; i++) {
                var aVariants = aErasVariants[i];
                var oFound = oParseHelper.findEntry(sValue, aVariants);
                if (oFound.index !== -1) {
                    return {
                        era: oFound.index,
                        length: oFound.value.length
                    };
                }
            }
            return {
                era: oFormat.aErasWide.length - 1,
                valid: oParseHelper.checkValid(oPart.type, true, oFormat)
            };
        }
    },
    'y': {
        name: 'year',
        format: function (oField, oDate, bUTC, oFormat) {
            var iYear = bUTC ? oDate.getUTCFullYear() : oDate.getFullYear();
            var sYear = String(iYear);
            var sCalendarType = oFormat.oFormatOptions.calendarType;
            if (oField.digits == 2 && sYear.length > 2) {
                sYear = sYear.substr(sYear.length - 2);
            }
            if (sCalendarType != CalendarType$1.Japanese && oField.digits == 1 && iYear < 100) {
                sYear = sYear.padStart(4, '0');
            }
            return sYear.padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sCalendarType = oFormat.oFormatOptions.calendarType;
            var sPart;
            if (oPart.digits == 1) {
                sPart = oParseHelper.findNumbers(sValue, 4);
            } else if (oPart.digits == 2) {
                sPart = oParseHelper.findNumbers(sValue, 2);
            } else {
                sPart = oParseHelper.findNumbers(sValue, oPart.digits);
            }
            var iYear = parseInt(sPart);
            if (sCalendarType != CalendarType$1.Japanese && sPart.length <= 2) {
                var oCurrentDate = UniversalDate.getInstance(new Date(), sCalendarType), iCurrentYear = oCurrentDate.getFullYear(), iCurrentCentury = Math.floor(iCurrentYear / 100), iYearDiff = iCurrentCentury * 100 + iYear - iCurrentYear;
                if (iYearDiff < -70) {
                    iYear += (iCurrentCentury + 1) * 100;
                } else if (iYearDiff < 30) {
                    iYear += iCurrentCentury * 100;
                } else {
                    iYear += (iCurrentCentury - 1) * 100;
                }
            }
            return {
                length: sPart.length,
                valid: oParseHelper.checkValid(oPart.type, sPart === '', oFormat),
                year: iYear
            };
        }
    },
    'Y': {
        name: 'weekYear',
        format: function (oField, oDate, bUTC, oFormat) {
            var oWeek = bUTC ? oDate.getUTCWeek() : oDate.getWeek();
            var iWeekYear = oWeek.year;
            var sWeekYear = String(iWeekYear);
            var sCalendarType = oFormat.oFormatOptions.calendarType;
            if (oField.digits == 2 && sWeekYear.length > 2) {
                sWeekYear = sWeekYear.substr(sWeekYear.length - 2);
            }
            if (sCalendarType != CalendarType$1.Japanese && oField.digits == 1 && iWeekYear < 100) {
                sWeekYear = sWeekYear.padStart(4, '0');
            }
            return sWeekYear.padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sCalendarType = oFormat.oFormatOptions.calendarType;
            var sPart;
            if (oPart.digits == 1) {
                sPart = oParseHelper.findNumbers(sValue, 4);
            } else if (oPart.digits == 2) {
                sPart = oParseHelper.findNumbers(sValue, 2);
            } else {
                sPart = oParseHelper.findNumbers(sValue, oPart.digits);
            }
            var iYear = parseInt(sPart);
            var iWeekYear;
            if (sCalendarType != CalendarType$1.Japanese && sPart.length <= 2) {
                var oCurrentDate = UniversalDate.getInstance(new Date(), sCalendarType), iCurrentYear = oCurrentDate.getFullYear(), iCurrentCentury = Math.floor(iCurrentYear / 100), iYearDiff = iCurrentCentury * 100 + iWeekYear - iCurrentYear;
                if (iYearDiff < -70) {
                    iWeekYear += (iCurrentCentury + 1) * 100;
                } else if (iYearDiff < 30) {
                    iWeekYear += iCurrentCentury * 100;
                } else {
                    iWeekYear += (iCurrentCentury - 1) * 100;
                }
            }
            return {
                length: sPart.length,
                valid: oParseHelper.checkValid(oPart.type, sPart === '', oFormat),
                year: iYear,
                weekYear: iWeekYear
            };
        }
    },
    'M': {
        name: 'month',
        format: function (oField, oDate, bUTC, oFormat) {
            var iMonth = bUTC ? oDate.getUTCMonth() : oDate.getMonth();
            if (oField.digits == 3) {
                return oFormat.aMonthsAbbrev[iMonth];
            } else if (oField.digits == 4) {
                return oFormat.aMonthsWide[iMonth];
            } else if (oField.digits > 4) {
                return oFormat.aMonthsNarrow[iMonth];
            } else {
                return String(iMonth + 1).padStart(oField.digits, '0');
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var aMonthsVariants = [
                oFormat.aMonthsWide,
                oFormat.aMonthsWideSt,
                oFormat.aMonthsAbbrev,
                oFormat.aMonthsAbbrevSt,
                oFormat.aMonthsNarrow,
                oFormat.aMonthsNarrowSt
            ];
            var bValid;
            var iMonth;
            var sPart;
            if (oPart.digits < 3) {
                sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
                bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
                iMonth = parseInt(sPart) - 1;
                if (oConfig.strict && (iMonth > 11 || iMonth < 0)) {
                    bValid = false;
                }
            } else {
                for (var i = 0; i < aMonthsVariants.length; i++) {
                    var aVariants = aMonthsVariants[i];
                    var oFound = oParseHelper.findEntry(sValue, aVariants);
                    if (oFound.index !== -1) {
                        return {
                            month: oFound.index,
                            length: oFound.value.length
                        };
                    }
                }
                bValid = oParseHelper.checkValid(oPart.type, true, oFormat);
            }
            return {
                month: iMonth,
                length: sPart ? sPart.length : 0,
                valid: bValid
            };
        }
    },
    'L': {
        name: 'monthStandalone',
        format: function (oField, oDate, bUTC, oFormat) {
            var iMonth = bUTC ? oDate.getUTCMonth() : oDate.getMonth();
            if (oField.digits == 3) {
                return oFormat.aMonthsAbbrevSt[iMonth];
            } else if (oField.digits == 4) {
                return oFormat.aMonthsWideSt[iMonth];
            } else if (oField.digits > 4) {
                return oFormat.aMonthsNarrowSt[iMonth];
            } else {
                return String(iMonth + 1).padStart(oField.digits, '0');
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var aMonthsVariants = [
                oFormat.aMonthsWide,
                oFormat.aMonthsWideSt,
                oFormat.aMonthsAbbrev,
                oFormat.aMonthsAbbrevSt,
                oFormat.aMonthsNarrow,
                oFormat.aMonthsNarrowSt
            ];
            var bValid;
            var iMonth;
            var sPart;
            if (oPart.digits < 3) {
                sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
                bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
                iMonth = parseInt(sPart) - 1;
                if (oConfig.strict && (iMonth > 11 || iMonth < 0)) {
                    bValid = false;
                }
            } else {
                for (var i = 0; i < aMonthsVariants.length; i++) {
                    var aVariants = aMonthsVariants[i];
                    var oFound = oParseHelper.findEntry(sValue, aVariants);
                    if (oFound.index !== -1) {
                        return {
                            month: oFound.index,
                            length: oFound.value.length
                        };
                    }
                }
                bValid = oParseHelper.checkValid(oPart.type, true, oFormat);
            }
            return {
                month: iMonth,
                length: sPart ? sPart.length : 0,
                valid: bValid
            };
        }
    },
    'w': {
        name: 'weekInYear',
        format: function (oField, oDate, bUTC, oFormat) {
            var oWeek = bUTC ? oDate.getUTCWeek() : oDate.getWeek();
            var iWeek = oWeek.week;
            var sWeek = String(iWeek + 1);
            if (oField.digits < 3) {
                sWeek = sWeek.padStart(oField.digits, '0');
            } else {
                sWeek = oFormat.oLocaleData.getCalendarWeek(oField.digits === 3 ? 'narrow' : 'wide', sWeek.padStart(2, '0'));
            }
            return sWeek;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart;
            var iWeek;
            var iLength = 0;
            if (oPart.digits < 3) {
                sPart = oParseHelper.findNumbers(sValue, 2);
                iLength = sPart.length;
                iWeek = parseInt(sPart) - 1;
                bValid = oParseHelper.checkValid(oPart.type, !sPart, oFormat);
            } else {
                sPart = oFormat.oLocaleData.getCalendarWeek(oPart.digits === 3 ? 'narrow' : 'wide');
                sPart = sPart.replace('{0}', '[0-9]+');
                var rWeekNumber = new RegExp(sPart), oResult = rWeekNumber.exec(sValue);
                if (oResult) {
                    iLength = oResult[0].length;
                    iWeek = parseInt(oResult[0]) - 1;
                } else {
                    bValid = oParseHelper.checkValid(oPart.type, true, oFormat);
                }
            }
            return {
                length: iLength,
                valid: bValid,
                week: iWeek
            };
        }
    },
    'W': {
        name: 'weekInMonth',
        format: function (oField, oDate, bUTC, oFormat) {
            return '';
        },
        parse: function () {
            return {};
        }
    },
    'D': {
        name: 'dayInYear',
        format: function (oField, oDate, bUTC, oFormat) {
        },
        parse: function () {
            return {};
        }
    },
    'd': {
        name: 'day',
        format: function (oField, oDate, bUTC, oFormat) {
            var iDate = bUTC ? oDate.getUTCDate() : oDate.getDate();
            return String(iDate).padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            var iDay = parseInt(sPart);
            if (oConfig.strict && (iDay > 31 || iDay < 1)) {
                bValid = false;
            }
            return {
                day: iDay,
                length: sPart.length,
                valid: bValid
            };
        }
    },
    'Q': {
        name: 'quarter',
        format: function (oField, oDate, bUTC, oFormat) {
            var iQuarter = bUTC ? oDate.getUTCQuarter() : oDate.getQuarter();
            if (oField.digits == 3) {
                return oFormat.aQuartersAbbrev[iQuarter];
            } else if (oField.digits == 4) {
                return oFormat.aQuartersWide[iQuarter];
            } else if (oField.digits > 4) {
                return oFormat.aQuartersNarrow[iQuarter];
            } else {
                return String(iQuarter + 1).padStart(oField.digits, '0');
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var iQuarter;
            var sPart;
            var aQuartersVariants = [
                oFormat.aQuartersWide,
                oFormat.aQuartersWideSt,
                oFormat.aQuartersAbbrev,
                oFormat.aQuartersAbbrevSt,
                oFormat.aQuartersNarrow,
                oFormat.aQuartersNarrowSt
            ];
            if (oPart.digits < 3) {
                sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
                bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
                iQuarter = parseInt(sPart) - 1;
                if (oConfig.strict && iQuarter > 3) {
                    bValid = false;
                }
            } else {
                for (var i = 0; i < aQuartersVariants.length; i++) {
                    var aVariants = aQuartersVariants[i];
                    var oFound = oParseHelper.findEntry(sValue, aVariants);
                    if (oFound.index !== -1) {
                        return {
                            quarter: oFound.index,
                            length: oFound.value.length
                        };
                    }
                }
                bValid = oParseHelper.checkValid(oPart.type, true, oFormat);
            }
            return {
                length: sPart ? sPart.length : 0,
                quarter: iQuarter,
                valid: bValid
            };
        }
    },
    'q': {
        name: 'quarterStandalone',
        format: function (oField, oDate, bUTC, oFormat) {
            var iQuarter = bUTC ? oDate.getUTCQuarter() : oDate.getQuarter();
            if (oField.digits == 3) {
                return oFormat.aQuartersAbbrevSt[iQuarter];
            } else if (oField.digits == 4) {
                return oFormat.aQuartersWideSt[iQuarter];
            } else if (oField.digits > 4) {
                return oFormat.aQuartersNarrowSt[iQuarter];
            } else {
                return String(iQuarter + 1).padStart(oField.digits, '0');
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var iQuarter;
            var sPart;
            var aQuartersVariants = [
                oFormat.aQuartersWide,
                oFormat.aQuartersWideSt,
                oFormat.aQuartersAbbrev,
                oFormat.aQuartersAbbrevSt,
                oFormat.aQuartersNarrow,
                oFormat.aQuartersNarrowSt
            ];
            if (oPart.digits < 3) {
                sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
                bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
                iQuarter = parseInt(sPart) - 1;
                if (oConfig.strict && iQuarter > 3) {
                    bValid = false;
                }
            } else {
                for (var i = 0; i < aQuartersVariants.length; i++) {
                    var aVariants = aQuartersVariants[i];
                    var oFound = oParseHelper.findEntry(sValue, aVariants);
                    if (oFound.index !== -1) {
                        return {
                            quarter: oFound.index,
                            length: oFound.value.length
                        };
                    }
                }
                bValid = oParseHelper.checkValid(oPart.type, true, oFormat);
            }
            return {
                length: sPart ? sPart.length : 0,
                quarter: iQuarter,
                valid: bValid
            };
        }
    },
    'F': {
        name: 'dayOfWeekInMonth',
        format: function (oField, oDate, bUTC, oFormat) {
            return '';
        },
        parse: function () {
            return {};
        }
    },
    'E': {
        name: 'dayNameInWeek',
        format: function (oField, oDate, bUTC, oFormat) {
            var iDay = bUTC ? oDate.getUTCDay() : oDate.getDay();
            if (oField.digits < 4) {
                return oFormat.aDaysAbbrev[iDay];
            } else if (oField.digits == 4) {
                return oFormat.aDaysWide[iDay];
            } else if (oField.digits == 5) {
                return oFormat.aDaysNarrow[iDay];
            } else {
                return oFormat.aDaysShort[iDay];
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var aDaysVariants = [
                oFormat.aDaysWide,
                oFormat.aDaysWideSt,
                oFormat.aDaysAbbrev,
                oFormat.aDaysAbbrevSt,
                oFormat.aDaysShort,
                oFormat.aDaysShortSt,
                oFormat.aDaysNarrow,
                oFormat.aDaysNarrowSt
            ];
            for (var i = 0; i < aDaysVariants.length; i++) {
                var aVariants = aDaysVariants[i];
                var oFound = oParseHelper.findEntry(sValue, aVariants);
                if (oFound.index !== -1) {
                    return {
                        dayOfWeek: oFound.index,
                        length: oFound.value.length
                    };
                }
            }
        }
    },
    'c': {
        name: 'dayNameInWeekStandalone',
        format: function (oField, oDate, bUTC, oFormat) {
            var iDay = bUTC ? oDate.getUTCDay() : oDate.getDay();
            if (oField.digits < 4) {
                return oFormat.aDaysAbbrevSt[iDay];
            } else if (oField.digits == 4) {
                return oFormat.aDaysWideSt[iDay];
            } else if (oField.digits == 5) {
                return oFormat.aDaysNarrowSt[iDay];
            } else {
                return oFormat.aDaysShortSt[iDay];
            }
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var aDaysVariants = [
                oFormat.aDaysWide,
                oFormat.aDaysWideSt,
                oFormat.aDaysAbbrev,
                oFormat.aDaysAbbrevSt,
                oFormat.aDaysShort,
                oFormat.aDaysShortSt,
                oFormat.aDaysNarrow,
                oFormat.aDaysNarrowSt
            ];
            for (var i = 0; i < aDaysVariants.length; i++) {
                var aVariants = aDaysVariants[i];
                var oFound = oParseHelper.findEntry(sValue, aVariants);
                if (oFound.index !== -1) {
                    return {
                        day: oFound.index,
                        length: oFound.value.length
                    };
                }
            }
        }
    },
    'u': {
        name: 'dayNumberOfWeek',
        format: function (oField, oDate, bUTC, oFormat) {
            var iDay = bUTC ? oDate.getUTCDay() : oDate.getDay();
            return oFormat._adaptDayOfWeek(iDay);
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sPart = oParseHelper.findNumbers(sValue, oPart.digits);
            return {
                dayNumberOfWeek: parseInt(sPart),
                length: sPart.length
            };
        }
    },
    'a': {
        name: 'amPmMarker',
        format: function (oField, oDate, bUTC, oFormat) {
            var iDayPeriod = bUTC ? oDate.getUTCDayPeriod() : oDate.getDayPeriod();
            return oFormat.aDayPeriods[iDayPeriod];
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bPM;
            var iLength;
            var sAM = oFormat.aDayPeriods[0], sPM = oFormat.aDayPeriods[1];
            var rAMPM = /[aApP](?:\.)?[mM](?:\.)?/;
            var aMatch = sValue.match(rAMPM);
            var bVariant = aMatch && aMatch.index === 0;
            if (bVariant) {
                sValue = aMatch[0].replace(/\./g, '').toLowerCase() + sValue.substring(aMatch[0].length);
                sAM = sAM.replace(/\./g, '').toLowerCase();
                sPM = sPM.replace(/\./g, '').toLowerCase();
            }
            if (sValue.indexOf(sAM) === 0) {
                bPM = false;
                iLength = bVariant ? aMatch[0].length : sAM.length;
            } else if (sValue.indexOf(sPM) === 0) {
                bPM = true;
                iLength = bVariant ? aMatch[0].length : sPM.length;
            }
            return {
                pm: bPM,
                length: iLength
            };
        }
    },
    'H': {
        name: 'hour0_23',
        format: function (oField, oDate, bUTC, oFormat) {
            var iHours = bUTC ? oDate.getUTCHours() : oDate.getHours();
            return String(iHours).padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iHours = parseInt(sPart);
            bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (oConfig.strict && iHours > 23) {
                bValid = false;
            }
            return {
                hour: iHours,
                length: sPart.length,
                valid: bValid
            };
        }
    },
    'k': {
        name: 'hour1_24',
        format: function (oField, oDate, bUTC, oFormat) {
            var iHours = bUTC ? oDate.getUTCHours() : oDate.getHours();
            var sHours = iHours === 0 ? '24' : String(iHours);
            return sHours.padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iHours = parseInt(sPart);
            bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (iHours == 24) {
                iHours = 0;
            }
            if (oConfig.strict && iHours > 23) {
                bValid = false;
            }
            return {
                hour: iHours,
                length: sPart.length,
                valid: bValid
            };
        }
    },
    'K': {
        name: 'hour0_11',
        format: function (oField, oDate, bUTC, oFormat) {
            var iHours = bUTC ? oDate.getUTCHours() : oDate.getHours();
            var sHours = String(iHours > 11 ? iHours - 12 : iHours);
            return sHours.padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iHours = parseInt(sPart);
            bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (oConfig.strict && iHours > 11) {
                bValid = false;
            }
            return {
                hour: iHours,
                length: sPart.length,
                valid: bValid
            };
        }
    },
    'h': {
        name: 'hour1_12',
        format: function (oField, oDate, bUTC, oFormat) {
            var iHours = bUTC ? oDate.getUTCHours() : oDate.getHours();
            var sHours;
            if (iHours > 12) {
                sHours = String(iHours - 12);
            } else if (iHours == 0) {
                sHours = '12';
            } else {
                sHours = String(iHours);
            }
            return sHours.padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bPM = oConfig.dateValue.pm;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iHours = parseInt(sPart);
            var bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (iHours == 12) {
                iHours = 0;
                bPM = bPM === undefined ? true : bPM;
            }
            if (oConfig.strict && iHours > 11) {
                bValid = false;
            }
            return {
                hour: iHours,
                length: sPart.length,
                pm: bPM,
                valid: bValid
            };
        }
    },
    'm': {
        name: 'minute',
        format: function (oField, oDate, bUTC, oFormat) {
            var iMinutes = bUTC ? oDate.getUTCMinutes() : oDate.getMinutes();
            return String(iMinutes).padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iMinutes = parseInt(sPart);
            bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (oConfig.strict && iMinutes > 59) {
                bValid = false;
            }
            return {
                length: sPart.length,
                minute: iMinutes,
                valid: bValid
            };
        }
    },
    's': {
        name: 'second',
        format: function (oField, oDate, bUTC, oFormat) {
            var iSeconds = bUTC ? oDate.getUTCSeconds() : oDate.getSeconds();
            return String(iSeconds).padStart(oField.digits, '0');
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var bValid;
            var sPart = oParseHelper.findNumbers(sValue, Math.max(oPart.digits, 2));
            var iSeconds = parseInt(sPart);
            bValid = oParseHelper.checkValid(oPart.type, sPart === '', oFormat);
            if (oConfig.strict && iSeconds > 59) {
                bValid = false;
            }
            return {
                length: sPart.length,
                second: iSeconds,
                valid: bValid
            };
        }
    },
    'S': {
        name: 'fractionalsecond',
        format: function (oField, oDate, bUTC, oFormat) {
            var iMilliseconds = bUTC ? oDate.getUTCMilliseconds() : oDate.getMilliseconds();
            var sMilliseconds = String(iMilliseconds);
            var sFractionalseconds = sMilliseconds.padStart(3, '0');
            sFractionalseconds = sFractionalseconds.substr(0, oField.digits);
            sFractionalseconds = sFractionalseconds.padEnd(oField.digits, '0');
            return sFractionalseconds;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var sPart = oParseHelper.findNumbers(sValue, oPart.digits);
            var iLength = sPart.length;
            sPart = sPart.substr(0, 3);
            sPart = sPart.padEnd(3, '0');
            var iMilliseconds = parseInt(sPart);
            return {
                length: iLength,
                millisecond: iMilliseconds
            };
        }
    },
    'z': {
        name: 'timezoneGeneral',
        format: function (oField, oDate, bUTC, oFormat) {
            if (oField.digits > 3 && oDate.getTimezoneLong()) {
                return oDate.getTimezoneLong();
            } else if (oDate.getTimezoneShort()) {
                return oDate.getTimezoneShort();
            }
            var sTimeZone = 'GMT';
            var iTZOffset = Math.abs(oDate.getTimezoneOffset());
            var bPositiveOffset = oDate.getTimezoneOffset() > 0;
            var iHourOffset = Math.floor(iTZOffset / 60);
            var iMinuteOffset = iTZOffset % 60;
            if (!bUTC && iTZOffset != 0) {
                sTimeZone += bPositiveOffset ? '-' : '+';
                sTimeZone += String(iHourOffset).padStart(2, '0');
                sTimeZone += ':';
                sTimeZone += String(iMinuteOffset).padStart(2, '0');
            } else {
                sTimeZone += 'Z';
            }
            return sTimeZone;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            var iLength = 0;
            var iTZDiff;
            var oTZ = sValue.substring(0, 3);
            if (oTZ === 'GMT' || oTZ === 'UTC') {
                iLength = 3;
            } else if (sValue.substring(0, 2) === 'UT') {
                iLength = 2;
            } else if (sValue.charAt(0) == 'Z') {
                iLength = 1;
                iTZDiff = 0;
            } else {
                return { error: 'cannot be parsed correcly by sap.ui.core.format.DateFormat: The given timezone is not supported!' };
            }
            if (sValue.charAt(0) != 'Z') {
                var oParsedTZ = oParseHelper.parseTZ(sValue.substr(iLength), true);
                iLength += oParsedTZ.length;
                iTZDiff = oParsedTZ.tzDiff;
            }
            return {
                length: iLength,
                tzDiff: iTZDiff
            };
        }
    },
    'Z': {
        name: 'timezoneRFC822',
        format: function (oField, oDate, bUTC, oFormat) {
            var iTZOffset = Math.abs(oDate.getTimezoneOffset());
            var bPositiveOffset = oDate.getTimezoneOffset() > 0;
            var iHourOffset = Math.floor(iTZOffset / 60);
            var iMinuteOffset = iTZOffset % 60;
            var sTimeZone = '';
            if (!bUTC && iTZOffset != 0) {
                sTimeZone += bPositiveOffset ? '-' : '+';
                sTimeZone += String(iHourOffset).padStart(2, '0');
                sTimeZone += String(iMinuteOffset).padStart(2, '0');
            }
            return sTimeZone;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            return oParseHelper.parseTZ(sValue, false);
        }
    },
    'X': {
        name: 'timezoneISO8601',
        format: function (oField, oDate, bUTC, oFormat) {
            var iTZOffset = Math.abs(oDate.getTimezoneOffset());
            var bPositiveOffset = oDate.getTimezoneOffset() > 0;
            var iHourOffset = Math.floor(iTZOffset / 60);
            var iMinuteOffset = iTZOffset % 60;
            var sTimeZone = '';
            if (!bUTC && iTZOffset != 0) {
                sTimeZone += bPositiveOffset ? '-' : '+';
                sTimeZone += String(iHourOffset).padStart(2, '0');
                sTimeZone += ':';
                sTimeZone += String(iMinuteOffset).padStart(2, '0');
            } else {
                sTimeZone += 'Z';
            }
            return sTimeZone;
        },
        parse: function (sValue, oPart, oFormat, oConfig) {
            if (sValue.charAt(0) == 'Z') {
                return {
                    length: 1,
                    tzDiff: 0
                };
            } else {
                return oParseHelper.parseTZ(sValue, true);
            }
        }
    }
};
DateFormat.prototype._format = function (oJSDate, bUTC) {
    if (this.oFormatOptions.relative) {
        var sRes = this.formatRelative(oJSDate, bUTC, this.oFormatOptions.relativeRange);
        if (sRes) {
            return sRes;
        }
    }
    var sCalendarType = this.oFormatOptions.calendarType;
    var oDate = UniversalDate.getInstance(oJSDate, sCalendarType);
    var aBuffer = [], oPart, sResult, sSymbol;
    for (var i = 0; i < this.aFormatArray.length; i++) {
        oPart = this.aFormatArray[i];
        sSymbol = oPart.symbol || '';
        aBuffer.push(this.oSymbols[sSymbol].format(oPart, oDate, bUTC, this));
    }
    sResult = aBuffer.join('');
    if (Core.getConfiguration().getOriginInfo()) {
        sResult = new String(sResult);
        sResult.originInfo = {
            source: 'Common Locale Data Repository',
            locale: this.oLocale.toString(),
            style: this.oFormatOptions.style,
            pattern: this.oFormatOptions.pattern
        };
    }
    return sResult;
};
DateFormat.prototype.format = function (vJSDate, bUTC) {
    var sCalendarType = this.oFormatOptions.calendarType, sResult;
    if (bUTC === undefined) {
        bUTC = this.oFormatOptions.UTC;
    }
    if (Array.isArray(vJSDate)) {
        if (!this.oFormatOptions.interval) {
            Log.error('Non-interval DateFormat can\'t format more than one date instance.');
            return '';
        }
        if (vJSDate.length !== 2) {
            Log.error('Interval DateFormat can only format with 2 date instances but ' + vJSDate.length + ' is given.');
            return '';
        }
        if (this.oFormatOptions.singleIntervalValue) {
            if (vJSDate[0] === null) {
                Log.error('First date instance which is passed to the interval DateFormat shouldn\'t be null.');
                return '';
            }
            if (vJSDate[1] === null) {
                sResult = this._format(vJSDate[0], bUTC);
            }
        }
        if (sResult === undefined) {
            var bValid = vJSDate.every(function (oJSDate) {
                return oJSDate && !isNaN(oJSDate.getTime());
            });
            if (!bValid) {
                Log.error('At least one date instance which is passed to the interval DateFormat isn\'t valid.');
                return '';
            }
            sResult = this._formatInterval(vJSDate, bUTC);
        }
    } else {
        if (!vJSDate || isNaN(vJSDate.getTime())) {
            Log.error('The given date instance isn\'t valid.');
            return '';
        }
        if (this.oFormatOptions.interval) {
            Log.error('Interval DateFormat expects an array with two dates for the first argument but only one date is given.');
            return '';
        }
        sResult = this._format(vJSDate, bUTC);
    }
    if (sCalendarType == CalendarType$1.Japanese && this.oLocale.getLanguage() === 'ja') {
        sResult = sResult.replace(/(^|[^\d])1年/g, '$1元年');
    }
    return sResult;
};
DateFormat.prototype._formatInterval = function (aJSDates, bUTC) {
    var sCalendarType = this.oFormatOptions.calendarType;
    var oFromDate = UniversalDate.getInstance(aJSDates[0], sCalendarType);
    var oToDate = UniversalDate.getInstance(aJSDates[1], sCalendarType);
    var oDate;
    var oPart;
    var sSymbol;
    var aBuffer = [];
    var sPattern;
    var aFormatArray = [];
    var oDiffField = this._getGreatestDiffField([
        oFromDate,
        oToDate
    ], bUTC);
    if (!oDiffField) {
        return this._format(aJSDates[0], bUTC);
    }
    if (this.oFormatOptions.format) {
        sPattern = this.oLocaleData.getCustomIntervalPattern(this.oFormatOptions.format, oDiffField, sCalendarType);
    } else {
        sPattern = this.oLocaleData.getCombinedIntervalPattern(this.oFormatOptions.pattern, sCalendarType);
    }
    aFormatArray = this.parseCldrDatePattern(sPattern);
    oDate = oFromDate;
    for (var i = 0; i < aFormatArray.length; i++) {
        oPart = aFormatArray[i];
        sSymbol = oPart.symbol || '';
        if (oPart.repeat) {
            oDate = oToDate;
        }
        aBuffer.push(this.oSymbols[sSymbol].format(oPart, oDate, bUTC, this));
    }
    return aBuffer.join('');
};
var mFieldToGroup = {
    Era: 'Era',
    FullYear: 'Year',
    Quarter: 'Quarter',
    Month: 'Month',
    Week: 'Week',
    Date: 'Day',
    DayPeriod: 'DayPeriod',
    Hours: 'Hour',
    Minutes: 'Minute',
    Seconds: 'Second'
};
DateFormat.prototype._getGreatestDiffField = function (aDates, bUTC) {
    var bDiffFound = false, mDiff = {};
    this.aIntervalCompareFields.forEach(function (sField) {
        var sGetterPrefix = 'get' + (bUTC ? 'UTC' : ''), sMethodName = sGetterPrefix + sField, sFieldGroup = mFieldToGroup[sField], vFromValue = aDates[0][sMethodName].apply(aDates[0]), vToValue = aDates[1][sMethodName].apply(aDates[1]);
        if (!fnEqual(vFromValue, vToValue)) {
            bDiffFound = true;
            mDiff[sFieldGroup] = true;
        }
    });
    if (bDiffFound) {
        return mDiff;
    }
    return null;
};
DateFormat.prototype._parse = function (sValue, aFormatArray, bUTC, bStrict) {
    var iIndex = 0, oPart, sSubValue, oResult;
    var oDateValue = { valid: true };
    var oParseConf = {
        formatArray: aFormatArray,
        dateValue: oDateValue,
        strict: bStrict
    };
    for (var i = 0; i < aFormatArray.length; i++) {
        sSubValue = sValue.substr(iIndex);
        oPart = aFormatArray[i];
        oParseConf.index = i;
        oResult = this.oSymbols[oPart.symbol || ''].parse(sSubValue, oPart, this, oParseConf) || {};
        oDateValue = fnExtend(oDateValue, oResult);
        if (oResult.valid === false) {
            break;
        }
        iIndex += oResult.length || 0;
    }
    oDateValue.index = iIndex;
    if (oDateValue.pm) {
        oDateValue.hour += 12;
    }
    if (oDateValue.dayNumberOfWeek === undefined && oDateValue.dayOfWeek !== undefined) {
        oDateValue.dayNumberOfWeek = this._adaptDayOfWeek(oDateValue.dayOfWeek);
    }
    if (oDateValue.quarter !== undefined && oDateValue.month === undefined && oDateValue.day === undefined) {
        oDateValue.month = 3 * oDateValue.quarter;
        oDateValue.day = 1;
    }
    return oDateValue;
};
DateFormat.prototype._parseInterval = function (sValue, sCalendarType, bUTC, bStrict) {
    var aDateValues, iRepeat, oDateValue;
    this.intervalPatterns.some(function (sPattern) {
        var aFormatArray = this.parseCldrDatePattern(sPattern);
        iRepeat = undefined;
        for (var i = 0; i < aFormatArray.length; i++) {
            if (aFormatArray[i].repeat) {
                iRepeat = i;
                break;
            }
        }
        if (iRepeat === undefined) {
            oDateValue = this._parse(sValue, aFormatArray, bUTC, bStrict);
            if (oDateValue.index === 0 || oDateValue.index < sValue.length) {
                oDateValue.valid = false;
            }
            if (oDateValue.valid === false) {
                return;
            }
            aDateValues = [
                oDateValue,
                oDateValue
            ];
            return true;
        } else {
            aDateValues = [];
            oDateValue = this._parse(sValue, aFormatArray.slice(0, iRepeat), bUTC, bStrict);
            if (oDateValue.valid === false) {
                return;
            }
            aDateValues.push(oDateValue);
            var iLength = oDateValue.index;
            oDateValue = this._parse(sValue.substring(iLength), aFormatArray.slice(iRepeat), bUTC, bStrict);
            if (oDateValue.index === 0 || oDateValue.index + iLength < sValue.length) {
                oDateValue.valid = false;
            }
            if (oDateValue.valid === false) {
                return;
            }
            aDateValues.push(oDateValue);
            return true;
        }
    }.bind(this));
    return aDateValues;
};
var fnCreateDate = function (oDateValue, sCalendarType, bUTC, bStrict) {
    var oDate, iYear = typeof oDateValue.year === 'number' ? oDateValue.year : 1970;
    if (oDateValue.valid) {
        if (bUTC || oDateValue.tzDiff !== undefined) {
            oDate = UniversalDate.getInstance(new Date(0), sCalendarType);
            oDate.setUTCEra(oDateValue.era || UniversalDate.getCurrentEra(sCalendarType));
            oDate.setUTCFullYear(iYear);
            oDate.setUTCMonth(oDateValue.month || 0);
            oDate.setUTCDate(oDateValue.day || 1);
            oDate.setUTCHours(oDateValue.hour || 0);
            oDate.setUTCMinutes(oDateValue.minute || 0);
            oDate.setUTCSeconds(oDateValue.second || 0);
            oDate.setUTCMilliseconds(oDateValue.millisecond || 0);
            if (bStrict && (oDateValue.day || 1) !== oDate.getUTCDate()) {
                oDateValue.valid = false;
                oDate = undefined;
            } else {
                if (oDateValue.tzDiff) {
                    oDate.setUTCMinutes((oDateValue.minute || 0) + oDateValue.tzDiff);
                }
                if (oDateValue.week !== undefined && (oDateValue.month === undefined || oDateValue.day === undefined)) {
                    oDate.setUTCWeek({
                        year: oDateValue.weekYear || oDateValue.year,
                        week: oDateValue.week
                    });
                    if (oDateValue.dayNumberOfWeek !== undefined) {
                        oDate.setUTCDate(oDate.getUTCDate() + oDateValue.dayNumberOfWeek - 1);
                    }
                }
            }
        } else {
            oDate = UniversalDate.getInstance(new Date(1970, 0, 1, 0, 0, 0), sCalendarType);
            oDate.setEra(oDateValue.era || UniversalDate.getCurrentEra(sCalendarType));
            oDate.setFullYear(iYear);
            oDate.setMonth(oDateValue.month || 0);
            oDate.setDate(oDateValue.day || 1);
            oDate.setHours(oDateValue.hour || 0);
            oDate.setMinutes(oDateValue.minute || 0);
            oDate.setSeconds(oDateValue.second || 0);
            oDate.setMilliseconds(oDateValue.millisecond || 0);
            if (bStrict && (oDateValue.day || 1) !== oDate.getDate()) {
                oDateValue.valid = false;
                oDate = undefined;
            } else if (oDateValue.week !== undefined && (oDateValue.month === undefined || oDateValue.day === undefined)) {
                oDate.setWeek({
                    year: oDateValue.weekYear || oDateValue.year,
                    week: oDateValue.week
                });
                if (oDateValue.dayNumberOfWeek !== undefined) {
                    oDate.setDate(oDate.getDate() + oDateValue.dayNumberOfWeek - 1);
                }
            }
        }
        if (oDateValue.valid) {
            oDate = oDate.getJSDate();
            return oDate;
        }
    }
    return null;
};
function mergeWithoutOverwrite(object1, object2) {
    if (object1 === object2) {
        return object1;
    }
    var oMergedObject = {};
    Object.keys(object1).forEach(function (sKey) {
        oMergedObject[sKey] = object1[sKey];
    });
    Object.keys(object2).forEach(function (sKey) {
        if (!oMergedObject.hasOwnProperty(sKey)) {
            oMergedObject[sKey] = object2[sKey];
        }
    });
    return oMergedObject;
}
function isValidDateRange(oStartDate, oEndDate) {
    if (oStartDate.getTime() > oEndDate.getTime()) {
        return false;
    }
    return true;
}
DateFormat.prototype.parse = function (sValue, bUTC, bStrict) {
    sValue = sValue == null ? '' : String(sValue).trim();
    var oDateValue;
    var sCalendarType = this.oFormatOptions.calendarType;
    if (bUTC === undefined) {
        bUTC = this.oFormatOptions.UTC;
    }
    if (bStrict === undefined) {
        bStrict = this.oFormatOptions.strictParsing;
    }
    if (sCalendarType == CalendarType$1.Japanese && this.oLocale.getLanguage() === 'ja') {
        sValue = sValue.replace(/元年/g, '1年');
    }
    if (!this.oFormatOptions.interval) {
        var oJSDate = this.parseRelative(sValue, bUTC);
        if (oJSDate) {
            return oJSDate;
        }
        oDateValue = this._parse(sValue, this.aFormatArray, bUTC, bStrict);
        if (oDateValue.index === 0 || oDateValue.index < sValue.length) {
            oDateValue.valid = false;
        }
        oJSDate = fnCreateDate(oDateValue, sCalendarType, bUTC, bStrict);
        if (oJSDate) {
            return oJSDate;
        }
    } else {
        var aDateValues = this._parseInterval(sValue, sCalendarType, bUTC, bStrict);
        var oJSDate1, oJSDate2;
        if (aDateValues && aDateValues.length == 2) {
            var oDateValue1 = mergeWithoutOverwrite(aDateValues[0], aDateValues[1]);
            var oDateValue2 = mergeWithoutOverwrite(aDateValues[1], aDateValues[0]);
            oJSDate1 = fnCreateDate(oDateValue1, sCalendarType, bUTC, bStrict);
            oJSDate2 = fnCreateDate(oDateValue2, sCalendarType, bUTC, bStrict);
            if (oJSDate1 && oJSDate2) {
                if (this.oFormatOptions.singleIntervalValue && oJSDate1.getTime() === oJSDate2.getTime()) {
                    return [
                        oJSDate1,
                        null
                    ];
                }
                var bValid = isValidDateRange(oJSDate1, oJSDate2);
                if (bStrict && !bValid) {
                    Log.error('StrictParsing: Invalid date range. The given end date is before the start date.');
                    return [
                        null,
                        null
                    ];
                }
                return [
                    oJSDate1,
                    oJSDate2
                ];
            }
        }
    }
    if (!this.bIsFallback) {
        var vDate;
        this.aFallbackFormats.every(function (oFallbackFormat) {
            vDate = oFallbackFormat.parse(sValue, bUTC, bStrict);
            if (Array.isArray(vDate)) {
                return !(vDate[0] && vDate[1]);
            } else {
                return !vDate;
            }
        });
        return vDate;
    }
    if (!this.oFormatOptions.interval) {
        return null;
    } else {
        return [
            null,
            null
        ];
    }
};
DateFormat.prototype.parseCldrDatePattern = function (sPattern) {
    if (mCldrDatePattern[sPattern]) {
        return mCldrDatePattern[sPattern];
    }
    var aFormatArray = [], i, bQuoted = false, oCurrentObject = null, sState = '', sNewState = '', mAppeared = {}, bIntervalStartFound = false;
    for (i = 0; i < sPattern.length; i++) {
        var sCurChar = sPattern.charAt(i), sNextChar, sPrevChar, sPrevPrevChar;
        if (bQuoted) {
            if (sCurChar == '\'') {
                sPrevChar = sPattern.charAt(i - 1);
                sPrevPrevChar = sPattern.charAt(i - 2);
                sNextChar = sPattern.charAt(i + 1);
                if (sPrevChar == '\'' && sPrevPrevChar != '\'') {
                    bQuoted = false;
                } else if (sNextChar == '\'') {
                    i += 1;
                } else {
                    bQuoted = false;
                    continue;
                }
            }
            if (sState == 'text') {
                oCurrentObject.value += sCurChar;
            } else {
                oCurrentObject = {
                    type: 'text',
                    value: sCurChar
                };
                aFormatArray.push(oCurrentObject);
                sState = 'text';
            }
        } else {
            if (sCurChar == '\'') {
                bQuoted = true;
            } else if (this.oSymbols[sCurChar]) {
                sNewState = this.oSymbols[sCurChar].name;
                if (sState == sNewState) {
                    oCurrentObject.digits++;
                } else {
                    oCurrentObject = {
                        type: sNewState,
                        symbol: sCurChar,
                        digits: 1
                    };
                    aFormatArray.push(oCurrentObject);
                    sState = sNewState;
                    if (!bIntervalStartFound) {
                        if (mAppeared[sNewState]) {
                            oCurrentObject.repeat = true;
                            bIntervalStartFound = true;
                        } else {
                            mAppeared[sNewState] = true;
                        }
                    }
                }
            } else {
                if (sState == 'text') {
                    oCurrentObject.value += sCurChar;
                } else {
                    oCurrentObject = {
                        type: 'text',
                        value: sCurChar
                    };
                    aFormatArray.push(oCurrentObject);
                    sState = 'text';
                }
            }
        }
    }
    mCldrDatePattern[sPattern] = aFormatArray;
    return aFormatArray;
};
DateFormat.prototype.parseRelative = function (sValue, bUTC) {
    var aPatterns, oEntry, rPattern, oResult, iValue;
    if (!sValue) {
        return null;
    }
    aPatterns = this.oLocaleData.getRelativePatterns(this.aRelativeParseScales, this.oFormatOptions.relativeStyle);
    for (var i = 0; i < aPatterns.length; i++) {
        oEntry = aPatterns[i];
        rPattern = new RegExp('^\\s*' + oEntry.pattern.replace(/\{0\}/, '(\\d+)') + '\\s*$', 'i');
        oResult = rPattern.exec(sValue);
        if (oResult) {
            if (oEntry.value !== undefined) {
                return computeRelativeDate(oEntry.value, oEntry.scale);
            } else {
                iValue = parseInt(oResult[1]);
                return computeRelativeDate(iValue * oEntry.sign, oEntry.scale);
            }
        }
    }
    function computeRelativeDate(iDiff, sScale) {
        var iToday, oToday = new Date(), oJSDate;
        if (bUTC) {
            iToday = oToday.getTime();
        } else {
            iToday = Date.UTC(oToday.getFullYear(), oToday.getMonth(), oToday.getDate(), oToday.getHours(), oToday.getMinutes(), oToday.getSeconds(), oToday.getMilliseconds());
        }
        oJSDate = new Date(iToday);
        switch (sScale) {
        case 'second':
            oJSDate.setUTCSeconds(oJSDate.getUTCSeconds() + iDiff);
            break;
        case 'minute':
            oJSDate.setUTCMinutes(oJSDate.getUTCMinutes() + iDiff);
            break;
        case 'hour':
            oJSDate.setUTCHours(oJSDate.getUTCHours() + iDiff);
            break;
        case 'day':
            oJSDate.setUTCDate(oJSDate.getUTCDate() + iDiff);
            break;
        case 'week':
            oJSDate.setUTCDate(oJSDate.getUTCDate() + iDiff * 7);
            break;
        case 'month':
            oJSDate.setUTCMonth(oJSDate.getUTCMonth() + iDiff);
            break;
        case 'quarter':
            oJSDate.setUTCMonth(oJSDate.getUTCMonth() + iDiff * 3);
            break;
        case 'year':
            oJSDate.setUTCFullYear(oJSDate.getUTCFullYear() + iDiff);
            break;
        }
        if (bUTC) {
            return oJSDate;
        } else {
            return new Date(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate(), oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());
        }
    }
};
DateFormat.prototype.formatRelative = function (oJSDate, bUTC, aRange) {
    var oToday = new Date(), oDateUTC, sScale = this.oFormatOptions.relativeScale || 'day', iDiff, sPattern, iDiffSeconds;
    iDiffSeconds = (oJSDate.getTime() - oToday.getTime()) / 1000;
    if (this.oFormatOptions.relativeScale == 'auto') {
        sScale = this._getScale(iDiffSeconds, this.aRelativeScales);
    }
    if (!aRange) {
        aRange = this._mRanges[sScale];
    }
    if (sScale == 'year' || sScale == 'month' || sScale == 'day') {
        oToday = new Date(Date.UTC(oToday.getFullYear(), oToday.getMonth(), oToday.getDate()));
        oDateUTC = new Date(0);
        if (bUTC) {
            oDateUTC.setUTCFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());
        } else {
            oDateUTC.setUTCFullYear(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate());
        }
        oJSDate = oDateUTC;
    }
    iDiff = this._getDifference(sScale, [
        oToday,
        oJSDate
    ]);
    if (this.oFormatOptions.relativeScale != 'auto' && (iDiff < aRange[0] || iDiff > aRange[1])) {
        return null;
    }
    sPattern = this.oLocaleData.getRelativePattern(sScale, iDiff, iDiffSeconds > 0, this.oFormatOptions.relativeStyle);
    return fnFormatMessage(sPattern, [Math.abs(iDiff)]);
};
DateFormat.prototype._mRanges = {
    second: [
        -60,
        60
    ],
    minute: [
        -60,
        60
    ],
    hour: [
        -24,
        24
    ],
    day: [
        -6,
        6
    ],
    week: [
        -4,
        4
    ],
    month: [
        -12,
        12
    ],
    year: [
        -10,
        10
    ]
};
DateFormat.prototype._mScales = {
    second: 1,
    minute: 60,
    hour: 3600,
    day: 86400,
    week: 604800,
    month: 2592000,
    quarter: 7776000,
    year: 31536000
};
DateFormat.prototype._getScale = function (iDiffSeconds, aScales) {
    var sScale, sTestScale;
    iDiffSeconds = Math.abs(iDiffSeconds);
    for (var i = 0; i < aScales.length; i++) {
        sTestScale = aScales[i];
        if (iDiffSeconds >= this._mScales[sTestScale]) {
            sScale = sTestScale;
            break;
        }
    }
    if (!sScale) {
        sScale = aScales[aScales.length - 1];
    }
    return sScale;
};
function cutDateFields(oDate, iStartIndex) {
    var aFields = [
            'FullYear',
            'Month',
            'Date',
            'Hours',
            'Minutes',
            'Seconds',
            'Milliseconds'
        ], sMethodName;
    for (var i = iStartIndex; i < aFields.length; i++) {
        sMethodName = 'set' + aFields[iStartIndex];
        oDate[sMethodName].apply(oDate, [0]);
    }
}
var mRelativeDiffs = {
    year: function (oFromDate, oToDate) {
        return oToDate.getFullYear() - oFromDate.getFullYear();
    },
    month: function (oFromDate, oToDate) {
        return oToDate.getMonth() - oFromDate.getMonth() + this.year(oFromDate, oToDate) * 12;
    },
    week: function (oFromDate, oToDate, oFormat) {
        var iFromDay = oFormat._adaptDayOfWeek(oFromDate.getDay());
        var iToDay = oFormat._adaptDayOfWeek(oToDate.getDay());
        cutDateFields(oFromDate, 3);
        cutDateFields(oToDate, 3);
        return (oToDate.getTime() - oFromDate.getTime() - (iToDay - iFromDay) * oFormat._mScales.day * 1000) / (oFormat._mScales.week * 1000);
    },
    day: function (oFromDate, oToDate, oFormat) {
        cutDateFields(oFromDate, 3);
        cutDateFields(oToDate, 3);
        return (oToDate.getTime() - oFromDate.getTime()) / (oFormat._mScales.day * 1000);
    },
    hour: function (oFromDate, oToDate, oFormat) {
        cutDateFields(oFromDate, 4);
        cutDateFields(oToDate, 4);
        return (oToDate.getTime() - oFromDate.getTime()) / (oFormat._mScales.hour * 1000);
    },
    minute: function (oFromDate, oToDate, oFormat) {
        cutDateFields(oFromDate, 5);
        cutDateFields(oToDate, 5);
        return (oToDate.getTime() - oFromDate.getTime()) / (oFormat._mScales.minute * 1000);
    },
    second: function (oFromDate, oToDate, oFormat) {
        cutDateFields(oFromDate, 6);
        cutDateFields(oToDate, 6);
        return (oToDate.getTime() - oFromDate.getTime()) / (oFormat._mScales.second * 1000);
    }
};
DateFormat.prototype._adaptDayOfWeek = function (iDayOfWeek) {
    var iFirstDayOfWeek = LocaleData.getInstance(Core.getConfiguration().getFormatSettings().getFormatLocale()).getFirstDayOfWeek();
    var iDayNumberOfWeek = iDayOfWeek - (iFirstDayOfWeek - 1);
    if (iDayNumberOfWeek <= 0) {
        iDayNumberOfWeek += 7;
    }
    return iDayNumberOfWeek;
};
DateFormat.prototype._getDifference = function (sScale, aDates) {
    var oFromDate = aDates[0];
    var oToDate = aDates[1];
    return Math.round(mRelativeDiffs[sScale](oFromDate, oToDate, this));
};
DateFormat.prototype.getAllowedCharacters = function (aFormatArray) {
    if (this.oFormatOptions.relative) {
        return '';
    }
    var sAllowedCharacters = '';
    var bNumbers = false;
    var bAll = false;
    var oPart;
    for (var i = 0; i < aFormatArray.length; i++) {
        oPart = aFormatArray[i];
        switch (oPart.type) {
        case 'text':
            if (sAllowedCharacters.indexOf(oPart.value) < 0) {
                sAllowedCharacters += oPart.value;
            }
            break;
        case 'day':
        case 'year':
        case 'weekYear':
        case 'dayNumberOfWeek':
        case 'weekInYear':
        case 'hour0_23':
        case 'hour1_24':
        case 'hour0_11':
        case 'hour1_12':
        case 'minute':
        case 'second':
        case 'fractionalsecond':
            if (!bNumbers) {
                sAllowedCharacters += '0123456789';
                bNumbers = true;
            }
            break;
        case 'month':
        case 'monthStandalone':
            if (oPart.digits < 3) {
                if (!bNumbers) {
                    sAllowedCharacters += '0123456789';
                    bNumbers = true;
                }
            } else {
                bAll = true;
            }
            break;
        default:
            bAll = true;
            break;
        }
    }
    if (bAll) {
        sAllowedCharacters = '';
    }
    return sAllowedCharacters;
};

class CalendarDate {
	constructor() {
		let aArgs = arguments, // eslint-disable-line
			oJSDate,
			oNow,
			sCalendarType;

		switch (aArgs.length) {
		case 0: // defaults to the current date
			oNow = new Date();
			return this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());

		case 1: // CalendarDate
		case 2: // CalendarDate, sCalendarType
			if (!(aArgs[0] instanceof CalendarDate)) {
				throw new Error("Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.");
			}
			sCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;
			// Use source.valueOf() (returns the same point of time regardless calendar type) instead of
			// source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date
			oJSDate = new Date(aArgs[0].valueOf());

			// Make this date really local. Now getters are safe.
			oJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());
			oJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());

			this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);
			break;

		case 3: // year, month, date
		case 4: // year, month, date, sCalendarType
			checkNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);
			checkNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);
			checkNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);

			oJSDate = new Date(0, 0, 1);
			oJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.

			if (aArgs[3]) {
				sCalendarType = aArgs[3];
			}
			this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);
			break;

		default:
			throw new Error(`${"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType"
				+ "or 2) year, month, date, (optional) calendarType"}${aArgs}`);
		}
	}

	getYear() {
		return this._oUDate.getUTCFullYear();
	}

	setYear(year) {
		checkNumericLike(year, `Invalid year: ${year}`);
		this._oUDate.setUTCFullYear(year);
		return this;
	}

	getMonth() {
		return this._oUDate.getUTCMonth();
	}

	/**
	 * Sets the given month as ordinal month of the year.
	 * @param {int} month An integer between 0 and 11, representing the months January through December( or their
	 * equivalent month names for the given calendar).
	 * If the specified value is is outside of the expected range, this method attempts to update the date information
	 * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.
	 * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.
	 * 0 will result in the previous month's last day.
	 * -1 will result in the day before the previous month's last day.
	 * 32 will result in:
	 * - first day of the next month if the current month has 31 days.
	 * - second day of the next month if the current month has 30 days.
	 * Other value will result in adding or subtracting days according to the given value.
	 * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.
	 */
	setMonth(month, date) {
		checkNumericLike(month, `Invalid month: ${month}`);
		if (date || date === 0) {
			checkNumericLike(date, `Invalid date: ${date}`);
			this._oUDate.setUTCMonth(month, date);
		} else {
			this._oUDate.setUTCMonth(month);
		}
		return this;
	}

	getDate() {
		return this._oUDate.getUTCDate();
	}

	setDate(date) {
		checkNumericLike(date, `Invalid date: ${date}`);
		this._oUDate.setUTCDate(date);
		return this;
	}

	getDay() {
		return this._oUDate.getUTCDay();
	}

	getCalendarType() {
		return this._oUDate.sCalendarType;
	}

	isBefore(oCalendarDate) {
		checkCalendarDate(oCalendarDate);
		return this.valueOf() < oCalendarDate.valueOf();
	}

	isAfter(oCalendarDate) {
		checkCalendarDate(oCalendarDate);
		return this.valueOf() > oCalendarDate.valueOf();
	}

	isSameOrBefore(oCalendarDate) {
		checkCalendarDate(oCalendarDate);
		return this.valueOf() <= oCalendarDate.valueOf();
	}

	isSameOrAfter(oCalendarDate) {
		checkCalendarDate(oCalendarDate);
		return this.valueOf() >= oCalendarDate.valueOf();
	}

	isSame(oCalendarDate) {
		checkCalendarDate(oCalendarDate);
		return this.valueOf() === oCalendarDate.valueOf();
	}

	toLocalJSDate() {
		// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of
		// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date
		const oLocalDate = new Date(this._oUDate.getTime());

		// Make this date really local. Now getters are safe.
		oLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());
		oLocalDate.setHours(0, 0, 0, 0);

		return oLocalDate;
	}

	toUTCJSDate() {
		// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of
		// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date
		const oUTCDate = new Date(this._oUDate.getTime());
		oUTCDate.setUTCHours(0, 0, 0, 0);

		return oUTCDate;
	}

	toString() {
		return `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;
	}

	valueOf() {
		return this._oUDate.getTime();
	}

	static fromLocalJSDate(oJSDate, sCalendarType) {
		// Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests
		// because Date object in the test is different than the Date object in the application (due to the iframe).
		// We can use jQuery.type or this method:
		function isValidDate(date) {
			return date && Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date); // eslint-disable-line
		}
		if (!isValidDate(oJSDate)) {
			throw new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);
		}
		return new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);
	}

	static fromTimestamp(iTimestamp, sCalendarType) {
		const oCalDate = new CalendarDate(0, 0, 1);
		oCalDate._oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);
		return oCalDate;
	}
}

function createUniversalUTCDate(oDate, sCalendarType) {
	if (sCalendarType) {
		return UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);
	}
	return new UniversalDate(createUTCDate(oDate).getTime());
}

/**
 * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.
 * @param {Date} oDate JavaScript date object. Time related information is cut.
 * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.
 */
function createUTCDate(oDate) {
	const oUTCDate = new Date(Date.UTC(0, 0, 1));

	oUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());

	return oUTCDate;
}

function checkCalendarDate(oCalendarDate) {
	if (!(oCalendarDate instanceof CalendarDate)) {
		throw new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);
	}
}

/**
 * Verifies the given value is numeric like, i.e. 3, "3" and throws an error if it is not.
 * @param {any} value The value of any type to check. If null or undefined, this method throws an error.
 * @param {string} message The message to be used if an error is to be thrown
 * @throws will throw an error if the value is null or undefined or is not like a number
 */
function checkNumericLike(value, message) {
	if (value === undefined || value === Infinity || isNaN(value)) { // eslint-disable-line
		throw message;
	}
}

const name$7 = "appointment-2";
const pathData$7 = "M32 481V65q0-14 9.5-23T64 33h64V1h32v32h192V1h32v32h64q14 0 23 9t9 23v416q0 14-9 23t-23 9H64q-13 0-22.5-9T32 481zm416 0V129H64v352h384zM256 193q14 0 23 9t9 23-9 23-23 9-23-9-9-23 9-23 23-9zM128 321q14 0 23 9t9 23-9 23-23 9-23-9-9-23 9-23 23-9zm256-128q14 0 23 9t9 23-9 23-23 9-23-9-9-23 9-23 23-9zm0 128q14 0 23 9t9 23-9 23-23 9-23-9-9-23 9-23 23-9zm-128 0q14 0 23 9t9 23-9 23-23 9-23-9-9-23 9-23 23-9zM96 225q0-14 9-23t23-9 23 9 9 23-9 23-23 9-23-9-9-23zM384 97V65h-32v32h32zM128 65v32h32V65h-32z";
const ltr$7 = false;

registerIcon(name$7, { pathData: pathData$7, ltr: ltr$7});

const block0$n = (context) => { return scopedHtml`<div class="ui5-calheader-root" dir="${ifDefined(context.effectiveDir)}" @keydown=${context._onkeydown}><div id="${ifDefined(context._id)}-btnPrev" class="${ifDefined(context._btnPrev.classes)}" @click=${context._handlePrevPress} data-sap-cal-head-button="Prev" title="${ifDefined(context._prevButtonText)}"><ui5-icon class="ui5-calheader-arrowicon" name="${ifDefined(context._btnPrev.icon)}"></ui5-icon></div><div class="ui5-calheader-midcontainer" @keydown="${context._onMidContainerKeyDown}"><div id="${ifDefined(context._id)}-btn1" class="ui5-calheader-arrowbtn ui5-calheader-middlebtn" ?hidden="${context._isMonthButtonHidden}" type="${ifDefined(context._btn1.type)}" tabindex="0" @click=${context._showMonthPicker} data-sap-show-picker="Month">${ifDefined(context._btn1.text)}</div><div id="${ifDefined(context._id)}-btn2" class="ui5-calheader-arrowbtn ui5-calheader-middlebtn" type="${ifDefined(context._btn2.type)}" tabindex="0" @click=${context._showYearPicker} data-sap-show-picker="Year">${ifDefined(context._btn2.text)}</div></div><div class="${ifDefined(context._btnNext.classes)}" @click=${context._handleNextPress} id="${ifDefined(context._id)}-btnNext" data-sap-cal-head-button="Next" title=${ifDefined(context._nextButtonText)}><ui5-icon class="ui5-calheader-arrowicon" name="${ifDefined(context._btnNext.icon)}"></ui5-icon></div></div>`; };


const main$n = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$n(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$3 = ":host{display:inline-block;width:100%}.ui5-calheader-root{display:flex;height:var(--_ui5_calendar_header_height);padding:var(--_ui5_calendar_header_padding);box-sizing:border-box}.ui5-calheader-root [ui5-button]{height:100%}.ui5-calheader-arrowbtn{display:flex;justify-content:center;align-items:center;width:var(--_ui5_calendar_header_arrow_button_width);background-color:var(--sapButton_Lite_Background);color:var(--sapButton_TextColor);cursor:pointer;overflow:hidden;white-space:nowrap;padding:0;font-size:var(--sapFontSize)}.ui5-calheader-arrowbtn.ui5-calheader-arrowbtn-disabled,.ui5-calheader-arrowbtn.ui5-calheader-arrowbtn-disabled:active,.ui5-calheader-arrowbtn.ui5-calheader-arrowbtn-disabled:focus,.ui5-calheader-arrowbtn.ui5-calheader-arrowbtn-disabled:hover{pointer-events:none;opacity:.4;outline:none;background-color:var(--sapButton_Lite_Background);color:var(--sapButton_TextColor)}[hidden].ui5-calheader-arrowbtn.ui5-calheader-middlebtn{display:none}.ui5-calheader-arrowbtn:focus{outline:none}.ui5-calheader-arrowbtn:hover{background-color:var(--sapButton_Hover_Background);color:var(--sapButton_Hover_TextColor)}.ui5-calheader-arrowbtn:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}.ui5-calheader-arrowbtn,.ui5-calheader-middlebtn{border:var(--_ui5_calendar_header_arrow_button_border);border-radius:var(--_ui5_calendar_header_arrow_button_border_radius);display:flex}.ui5-calheader-arrowicon{color:currentColor;pointer-events:none}.ui5-calheader-midcontainer{display:flex;justify-content:space-around;flex:1 1 auto;padding:0 .5rem}.ui5-calheader-midcontainer .ui5-calheader-middlebtn:first-child{margin-right:.5rem}.ui5-calheader-middlebtn{font-family:\"72override\",var(--sapFontFamily);width:var(--_ui5_calendar_header_middle_button_width);flex:var(--_ui5_calendar_header_middle_button_flex);position:relative;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ui5-calheader-middlebtn:focus{border:var(--_ui5_calendar_header_middle_button_focus_border);border-radius:var(--_ui5_calendar_header_middle_button_focus_border_radius)}.ui5-calheader-middlebtn:focus:after{content:\"\";display:var(--_ui5_calendar_header_middle_button_focus_after_display);width:var(--_ui5_calendar_header_middle_button_focus_after_width);height:var(--_ui5_calendar_header_middle_button_focus_after_height);border:1px dotted var(--sapContent_FocusColor);position:absolute;top:var(--_ui5_calendar_header_middle_button_focus_after_top_offset);left:var(--_ui5_calendar_header_middle_button_focus_after_left_offset)}.ui5-calheader-middlebtn:focus:active:after{border-color:var(--sapContent_ContrastFocusColor)}[dir=rtl] .ui5-calheader-root-midcontainer .ui5-calheader-middlebtn:first-child{margin-left:.5rem;margin-right:0}";

const metadata$p = {
	tag: "ui5-calendar-header",
	properties: {
		monthText: {
			type: String,
		},
		yearText: {
			type: String,
		},
		_btnPrev: {
			type: Object,
		},
		_btnNext: {
			type: Object,
		},
		_btn1: {
			type: Object,
		},
		_btn2: {
			type: Object,
		},
		_isNextButtonDisabled: {
			type: Boolean,
		},
		_isPrevButtonDisabled: {
			type: Boolean,
		},
		_isMonthButtonHidden: {
			type: Boolean,
		},
	},
	events: {
		"previous-press": {},
		"next-press": {},
		"show-month-press": {},
		"show-year-press": {},
	},
};

class CalendarHeader extends UI5Element {
	static get metadata() {
		return metadata$p;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$n;
	}

	static get styles() {
		return styles$3;
	}

	static get dependencies() {
		return [Button, Icon];
	}

	constructor() {
		super();
		this._btnPrev = {};
		this._btnPrev.icon = "slim-arrow-left";

		this._btnNext = {};
		this._btnNext.icon = "slim-arrow-right";

		this._btn1 = {};
		this._btn1.type = ButtonDesign.Transparent;

		this._btn2 = {};
		this._btn2.type = ButtonDesign.Transparent;

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this._btn1.text = this.monthText;
		this._btn2.text = this.yearText;
		this._btnPrev.classes = "ui5-calheader-arrowbtn";
		this._btnNext.classes = "ui5-calheader-arrowbtn";

		if (this._isNextButtonDisabled) {
			this._btnNext.classes += " ui5-calheader-arrowbtn-disabled";
		}

		if (this._isPrevButtonDisabled) {
			this._btnPrev.classes += " ui5-calheader-arrowbtn-disabled";
		}
	}

	_handlePrevPress(event) {
		this.fireEvent("previous-press", event);
	}

	_handleNextPress(event) {
		this.fireEvent("next-press", event);
	}

	_showMonthPicker(event) {
		this.fireEvent("show-month-press", event);
	}

	_showYearPicker(event) {
		this.fireEvent("show-year-press", event);
	}

	_onkeydown(event) {
		if (isSpace(event) || isEnter(event)) {
			const showPickerButton = event.target.getAttribute("data-sap-show-picker");

			if (showPickerButton) {
				this[`_show${showPickerButton}Picker`]();
			}
		}
	}

	_onMidContainerKeyDown(event) {
		if (isSpace(event)) {
			event.preventDefault();
		}
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	get _prevButtonText() {
		return this.i18nBundle.getText(CALENDAR_HEADER_PREVIOUS_BUTTON);
	}

	get _nextButtonText() {
		return this.i18nBundle.getText(CALENDAR_HEADER_NEXT_BUTTON);
	}
}

CalendarHeader.define();

let formatSettings;

const getFirstDayOfWeek = () => {
	if (formatSettings === undefined) {
		formatSettings = getFormatSettings();
	}

	return formatSettings.firstDayOfWeek;
};

const calculateWeekNumber = (confFirstDayOfWeek, oDate, iYear, oLocale, oLocaleData) => {
	let iWeekNum = 0;
	let iWeekDay = 0;
	const iFirstDayOfWeek = Number.isInteger(confFirstDayOfWeek) ? confFirstDayOfWeek : oLocaleData.getFirstDayOfWeek();

	// search Locale for containing "en-US", since sometimes
	// when any user settings have been defined, subtag "sapufmt" is added to the locale name
	// this is described inside sap.ui.core.Configuration file
	if (oLocale && (oLocale.getLanguage() === "en" && oLocale.getRegion() === "US")) {
		/*
			* in US the week starts with Sunday
			* The first week of the year starts with January 1st. But Dec. 31 is still in the last year
			* So the week beginning in December and ending in January has 2 week numbers
			*/
		const oJanFirst = new UniversalDate(oDate.getTime());
		oJanFirst.setUTCFullYear(iYear, 0, 1);
		iWeekDay = oJanFirst.getUTCDay();

		// get the date for the same weekday like jan 1.
		const oCheckDate = new UniversalDate(oDate.getTime());
		oCheckDate.setUTCDate(oCheckDate.getUTCDate() - oCheckDate.getUTCDay() + iWeekDay);

		iWeekNum = Math.round((oCheckDate.getTime() - oJanFirst.getTime()) / 86400000 / 7) + 1;
	} else {
		// normally the first week of the year is the one where the first Thursday of the year is
		// find Thursday of this week
		// if the checked day is before the 1. day of the week use a day of the previous week to check
		const oThursday = new UniversalDate(oDate.getTime());
		oThursday.setUTCDate(oThursday.getUTCDate() - iFirstDayOfWeek);
		iWeekDay = oThursday.getUTCDay();
		oThursday.setUTCDate(oThursday.getUTCDate() - iWeekDay + 4);

		const oFirstDayOfYear = new UniversalDate(oThursday.getTime());
		oFirstDayOfYear.setUTCMonth(0, 1);
		iWeekDay = oFirstDayOfYear.getUTCDay();
		let iAddDays = 0;
		if (iWeekDay > 4) {
			iAddDays = 7; // first day of year is after Thursday, so first Thursday is in the next week
		}
		const oFirstThursday = new UniversalDate(oFirstDayOfYear.getTime());
		oFirstThursday.setUTCDate(1 - iWeekDay + 4 + iAddDays);

		iWeekNum = Math.round((oThursday.getTime() - oFirstThursday.getTime()) / 86400000 / 7) + 1;
	}

	return iWeekNum;
};

const block0$o = (context) => { return scopedHtml`<div class="ui5-dp-root" style="${styleMap(context.styles.wrapper)}" @keydown=${context._onkeydown} @keyup=${context._onkeyup} @mousedown=${context._onmousedown} @mouseup=${context._onmouseup}><div id="${ifDefined(context._id)}-content" class="ui5-dp-content" role="grid" aria-roledescription="Calendar"><div role="row" class="ui5-dp-days-names-container">${ repeat(context._dayNames, (item, index) => item._id || index, (item, index) => block1$i(item)) }</div>${ repeat(context._weeks, (item, index) => item._id || index, (item, index) => block2$h(item, index, context)) }</div></div>`; };
const block1$i = (item, index, context) => { return scopedHtml`<div id=${ifDefined(item.id)} role="columnheader" aria-label="${ifDefined(item.name)}" class="${ifDefined(item.classes)}">${ifDefined(item.ultraShortName)}</div>`; };
const block2$h = (item, index, context) => { return scopedHtml`${ item.length ? block3$d(item, index, context) : block8$5() }`; };
const block3$d = (item, index, context) => { return scopedHtml`<div style="display: flex;" role="row"  @mouseover="${context._onitemmouseover}" @keydown="${context._onitemkeydown}">${ repeat(item, (item, index) => item._id || index, (item, index) => block4$b(item)) }</div>`; };
const block4$b = (item, index, context) => { return scopedHtml`${ item.timestamp ? block5$a(item) : block6$7(item) }`; };
const block5$a = (item, index, context) => { return scopedHtml`<div id="${ifDefined(item.id)}" tabindex="${ifDefined(item._tabIndex)}" data-sap-timestamp="${ifDefined(item.timestamp)}" data-sap-index="${ifDefined(item._index)}" role="gridcell" aria-selected="${ifDefined(item.selected)}" aria-label="${ifDefined(item.ariaLabel)}" aria-disabled="${ifDefined(item.ariaDisabled)}" class="${ifDefined(item.classes)}"><span class="ui5-dp-daytext" data-sap-timestamp="${ifDefined(item.timestamp)}" data-sap-index="${ifDefined(item._index)}">${ifDefined(item.iDay)}</span></div>`; };
const block6$7 = (item, index, context) => { return scopedHtml`${ !item.isHidden ? block7$5(item) : undefined }`; };
const block7$5 = (item, index, context) => { return scopedHtml`<div class="ui5-dp-weekname-container" role="rowheader" aria-label="Calendar Week ${ifDefined(item.weekNum)}"><span class="ui5-dp-weekname">${ifDefined(item.weekNum)}</span></div>`; };
const block8$5 = (item, index, context) => { return scopedHtml`<div class="sapWCEmptyWeek"></div>`; };


const main$o = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$o(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var dayPickerCSS = ":host(:not([hidden])){display:inline-block}:host{height:100%;width:100%}:host([_hide-week-numbers]) .ui5-dp-content{flex-basis:100%}.ui5-dp-dayname,.ui5-dp-item,.ui5-dp-weekname{width:var(--_ui5_day_picker_item_width);height:var(--_ui5_day_picker_item_height);margin-top:var(--_ui5_daypicker_item_margin);margin-right:var(--_ui5_daypicker_item_margin);font-family:\"72override\",var(--sapFontFamily);border-radius:var(--_ui5_daypicker_item_border_radius)}.ui5-dp-weekname{color:var(--_ui5_daypicker_weekname_color)}.ui5-dp-content{display:flex;flex-basis:87.5%;flex-direction:column;font-family:\"72override\",var(--sapFontFamily)}.ui5-dp-days-names-container{display:flex;height:var(--_ui5_daypicker_daynames_container_height)}.ui5-dp-weeknumber-container{padding-top:var(--_ui5_daypicker_weeknumbers_container_padding_top);flex-basis:12.5%}.ui5-dp-dayname,.ui5-dp-item,.ui5-dp-weekname,.ui5-dp-weekname-container{display:flex;flex-grow:1;justify-content:center;align-items:center;font-size:var(--sapFontSmallSize);outline:none;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ui5-dp-item{position:relative;color:var(--sapTextColor);background:var(--sapLegend_WorkingBackground);font-size:var(--sapFontSize);border:var(--_ui5_daypicker_item_border)}.ui5-dp-item:hover{background:var(--sapList_Hover_Background)}.ui5-dp-daytext{display:flex;width:100%;height:100%;justify-content:center;align-items:center;box-sizing:border-box}.ui5-dp-dayname{color:var(--_ui5_daypicker_dayname_color);height:100%}.ui5-dp-item.ui5-dp-item--weeekend{background:var(--sapLegend_NonWorkingBackground)}.ui5-dp-item.ui5-dp-item--disabled{pointer-events:none;opacity:.5}.ui5-dp-item.ui5-dp-item--weeekend:hover{background:var(--sapList_Hover_Background)}.ui5-dp-item.ui5-dp-item--othermonth{color:var(--_ui5_daypicker_item_othermonth_color);background:var(--_ui5_daypicker_item_othermonth_background_color);border-color:transparent}.ui5-dp-item.ui5-dp-item--othermonth:hover,.ui5-dp-item.ui5-dp-item--weeekend.ui5-dp-item--othermonth:hover{color:var(--_ui5_daypicker_item_othermonth_hover_color);background:var(--sapList_Hover_Background)}.ui5-dp-item:focus:after{content:\"\";width:calc(100% - .25rem);height:calc(100% - .25rem);border:var(--_ui5_daypicker_item_outline_width) dotted var(--sapContent_FocusColor);position:absolute;top:var(--_ui5_daypicker_item_outline_offset);left:var(--_ui5_daypicker_item_outline_offset)}.ui5-dp-item.ui5-dp-item--selected .ui5-dp-daytext{background:var(--sapContent_Selected_Background);color:var(--sapContent_Selected_TextColor)}.ui5-dp-item.ui5-dp-item--selected.ui5-dp-item--now .ui5-dp-daytext{border:1px solid var(--_ui5_daypicker_item_selected_border_color);border-radius:var(--_ui5_daypicker_item_now_inner_border_radius)}.ui5-dp-item.ui5-dp-item--selected.ui5-dp-item--now:focus:after{width:var(--_ui5_daypicker_item_now_selected_focus_after_width);height:var(--_ui5_daypicker_item_now_selected_focus_after_height);border-color:var(--sapContent_FocusColor);top:0;left:0}.ui5-dp-item.ui5-dp-item--selected:hover{background:var(--_ui5_daypicker_item_selected_hover_background_color);color:var(--sapContent_ContrastTextColor)}.ui5-dp-item.ui5-dp-item--selected:focus:after{border-color:var(--sapContent_ContrastFocusColor)}.ui5-dp-items-container{outline:none}.ui5-dp-item.ui5-dp-item--selected-between .ui5-dp-daytext,.ui5-dp-item[hovered] .ui5-dp-daytext{background-color:var(--sapList_SelectionBackgroundColor);color:var(--sapTextColor)}.ui5-dp-item.ui5-dp-item--selected-between,.ui5-dp-item[hovered]{border:1px solid var(--sapContent_Selected_Background);border-radius:5%}.ui5-dp-item.ui5-dp-item--now{border:.125rem solid var(--sapLegend_CurrentDateTime)}.ui5-dp-item.ui5-dp-item--selected.ui5-dp-item--selected-between:focus:after{border-color:var(--sapContent_FocusColor)}.ui5-dp-items-container>:first-child{justify-content:flex-end}.ui5-dp-emptyweek{height:var(--_ui5_day_picker_empty_height)}";

const monthDiff = (startDate, endDate) => {
	let months;
	const _startDate = CalendarDate.fromTimestamp(startDate).toLocalJSDate(),
		_endDate = CalendarDate.fromTimestamp(endDate).toLocalJSDate();

	months = (_endDate.getFullYear() - _startDate.getFullYear()) * 12;
	months -= _startDate.getMonth();
	months += _endDate.getMonth();
	return months;
};

/**
 * @public
 */
const metadata$q = {
	tag: "ui5-daypicker",
	properties: /** @lends  sap.ui.webcomponents.main.DayPicker.prototype */ {
		/**
		 * A UNIX timestamp - seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {number}
		 * @public
		 */
		timestamp: {
			type: Integer,
		},

		/**
		 * Sets a calendar type used for display.
		 * If not set, the calendar type of the global configuration is used.
		 * @type {CalendarType}
		 * @public
		 */
		primaryCalendarType: {
			type: CalendarType,
		},

		/**
		 * Sets the selected dates as UTC timestamps.
		 * @type {Array}
		 * @public
		 */
		selectedDates: {
			type: Integer,
			multiple: true,
		},

		/**
		 * Determines the minimum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		minDate: {
			type: String,
		},

		/**
		 * Determines the maximum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		maxDate: {
			type: String,
		},

		/**
		 * Determines the format, displayed in the input field.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		formatPattern: {
			type: String,
		},

		/**
		 * Defines the visibility of the week numbers column.
		 * <br><br>
		 *
		 * <b>Note:<b> For calendars other than Gregorian,
		 * the week numbers are not displayed regardless of what is set.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		hideWeekNumbers: {
			type: Boolean,
		},

		/**
		 * Defines the effective weeks numbers visibility,
		 * based on the <code>primaryCalendarType</code> and <code>hideWeekNumbers</code> property.
		 * @type {boolean}
		 * @private
		 */
		_hideWeekNumbers: {
			type: Boolean,
		},

		/**
		 * @type {Object}
		 * @private
		 */
		_weeks: {
			type: Object,
			multiple: true,
		},

		/**
		 * @type {boolean}
		 * @private
		 */
		_hidden: {
			type: Boolean,
			noAttribute: true,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.DayPicker.prototype */ {
		/**
		 * Fired when the user selects a new Date on the Web Component.
		 * @public
		 * @event
		 */
		change: {},
		/**
		 * Fired when month, year has changed due to item navigation.
		 * @public
		 * @event
		 */
		navigate: {},
	},
};

/**
 * @class
 *
 * Represents one month view inside a calendar.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.DayPicker
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-daypicker
 * @public
 */
class DayPicker extends UI5Element {
	static get metadata() {
		return metadata$q;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$o;
	}

	static get styles() {
		return dayPickerCSS;
	}

	constructor() {
		super();
		this._oLocale = getLocale();
		this._oLocaleData = new LocaleData(this._oLocale);

		this._itemNav = new ItemNavigation(this, {
			rowSize: 7,
			pageSize: 42,
			behavior: ItemNavigationBehavior.Paging,
		});

		this._itemNav.getItemsCallback = function getItemsCallback() {
			return this.focusableDays;
		}.bind(this);

		this._itemNav.attachEvent(
			ItemNavigation.BORDER_REACH,
			this._handleItemNavigationBorderReach.bind(this)
		);

		this._itemNav.attachEvent(
			ItemNavigation.AFTER_FOCUS,
			this._handleItemNavigationAfterFocus.bind(this)
		);

		this._itemNav.attachEvent(
			"PageBottom",
			this._handleMonthBottomOverflow.bind(this)
		);

		this._itemNav.attachEvent(
			"PageTop",
			this._handleMonthTopOverflow.bind(this)
		);

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		let oCalDate,
			day,
			timestamp,
			lastWeekNumber = -1,
			isDaySelected = false,
			todayIndex = 0;

		const _aVisibleDays = this._getVisibleDays(this._calendarDate);
		this._weeks = [];
		let week = [];
		this._weekNumbers = [];
		let weekday;
		const _monthsNameWide = this._oLocaleData.getMonths("wide", this._calendarDate._oUDate.sCalendarType);

		this._minDateObject = new Date(this._minDate);
		this._maxDateObject = new Date(this._maxDate);

		/* eslint-disable no-loop-func */
		for (let i = 0; i < _aVisibleDays.length; i++) {
			oCalDate = _aVisibleDays[i];
			timestamp = oCalDate.valueOf() / 1000; // no need to round because CalendarDate does it

			// day of the week
			weekday = oCalDate.getDay() - this._getFirstDayOfWeek();
			if (weekday < 0) {
				weekday += 7;
			}

			const nonWorkingAriaLabel = this._isWeekend(oCalDate) ? `${this._dayPickerNonWorkingDay} ` : "";

			day = {
				timestamp: timestamp.toString(),
				selected: this._selectedDates.some(d => {
					return d === timestamp;
				}),
				selectedBetween: this._selectedDates.slice(1, this._selectedDates.length - 1).some(d => {
					return d === timestamp;
				}),
				iDay: oCalDate.getDate(),
				_index: i.toString(),
				classes: `ui5-dp-item ui5-dp-wday${weekday}`,
				ariaLabel: `${nonWorkingAriaLabel}${_monthsNameWide[oCalDate.getMonth()]} ${oCalDate.getDate()}, ${oCalDate.getYear()}`,
			};

			const isToday = oCalDate.isSame(CalendarDate.fromLocalJSDate(new Date(), this._primaryCalendarType));

			week.push(day);

			if (oCalDate.getDay() === this._getFirstDayOfWeek()) {
				day.classes += " ui5-dp-firstday";
			}

			if (day.selected) {
				day.classes += " ui5-dp-item--selected";
				isDaySelected = true;
			}

			if (day.selectedBetween) {
				day.classes += " ui5-dp-item--selected-between";
			}

			if (isToday) {
				day.classes += " ui5-dp-item--now";
				todayIndex = i;
				day.ariaLabel = `today ${day.ariaLabel}`;
			}

			if (oCalDate.getMonth() !== this._month) {
				day.classes += " ui5-dp-item--othermonth";
				day.ariaDisabled = "true";
			}

			day.id = `${this._id}-${timestamp}`;

			if (this._isWeekend(oCalDate)) {
				day.classes += " ui5-dp-item--weeekend";
			}
			if ((this.minDate || this.maxDate) && this._isOutOfSelectableRange(oCalDate)) {
				day.classes += " ui5-dp-item--disabled";
				day.disabled = true;
			}

			this._hideWeekNumbers = this.shouldHideWeekNumbers;

			if (day.classes.indexOf("ui5-dp-wday6") !== -1
				|| _aVisibleDays.length - 1 === i) {
				const weekNumber = calculateWeekNumber(getFirstDayOfWeek(), oCalDate.toUTCJSDate(), oCalDate.getYear(), this._oLocale, this._oLocaleData);
				if (lastWeekNumber !== weekNumber) {
					const weekNum = {
						weekNum: weekNumber,
						isHidden: this._hideWeekNumbers,
					};
					week.unshift(weekNum);
					lastWeekNumber = weekNumber;
				}

				this._weeks.push(week);
				week = [];
			}
		}
		while (this._weeks.length < 6) {
			this._weeks.push([]);
		}
		/* eslint-enable no-loop-func */

		if (!isDaySelected && todayIndex && this._itemNav.current === 0) {
			this._itemNav.current = todayIndex;
		}

		const aDayNamesWide = this._oLocaleData.getDays("wide", this._primaryCalendarType);
		const aDayNamesAbbreviated = this._oLocaleData.getDays("abbreviated", this._primaryCalendarType);
		const aUltraShortNames = aDayNamesAbbreviated.map(n => n);
		let dayName;

		this._dayNames = [];
		this._dayNames.push({
			classes: "ui5-dp-dayname",
			name: this._dayPickerWeekNumberText,
		});
		for (let i = 0; i < 7; i++) {
			weekday = i + this._getFirstDayOfWeek();
			if (weekday > 6) {
				weekday -= 7;
			}
			dayName = {
				id: `${this._id}-WH${i.toString()}`,
				name: aDayNamesWide[weekday],
				ultraShortName: aUltraShortNames[weekday],
				classes: "ui5-dp-dayname",
			};

			this._dayNames.push(dayName);
		}

		this._dayNames[1].classes += " ui5-dp-firstday";
	}

	onAfterRendering() {
		this._fireDayPickerRendered();
	}

	_onmousedown(event) {
		const target = event.target;
		const dayPressed = this._isDayPressed(target);

		if (dayPressed) {
			const targetDate = parseInt(target.getAttribute("data-sap-timestamp"));

			// findIndex, give it to item navigation
			for (let i = 0; i < this._weeks.length; i++) {
				for (let j = 0; j < this._weeks[i].length; j++) {
					if (parseInt(this._weeks[i][j].timestamp) === targetDate) {
						let index = parseInt(target.getAttribute("data-sap-index"));
						if (this.minDate || this.maxDate) {
							const focusableItem = this.focusableDays.find(item => parseInt(item._index) === index);
							index = focusableItem ? this.focusableDays.indexOf(focusableItem) : index;
						}

						this._itemNav.current = index;
						this._itemNav.update();
						break;
					}
				}
			}

			this.targetDate = targetDate;
		}
	}

	_onmouseup(event) {
		const dayPressed = this._isDayPressed(event.target);
		if (this.targetDate) {
			this._modifySelectionAndNotifySubscribers(this.targetDate, event.ctrlKey);
			this.targetDate = null;
		}

		if (!dayPressed) {
			this._itemNav.focusCurrent();
		}
	}

	_onitemmouseover(event) {
		if (this.selectedDates.length === 1) {
			this.fireEvent("item-mouseover", event);
		}
	}

	_onitemkeydown(event) {
		if (this.selectedDates.length === 1) {
			this.fireEvent("item-keydown", event);
		}
	}

	_onkeydown(event) {
		if (isEnter(event)) {
			return this._handleEnter(event);
		}

		if (isSpace(event)) {
			event.preventDefault();
			return;
		}

		if (isHomeCtrl(event)) {
			this._navToStartEndDayOfTheMonth(event, true);
		}

		if (isEndCtrl(event)) {
			this._navToStartEndDayOfTheMonth(event, false);
		}

		if (isPageUpShift(event)) {
			this._changeYears(event, false, 1);
		}

		if (isPageUpShiftCtrl(event)) {
			this._changeYears(event, false, 10);
		}

		if (isPageDownShift(event)) {
			this._changeYears(event, true, 1);
		}

		if (isPageDownShiftCtrl(event)) {
			this._changeYears(event, true, 10);
		}
	}

	_onkeyup(event) {
		if (isSpace(event)) {
			this._handleSpace(event);
		}
	}

	_handleEnter(event) {
		event.preventDefault();
		if (event.target.className.indexOf("ui5-dp-item") > -1) {
			const targetDate = parseInt(event.target.getAttribute("data-sap-timestamp"));
			this._modifySelectionAndNotifySubscribers(targetDate, event.ctrlKey);
		}
	}

	_handleSpace(event) {
		event.preventDefault();
		if (event.target.className.indexOf("ui5-dp-item") > -1) {
			const targetDate = parseInt(event.target.getAttribute("data-sap-timestamp"));
			this._modifySelectionAndNotifySubscribers(targetDate, event.ctrlKey);
		}
	}

	_navToStartEndDayOfTheMonth(event, start) {
		event.preventDefault();

		const currentItem = this._itemNav._getCurrentItem();
		let currentTimestamp = parseInt(currentItem.getAttribute("data-sap-timestamp")) * 1000;
		let calDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);

		if (currentItem.classList.contains("ui5-dp-item--othermonth")) {
			return;
		}

		calDate.setDate(1);
		if (!start) {
			// set the day to be the last day of the current month
			calDate.setMonth(calDate.getMonth() + 1, 0);
		}

		if (calDate.valueOf() < this._minDate) {
			calDate = CalendarDate.fromLocalJSDate(new Date(this._minDate), this._primaryCalendarType);
		} else if (calDate.valueOf() > this._maxDate) {
			calDate = CalendarDate.fromLocalJSDate(new Date(this._maxDate), this._primaryCalendarType);
		}

		currentTimestamp = calDate.valueOf() / 1000;
		const newItemIndex = this._itemNav._getItems().findIndex(item => parseInt(item.timestamp) === currentTimestamp);

		this._itemNav.currentIndex = newItemIndex;
		this._itemNav.focusCurrent();
	}

	/**
	 * Converts "timestamp" property value into a Java Script Date object and
	 * adds or extracts a given number of years from it
	 *
	 * @param {object} event used to prevent the default browser behavior
	 * @param {boolean} forward if true indicates addition
	 * @param {int} step for year number to substract or add
	 */
	_changeYears(event, forward, step) {
		const currentItem = this._itemNav._getCurrentItem();
		let currentTimestamp = parseInt(currentItem.getAttribute("data-sap-timestamp") * 1000);
		const currentDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);
		let newDate = new CalendarDate(currentDate, this._primaryCalendarType);

		if (forward) {
			newDate.setYear(newDate.getYear() + step);
		} else {
			newDate.setYear(newDate.getYear() - step);
		}

		if (currentDate.getMonth() !== newDate.getMonth()) {
			newDate.setDate(0);
		}

		if (newDate.valueOf() < this._minDate) {
			newDate = CalendarDate.fromLocalJSDate(new Date(this._minDate), this._primaryCalendarType);
		} else if (newDate.valueOf() > this._maxDate) {
			newDate = CalendarDate.fromLocalJSDate(new Date(this._maxDate), this._primaryCalendarType);
		}

		currentTimestamp = (newDate.valueOf() / 1000);

		this._navigateAndWaitRerender(currentTimestamp);

		event.preventDefault();
	}

	get shouldHideWeekNumbers() {
		if (this._primaryCalendarType !== CalendarType.Gregorian) {
			return true;
		}

		return this.hideWeekNumbers;
	}

	get _timestamp() {
		return this.timestamp !== undefined ? this.timestamp : Math.floor(new Date().getTime() / 1000);
	}

	get _localDate() {
		return new Date(this._timestamp * 1000);
	}

	get _calendarDate() {
		return CalendarDate.fromTimestamp(this._localDate.getTime(), this._primaryCalendarType);
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	get _month() {
		return this._calendarDate.getMonth();
	}

	get _year() {
		return this._calendarDate.getYear();
	}

	get _currentCalendarDate() {
		return CalendarDate.fromTimestamp(new Date().getTime(), this._primaryCalendarType);
	}

	get _selectedDates() {
		return this.selectedDates || [];
	}

	get _primaryCalendarType() {
		return this.primaryCalendarType || getCalendarType$1() || LocaleData.getInstance(getLocale()).getPreferredCalendarType();
	}

	get focusableDays() {
		const focusableDays = [];

		for (let i = 0; i < this._weeks.length; i++) {
			const week = this._weeks[i].slice(1).filter(x => !x.disabled);
			focusableDays.push(week);
		}

		return [].concat(...focusableDays);
	}

	get _dayPickerWeekNumberText() {
		return this.i18nBundle.getText(DAY_PICKER_WEEK_NUMBER_TEXT);
	}

	get _dayPickerNonWorkingDay() {
		return this.i18nBundle.getText(DAY_PICKER_NON_WORKING_DAY);
	}

	_modifySelectionAndNotifySubscribers(sNewDate, bAdd) {
		if (bAdd) {
			this.selectedDates = [...this._selectedDates, sNewDate];
		} else {
			this.selectedDates = [sNewDate];
		}

		this.fireEvent("change", { dates: [...this._selectedDates] });
	}

	_handleMonthBottomOverflow(event) {
		this._itemNav.hasNextPage = this._hasNextMonth();
	}

	_handleMonthTopOverflow(event) {
		this._itemNav.hasPrevPage = this._hasPrevMonth();
	}

	_hasNextMonth() {
		let newMonth = this._month + 1;
		let newYear = this._year;
		const maxCalendarYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();

		if (newMonth > 11) {
			newMonth = 0;
			newYear++;
		}

		if (newYear > maxCalendarYear && newMonth === 0) {
			return false;
		}

		if (!this.maxDate) {
			return true;
		}

		const oNewDate = this._calendarDate;
		oNewDate.setDate(oNewDate.getDate());
		oNewDate.setYear(newYear);
		oNewDate.setMonth(newMonth);

		const monthsBetween = monthDiff(oNewDate.valueOf(), this._maxDate);
		if (monthsBetween < 0) {
			return false;
		}

		const lastFocusableDay = this.focusableDays[this.focusableDays.length - 1].iDay;
		if (monthsBetween === 0 && CalendarDate.fromTimestamp(this._maxDate).toLocalJSDate().getDate() === lastFocusableDay) {
			return false;
		}

		return true;
	}

	_hasPrevMonth() {
		let newMonth = this._month - 1;
		let newYear = this._year;
		const minCalendarYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();

		if (newMonth < 0) {
			newMonth = 11;
			newYear--;
		}

		if (newYear < minCalendarYear && newMonth === 11) {
			return false;
		}

		if (!this.minDate) {
			return true;
		}

		const oNewDate = this._calendarDate;
		oNewDate.setDate(oNewDate.getDate());
		oNewDate.setYear(newYear);
		oNewDate.setMonth(newMonth);

		const monthsBetween = monthDiff(this._minDate, oNewDate.valueOf());
		if (this.minDate && monthsBetween < 0) {
			return false;
		}

		return true;
	}

	_handleItemNavigationBorderReach(event) {
		const currentItem = this._itemNav._getCurrentItem();
		let newDate;
		let currentDate;
		let currentTimestamp;

		if (isUp(event.originalEvent) || isLeft(event.originalEvent)) {
			currentTimestamp = this._weeks[0][event.offset + 1].timestamp * 1000;
			newDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);
			newDate.setDate(newDate.getDate() - 7);
		}

		if (isDown(event.originalEvent) || isRight(event.originalEvent)) {
			currentTimestamp = this._weeks[this._weeks.length - 1][event.offset + 1].timestamp * 1000;
			newDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);
			newDate.setDate(newDate.getDate() + 7);
		}

		if (isPageUp(event.originalEvent)) {
			currentTimestamp = parseInt(currentItem.getAttribute("data-sap-timestamp") * 1000);
			currentDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);
			newDate = new CalendarDate(currentDate, this._primaryCalendarType);
			newDate.setMonth(newDate.getMonth() - 1);
			if (currentDate.getMonth() === newDate.getMonth()) {
				newDate.setDate(0);
			}
		}

		if (isPageDown(event.originalEvent)) {
			currentTimestamp = parseInt(currentItem.getAttribute("data-sap-timestamp") * 1000);
			currentDate = CalendarDate.fromTimestamp(currentTimestamp, this._primaryCalendarType);
			newDate = new CalendarDate(currentDate, this._primaryCalendarType);
			newDate.setMonth(newDate.getMonth() + 1);
			if (newDate.getMonth() - currentDate.getMonth() > 1) {
				newDate.setDate(0);
			}
		}

		if (!newDate) {
			return;
		}

		if (newDate.valueOf() < this._minDate) {
			newDate = CalendarDate.fromLocalJSDate(new Date(this._minDate), this._primaryCalendarType);
		} else if (newDate.valueOf() > this._maxDate) {
			newDate = CalendarDate.fromLocalJSDate(new Date(this._maxDate), this._primaryCalendarType);
		}

		currentTimestamp = (newDate.valueOf() / 1000);

		this._navigateAndWaitRerender(currentTimestamp);
	}

	_handleItemNavigationAfterFocus() {
		const currentItem = this._itemNav._getCurrentItem();
		const currentTimestamp = parseInt(currentItem.getAttribute("data-sap-timestamp"));

		if (currentItem.classList.contains("ui5-dp-item--othermonth")) {
			this._navigateAndWaitRerender(currentTimestamp);
		}
	}

	async _navigateAndWaitRerender(timestamp) {
		this.fireEvent("navigate", { timestamp });
		await RenderScheduler.whenFinished();

		const newItemIndex = this._itemNav._getItems().findIndex(item => parseInt(item.timestamp) === timestamp);
		this._itemNav.currentIndex = newItemIndex;
		this._itemNav.focusCurrent();
		this._fireDayPickerRendered();
	}

	_fireDayPickerRendered() {
		if (this.selectedDates.length === 1) {
			this.fireEvent("daypickerrendered", { focusedItemIndex: this._itemNav.currentIndex });
		}
	}

	_isWeekend(oDate) {
		const iWeekDay = oDate.getDay(),
			iWeekendStart = this._oLocaleData.getWeekendStart(),
			iWeekendEnd = this._oLocaleData.getWeekendEnd();

		return (iWeekDay >= iWeekendStart && iWeekDay <= iWeekendEnd)
			|| (iWeekendEnd < iWeekendStart && (iWeekDay >= iWeekendStart || iWeekDay <= iWeekendEnd));
	}

	_isDayPressed(target) {
		const targetParent = target.parentNode;
		return (target.className.indexOf("ui5-dp-item") > -1) || (targetParent && target.parentNode.classList.contains("ui5-dp-item"));
	}

	_isOutOfSelectableRange(date) {
		const currentDate = date._oUDate ? date.toLocalJSDate() : CalendarDate.fromTimestamp(date).toLocalJSDate();
		const minDate = this._minDateObject;
		const maxDate = this._maxDateObject;

		currentDate.setHours(0);
		if (minDate) {
			minDate.setHours(0);
		}
		if (maxDate) {
			maxDate.setHours(0);
		}

		return currentDate > maxDate || currentDate < minDate;
	}

	get _maxDate() {
		return this.maxDate ? this._getTimeStampFromString(this.maxDate) : this._getMaxCalendarDate();
	}

	get _minDate() {
		return this.minDate ? this._getTimeStampFromString(this.minDate) : this._getMinCalendarDate();
	}

	_getTimeStampFromString(value) {
		const jsDate = this.getFormat().parse(value);
		if (jsDate) {
			const calDate = CalendarDate.fromLocalJSDate(jsDate, this._primaryCalendarType);
			return calDate.toUTCJSDate().valueOf();
		}
		return undefined;
	}

	_getMinCalendarDate() {
		const minDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		minDate.setYear(1);
		minDate.setMonth(0);
		minDate.setDate(1);
		return minDate.toUTCJSDate().valueOf();
	}

	_getMaxCalendarDate() {
		const maxDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		maxDate.setYear(9999);
		maxDate.setMonth(11);
		const tempDate = new CalendarDate(maxDate, this._primaryCalendarType);
		tempDate.setDate(1);
		tempDate.setMonth(tempDate.getMonth() + 1, 0);
		maxDate.setDate(tempDate.getDate());// 31st for Gregorian Calendar
		return maxDate.toUTCJSDate().valueOf();
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		}
		return this._oDateFormat;
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	_getVisibleDays(oStartDate, bIncludeBCDates) {
		let oCalDate,
			iDaysOldMonth,
			iYear;

		const minCalendarDateYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();
		const maxCalendarDateYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();
		const _aVisibleDays = [];

		// If date passed generate days for new start date else return the current one
		if (!oStartDate) {
			return _aVisibleDays;
		}

		const iFirstDayOfWeek = this._getFirstDayOfWeek();

		// determine weekday of first day in month
		const oFirstDay = new CalendarDate(oStartDate, this._primaryCalendarType);
		oFirstDay.setDate(1);
		iDaysOldMonth = oFirstDay.getDay() - iFirstDayOfWeek;
		if (iDaysOldMonth < 0) {
			iDaysOldMonth = 7 + iDaysOldMonth;
		}

		if (iDaysOldMonth > 0) {
			// determine first day for display
			oFirstDay.setDate(1 - iDaysOldMonth);
		}

		const oDay = new CalendarDate(oFirstDay);
		for (let i = 0; i < 42; i++) {
			iYear = oDay.getYear();
			oCalDate = new CalendarDate(oDay, this._primaryCalendarType);
			if (bIncludeBCDates && iYear < minCalendarDateYear) {
				// For dates before 0001-01-01 we should render only empty squares to keep
				// the month square matrix correct.
				oCalDate._bBeforeFirstYear = true;
				_aVisibleDays.push(oCalDate);
			} else if (iYear >= minCalendarDateYear && iYear <= maxCalendarDateYear) {
				// Days before 0001-01-01 or after 9999-12-31 should not be rendered.
				_aVisibleDays.push(oCalDate);
			}
			oDay.setDate(oDay.getDate() + 1);
		}

		return _aVisibleDays;
	}

	_getFirstDayOfWeek() {
		const confFirstDayOfWeek = getFirstDayOfWeek();
		return Number.isInteger(confFirstDayOfWeek) ? confFirstDayOfWeek : this._oLocaleData.getFirstDayOfWeek();
	}

	get styles() {
		return {
			wrapper: {
				display: this._hidden ? "none" : "flex",
			},
			main: {
				width: "100%",
			},
		};
	}

	static async onDefine() {
		await Promise.all([
			fetchCldr(getLocale().getLanguage(), getLocale().getRegion(), getLocale().getScript()),
			fetchI18nBundle("@ui5/webcomponents"),
		]);
	}
}

DayPicker.define();

const block0$p = (context) => { return scopedHtml`<div class="ui5-mp-root" role="grid" aria-readonly="false" aria-multiselectable="false" style="${styleMap(context.styles.main)}" @keydown=${context._onkeydown} @mousedown=${context._onmousedown} @mouseup=${context._onmouseup}>${ repeat(context._quarters, (item, index) => item._id || index, (item, index) => block1$j(item)) }</div>`; };
const block1$j = (item, index, context) => { return scopedHtml`<div class="ui5-mp-quarter">${ repeat(item, (item, index) => item._id || index, (item, index) => block2$i(item)) }</div>`; };
const block2$i = (item, index, context) => { return scopedHtml`<div id="${ifDefined(item.id)}" data-sap-timestamp=${ifDefined(item.timestamp)} tabindex=${ifDefined(item._tabIndex)} class="${ifDefined(item.classes)}" role="gridcell" aria-selected="false">${ifDefined(item.name)}</div>`; };


const main$p = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$p(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$4 = ":host(:not([hidden])){display:inline-block}:host{width:100%;height:100%}.ui5-mp-root{padding:2rem 0 1rem 0;display:flex;flex-direction:column;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);justify-content:center;align-items:center}.ui5-mp-item{display:flex;width:calc(33.333% - .125rem);height:var(--_ui5_month_picker_item_height);color:var(--sapTextColor);background-color:var(--sapLegend_WorkingBackground);align-items:center;justify-content:center;margin:var(--_ui5_monthpicker_item_margin);box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default;outline:none;position:relative;border:var(--_ui5_monthpicker_item_border);border-radius:var(--_ui5_monthpicker_item_border_radius)}.ui5-mp-item:hover{background-color:var(--sapList_Hover_Background)}.ui5-mp-item.ui5-mp-item--selected{background-color:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}.ui5-mp-item.ui5-mp-item--disabled{pointer-events:none;opacity:.5}.ui5-mp-item.ui5-mp-item--selected:focus{background-color:var(--sapContent_Selected_Background)}.ui5-mp-item.ui5-mp-item--selected:focus:after{border-color:var(--sapContent_ContrastFocusColor)}.ui5-mp-item.ui5-mp-item--selected:hover{background-color:var(--sapContent_Selected_Background)}.ui5-mp-item:focus:after{content:\"\";position:absolute;width:var(--_ui5_monthpicker_item_focus_after_width);height:var(--_ui5_monthpicker_item_focus_after_height);border:var(--_ui5_monthpicker_item_focus_after_border);top:var(--_ui5_monthpicker_item_focus_after_offset);left:var(--_ui5_monthpicker_item_focus_after_offset)}.ui5-mp-quarter{display:flex;justify-content:center;align-items:center;width:100%}";

/**
 * @public
 */
const metadata$r = {
	tag: "ui5-monthpicker",
	properties: /** @lends  sap.ui.webcomponents.main.MonthPicker.prototype */ {
		/**
		 * A UNIX timestamp - seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {Integer}
		 * @public
		 */
		timestamp: {
			type: Integer,
		},

		/**
		 * Sets a calendar type used for display.
		 * If not set, the calendar type of the global configuration is used.
		 * @type {CalendarType}
		 * @public
		 */
		primaryCalendarType: {
			type: CalendarType,
		},

		/**
		 * Determines the мinimum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		minDate: {
			type: String,
		},

		/**
		 * Determines the maximum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		maxDate: {
			type: String,
		},

		_quarters: {
			type: Object,
			multiple: true,
		},

		_hidden: {
			type: Boolean,
			noAttribute: true,
		},
		/**
		 * Determines the format, displayed in the input field.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		formatPattern: {
			type: String,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.MonthPicker.prototype */ {
		/**
		 * Fired when the user selects a new Date on the Web Component.
		 * @public
		 * @event
		 */
		change: {},
		/**
		 * Fired when month, year has changed due to item navigation.
		 * @since 1.0.0-rc.9
		 * @public
		 * @event
		 */
		navigate: {},
	},
};

/**
 * Month picker component.
 *
 * @class
 *
 * Displays months which can be selected.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.MonthPicker
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-monthpicker
 * @public
 */
class MonthPicker extends UI5Element {
	static get metadata() {
		return metadata$r;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$p;
	}

	static get styles() {
		return styles$4;
	}

	constructor() {
		super();
		this._oLocale = getLocale();
		this._oLocaleData = new LocaleData(this._oLocale);

		this._itemNav = new ItemNavigation(this, {
			pageSize: 12,
			rowSize: 3,
			behavior: ItemNavigationBehavior.Paging,
		});

		this._itemNav.getItemsCallback = function getItemsCallback() {
			const focusableMonths = [];

			for (let i = 0; i < this._quarters.length; i++) {
				const quarter = this._quarters[i].filter(x => !x.disabled);
				focusableMonths.push(quarter);
			}

			return [].concat(...focusableMonths);
		}.bind(this);

		this._itemNav.setItemsCallback = function setItemsCallback(items) {
			this._quarters = items;
		}.bind(this);

		this._itemNav.attachEvent(
			ItemNavigation.BORDER_REACH,
			this._handleItemNavigationBorderReach.bind(this)
		);
	}

	onBeforeRendering() {
		const quarters = [];
		const oCalDate = CalendarDate.fromTimestamp(new Date().getTime(), this._primaryCalendarType);
		let timestamp;

		for (let i = 0; i < 12; i++) {
			oCalDate.setMonth(i);
			timestamp = oCalDate.valueOf() / 1000;

			const month = {
				timestamp: timestamp.toString(),
				id: `${this._id}-m${i}`,
				name: this._oLocaleData.getMonths("wide", this._primaryCalendarType)[i],
				classes: "ui5-mp-item",
			};

			if (this._month === i) {
				month.classes += " ui5-mp-item--selected";
			}

			if ((this.minDate || this.maxDate) && this._isOutOfSelectableRange(i)) {
				month.classes += " ui5-mp-item--disabled";
				month.disabled = true;
			}

			const quarterIndex = parseInt(i / 3);

			if (quarters[quarterIndex]) {
				quarters[quarterIndex].push(month);
			} else {
				quarters[quarterIndex] = [month];
			}
		}

		this._quarters = quarters;
	}

	onAfterRendering() {
		this._itemNav.focusCurrent();
	}

	get _timestamp() {
		return this.timestamp !== undefined ? this.timestamp : Math.floor(new Date().getTime() / 1000);
	}

	get _localDate() {
		return new Date(this._timestamp * 1000);
	}

	get _calendarDate() {
		return CalendarDate.fromTimestamp(this._localDate.getTime(), this._primaryCalendarType);
	}

	get _month() {
		return this._calendarDate.getMonth();
	}

	get _primaryCalendarType() {
		return this.primaryCalendarType || getCalendarType$1() || LocaleData.getInstance(getLocale()).getPreferredCalendarType();
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	_onmousedown(event) {
		if (event.target.className.indexOf("ui5-mp-item") > -1) {
			const targetTimestamp = this.getTimestampFromDOM(event.target);
			const focusedItem = this._itemNav._getItems().find(item => parseInt(item.timestamp) === targetTimestamp);
			this._itemNav.currentIndex = this._itemNav._getItems().indexOf(focusedItem);
			this._itemNav.focusCurrent();
		}
	}

	_onmouseup(event) {
		if (event.target.className.indexOf("ui5-mp-item") > -1) {
			const timestamp = this.getTimestampFromDOM(event.target);
			this.timestamp = timestamp;
			this.fireEvent("change", { timestamp });
		}
	}

	_onkeydown(event) {
		if (isSpace(event) || isEnter(event)) {
			this._activateMonth(event);
		}
	}

	_activateMonth(event) {
		event.preventDefault();
		if (event.target.className.indexOf("ui5-mp-item") > -1) {
			const timestamp = this.getTimestampFromDOM(event.target);
			this.timestamp = timestamp;
			this.fireEvent("change", { timestamp });
		}
	}

	_handleItemNavigationBorderReach(event) {
		if (this._isOutOfSelectableRange(this._month)) {
			return;
		}

		this.fireEvent("navigate", event);
	}

	_isOutOfSelectableRange(monthIndex) {
		const currentDateYear = this._localDate.getFullYear(),
			minDate = new Date(this._minDate),
			maxDate = new Date(this._maxDate),
			minDateCheck = minDate && ((currentDateYear === minDate.getFullYear() && monthIndex < minDate.getMonth()) || currentDateYear < minDate.getFullYear()),
			maxDateCheck = maxDate && ((currentDateYear === maxDate.getFullYear() && monthIndex > maxDate.getMonth()) || (currentDateYear > maxDate.getFullYear()));

		return maxDateCheck || minDateCheck;
	}

	get _maxDate() {
		return this.maxDate ? this._getTimeStampFromString(this.maxDate) : this._getMaxCalendarDate();
	}

	get _minDate() {
		return this.minDate ? this._getTimeStampFromString(this.minDate) : this._getMinCalendarDate();
	}

	_getTimeStampFromString(value) {
		const jsDate = this.getFormat().parse(value);
		if (jsDate) {
			return CalendarDate.fromLocalJSDate(jsDate, this._primaryCalendarType).toUTCJSDate().valueOf();
		}
		return undefined;
	}

	_getMinCalendarDate() {
		const minDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		minDate.setYear(1);
		minDate.setMonth(0);
		minDate.setDate(1);
		return minDate.valueOf();
	}

	_getMaxCalendarDate() {
		const maxDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		maxDate.setYear(9999);
		maxDate.setMonth(11);
		const tempDate = new CalendarDate(maxDate, this._primaryCalendarType);
		tempDate.setDate(1);
		tempDate.setMonth(tempDate.getMonth() + 1, 0);
		maxDate.setDate(tempDate.getDate());// 31st for Gregorian Calendar
		return maxDate.valueOf();
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		}
		return this._oDateFormat;
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	getTimestampFromDOM(domNode) {
		const oMonthDomRef = domNode.getAttribute("data-sap-timestamp");
		return parseInt(oMonthDomRef);
	}

	get styles() {
		return {
			main: {
				display: this._hidden ? "none" : "",
			},
		};
	}
}

MonthPicker.define();

const block0$q = (context) => { return scopedHtml`<div class="ui5-yp-root" role="grid" aria-readonly="false" aria-multiselectable="false" style="${styleMap(context.styles.main)}" @keydown=${context._onkeydown} @mousedown=${context._onmousedown} @mouseup=${context._onmouseup}>${ repeat(context._yearIntervals, (item, index) => item._id || index, (item, index) => block1$k(item)) }</div>`; };
const block1$k = (item, index, context) => { return scopedHtml`<div class="ui5-yp-interval-container">${ repeat(item, (item, index) => item._id || index, (item, index) => block2$j(item)) }</div>`; };
const block2$j = (item, index, context) => { return scopedHtml`<div id="${ifDefined(item.id)}" tabindex="${ifDefined(item._tabIndex)}" data-sap-timestamp="${ifDefined(item.timestamp)}" class="${ifDefined(item.classes)}" role="gridcell" aria-selected="false">${ifDefined(item.year)}</div>`; };


const main$q = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$q(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$5 = ":host(:not([hidden])){display:inline-block}:host{width:100%;height:100%}.ui5-yp-root{padding:2rem 0 1rem 0;display:flex;flex-direction:column;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);justify-content:center;align-items:center}.ui5-yp-interval-container{display:flex;justify-content:center;align-items:center;width:100%}.ui5-yp-item{display:flex;margin:var(--_ui5_yearpicker_item_margin);width:calc(25% - .125rem);height:var(--_ui5_year_picker_item_height);color:var(--sapTextColor);background-color:var(--sapLegend_WorkingBackground);align-items:center;justify-content:center;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default;outline:none;position:relative;border:var(--_ui5_yearpicker_item_border);border-radius:var(--_ui5_yearpicker_item_border_radius)}.ui5-yp-item:hover{background-color:var(--sapList_Hover_Background)}.ui5-yp-item.ui5-yp-item--selected{background-color:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}.ui5-yp-item.ui5-yp-item--disabled{pointer-events:none;opacity:.5}.ui5-yp-item.ui5-yp-item--selected:focus{background-color:var(--_ui5_yearpicker_item_selected_focus)}.ui5-yp-item.ui5-yp-item--selected:focus:after{border-color:var(--sapContent_ContrastFocusColor)}.ui5-yp-item.ui5-yp-item--selected:hover{background-color:var(--_ui5_yearpicker_item_selected_focus)}.ui5-yp-item:focus:after{content:\"\";position:absolute;width:var(--_ui5_yearpicker_item_focus_after_width);height:var(--_ui5_yearpicker_item_focus_after_height);border:var(--_ui5_yearpicker_item_focus_after_border);top:var(--_ui5_yearpicker_item_focus_after_offset);left:var(--_ui5_yearpicker_item_focus_after_offset)}";

/**
 * @public
 */
const metadata$s = {
	tag: "ui5-yearpicker",
	properties: /** @lends  sap.ui.webcomponents.main.YearPicker.prototype */ {
		/**
		 * A UNIX timestamp - seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {Integer}
		 * @public
		 */
		timestamp: {
			type: Integer,
		},

		/**
		 * Sets a calendar type used for display.
		 * If not set, the calendar type of the global configuration is used.
		 * @type {CalendarType}
		 * @public
		 */
		primaryCalendarType: {
			type: CalendarType,
		},

		/**
		 * Determines the мinimum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		minDate: {
			type: String,
		},

		/**
		 * Determines the maximum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue undefined
		 * @since 1.0.0-rc.6
		 * @public
		 */
		maxDate: {
			type: String,
			defaultValue: undefined,
		},

		_selectedYear: {
			type: Integer,
			noAttribute: true,
		},

		_yearIntervals: {
			type: Object,
			multiple: true,
		},

		_hidden: {
			type: Boolean,
			noAttribute: true,
		},
		/**
		* Determines the format, displayed in the input field.
		*
		* @type {string}
		* @defaultvalue ""
		* @public
		*/
	   formatPattern: {
		   type: String,
	   },
	},
	events: /** @lends  sap.ui.webcomponents.main.YearPicker.prototype */ {
		/**
		 * Fired when the user selects a new Date on the Web Component.
		 * @public
		 * @event
		 */
		change: {},
		/**
		 * Fired when month, year has changed due to item navigation.
		 * @since 1.0.0-rc.9
		 * @public
		 * @event
		 */
		navigate: {},
	},
};

/**
 * @class
 *
 * Displays years which can be selected.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.YearPicker
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-yearpicker
 * @public
 */
class YearPicker extends UI5Element {
	static get metadata() {
		return metadata$s;
	}

	static get styles() {
		return styles$5;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$q;
	}

	constructor() {
		super();

		this._oLocale = getLocale();

		this._itemNav = new ItemNavigation(this, {
			pageSize: 20,
			rowSize: 4,
			behavior: ItemNavigationBehavior.Paging,
		});

		this._itemNav.getItemsCallback = function getItemsCallback() {
			const focusableYears = [];

			for (let i = 0; i < this._yearIntervals.length; i++) {
				const yearInterval = this._yearIntervals[i].filter(x => !x.disabled);
				focusableYears.push(yearInterval);
			}

			return [].concat(...focusableYears);
		}.bind(this);

		this._itemNav.attachEvent(
			ItemNavigation.BORDER_REACH,
			this._handleItemNavigationBorderReach.bind(this)
		);

		this._yearIntervals = [];
	}

	onBeforeRendering() {
		const oYearFormat = DateFormat.getDateInstance({ format: "y", calendarType: this._primaryCalendarType }, this._oLocale);
		const oCalDate = this._calendarDate;
		const maxCalendarDateYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();
		const minCalendarDateYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();

		oCalDate.setMonth(0);
		oCalDate.setDate(1);
		if (oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX - 1 > maxCalendarDateYear - YearPicker._ITEMS_COUNT) {
			oCalDate.setYear(maxCalendarDateYear - YearPicker._ITEMS_COUNT);
		} else if (oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX - 1 < minCalendarDateYear) {
			oCalDate.setYear(minCalendarDateYear - 1);
		} else {
			oCalDate.setYear(oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX - 1);
		}

		const intervals = [];
		let timestamp;

		if (this._selectedYear === undefined) {
			this._selectedYear = this._year;
		}

		for (let i = 0; i < YearPicker._ITEMS_COUNT; i++) {
			const intervalIndex = parseInt(i / 4);
			if (!intervals[intervalIndex]) {
				intervals[intervalIndex] = [];
			}

			oCalDate.setYear(oCalDate.getYear() + 1);

			timestamp = oCalDate.valueOf() / 1000;

			const year = {
				timestamp: timestamp.toString(),
				id: `${this._id}-y${timestamp}`,
				year: oYearFormat.format(oCalDate.toLocalJSDate()),
				classes: "ui5-yp-item",
			};

			if (oCalDate.getYear() === this._selectedYear) {
				year.classes += " ui5-yp-item--selected";
			}

			if ((this.minDate || this.maxDate) && this._isOutOfSelectableRange(oCalDate.getYear())) {
				year.classes += " ui5-yp-item--disabled";
				year.disabled = true;
			}

			if (intervals[intervalIndex]) {
				intervals[intervalIndex].push(year);
			}
		}

		this._yearIntervals = intervals;
	}

	onAfterRendering() {
		this._itemNav.focusCurrent();
	}

	get _timestamp() {
		return this.timestamp !== undefined ? this.timestamp : Math.floor(new Date().getTime() / 1000);
	}

	get _localDate() {
		return new Date(this._timestamp * 1000);
	}

	get _calendarDate() {
		return CalendarDate.fromTimestamp(this._localDate.getTime(), this._primaryCalendarType);
	}

	get _year() {
		return this._calendarDate.getYear();
	}

	get _primaryCalendarType() {
		return this.primaryCalendarType || getCalendarType$1() || LocaleData.getInstance(getLocale()).getPreferredCalendarType();
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	_onmousedown(event) {
		if (event.target.className.indexOf("ui5-yp-item") > -1) {
			const targetTimestamp = this.getTimestampFromDom(event.target);
			const focusedItem = this._itemNav._getItems().find(item => parseInt(item.timestamp) === targetTimestamp);
			this._itemNav.currentIndex = this._itemNav._getItems().indexOf(focusedItem);
			this._itemNav.focusCurrent();
		}
	}

	_onmouseup(event) {
		if (event.target.className.indexOf("ui5-yp-item") > -1) {
			const timestamp = this.getTimestampFromDom(event.target);
			this.timestamp = timestamp;
			this._selectedYear = this._year;
			this.fireEvent("change", { timestamp });
		}
	}

	getTimestampFromDom(domNode) {
		const sTimestamp = domNode.getAttribute("data-sap-timestamp");
		return parseInt(sTimestamp);
	}

	_onkeydown(event) {
		if (isEnter(event)) {
			return this._handleEnter(event);
		}

		if (isSpace(event)) {
			return this._handleSpace(event);
		}
	}

	_handleEnter(event) {
		event.preventDefault();
		if (event.target.className.indexOf("ui5-yp-item") > -1) {
			const timestamp = this.getTimestampFromDom(event.target);

			this.timestamp = timestamp;
			this._selectedYear = this._year;
			this._itemNav.current = YearPicker._MIDDLE_ITEM_INDEX;
			this.fireEvent("change", { timestamp });
		}
	}

	_handleSpace(event) {
		event.preventDefault();
		if (event.target.className.indexOf("ui5-yp-item") > -1) {
			const timestamp = this.getTimestampFromDom(event.target);

			this._selectedYear = CalendarDate.fromTimestamp(
				timestamp * 1000,
				this._primaryCalendarType
			).getYear();
		}
	}

	_handleItemNavigationBorderReach(event) {
		const oCalDate = this._calendarDate;
		const maxCalendarDateYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();
		const minCalendarDateYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();
		oCalDate.setMonth(0);
		oCalDate.setDate(1);

		if (event.end) {
			oCalDate.setYear(oCalDate.getYear() + YearPicker._ITEMS_COUNT);
		} else if (event.start) {
			if (oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX < minCalendarDateYear) {
				return;
			}
			oCalDate.setYear(oCalDate.getYear() - YearPicker._ITEMS_COUNT);
		}

		if (oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX > maxCalendarDateYear) {
			return;
		}

		if (this._isOutOfSelectableRange(oCalDate.getYear() - YearPicker._MIDDLE_ITEM_INDEX)
		&& this._isOutOfSelectableRange(oCalDate.getYear() + YearPicker._MIDDLE_ITEM_INDEX)) {
			return;
		}

		this.timestamp = oCalDate.valueOf() / 1000;

		this.fireEvent("navigate", event);
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	_isOutOfSelectableRange(year) {
		const minDate = new Date(this._minDate),
			maxDate = new Date(this._maxDate),
			minDateCheck = minDate && year < minDate.getFullYear(),
			maxDateCheck = maxDate && year > maxDate.getFullYear();

		return minDateCheck || maxDateCheck;
	}

	get _maxDate() {
		return this.maxDate ? this._getTimeStampFromString(this.maxDate) : this._getMaxCalendarDate();
	}

	get _minDate() {
		return this.minDate ? this._getTimeStampFromString(this.minDate) : this._getMinCalendarDate();
	}

	_getTimeStampFromString(value) {
		const jsDate = this.getFormat().parse(value);
		if (jsDate) {
			return CalendarDate.fromLocalJSDate(jsDate, this._primaryCalendarType).toUTCJSDate().valueOf();
		}
		return undefined;
	}

	_getMinCalendarDate() {
		const minDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		minDate.setYear(1);
		minDate.setMonth(0);
		minDate.setDate(1);
		return minDate.valueOf();
	}

	_getMaxCalendarDate() {
		const maxDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		maxDate.setYear(9999);
		maxDate.setMonth(11);
		const tempDate = new CalendarDate(maxDate, this._primaryCalendarType);
		tempDate.setDate(1);
		tempDate.setMonth(tempDate.getMonth() + 1, 0);
		maxDate.setDate(tempDate.getDate());// 31st for Gregorian Calendar
		return maxDate.valueOf();
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		}
		return this._oDateFormat;
	}

	get styles() {
		return {
			main: {
				display: this._hidden ? "none" : "",
			},
		};
	}
}

YearPicker._ITEMS_COUNT = 20;
YearPicker._MIDDLE_ITEM_INDEX = 7;

YearPicker.define();

var Gregorian = UniversalDate.extend('sap.ui.core.date.Gregorian', {
    constructor: function () {
        this.oDate = this.createDate(Date, arguments);
        this.sCalendarType = CalendarType$1.Gregorian;
    }
});
Gregorian.UTC = function () {
    return Date.UTC.apply(Date, arguments);
};
Gregorian.now = function () {
    return Date.now();
};
_Calendars.set(CalendarType$1.Gregorian, Gregorian);

const block0$r = (context) => { return scopedHtml`<div class="${classMap(context.classes.main)}" style="${styleMap(context.styles.main)} " @keydown=${context._onkeydown}><ui5-calendar-header id="${ifDefined(context._id)}-head" month-text="${ifDefined(context._header.monthText)}" year-text="${ifDefined(context._header.yearText)}" .primaryCalendarType="${ifDefined(context._oMonth.primaryCalendarType)}" @ui5-previous-press="${ifDefined(context._header.onPressPrevious)}" @ui5-next-press="${ifDefined(context._header.onPressNext)}" @ui5-show-month-press="${ifDefined(context._header.onBtn1Press)}" @ui5-show-year-press="${ifDefined(context._header.onBtn2Press)}" ._isNextButtonDisabled="${ifDefined(context._header._isNextButtonDisabled)}" ._isPrevButtonDisabled="${ifDefined(context._header._isPrevButtonDisabled)}" ._isMonthButtonHidden="${ifDefined(context._header._isMonthButtonHidden)}"></ui5-calendar-header><div id="${ifDefined(context._id)}-content"><ui5-daypicker id="${ifDefined(context._id)}-daypicker" class="${classMap(context.classes.dayPicker)}" format-pattern="${ifDefined(context._oMonth.formatPattern)}" .selectedDates="${ifDefined(context._oMonth.selectedDates)}" ._hidden="${ifDefined(context._oMonth._hidden)}" .primaryCalendarType="${ifDefined(context._oMonth.primaryCalendarType)}" .minDate="${ifDefined(context._oMonth.minDate)}" .maxDate="${ifDefined(context._oMonth.maxDate)}" timestamp="${ifDefined(context._oMonth.timestamp)}" @ui5-change="${ifDefined(context._oMonth.onSelectedDatesChange)}" @ui5-navigate="${ifDefined(context._oMonth.onNavigate)}" ?hide-week-numbers="${context.hideWeekNumbers}"></ui5-daypicker><ui5-monthpicker id="${ifDefined(context._id)}-MP" class="${classMap(context.classes.monthPicker)}" format-pattern="${ifDefined(context._oMonth.formatPattern)}" ._hidden="${ifDefined(context._monthPicker._hidden)}" .primaryCalendarType="${ifDefined(context._oMonth.primaryCalendarType)}" .minDate="${ifDefined(context._oMonth.minDate)}" .maxDate="${ifDefined(context._oMonth.maxDate)}" timestamp="${ifDefined(context._monthPicker.timestamp)}" @ui5-change="${ifDefined(context._monthPicker.onSelectedMonthChange)}" @ui5-navigate="${ifDefined(context._monthPicker.onNavigate)}"></ui5-monthpicker><ui5-yearpicker id="${ifDefined(context._id)}-YP" class="${classMap(context.classes.yearPicker)}" format-pattern="${ifDefined(context._oMonth.formatPattern)}" ._hidden="${ifDefined(context._yearPicker._hidden)}" .primaryCalendarType="${ifDefined(context._oMonth.primaryCalendarType)}" .minDate="${ifDefined(context._oMonth.minDate)}" .maxDate="${ifDefined(context._oMonth.maxDate)}" timestamp="${ifDefined(context._yearPicker.timestamp)}" ._selectedYear="${ifDefined(context._yearPicker._selectedYear)}" @ui5-change="${ifDefined(context._yearPicker.onSelectedYearChange)}" @ui5-navigate="${ifDefined(context._yearPicker.onNavigate)}"></ui5-yearpicker></div></div>`; };


const main$r = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$r(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var calendarCSS = ":host{display:inline-block}.ui5-daypicker--hidden,.ui5-monthpicker--hidden,.ui5-yearpicker--hidden{display:none}.ui5-cal-root{background:var(--sapList_Background)}.ui5-cal-root [ui5-daypicker],.ui5-cal-root [ui5-month-picker],.ui5-cal-root [ui5-yearpicker]{vertical-align:top}";

/**
 * @public
 */
const metadata$t = {
	tag: "ui5-calendar",
	properties: /** @lends  sap.ui.webcomponents.main.Calendar.prototype */ {
		/**
		 * Defines the UNIX timestamp - seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {Integer}
		 * @public
		*/
		timestamp: {
			type: Integer,
		},

		/**
		 * Defines the calendar type used for display.
		 * If not defined, the calendar type of the global configuration is used.
		 * Available options are: "Gregorian", "Islamic", "Japanese", "Buddhist" and "Persian".
		 * @type {CalendarType}
		 * @public
		 */
		primaryCalendarType: {
			type: CalendarType,
		},

		/**
		 * Defines the selected dates as UTC timestamps.
		 * @type {Array}
		 * @public
		 */
		selectedDates: {
			type: Integer,
			multiple: true,
		},

		/**
		 * Determines the мinimum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		minDate: {
			type: String,
		},

		/**
		 * Determines the maximum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		maxDate: {
			type: String,
		},

		/**
		 * Defines the visibility of the week numbers column.
		 * <br><br>
		 *
		 * <b>Note:<b> For calendars other than Gregorian,
		 * the week numbers are not displayed regardless of what is set.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		hideWeekNumbers: {
			type: Boolean,
		},

		_header: {
			type: Object,
		},

		_oMonth: {
			type: Object,
		},

		_monthPicker: {
			type: Object,
		},

		_yearPicker: {
			type: Object,
		},

		_calendarWidth: {
			type: String,
			noAttribute: true,
		},

		_calendarHeight: {
			type: String,
			noAttribute: true,
		},

		formatPattern: {
			type: String,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.Calendar.prototype */ {
		/**
		 * Fired when the selected dates changed.
		 * @event sap.ui.webcomponents.main.Calendar#selected-dates-change
		 * @param {Array} dates The selected dates' timestamps
		 * @public
		 */
		"selected-dates-change": { type: Array },
	},
};

/**
 * @class
 *
 * <h3>Keyboard Handling</h3>
* The <code>ui5-calendar</code> provides advanced keyboard handling.
* If the <code>ui5-calendar</code> is focused the user can
* choose a picker by using the following shortcuts: <br>
* <ul>
* <li>[F4] - Shows month picker</li>
* <li>[SHIFT] + [F4] - Shows year picker</li>
* <br>
* When a picker is showed and focused the user can use the following keyboard
* shortcuts in order to perform a navigation:
* <br>
* - Day picker: <br>
* <ul>
* <li>[PAGEUP] - Navigate to the previous month</li>
* <li>[PAGEDOWN] - Navigate to the next month</li>
* <li>[SHIFT] + [PAGEUP] - Navigate to the previous year</li>
* <li>[SHIFT] + [PAGEDOWN] - Navigate to the next year</li>
* <li>[CTRL] + [SHIFT] + [PAGEUP] - Navigate ten years backwards</li>
* <li>[CTRL] + [SHIFT] + [PAGEDOWN] - Navigate ten years forwards</li>
* </ul>
* <br>
* - Month picker: <br>
* <ul>
* <li>[PAGEUP] - Navigate to the previous month</li>
* <li>[PAGEDOWN] - Navigate to the next month</li>
* </ul>
* <br>
* - Year picker: <br>
* <ul>
* <li>[PAGEUP] - Navigate to the previous year range</li>
* <li>[PAGEDOWN] - Navigate the next year range</li>
* </ul>
*/

/**
 * @class
 *
 * The <code>ui5-calendar</code> can be used standale to display the years, months, weeks and days,
 * but the main purpose of the <code>ui5-calendar</code> is to be used within a <code>ui5-date-picker</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Calendar
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-calendar
 * @public
 */
class Calendar extends UI5Element {
	static get metadata() {
		return metadata$t;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$r;
	}

	static get styles() {
		return calendarCSS;
	}

	constructor() {
		super();
		this._oLocale = getLocale();
		this._oLocaleData = new LocaleData(this._oLocale);
		this._header = {};
		this._header.onPressPrevious = this._handlePrevious.bind(this);
		this._header.onPressNext = this._handleNext.bind(this);
		this._header.onBtn1Press = this._handleMonthButtonPress.bind(this);
		this._header.onBtn2Press = this._handleYearButtonPress.bind(this);

		this._oMonth = {};
		this._oMonth.onSelectedDatesChange = this._handleSelectedDatesChange.bind(this);
		this._oMonth.onNavigate = this._handleMonthNavigate.bind(this);

		this._monthPicker = {};
		this._monthPicker._hidden = true;
		this._monthPicker.onSelectedMonthChange = this._handleSelectedMonthChange.bind(this);
		this._monthPicker.onNavigate = this._handleYearNavigate.bind(this);

		this._yearPicker = {};
		this._yearPicker._hidden = true;
		this._yearPicker.onSelectedYearChange = this._handleSelectedYearChange.bind(this);
		this._yearPicker.onNavigate = this._handleYearNavigate.bind(this);

		this._isShiftingYears = false;
	}

	onBeforeRendering() {
		const oYearFormat = DateFormat.getDateInstance({ format: "y", calendarType: this._primaryCalendarType });
		const firstDayOfCalendarTimeStamp = this._getMinCalendarDate();

		if ((this.minDate || this.maxDate) && this._timestamp && !this.isInValidRange(this._timestamp * 1000)) {
			if (this._minDate) {
				this.timestamp = this._minDate / 1000;
			} else {
				this.timestamp = (new Date(firstDayOfCalendarTimeStamp)).getTime() / 1000;
			}
		}

		this._oMonth.formatPattern = this._formatPattern;
		this._oMonth.timestamp = this._timestamp;
		this._oMonth.selectedDates = [...this._selectedDates];
		this._oMonth.primaryCalendarType = this._primaryCalendarType;
		this._oMonth.minDate = this.minDate;
		this._oMonth.maxDate = this.maxDate;
		this._header.monthText = this._oLocaleData.getMonths("wide", this._primaryCalendarType)[this._month];
		this._header.yearText = oYearFormat.format(this._localDate, true);

		// month picker
		this._monthPicker.primaryCalendarType = this._primaryCalendarType;
		this._monthPicker.timestamp = this._timestamp;

		this._yearPicker.primaryCalendarType = this._primaryCalendarType;

		if (!this._isShiftingYears) {
			// year picker
			this._yearPicker.timestamp = this._timestamp;
		}

		this._isShiftingYears = false;

		this._refreshNavigationButtonsState();
	}

	_refreshNavigationButtonsState() {
		const minDateParsed = this.minDate && this.getFormat().parse(this.minDate);
		const maxDateParsed = this.maxDate && this.getFormat().parse(this.maxDate);
		let currentMonth = 0;
		let currentYear = 1;

		currentMonth = this.timestamp && CalendarDate.fromTimestamp(this.timestamp * 1000).getMonth();
		currentYear = this.timestamp && CalendarDate.fromTimestamp(this.timestamp * 1000).getYear();

		if (!this._oMonth._hidden) {
			if (this.minDate
				&& minDateParsed.getMonth() === currentMonth
				&& minDateParsed.getFullYear() === currentYear) {
				this._header._isPrevButtonDisabled = true;
			} else {
				this._header._isPrevButtonDisabled = false;
			}

			if (this.maxDate
				&& maxDateParsed.getMonth() === currentMonth
				&& maxDateParsed.getFullYear() === currentYear) {
				this._header._isNextButtonDisabled = true;
			} else {
				this._header._isNextButtonDisabled = false;
			}
		}

		if (!this._monthPicker._hidden) {
			if (this.minDate
				&& currentYear === minDateParsed.getFullYear()) {
				this._header._isPrevButtonDisabled = true;
			} else {
				this._header._isPrevButtonDisabled = false;
			}

			if (this.maxDate
				&& currentYear === maxDateParsed.getFullYear()) {
				this._header._isNextButtonDisabled = true;
			} else {
				this._header._isNextButtonDisabled = false;
			}
		}

		if (!this._yearPicker._hidden) {
			const cellsFromTheStart = 7;
			const cellsToTheEnd = 12;

			currentYear = this._yearPicker.timestamp && CalendarDate.fromTimestamp(this._yearPicker.timestamp * 1000).getYear();
			if (this.minDate
				&& (currentYear - minDateParsed.getFullYear()) < cellsFromTheStart) {
				this._header._isPrevButtonDisabled = true;
			} else {
				this._header._isPrevButtonDisabled = false;
			}

			if (this.maxDate
				&& (maxDateParsed.getFullYear() - currentYear) < cellsToTheEnd) {
				this._header._isNextButtonDisabled = true;
			} else {
				this._header._isNextButtonDisabled = false;
			}
		}
	}

	get _timestamp() {
		return this.timestamp !== undefined ? this.timestamp : Math.floor(new Date().getTime() / 1000);
	}

	get _localDate() {
		return new Date(this._timestamp * 1000);
	}

	get _calendarDate() {
		return CalendarDate.fromTimestamp(this._localDate.getTime(), this._primaryCalendarType);
	}

	get _month() {
		return this._calendarDate.getMonth();
	}

	get _primaryCalendarType() {
		return this.primaryCalendarType || getCalendarType$1() || LocaleData.getInstance(getLocale()).getPreferredCalendarType();
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	get _selectedDates() {
		return this.selectedDates || [];
	}

	get _maxDate() {
		return this.maxDate ? this._getTimeStampFromString(this.maxDate) : this._getMaxCalendarDate();
	}

	get _minDate() {
		return this.minDate ? this._getTimeStampFromString(this.minDate) : this._getMinCalendarDate();
	}

	_getTimeStampFromString(value) {
		const jsDate = this.getFormat().parse(value);
		if (jsDate) {
			return CalendarDate.fromLocalJSDate(jsDate, this._primaryCalendarType).toUTCJSDate().valueOf();
		}
		return undefined;
	}

	_getMinCalendarDate() {
		const minDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		minDate.setYear(1);
		minDate.setMonth(0);
		minDate.setDate(1);
		return minDate.valueOf();
	}

	_getMaxCalendarDate() {
		const maxDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		maxDate.setYear(9999);
		maxDate.setMonth(11);
		const tempDate = new CalendarDate(maxDate, this._primaryCalendarType);
		tempDate.setDate(1);
		tempDate.setMonth(tempDate.getMonth() + 1, 0);
		maxDate.setDate(tempDate.getDate());// 31st for Gregorian Calendar
		return maxDate.valueOf();
	}

	_onkeydown(event) {
		if (isF4(event) && this._monthPicker._hidden) {
			this._showMonthPicker();
			if (!this._yearPicker._hidden) {
				this._hideYearPicker();
			}
		}

		if (isF4Shift(event) && this._yearPicker._hidden) {
			this._showYearPicker();
			if (!this._monthPicker._hidden) {
				this._hideMonthPicker();
			}
		}
	}

	_handleSelectedDatesChange(event) {
		this.selectedDates = [...event.detail.dates];

		this.fireEvent("selected-dates-change", { dates: event.detail.dates });
	}

	_handleMonthNavigate(event) {
		this.timestamp = event.detail.timestamp;
	}

	_handleYearNavigate(event) {
		if (event.detail.start) {
			this._handlePrevious();
		}

		if (event.detail.end) {
			this._handleNext();
		}
	}

	_handleSelectedMonthChange(event) {
		const oNewDate = this._calendarDate;
		const newMonthIndex = CalendarDate.fromTimestamp(
			event.detail.timestamp * 1000,
			this._primaryCalendarType
		).getMonth();

		oNewDate.setMonth(newMonthIndex);
		this.timestamp = oNewDate.valueOf() / 1000;

		this._hideMonthPicker();

		this._focusFirstDayOfMonth(oNewDate);
	}

	_focusFirstDayOfMonth(targetDate) {
		let fistDayOfMonthIndex = -1;

		// focus first day of the month
		const dayPicker = this.shadowRoot.querySelector("[ui5-daypicker]");

		dayPicker._getVisibleDays(targetDate).forEach((date, index) => {
			if (date.getDate() === 1 && (fistDayOfMonthIndex === -1)) {
				fistDayOfMonthIndex = index;
			}
		});

		dayPicker._itemNav.currentIndex = fistDayOfMonthIndex;
		dayPicker._itemNav.focusCurrent();
	}

	_handleSelectedYearChange(event) {
		const oNewDate = CalendarDate.fromTimestamp(
			event.detail.timestamp * 1000,
			this._primaryCalendarType
		);
		oNewDate.setMonth(0);
		oNewDate.setDate(1);

		this.timestamp = oNewDate.valueOf() / 1000;

		this._hideYearPicker();

		this._focusFirstDayOfMonth(oNewDate);
	}

	_handleMonthButtonPress() {
		this._hideYearPicker();
		this._header._isMonthButtonHidden = true;

		this[`_${this._monthPicker._hidden ? "show" : "hide"}MonthPicker`]();
	}

	_handleYearButtonPress() {
		this._hideMonthPicker();

		this[`_${this._yearPicker._hidden ? "show" : "hide"}YearPicker`]();
	}

	_handlePrevious() {
		if (this._monthPicker._hidden && this._yearPicker._hidden) {
			this._showPrevMonth();
		} else if (this._monthPicker._hidden && !this._yearPicker._hidden) {
			this._showPrevPageYears();
		} else if (!this._monthPicker._hidden && this._yearPicker._hidden) {
			this._showPrevYear();
		}
	}

	_handleNext() {
		if (this._monthPicker._hidden && this._yearPicker._hidden) {
			this._showNextMonth();
		} else if (this._monthPicker._hidden && !this._yearPicker._hidden) {
			this._showNextPageYears();
		} else if (!this._monthPicker._hidden && this._yearPicker._hidden) {
			this._showNextYear();
		}
	}

	_showNextMonth() {
		const nextMonth = this._calendarDate;
		const maxCalendarDateYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();
		nextMonth.setDate(1);
		nextMonth.setMonth(nextMonth.getMonth() + 1);

		if (nextMonth.getYear() > maxCalendarDateYear) {
			return;
		}

		if (!this.isInValidRange(nextMonth.toLocalJSDate().valueOf())) {
			return;
		}

		this._focusFirstDayOfMonth(nextMonth);
		this.timestamp = nextMonth.valueOf() / 1000;
	}

	_showPrevMonth() {
		let iNewMonth = this._month - 1,
			iNewYear = this._calendarDate.getYear();

		const minCalendarDateYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();

		// focus first day of the month
		const dayPicker = this.shadowRoot.querySelector("[ui5-daypicker]");
		const currentMonthDate = dayPicker._calendarDate.setMonth(dayPicker._calendarDate.getMonth());
		const lastMonthDate = dayPicker._calendarDate.setMonth(dayPicker._calendarDate.getMonth() - 1);

		// set the date to last day of last month
		currentMonthDate.setDate(-1);

		// find the index of the last day
		let lastDayOfMonthIndex = -1;

		if (!this.isInValidRange(currentMonthDate.toLocalJSDate().valueOf())) {
			return;
		}

		dayPicker._getVisibleDays(lastMonthDate).forEach((date, index) => {
			const isSameDate = currentMonthDate.getDate() === date.getDate();
			const isSameMonth = currentMonthDate.getMonth() === date.getMonth();

			if (isSameDate && isSameMonth) {
				lastDayOfMonthIndex = (index + 1);
			}
		});

		const weekDaysCount = 7;

		if (lastDayOfMonthIndex !== -1) {
			// find the DOM for the last day index
			const lastDay = dayPicker.shadowRoot.querySelector(".ui5-dp-content").children[parseInt(lastDayOfMonthIndex / weekDaysCount) + 1].children[(lastDayOfMonthIndex % weekDaysCount)];

			// update current item in ItemNavigation
			dayPicker._itemNav.current = lastDayOfMonthIndex;

			// focus the item
			lastDay.focus();
		}

		if (iNewMonth > 11) {
			iNewMonth = 0;
			iNewYear = this._calendarDate.getYear() + 1;
		}

		if (iNewMonth < 0) {
			iNewMonth = 11;
			iNewYear = this._calendarDate.getYear() - 1;
		}

		const oNewDate = this._calendarDate;
		oNewDate.setYear(iNewYear);
		oNewDate.setMonth(iNewMonth);


		if (oNewDate.getYear() < minCalendarDateYear) {
			return;
		}
		this.timestamp = oNewDate.valueOf() / 1000;
	}

	_showNextYear() {
		const maxCalendarDateYear = CalendarDate.fromTimestamp(this._getMaxCalendarDate(), this._primaryCalendarType).getYear();
		if (this._calendarDate.getYear() === maxCalendarDateYear) {
			return;
		}

		const newDate = this._calendarDate;
		newDate.setYear(this._calendarDate.getYear() + 1);

		this.timestamp = newDate.valueOf() / 1000;
	}

	_showPrevYear() {
		const minCalendarDateYear = CalendarDate.fromTimestamp(this._getMinCalendarDate(), this._primaryCalendarType).getYear();
		if (this._calendarDate.getYear() === minCalendarDateYear) {
			return;
		}

		const oNewDate = this._calendarDate;
		oNewDate.setYear(this._calendarDate.getYear() - 1);

		this.timestamp = oNewDate.valueOf() / 1000;
	}

	_showNextPageYears() {
		if (!this._isYearInRange(this._yearPicker.timestamp,
			YearPicker._ITEMS_COUNT - YearPicker._MIDDLE_ITEM_INDEX,
			CalendarDate.fromTimestamp(this._minDate, this._primaryCalendarType).getYear(),
			CalendarDate.fromTimestamp(this._maxDate, this._primaryCalendarType).getYear())) {
			return;
		}

		const newDate = CalendarDate.fromTimestamp(this._yearPicker.timestamp * 1000, this._primaryCalendarType);
		newDate.setYear(newDate.getYear() + YearPicker._ITEMS_COUNT);

		this._yearPicker = Object.assign({}, this._yearPicker, {
			timestamp: newDate.valueOf() / 1000,
		});

		this.timestamp = this._yearPicker.timestamp;

		this._isShiftingYears = true;
	}

	_showPrevPageYears() {
		if (!this._isYearInRange(this._yearPicker.timestamp,
			-YearPicker._MIDDLE_ITEM_INDEX - 1,
			CalendarDate.fromTimestamp(this._minDate, this._primaryCalendarType).getYear(),
			CalendarDate.fromTimestamp(this._maxDate, this._primaryCalendarType).getYear())) {
			return;
		}

		const newDate = CalendarDate.fromTimestamp(this._yearPicker.timestamp * 1000, this._primaryCalendarType);
		newDate.setYear(newDate.getYear() - YearPicker._ITEMS_COUNT);

		this._yearPicker = Object.assign({}, this._yearPicker, {
			timestamp: newDate.valueOf() / 1000,
		});

		this.timestamp = this._yearPicker.timestamp;

		this._isShiftingYears = true;
	}

	_showMonthPicker() {
		this._monthPicker = Object.assign({}, this._monthPicker);
		this._oMonth = Object.assign({}, this._oMonth);

		this._monthPicker.timestamp = this._timestamp;
		this._monthPicker._hidden = false;
		this._oMonth._hidden = true;

		const calendarRect = this.shadowRoot.querySelector(".ui5-cal-root").getBoundingClientRect();

		this._calendarWidth = calendarRect.width.toString();
		this._calendarHeight = calendarRect.height.toString();
		this._header._isMonthButtonHidden = true;
	}

	_showYearPicker() {
		this._yearPicker = Object.assign({}, this._yearPicker);
		this._oMonth = Object.assign({}, this._oMonth);

		this._yearPicker.timestamp = this._timestamp;
		this._yearPicker._selectedYear = this._calendarDate.getYear();
		this._yearPicker._hidden = false;
		this._oMonth._hidden = true;

		const calendarRect = this.shadowRoot.querySelector(".ui5-cal-root").getBoundingClientRect();

		this._calendarWidth = calendarRect.width.toString();
		this._calendarHeight = calendarRect.height.toString();
	}

	_hideMonthPicker() {
		this._monthPicker = Object.assign({}, this._monthPicker);
		this._oMonth = Object.assign({}, this._oMonth);

		if (this._yearPicker._hidden) {
			this._oMonth._hidden = false;
		}
		this._monthPicker._hidden = true;
		this._header._isMonthButtonHidden = false;
	}

	_hideYearPicker() {
		this._yearPicker = Object.assign({}, this._yearPicker);
		this._oMonth = Object.assign({}, this._oMonth);

		if (this._monthPicker._hidden) {
			this._oMonth._hidden = false;
		}
		this._yearPicker._hidden = true;
	}

	_isYearInRange(timestamp, yearsoffset, minYear, maxYear) {
		if (timestamp) {
			const oCalDate = CalendarDate.fromTimestamp(timestamp * 1000, this._primaryCalendarType);
			oCalDate.setMonth(0);
			oCalDate.setDate(1);
			oCalDate.setYear(oCalDate.getYear() + yearsoffset);
			return oCalDate.getYear() >= minYear && oCalDate.getYear() <= maxYear;
		}
	}

	get classes() {
		return {
			main: {
				"ui5-cal-root": true,
			},
			dayPicker: {
				".ui5-daypicker--hidden": !this._yearPicker._hidden || !this._monthPicker._hidden,
			},
			yearPicker: {
				"ui5-yearpicker--hidden": this._yearPicker._hidden,
			},
			monthPicker: {
				"ui5-monthpicker--hidden": this._monthPicker._hidden,
			},
		};
	}

	/**
	 * Checks if a date is in range between minimum and maximum date
	 * @param {object} value
	 * @public
	 */
	isInValidRange(value = "") {
		const pickedDate = CalendarDate.fromTimestamp(value).toLocalJSDate(),
			minDate = this._minDate && new Date(this._minDate),
			maxDate = this._maxDate && new Date(this._maxDate);

		if (minDate && maxDate) {
			if (minDate <= pickedDate && maxDate >= pickedDate) {
				return true;
			}
		} else if (minDate && !maxDate) {
			if (minDate <= pickedDate) {
				return true;
			}
		} else if (maxDate && !minDate) {
			if (maxDate >= pickedDate) {
				return true;
			}
		} else if (!maxDate && !minDate) {
			return true;
		}

		return false;
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		}
		return this._oDateFormat;
	}

	get styles() {
		return {
			main: {
				"height": `${this._calendarHeight ? `${this._calendarHeight}px` : "auto"}`,
				"width": `${this._calendarWidth ? `${this._calendarWidth}px` : "auto"}`,
			},
		};
	}

	static get dependencies() {
		return [
			CalendarHeader,
			DayPicker,
			MonthPicker,
			YearPicker,
		];
	}

	static async onDefine() {
		await fetchCldr(getLocale().getLanguage(), getLocale().getRegion(), getLocale().getScript());
	}
}

Calendar.define();

/**
 * @lends sap.ui.webcomponents.main.types.InputType.prototype
 * @public
 */
const InputTypes = {
	/**
	 * <ui5-input type="text"></ui5-input> defines a one-line text input field:
	 * @public
	 * @type {Text}
	 */
	Text: "Text",

	/**
	 * The <ui5-input type="email"></ui5-input> is used for input fields that must contain an e-mail address.
	 * @public
	 * @type {Email}
	 */
	Email: "Email",

	/**
	 * The <ui5-input type="number"></ui5-input> defines a numeric input field.
	 * @public
	 * @type {Number}
	 */
	Number: "Number",

	/**
	 * <ui5-input type="password"></ui5-input> defines a password field.
	 * @public
	 * @type {Password}
	 */
	Password: "Password",

	/**
	 * The <ui5-input type="url"></ui5-input> is used for input fields that should contain a telephone number.
	 * @public
	 * @type {Tel}
	 */
	Tel: "Tel",

	/**
	 * The <i5-input type="url"></ui5-input> is used for input fields that should contain a URL address.
	 * @public
	 * @type {URL}
	 */
	URL: "URL",
};

/**
 * @class
 * Defines input types
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.InputType
 * @public
 * @enum {string}
 */
class InputType extends DataType {
	static isValid(value) {
		return !!InputTypes[value];
	}
}

InputType.generataTypeAcessors(InputTypes);

const block0$s = (context) => { return scopedHtml`<div class="ui5-input-root" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}"><div class="ui5-input-content"><input id="${ifDefined(context._id)}-inner" class="ui5-input-inner" type="${ifDefined(context.inputType)}" inner-input ?inner-input-with-icon="${context.icon.length}" ?disabled="${context.disabled}" ?readonly="${context._readonly}" ?required="${context.required}" .value="${ifDefined(context.value)}" placeholder="${ifDefined(context.placeholder)}" maxlength="${ifDefined(context.maxlength)}" role="${ifDefined(context.accInfo.input.role)}" aria-owns="${ifDefined(context.accInfo.input.ariaOwns)}" ?aria-invalid="${context.accInfo.input.ariaInvalid}" aria-haspopup="${ifDefined(context.accInfo.input.ariaHasPopup)}" aria-describedby="${ifDefined(context.accInfo.input.ariaDescribedBy)}" aria-autocomplete="${ifDefined(context.accInfo.input.ariaAutoComplete)}" aria-expanded="${ifDefined(context.accInfo.input.ariaExpanded)}" aria-label="${ifDefined(context.accInfo.input.ariaLabel)}" aria-required="${ifDefined(context.accInfo.input.ariaRequired)}" @input="${context._handleInput}" @change="${context._handleChange}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click=${context._click} @focusin=${context.innerFocusIn} data-sap-no-tab-ref data-sap-focus-ref step="${ifDefined(context.step)}" />${ context.icon.length ? block1$l() : undefined }${ context.showSuggestions ? block2$k(context) : undefined }${ context.accInfo.input.ariaDescription ? block3$e(context) : undefined }${ context.hasValueState ? block4$c(context) : undefined }</div><slot name="formSupport"></slot></div>`; };
const block1$l = (context) => { return scopedHtml`<div class="ui5-input-icon-root"><slot name="icon"></slot></div>`; };
const block2$k = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-suggestionsText" class="ui5-hidden-text">${ifDefined(context.suggestionsText)}</span><span id="${ifDefined(context._id)}-selectionText" class="ui5-hidden-text" aria-live="polite" role="status"></span><span id="${ifDefined(context._id)}-suggestionsCount" class="ui5-hidden-text" aria-live="polite">${ifDefined(context.availableSuggestionsCount)}</span>`; };
const block3$e = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-descr" class="ui5-hidden-text">${ifDefined(context.accInfo.input.ariaDescription)}</span>`; };
const block4$c = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.ariaValueStateHiddenText)}</span>`; };


const main$s = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$s(context);
};

const block0$t = (context) => { return scopedHtml`${ context.showSuggestions ? block1$m(context) : undefined }${ context.hasValueStateMessage ? block17$1(context) : undefined } `; };
const block1$m = (context) => { return scopedHtml`<ui5-responsive-popover no-arrow _disable-initial-focus placement-type="Bottom" horizontal-align="Left" style="${styleMap(context.styles.suggestionsPopover)}" @ui5-after-open="${ifDefined(context._afterOpenPopover)}" @ui5-after-close="${ifDefined(context._afterClosePopover)}" @scroll="${context._scroll}">${ context._isPhone ? block2$l(context) : undefined }${ !context._isPhone ? block7$6(context) : undefined }<ui5-list separators="${ifDefined(context.suggestionSeparators)}">${ repeat(context.suggestionsTexts, (item, index) => item._id || index, (item, index) => block12$3(item)) }</ui5-list>${ context._isPhone ? block16$1(context) : undefined }</ui5-responsive-popover>`; };
const block2$l = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></ui5-button></div><div class="row"><div class="input-root-phone"><input class="ui5-input-inner-phone" type="${ifDefined(context.inputType)}" .value="${ifDefined(context.value)}" inner-input placeholder="${ifDefined(context.placeholder)}" @input="${context._handleInput}" @change="${context._handleChange}" /></div></div>${ context.hasValueStateMessage ? block3$f(context) : undefined }</div>`; };
const block3$f = (context) => { return scopedHtml`<div class="row ${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.suggestionPopoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block4$d(context) : block5$b(context) }</div>`; };
const block4$d = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block5$b = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block6$8(item)) }`; };
const block6$8 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block7$6 = (context) => { return scopedHtml`${ context.hasValueStateMessage ? block8$6(context) : undefined }`; };
const block8$6 = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" style=${styleMap(context.styles.suggestionPopoverHeader)}>${ context.shouldDisplayDefaultValueStateMessage ? block9$4(context) : block10$4(context) }</div>`; };
const block9$4 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block10$4 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block11$3(item)) }`; };
const block11$3 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block12$3 = (item, index, context) => { return scopedHtml`${ item.group ? block13$3(item) : block14$3(item) }`; };
const block13$3 = (item, index, context) => { return scopedHtml`<ui5-li-groupheader data-ui5-key="${ifDefined(item.key)}">${unsafeHTML(item.text)}</ui5-li-groupheader>`; };
const block14$3 = (item, index, context) => { return scopedHtml`<ui5-li-suggestion-item image="${ifDefined(item.image)}" icon="${ifDefined(item.icon)}" info="${ifDefined(item.info)}" type="${ifDefined(item.type)}" info-state="${ifDefined(item.infoState)}" @ui5-_item-press="${ifDefined(item.fnOnSuggestionItemPress)}" data-ui5-key="${ifDefined(item.key)}">${unsafeHTML(item.text)}${ item.description ? block15$2(item) : undefined }</ui5-li-suggestion-item>`; };
const block15$2 = (item, index, context) => { return scopedHtml`<span slot="richDescription">${unsafeHTML(item.description)}</span>`; };
const block16$1 = (context) => { return scopedHtml`<div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">OK</ui5-button></div>`; };
const block17$1 = (context) => { return scopedHtml`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block18$1(context) : block19(context) }</div></ui5-popover>`; };
const block18$1 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block19 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block20(item)) }`; };
const block20 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };


const main$t = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$t(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$6 = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{width:var(--_ui5_input_width);min-width:var(--_ui5_input_width);height:var(--_ui5_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);font-style:normal;background-color:var(--sapField_Background);border:1px solid var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}:host([focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-3px}:host([value-state]:not([value-state=None])[focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}.ui5-input-root{width:100%;height:100%;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit}:host([disabled]){opacity:var(--_ui5_input_disabled_opacity);cursor:default;pointer-events:none;background:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor)}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5_input_inner_padding_with_icon)}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]:-ms-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]:-ms-input-placeholder{visibility:hidden}[inner-input]:-ms-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit}:host([readonly]){border-color:var(--sapField_ReadOnly_BorderColor);background:var(--sapField_ReadOnly_Background)}:host(:not([value-state]):not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state=None]:not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state]:not([value-state=None])){border-width:var(--_ui5_input_state_border_width)}:host([value-state=Error]) [inner-input],:host([value-state=Warning]) [inner-input]{font-style:var(--_ui5_input_error_warning_font_style)}:host([value-state=Error]) [inner-input]{font-weight:var(--_ui5_input_error_font_weight)}:host([value-state=Error]:not([readonly])){background-color:var(--sapField_InvalidBackground);border-color:var(--sapField_InvalidColor)}:host([value-state=Error]:not([readonly]):not([disabled])),:host([value-state=Information]:not([readonly]):not([disabled])),:host([value-state=Warning]:not([readonly]):not([disabled])){border-style:var(--_ui5_input_error_warning_border_style)}:host([value-state=Warning]:not([readonly])){background-color:var(--sapField_WarningBackground);border-color:var(--sapField_WarningColor)}:host([value-state=Success]:not([readonly])){background-color:var(--sapField_SuccessBackground);border-color:var(--sapField_SuccessColor);border-width:1px}:host([value-state=Information]:not([readonly])){background-color:var(--sapField_InformationBackground);border-color:var(--sapField_InformationColor);border-width:var(--_ui5-input-information_border_width)}[inner-input]::-ms-clear{height:0;width:0}.ui5-input-icon-root{min-width:var(--_ui5_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot=icon]){padding:var(--_ui5_input_icon_padding)}";

/**
 * @public
 */
const metadata$u = {
	tag: "ui5-input",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Input.prototype */ {

		/**
		 * Defines the icon to be displayed in the <code>ui5-input</code>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		icon: {
			type: HTMLElement,
		},

		/**
		 * Defines the <code>ui5-input</code> suggestion items.
		 * <br><br>
		 * Example:
		 * <br><br>
		 * &lt;ui5-input show-suggestions><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-suggestion-item text="Item #1">&lt;/ui5-suggestion-item><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-suggestion-item text="Item #2">&lt;/ui5-suggestion-item><br>
		 * &lt;/ui5-input>
		 * <br>
		 * <ui5-input show-suggestions>
		 * <ui5-suggestion-item text="Item #1"></ui5-suggestion-item>
		 * <ui5-suggestion-item text="Item #2"></ui5-suggestion-item>
		 * </ui5-input>
		 * <br><br>
		 * <b>Note:</b> The suggestion would be displayed only if the <code>showSuggestions</code>
		 * property is set to <code>true</code>.
		 * <br><br>
		 * <b>Note:</b> The &lt;ui5-suggestion-item> is recommended to be used as a suggestion item.
		 * Importing the Input Suggestions Support feature:
		 * <br>
		 * <code>import "@ui5/webcomponents/dist/features/InputSuggestions.js";</code>
		 * <br>
		 * also automatically imports the &lt;ui5-suggestion-item> for your convenience.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "suggestionItems",
			type: HTMLElement,
		},

		/**
		 * The slot is used for native <code>input</code> HTML element to enable form submit,
		 * when <code>name</code> property is set.
		 * @type {HTMLElement[]}
		 * @private
		 */
		formSupport: {
			type: HTMLElement,
		},

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-input</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-input</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * <br>
		 * <b>Note:</b> If the <code>ui5-input</code> has <code>suggestionItems</code>,
		 * the <code>valueStateMessage</code> would be displayed as part of the same popover, if used on desktop, or dialog - on phone.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.6
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.Input.prototype */  {

		/**
		 * Defines whether the <code>ui5-input</code> is in disabled state.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-input</code> is completely noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines if characters within the suggestions are to be highlighted
		 * in case the input value matches parts of the suggestions text.
		 * <br><br>
		 * <b>Note:</b> takes effect when <code>showSuggestions</code> is set to <code>true</code>
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @sicne 1.0.0-rc.8
		 */
		highlight: {
			type: Boolean,
		},

		/**
		 * Defines a short hint intended to aid the user with data entry when the
		 * <code>ui5-input</code> has no value.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		placeholder: {
			type: String,
		},

		/**
		 * Defines whether the <code>ui5-input</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-input</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-input</code> is required.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.3
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Defines the HTML type of the <code>ui5-input</code>.
		 * Available options are: <code>Text</code>, <code>Email</code>,
		 * <code>Number</code>, <code>Password</code>, <code>Tel</code>, and <code>URL</code>.
		 * <br><br>
		 * <b>Notes:</b>
		 * <ul>
		 * <li>The particular effect of this property differs depending on the browser
		 * and the current language settings, especially for type <code>Number</code>.</li>
		 * <li>The property is mostly intended to be used with touch devices
		 * that use different soft keyboard layouts depending on the given input type.</li>
		 * </ul>
		 *
		 * @type {InputType}
		 * @defaultvalue "Text"
		 * @public
		 */
		type: {
			type: InputType,
			defaultValue: InputType.Text,
		},

		/**
		 * Defines the value of the <code>ui5-input</code>.
		 * <br><br>
		 * <b>Note:</b> The property is updated upon typing.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-input</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Determines the name with which the <code>ui5-input</code> will be submitted in an HTML form.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-input</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines whether the <code>ui5-input</code> should show suggestions, if such are present.
		 * <br><br>
		 * <b>Note:</b>
		 * Don`t forget to import the <code>InputSuggestions</code> module from <code>"@ui5/webcomponents/dist/features/InputSuggestions.js"</code> to enable this functionality.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showSuggestions: {
			type: Boolean,
		},

		/**
		 * Sets the maximum number of characters available in the input field.
		 *
		 * @type {Integer}
		 * @since 1.0.0-rc.5
		 * @public
		 */
		maxlength: {
			type: Integer,
		},

		/**
		 * Defines the aria-label attribute for the input
		 *
		 * @type {String}
		 * @since 1.0.0-rc.8
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the input
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		/**
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		_input: {
			type: Object,
		},

		_inputAccInfo: {
			type: Object,
		},

		_wrapperAccInfo: {
			type: Object,
		},

		_inputWidth: {
			type: Integer,
		},

		_listWidth: {
			type: Integer,
		},

		_isPopoverOpen: {
			type: Boolean,
			noAttribute: true,
		},

		_inputIconFocused: {
			type: Boolean,
			noAttribute: true,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.Input.prototype */ {
		/**
		 * Fired when the input operation has finished by pressing Enter or on focusout.
		 *
		 * @event
		 * @public
		 */
		change: {},

		/**
		 * Fired when the value of the <code>ui5-input</code> changes at each keystroke,
		 * and when a suggestion item has been selected.
		 *
		 * @event
		 * @public
		 */
		input: {},

		/**
		 * Fired when user presses Enter key on the <code>ui5-input</code>.
		 * <br><br>
		 * <b>Note:</b> The event is fired independent of whether there was a change before or not.
		 * If change was performed, the event is fired after the change event.
		 * The event is also fired when an item of the select list is selected by pressing Enter.
		 *
		 * @event
		 * @public
		 */
		submit: {},

		/**
		 * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.
		 *
		 * @event sap.ui.webcomponents.main.Input#suggestion-item-select
		 * @param {HTMLElement} item The selected item
		 * @public
		 */
		"suggestion-item-select": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the user navigates to a suggestion item via the ARROW keys,
		 * as a preview, before the final selection.
		 *
		 * @event sap.ui.webcomponents.main.Input#suggestion-item-preview
		 * @param {HTMLElement} item The previewed suggestion item
		 * @param {HTMLElement} targetRef The DOM ref of the suggestion item.
		 * @public
		 * @since 1.0.0-rc.8
		 */
		"suggestion-item-preview": {
			detail: {
				item: { type: HTMLElement },
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the user scrolls the suggestion popover.
		 *
		 * @event sap.ui.webcomponents.main.Input#suggestion-scroll
		 * @param {Integer} scrollTop The current scroll position
		 * @param {HTMLElement} scrollContainer The scroll container
		 * @public
		 * @since 1.0.0-rc.8
		 */
		"suggestion-scroll": {
			detail: {
				scrollTop: { type: Integer },
				scrollContainer: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-input</code> component allows the user to enter and edit text or numeric values in one line.
 * <br>
 * Additionally, you can provide <code>suggestionItems</code>,
 * that are displayed in a popover right under the input.
 * <br><br>
 * The text field can be editable or read-only (<code>readonly</code> property),
 * and it can be enabled or disabled (<code>enabled</code> property).
 * To visualize semantic states, such as "error" or "warning", the <code>valueState</code> property is provided.
 * When the user makes changes to the text, the change event is fired,
 * which enables you to react on any text change.
 * <br><br>
 * <b>Note:</b> If you are using the <code>ui5-input</code> as a single npm module,
 * don't forget to import the <code>InputSuggestions</code> module from
 * "@ui5/webcomponents/dist/features/InputSuggestions.js"
 * to enable the suggestions functionality.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Input.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents/dist/features/InputSuggestions.js";</code> (optional - for input suggestions support)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Input
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-input
 * @appenddocs SuggestionItem
 * @public
 */
class Input extends UI5Element {
	static get metadata() {
		return metadata$u;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$s;
	}

	static get staticAreaTemplate() {
		return main$t;
	}

	static get styles() {
		return styles$6;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles];
	}

	constructor() {
		super();
		// Indicates if there is selected suggestionItem.
		this.hasSuggestionItemSelected = false;

		// Represents the value before user moves selection from suggestion item to another
		// and its value is updated after each move.
		// Note: Used to register and fire "input" event upon [SPACE] or [ENTER].
		// Note: The property "value" is updated upon selection move and can`t be used.
		this.valueBeforeItemSelection = "";

		// Represents the value before user moves selection between the suggestion items
		// and its value remains the same when the user navigates up or down the list.
		// Note: Used to cancel selection upon [ESC].
		this.valueBeforeItemPreview = "";

		// Indicates if the user selection has been canceled with [ESC].
		this.suggestionSelectionCanceled = false;

		// tracks the value between focus in and focus out to detect that change event should be fired.
		this.previousValue = undefined;

		// Indicates, if the component is rendering for first time.
		this.firstRendering = true;

		// The value that should be highlited.
		this.highlightValue = "";

		// all sementic events
		this.EVENT_SUBMIT = "submit";
		this.EVENT_CHANGE = "change";
		this.EVENT_INPUT = "input";
		this.EVENT_SUGGESTION_ITEM_SELECT = "suggestion-item-select";

		// all user interactions
		this.ACTION_ENTER = "enter";
		this.ACTION_USER_INPUT = "input";

		// Suggestions array initialization
		this.suggestionsTexts = [];

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");

		this._handleResizeBound = this._handleResize.bind(this);
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._handleResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this._handleResizeBound);
	}

	onBeforeRendering() {
		if (this.showSuggestions) {
			this.enableSuggestions();
			this.suggestionsTexts = this.Suggestions.defaultSlotProperties(this.highlightValue);
		}

		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this);
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	async onAfterRendering() {
		if (!this.firstRendering && !isPhone() && this.Suggestions) {
			const shouldOpenSuggestions = this.shouldOpenSuggestions();

			this.Suggestions.toggle(shouldOpenSuggestions, {
				preventFocusRestore: !this.hasSuggestionItemSelected,
			});

			RenderScheduler.whenFinished().then(async () => {
				this._listWidth = await this.Suggestions._getListWidth();
			});

			if (!isPhone() && shouldOpenSuggestions) {
				// Set initial focus to the native input

				(await this.getInputDOMRef()).focus();
			}
		}

		if (!this.firstRendering && this.hasValueStateMessage) {
			this.toggle(this.shouldDisplayOnlyValueStateMessage);
		}

		this.firstRendering = false;
	}

	_onkeydown(event) {
		if (isUp(event)) {
			return this._handleUp(event);
		}

		if (isDown(event)) {
			return this._handleDown(event);
		}

		if (isSpace(event)) {
			return this._handleSpace(event);
		}

		if (isEnter(event)) {
			return this._handleEnter(event);
		}

		if (isEscape(event)) {
			return this._handleEscape(event);
		}

		if (this.showSuggestions) {
			this.Suggestions._deselectItems();
		}

		this._keyDown = true;
	}

	_onkeyup(event) {
		this._keyDown = false;
	}

	/* Event handling */
	_handleUp(event) {
		if (this.Suggestions && this.Suggestions.isOpened()) {
			this.Suggestions.onUp(event);
		}
	}

	_handleDown(event) {
		if (this.Suggestions && this.Suggestions.isOpened()) {
			this.Suggestions.onDown(event);
		}
	}

	_handleSpace(event) {
		if (this.Suggestions) {
			this.Suggestions.onSpace(event);
		}
	}

	_handleEnter(event) {
		const itemPressed = !!(this.Suggestions && this.Suggestions.onEnter(event));
		if (!itemPressed) {
			this.fireEventByAction(this.ACTION_ENTER);
		}
	}

	_handleEscape() {
		if (this.showSuggestions && this.Suggestions && this.Suggestions._isItemOnTarget()) {
			// Restore the value.
			this.value = this.valueBeforeItemPreview;

			// Mark that the selection has been canceled, so the popover can close
			// and not reopen, due to receiving focus.
			this.suggestionSelectionCanceled = true;

			// Close suggestion popover
			this._closeRespPopover(true);
		}
	}

	async _onfocusin(event) {
		const inputDomRef = await this.getInputDOMRef();

		if (event.target !== inputDomRef) {
			return;
		}

		this.focused = true; // invalidating property
		this.previousValue = this.value;
		this.valueBeforeItemPreview = this.value;

		this._inputIconFocused = event.target && event.target === this.querySelector("[ui5-icon]");
	}

	_onfocusout(event) {
		const focusedOutToSuggestions = this.Suggestions && event.relatedTarget && event.relatedTarget.shadowRoot && event.relatedTarget.shadowRoot.contains(this.Suggestions.responsivePopover);
		const focusedOutToValueStateMessage = event.relatedTarget && event.relatedTarget.shadowRoot && event.relatedTarget.shadowRoot.querySelector(".ui5-valuestatemessage-root");

		// if focusout is triggered by pressing on suggestion item or value state message popover, skip invalidation, because re-rendering
		// will happen before "itemPress" event, which will make item "active" state not visualized
		if (focusedOutToSuggestions	|| focusedOutToValueStateMessage) {
			event.stopImmediatePropagation();
			return;
		}

		const toBeFocused = event.relatedTarget;

		if (toBeFocused && toBeFocused.classList.contains(this._id)) {
			return;
		}

		this.closePopover();

		this.previousValue = "";
		this.focused = false; // invalidating property
	}

	_click(event) {
		if (isPhone() && !this.readonly && this.Suggestions) {
			this.Suggestions.open(this);
			this.isRespPopoverOpen = true;
		}
	}

	_handleChange(event) {
		this.fireEvent(this.EVENT_CHANGE);
	}

	_scroll(event) {
		const detail = event.detail;
		this.fireEvent("suggestion-scroll", {
			scrollTop: detail.scrollTop,
			scrollContainer: detail.targetRef,
		});
	}

	async _handleInput(event) {
		const inputDomRef = await this.getInputDOMRef();

		this.suggestionSelectionCanceled = false;

		if (this.value && this.type === InputType.Number && !isBackSpace(event) && !inputDomRef.value) {
			// For input with type="Number", if the delimiter is entered second time, the inner input is firing event with empty value
			return;
		}

		if (event.target === inputDomRef) {
			// stop the native event, as the semantic "input" would be fired.
			event.stopImmediatePropagation();
		}

		/* skip calling change event when an input with a placeholder is focused on IE
			- value of the host and the internal input should be differnt in case of actual input
			- input is called when a key is pressed => keyup should not be called yet
		*/
		const skipFiring = (inputDomRef.value === this.value) && isIE() && !this._keyDown && !!this.placeholder;

		!skipFiring && this.fireEventByAction(this.ACTION_USER_INPUT);

		this.hasSuggestionItemSelected = false;

		if (this.Suggestions) {
			this.Suggestions.updateSelectedItemPosition(null);
		}
	}

	_handleResize() {
		this._inputWidth = this.offsetWidth;
	}

	_closeRespPopover(preventFocusRestore) {
		this.Suggestions.close(preventFocusRestore);
	}

	async _afterOpenPopover() {
		// Set initial focus to the native input
		if (isPhone()) {
			(await this.getInputDOMRef()).focus();
		}
	}

	_afterClosePopover() {
		this.announceSelectedItem();

		// close device's keyboard and prevent further typing
		if (isPhone()) {
			this.blur();
		}
	}

	toggle(isToggled) {
		if (isToggled && !this.isRespPopoverOpen) {
			this.openPopover();
		} else {
			this.closePopover();
		}
	}

	/**
	 * Checks if the value state popover is open.
	 * @returns {Boolean} true if the popover is open, false otherwise
	 * @public
	 */
	isOpen() {
		return !!this._isPopoverOpen;
	}

	async openPopover() {
		const popover = await this._getPopover();

		if (popover) {
			this._isPopoverOpen = true;
			popover.openBy(this);
		}
	}

	async closePopover() {
		const popover = await this._getPopover();

		popover && popover.close();
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem && staticAreaItem.querySelector("[ui5-popover]");
	}

	enableSuggestions() {
		if (this.Suggestions) {
			this.Suggestions.highlight = this.highlight;
			return;
		}

		const Suggestions = getFeature("InputSuggestions");
		if (Suggestions) {
			this.Suggestions = new Suggestions(this, "suggestionItems", this.highlight);
		} else {
			throw new Error(`You have to import "@ui5/webcomponents/dist/features/InputSuggestions.js" module to use ui5-input suggestions`);
		}
	}

	shouldOpenSuggestions() {
		return !!(this.suggestionItems.length
			&& this.focused
			&& this.showSuggestions
			&& !this.hasSuggestionItemSelected
			&& !this.suggestionSelectionCanceled);
	}

	selectSuggestion(item, keyboardUsed) {
		if (item.group) {
			return;
		}

		const itemText = item.text || item.textContent; // keep textContent for compatibility
		const fireInput = keyboardUsed
			? this.valueBeforeItemSelection !== itemText : this.value !== itemText;

		this.hasSuggestionItemSelected = true;

		if (fireInput) {
			this.value = itemText;
			this.valueBeforeItemSelection = itemText;
			this.fireEvent(this.EVENT_INPUT);
			this.fireEvent(this.EVENT_CHANGE);
		}

		this.valueBeforeItemPreview = "";
		this.suggestionSelectionCanceled = false;

		this.fireEvent(this.EVENT_SUGGESTION_ITEM_SELECT, { item });
	}

	previewSuggestion(item) {
		this.valueBeforeItemSelection = this.value;
		this.updateValueOnPreview(item);
		this.announceSelectedItem();
		this._previewItem = item;
	}

	/**
	 * Updates the input value on item preview.
	 * @param {Object} item The item that is on preview
	 */
	updateValueOnPreview(item) {
		const noPreview = item.type === "Inactive" || item.group;
		const itemValue = noPreview ? "" : (item.effectiveTitle || item.textContent);
		this.value = itemValue;
	}

	/**
	 * The suggestion item on preview.
	 * @type { ui5-suggestion-item }
	 * @readonly
	 * @public
	 */
	get previewItem() {
		if (!this._previewItem) {
			return null;
		}

		return this.getSuggestionByListItem(this._previewItem);
	}

	async fireEventByAction(action) {
		await this.getInputDOMRef();

		if (this.disabled || this.readonly) {
			return;
		}

		const inputValue = await this.getInputValue();
		const isSubmit = action === this.ACTION_ENTER;
		const isUserInput = action === this.ACTION_USER_INPUT;

		const input = await this.getInputDOMRef();
		const cursorPosition = input.selectionStart;

		this.value = inputValue;
		this.highlightValue = inputValue;
		this.valueBeforeItemPreview = inputValue;

		if (isSafari()) {
			// When setting the value by hand, Safari moves the cursor when typing in the middle of the text (See #1761)
			setTimeout(() => {
				input.selectionStart = cursorPosition;
				input.selectionEnd = cursorPosition;
			}, 0);
		}

		if (isUserInput) { // input
			this.fireEvent(this.EVENT_INPUT);
			// Angular two way data binding
			this.fireEvent("value-changed");
			return;
		}

		if (isSubmit) { // submit
			this.fireEvent(this.EVENT_SUBMIT);
		}

		// In IE, pressing the ENTER does not fire change
		const valueChanged = (this.previousValue !== undefined) && (this.previousValue !== this.value);
		if (isIE() && isSubmit && valueChanged) {
			this.fireEvent(this.EVENT_CHANGE);
		}
	}

	async getInputValue() {
		const domRef = this.getDomRef();

		if (domRef) {
			return (await this.getInputDOMRef()).value;
		}
		return "";
	}

	async getInputDOMRef() {
		if (isPhone() && this.Suggestions && this.suggestionItems.length) {
			await this.Suggestions._respPopover();
			return this.Suggestions && this.Suggestions.responsivePopover.querySelector(".ui5-input-inner-phone");
		}

		return this.getDomRef().querySelector(`input`);
	}

	getLabelableElementId() {
		return this.getInputId();
	}

	getSuggestionByListItem(item) {
		const key = parseInt(item.getAttribute("data-ui5-key"));
		return this.suggestionItems[key];
	}

	/**
	 * Returns if the suggestions popover is scrollable.
	 * The method returns <code>Promise</code> that resolves to true,
	 * if the popup is scrollable and false otherwise.
	 * @returns {Promise}
	 */
	isSuggestionsScrollable() {
		if (!this.Suggestions) {
			return Promise.resolve(false);
		}

		return this.Suggestions._isScrollable();
	}

	getInputId() {
		return `${this._id}-inner`;
	}

	/* Suggestions interface  */
	onItemFocused() {}

	onItemMouseOver(event) {
		const item = event.target;
		const suggestion = this.getSuggestionByListItem(item);
		suggestion && suggestion.fireEvent("mouseover", {
			item: suggestion,
			targetRef: item,
		});
	}

	onItemMouseOut(event) {
		const item = event.target;
		const suggestion = this.getSuggestionByListItem(item);
		suggestion && suggestion.fireEvent("mouseout", {
			item: suggestion,
			targetRef: item,
		});
	}

	onItemSelected(item, keyboardUsed) {
		this.selectSuggestion(item, keyboardUsed);
	}

	onItemPreviewed(item) {
		this.previewSuggestion(item);
		this.fireEvent("suggestion-item-preview", {
			item: this.getSuggestionByListItem(item),
			targetRef: item,
		});
	}

	onOpen() {}

	onClose() {}

	valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Success": i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Information": i18nBundle.getText(VALUE_STATE_INFORMATION),
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	announceSelectedItem() {
		const invisibleText = this.shadowRoot.querySelector(`#${this._id}-selectionText`);

		if (this.Suggestions && this.Suggestions._isItemOnTarget()) {
			invisibleText.textContent = this.itemSelectionAnnounce;
		} else {
			invisibleText.textContent = "";
		}
	}

	get _readonly() {
		return this.readonly && !this.disabled;
	}

	get _headerTitleText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
	}

	get inputType() {
		return this.type.toLowerCase();
	}

	get suggestionsTextId() {
		return this.showSuggestions ? `${this._id}-suggestionsText` : "";
	}

	get valueStateTextId() {
		return this.hasValueState ? `${this._id}-valueStateDesc` : "";
	}

	get accInfo() {
		const ariaHasPopupDefault = this.showSuggestions ? "true" : undefined;
		const ariaAutoCompleteDefault = this.showSuggestions ? "list" : undefined;
		const ariaDescribedBy = this._inputAccInfo.ariaDescribedBy ? `${this.suggestionsTextId} ${this.valueStateTextId} ${this._id}-suggestionsCount ${this._inputAccInfo.ariaDescribedBy}`.trim() : `${this.suggestionsTextId} ${this.valueStateTextId} ${this._id}-suggestionsCount`.trim();

		return {
			"wrapper": {
			},
			"input": {
				"ariaDescribedBy": ariaDescribedBy,
				"ariaInvalid": this.valueState === ValueState.Error ? "true" : undefined,
				"ariaHasPopup": this._inputAccInfo.ariaHasPopup ? this._inputAccInfo.ariaHasPopup : ariaHasPopupDefault,
				"ariaAutoComplete": this._inputAccInfo.ariaAutoComplete ? this._inputAccInfo.ariaAutoComplete : ariaAutoCompleteDefault,
				"role": this._inputAccInfo && this._inputAccInfo.role,
				"ariaOwns": this._inputAccInfo && this._inputAccInfo.ariaOwns,
				"ariaExpanded": this._inputAccInfo && this._inputAccInfo.ariaExpanded,
				"ariaDescription": this._inputAccInfo && this._inputAccInfo.ariaDescription,
				"ariaLabel": (this._inputAccInfo && this._inputAccInfo.ariaLabel) || getEffectiveAriaLabelText(this),
				"ariaRequired": (this._inputAccInfo && this._inputAccInfo.ariaRequired) || this.required,
			},
		};
	}

	get ariaValueStateHiddenText() {
		if (!this.hasValueStateMessage) {
			return;
		}

		if (this.shouldDisplayDefaultValueStateMessage) {
			return this.valueStateText;
		}

		return this.valueStateMessageText.map(el => el.textContent).join(" ");
	}

	get itemSelectionAnnounce() {
		return this.Suggestions ? this.Suggestions.itemSelectionAnnounce : undefined;
	}

	get classes() {
		return {
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-responsive-popover-header": !this.isOpen(),
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		return {
			popoverHeader: {
				"width": `${this._inputWidth}px`,
			},
			suggestionPopoverHeader: {
				"display": this._listWidth === 0 ? "none" : "inline-block",
				"width": `${this._listWidth}px`,
				"padding": "0.5625rem 1rem",
			},
			suggestionsPopover: {
				"max-width": `${this._inputWidth}px`,
			},
		};
	}

	get suggestionSeparators() {
		return "None";
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get shouldDisplayOnlyValueStateMessage() {
		return this.hasValueStateMessage && !this.shouldOpenSuggestions() && this.focused;
	}

	get shouldDisplayDefaultValueStateMessage() {
		return !this.valueStateMessage.length && this.hasValueStateMessage;
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get hasValueStateMessage() {
		return this.hasValueState && this.valueState !== ValueState.Success
			&& (!this._inputIconFocused // Handles the cases when valueStateMessage is forwarded (from datepicker e.g.)
			|| (this._isPhone && this.Suggestions)); // Handles Input with suggestions on mobile
	}

	get valueStateText() {
		return this.valueStateTextMappings()[this.valueState];
	}

	get suggestionsText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS);
	}

	get availableSuggestionsCount() {
		if (this.showSuggestions) {
			switch (this.suggestionsTexts.length) {
			case 0:
				return this.i18nBundle.getText(INPUT_SUGGESTIONS_NO_HIT);

			case 1:
				return this.i18nBundle.getText(INPUT_SUGGESTIONS_ONE_HIT);

			default:
				return this.i18nBundle.getText(INPUT_SUGGESTIONS_MORE_HITS, this.suggestionsTexts.length);
			}
		}

		return undefined;
	}

	get step() {
		return this.type === InputType.Number ? "any" : undefined;
	}

	get _isPhone() {
		return isPhone();
	}

	static get dependencies() {
		const Suggestions = getFeature("InputSuggestions");

		return [Popover].concat(Suggestions ? Suggestions.dependencies : []);
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Input.define();

const block0$u = (context) => { return scopedHtml`<div class="ui5-date-picker-root" style="${styleMap(context.styles.main)}" @keydown=${context._onkeydown} @focusout="${context._onfocusout}"><!-- INPUT --><ui5-input id="${ifDefined(context._id)}-inner" class="ui5-date-picker-input" placeholder="${ifDefined(context._placeholder)}" type="${ifDefined(context.type)}" value="${ifDefined(context.value)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" data-sap-focus-ref ._inputAccInfo ="${ifDefined(context.accInfo)}">${ context.valueStateMessage.length ? block1$n() : undefined }${ !context.readonly ? block2$m(context) : undefined }</ui5-input><slot name="formSupport"></slot></div>`; };
const block1$n = (context) => { return scopedHtml`<slot name="valueStateMessage" slot="valueStateMessage"></slot>`; };
const block2$m = (context) => { return scopedHtml`<ui5-icon slot="icon" name="${ifDefined(context.openIconName)}" tabindex="-1" accessible-name="${ifDefined(context.openIconTitle)}" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" dir="${ifDefined(context.effectiveDir)}"></ui5-icon>`; };


const main$u = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$u(context);
};

const block0$v = (context) => { return scopedHtml`<ui5-responsive-popover id="${ifDefined(context._id)}-responsive-popover" allow-target-overlap="${ifDefined(context._respPopoverConfig.allowTargetOverlap)}" stay-open-on-scroll="${ifDefined(context._respPopoverConfig.stayOpenOnScroll)}" placement-type="Bottom" horizontal-align="Left" ?disable-scrolling="${context._isIE}" no-arrow with-padding no-stretch ?_hide-header=${ifDefined(context._shouldHideHeader)} @keydown="${context._onkeydown}" @ui5-before-open="${ifDefined(context._respPopoverConfig.beforeOpen)}" @ui5-after-open="${ifDefined(context._respPopoverConfig.afterOpen)}" @ui5-before-close="${ifDefined(context._respPopoverConfig.beforeClose)}" @ui5-after-close="${ifDefined(context._respPopoverConfig.afterClose)}">${ context.showHeader ? block1$o(context) : undefined }<ui5-calendar id="${ifDefined(context._id)}-calendar" primary-calendar-type="${ifDefined(context._calendar.primaryCalendarType)}" format-pattern="${ifDefined(context._calendar.formatPattern)}" timestamp="${ifDefined(context._calendar.timestamp)}" .selectedDates="${ifDefined(context._calendar.selectedDates)}" .minDate="${ifDefined(context._calendar.minDate)}" .maxDate="${ifDefined(context._calendar.maxDate)}" @ui5-selected-dates-change="${ifDefined(context._calendar.onSelectedDatesChange)}" ?hide-week-numbers="${context.hideWeekNumbers}"></ui5-calendar>${ context.showFooter ? block2$n() : undefined }</ui5-responsive-popover>`; };
const block1$o = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context.closePicker}"></ui5-button></div></div>`; };
const block2$n = (context) => { return scopedHtml``; };


const main$v = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$v(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var datePickerCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}[input-icon]{color:var(--sapContent_IconColor);cursor:pointer;outline:none;padding:var(--_ui5_input_icon_padding);border-left:1px solid transparent;min-width:1rem;min-height:1rem}[input-icon][pressed]{background:var(--sapButton_Selected_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:not([pressed]):not(:active):hover{background:var(--sapButton_Lite_Hover_Background)}[input-icon]:hover{border-left:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]:hover{border-left:none;border-right:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]{border-left:none;border-right:1px solid transparent}:host(:not([hidden])){display:inline-block}:host{color:var(--sapField_TextColor);background-color:var(--sapField_Background)}:host .ui5-date-picker-input{width:100%;min-width:inherit;color:inherit;background-color:inherit}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var datePickerPopoverCss = "[ui5-calendar]{width:100%}";

/**
 * @public
 */
const metadata$v = {
	tag: "ui5-date-picker",
	altTag: "ui5-datepicker",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends  sap.ui.webcomponents.main.DatePicker.prototype */ {
		/**
		 * Defines a formatted date value.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-date-picker</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Determines the format, displayed in the input field.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		formatPattern: {
			type: String,
		},

		/**
		 * Determines the minimum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		minDate: {
			type: String,
		},

		/**
		 * Determines the maximum date available for selection.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		maxDate: {
			type: String,
		},

		/**
		 * Determines the calendar type.
		 * The input value is formated according to the calendar type
		 * and the picker shows the months and years from the specified calendar.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Gregorian</code></li>
		 * <li><code>Islamic</code></li>
		 * <li><code>Japanese</code></li>
		 * <li><code>Buddhist</code></li>
		 * <li><code>Persian</code></li>
		 * </ul>
		 *
		 * @type {CalendarType}
		 * @defaultvalue "Gregorian"
		 * @public
		 */
		primaryCalendarType: {
			type: CalendarType,
		},

		/**
		 * Defines whether the <code>ui5-datepicker</code> is required.
		 *
		 * @since 1.0.0-rc.9
		 * @type {Boolean}
		 * @defaultvalue false
		 * @public
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-date-picker</code> is displayed as disabled.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-date-picker</code> is displayed as read-only.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines a short hint, intended to aid the user with data entry when the
		 * <code>ui5-date-picker</code> has no value.
		 *
		 * <br><br>
		 * <b>Note:</b> When no placeholder is set, the format pattern is displayed as a placeholder.
		 * Passing an empty string as the value of this property will make the <code>ui5-date-picker</code> appear empty - without placeholder or format pattern.
		 *
		 * @type {string}
		 * @defaultvalue undefined
		 * @public
		 */
		placeholder: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Determines the name with which the <code>ui5-date-picker</code> will be submitted in an HTML form.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-date-picker</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines the visibility of the week numbers column.
		 * <br><br>
		 *
		 * <b>Note:<b> For calendars other than Gregorian,
		 * the week numbers are not displayed regardless of what is set.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		hideWeekNumbers: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the <code>ui5-date-picker</code>.
		 *
		 * @type {String}
		 * @since 1.0.0-rc.9
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the <code>ui5-date-picker</code>.
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_isPickerOpen: {
			type: Boolean,
			noAttribute: true,
		},

		_respPopoverConfig: {
			type: Object,
		},

		_calendar: {
			type: Object,
		},
	},

	slots: /** @lends  sap.ui.webcomponents.main.DatePicker.prototype */ {
		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-date-picker</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-date-picker</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement}
		 * @since 1.0.0-rc.7
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},

	events: /** @lends  sap.ui.webcomponents.main.DatePicker.prototype */ {

		/**
		 * Fired when the input operation has finished by pressing Enter or on focusout.
		 *
		 * @event
		 * @public
		*/
		change: {},

		/**
		 * Fired when the value of the <code>ui5-date-picker</code> is changed at each key stroke.
		 *
		 * @event
		 * @public
		*/
		input: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-date-picker</code> component provides an input field with assigned calendar which opens on user action.
 * The <code>ui5-date-picker</code> allows users to select a localized date using touch,
 * mouse, or keyboard input. It consists of two parts: the date input field and the
 * date picker.
 *
 * <h3>Usage</h3>
 *
 * The user can enter a date by:
 * <ul>
 * <li>Using the calendar that opens in a popup</li>
 * <li>Typing it in directly in the input field</li>
 * </ul>
 * <br><br>
 * When the user makes an entry and chooses the enter key, the calendar shows the corresponding date.
 * When the user directly triggers the calendar display, the actual date is displayed.
 *
 * <h3>Formatting</h3>
 *
 * If a date is entered by typing it into
 * the input field, it must fit to the used date format.
 * <br><br>
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * For more information, see <ui5-link target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table" class="api-table-content-cell-link">UTS #35: Unicode Locale Data Markup Language</ui5-link>.
 * <br><br>
 * For example, if the <code>format-pattern</code> is "yyyy-MM-dd",
 * a valid value string is "2015-07-30" and the same is displayed in the input.
 *
 * <h3>Keyboard Handling</h3>
 * The <code>ui5-date-picker</code> provides advanced keyboard handling.
 * If the <code>ui5-date-picker</code> is focused,
 * you can open or close the drop-down by pressing <code>F4</code>, <code>ALT+UP</code> or <code>ALT+DOWN</code> keys.
 * Once the drop-down is opened, you can use the <code>UP</code>, <code>DOWN</code>, <code>LEFT</code>, <code>RIGHT</code> arrow keys
 * to navigate through the dates and select one by pressing the <code>Space</code> or <code>Enter</code> keys. Moreover you can
 * use TAB to reach the buttons for changing month and year.
 * <br>
 *
 * If the <code>ui5-date-picker</code> is focused and the picker dialog is not opened the user can
 * increment or decrement the corresponding field of the JS date object referenced by <code>dateValue</code> propery
 * by using the following shortcuts:
 * <br>
 * <ul>
 * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>
 * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>
 * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>
 * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>
 * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>
 * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/DatePicker";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.DatePicker
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-date-picker
 * @public
 */
class DatePicker extends UI5Element {
	static get metadata() {
		return metadata$v;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$u;
	}

	static get staticAreaTemplate() {
		return main$v;
	}

	static get styles() {
		return datePickerCss;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, datePickerPopoverCss];
	}

	constructor() {
		super();

		this._respPopoverConfig = {
			allowTargetOverlap: true,
			stayOpenOnScroll: true,
			afterClose: () => {
				this._isPickerOpen = false;

				if (isPhone()) {
					// close device's keyboard and prevent further typing
					this.blur();
				} else if (this._focusInputAfterClose) {
					this._getInput().focus();
					this._focusInputAfterClose = false;
				}

				const calendar = this.calendar;
				if (calendar) {
					calendar._hideMonthPicker();
					calendar._hideYearPicker();
				}
			},
			afterOpen: () => {
				const calendar = this.calendar;

				if (!calendar) {
					return;
				}

				const dayPicker = calendar.shadowRoot.querySelector(`#${calendar._id}-daypicker`);
				const selectedDay = dayPicker.shadowRoot.querySelector(".ui5-dp-item--selected");
				const today = dayPicker.shadowRoot.querySelector(".ui5-dp-item--now");
				let focusableDay = selectedDay || today;
				if (!selectedDay && (this.minDate || this.maxDate) && !this.isInValidRange((new Date().getTime()))) {
					focusableDay = this.findFirstFocusableDay(dayPicker);
				}

				if (this._focusInputAfterOpen) {
					this._focusInputAfterOpen = false;
					this._getInput().focus();
				} else if (focusableDay) {
					focusableDay.focus();

					let focusableDayIdx = parseInt(focusableDay.getAttribute("data-sap-index"));
					const focusableItem = dayPicker.focusableDays.find(item => parseInt(item._index) === focusableDayIdx);
					focusableDayIdx = focusableItem ? dayPicker.focusableDays.indexOf(focusableItem) : focusableDayIdx;

					dayPicker._itemNav.current = focusableDayIdx;
					dayPicker._itemNav.update();
				}
			},
		};

		this._calendar = {
			onSelectedDatesChange: this._handleCalendarChange.bind(this),
			selectedDates: [],
		};

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	findFirstFocusableDay(daypicker) {
		const today = new Date();
		if (!this.isInValidRange(today.getTime())) {
			const focusableItems = Array.from(daypicker.shadowRoot.querySelectorAll(".ui5-dp-item"));
			return focusableItems.filter(x => !x.classList.contains("ui5-dp-item--disabled"))[0];
		}
	}

	onBeforeRendering() {
		this._calendar.primaryCalendarType = this._primaryCalendarType;
		this._calendar.formatPattern = this._formatPattern;

		if (this.minDate && !this.isValid(this.minDate)) {
			this.minDate = null;
			console.warn(`In order for the "minDate" property to have effect, you should enter valid date format`); // eslint-disable-line
		}

		if (this.maxDate && !this.isValid(this.maxDate)) {
			this.maxDate = null;
			console.warn(`In order for the "maxDate" property to have effect, you should enter valid date format`); // eslint-disable-line
		}
		if (this._checkValueValidity(this.value) || this.checkRealValueValidity()) {
			this._changeCalendarSelection();
		} else {
			this._calendar.selectedDates = [];
		}

		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this);
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}

		if (this.minDate) {
			this._calendar.minDate = this.minDate;
		}

		if (this.maxDate) {
			this._calendar.maxDate = this.maxDate;
		}
	}

	_getTimeStampFromString(value) {
		const jsDate = this.getFormat().parse(value);
		if (jsDate) {
			return CalendarDate.fromLocalJSDate(jsDate, this._primaryCalendarType).toUTCJSDate().valueOf();
		}
		return undefined;
	}

	_onkeydown(event) {
		if (isShow(event)) {
			event.preventDefault(); // Prevent scroll on Alt/Option + Arrow Up/Down
			if (this.isOpen()) {
				if (isF4(event)) {
					if (this.calendar._monthPicker._hidden) {
						this.calendar._showYearPicker();
					}
				} else {
					this._toggleAndFocusInput();
				}
			} else {
				this._toggleAndFocusInput();
			}
		}

		if (this.isOpen()) {
			return;
		}

		if (isEnter(event)) {
			this._handleEnterPressed();
		}

		if (isPageUpShiftCtrl(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(true, true, false, false);
		} else if (isPageUpShift(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(true, false, true, false);
		} else if (isPageUp(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(true, false, false, true);
		}

		if (isPageDownShiftCtrl(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(false, true, false, false);
		} else if (isPageDownShift(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(false, false, true, false);
		} else if (isPageDown(event)) {
			event.preventDefault();
			this._changeDateValueWrapper(false, false, false, true);
		}
	}

	/**
	 * This method is used in the derived classes
	 */
	_handleEnterPressed() {}

	/**
	 * This method is used in the derived classes
	 */
	_onfocusout() {}

	/**
	 * Adds or extracts a given number of measuring units from the "dateValue" property value
	 * @param {boolean} forward if true indicates addition
	 * @param {boolean} years indicates that the measuring unit is in years
	 * @param {boolean} months indicates that the measuring unit is in months
	 * @param {boolean} days indicates that the measuring unit is in days
	 * @param {int} step number of measuring units to substract or add defaults to 1
	 */
	_changeDateValueWrapper(forward, years, months, days, step = 1) {
		let date = this.dateValue;
		date = this._changeDateValue(date, forward, years, months, days, step);
		this.value = this.formatValue(date);
	}

	/**
	 * Adds or extracts a given number of measuring units from the "dateValue" property value
	 *
	 * @param {boolean} date js date object to be changed
	 * @param {boolean} years indicates that the measuring unit is in years
	 * @param {boolean} months indicates that the measuring unit is in months
	 * @param {boolean} days indicates that the measuring unit is in days
	 * @param {boolean} forward if true indicates addition
	 * @param {int} step number of measuring units to substract or add defaults ot 1
	 * @returns {Object} JS date object
	 */
	_changeDateValue(date, forward, years, months, days, step = 1) {
		if (!date) {
			return;
		}

		let calDate = CalendarDate.fromLocalJSDate(date, this._primaryCalendarType);
		const oldCalDate = new CalendarDate(calDate, this._primaryCalendarType);
		const incrementStep = forward ? step : -step;

		if (incrementStep === 0 || (!days && !months && !years)) {
			return;
		}

		if (days) {
			calDate.setDate(calDate.getDate() + incrementStep);
		} else if (months) {
			calDate.setMonth(calDate.getMonth() + incrementStep);
			const monthDiff = (calDate.getYear() - oldCalDate.getYear()) * 12 + (calDate.getMonth() - oldCalDate.getMonth());

			if (calDate.getMonth() === oldCalDate.getMonth() || monthDiff !== incrementStep) {
				// first condition example: 31th of March increment month with -1 results in 2th of March
				// second condition example: 31th of January increment month with +1 results in 2th of March
				calDate.setDate(0);
			}
		} else if (years) {
			calDate.setYear(calDate.getYear() + incrementStep);

			if (calDate.getMonth() !== oldCalDate.getMonth()) {
				// day doesn't exist in this month (February 29th)
				calDate.setDate(0);
			}
		}

		if (calDate.valueOf() < this._minDate) {
			calDate = CalendarDate.fromTimestamp(this._minDate, this._primaryCalendarType);
		} else if (calDate.valueOf() > this._maxDate) {
			calDate = CalendarDate.fromTimestamp(this._maxDate, this._primaryCalendarType);
		}

		return calDate.toLocalJSDate();
	}

	_toggleAndFocusInput() {
		this.togglePicker();
		this._getInput().focus();
	}

	_getInput() {
		return this.shadowRoot.querySelector("[ui5-input]");
	}

	async _handleInputChange() {
		let nextValue = await this._getInput().getInputValue();
		const emptyValue = nextValue === "";
		const isValid = emptyValue || this._checkValueValidity(nextValue);

		if (isValid) {
			nextValue = this.normalizeValue(nextValue);
			this.valueState = ValueState.None;
		} else {
			this.valueState = ValueState.Error;
		}


		this.value = nextValue;
		this.fireEvent("change", { value: nextValue, valid: isValid });
		// Angular two way data binding
		this.fireEvent("value-changed", { value: nextValue, valid: isValid });
	}

	async _handleInputLiveChange() {
		const nextValue = await this._getInput().getInputValue();
		const emptyValue = nextValue === "";
		const isValid = emptyValue || this._checkValueValidity(nextValue);

		this.value = nextValue;
		this.fireEvent("input", { value: nextValue, valid: isValid });
	}

	_checkValueValidity(value) {
		return this.isValid(value) && this.isInValidRange(this._getTimeStampFromString(value));
	}

	/**
	 * This method is used in the derived classes
	 */
	checkRealValueValidity() {
		return false;
	}

	_click(event) {
		if (isPhone()) {
			this.responsivePopover.open(this);
			event.preventDefault(); // prevent immediate selection of any item
		}
	}

	/**
	 * Checks if a value is valid against the current date format of the DatePicker.
	 * @param {string} value A value to be tested against the current date format
	 * @public
	 */
	isValid(value = "") {
		return !!(value && this.getFormat().parse(value));
	}

	/**
	 * Checks if a date is in range between minimum and maximum date.
	 * @param {object} value
	 * @public
	 */
	isInValidRange(value = "") {
		if (value === "") {
			return true;
		}

		const pickedDate = new Date(value),
			minDate = new Date(this._minDate),
			maxDate = new Date(this._maxDate);

		if (minDate && maxDate) {
			if (minDate <= pickedDate && maxDate >= pickedDate) {
				return true;
			}
		} else if (minDate && !maxDate) {
			if (minDate <= pickedDate) {
				return true;
			}
		} else if (maxDate && !minDate) {
			if (maxDate >= pickedDate) {
				return true;
			}
		} else if (!maxDate && !minDate) {
			return true;
		}

		return false;
	}

	// because the parser understands more than one format
	// but we need values in one format
	normalizeValue(value) {
		if (value === "") {
			return value;
		}

		return this.getFormat().format(this.getFormat().parse(value));
	}

	get validValue() {
		if (this.isValid(this.value)) {
			return this.value;
		}
		return this.getFormat().format(new Date());
	}

	get calendar() {
		return this.responsivePopover.querySelector(`#${this._id}-calendar`);
	}

	get _calendarDate() {
		const millisecondsUTC = this.getFormat().parse(this.validValue, true).getTime();
		const oCalDate = CalendarDate.fromTimestamp(
			millisecondsUTC - (millisecondsUTC % (24 * 60 * 60 * 1000)),
			this._primaryCalendarType
		);
		return oCalDate;
	}

	get _primaryCalendarType() {
		return this.primaryCalendarType || getCalendarType$1() || LocaleData.getInstance(getLocale()).getPreferredCalendarType();
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	get _displayFormat() {
		return this.getFormat().oFormatOptions.pattern;
	}

	get _placeholder() {
		return this.placeholder !== undefined ? this.placeholder : this._displayFormat;
	}

	get _headerTitleText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
	}

	get phone() {
		return isPhone();
	}

	get showHeader() {
		return this.phone;
	}

	get showFooter() {
		return this.phone;
	}

	get _isIE() {
		return isIE();
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
				calendarType: this._primaryCalendarType,
			});
		}
		return this._oDateFormat;
	}

	get accInfo() {
		return {
			"ariaDescribedBy": `${this._id}-date`,
			"ariaHasPopup": "true",
			"ariaAutoComplete": "none",
			"role": "combobox",
			"ariaOwns": `${this._id}-responsive-popover`,
			"ariaExpanded": this.isOpen(),
			"ariaDescription": this.dateAriaDescription,
			"ariaRequired": this.required,
			"ariaLabel": getEffectiveAriaLabelText(this),
		};
	}

	get _maxDate() {
		return this.maxDate ? this._getTimeStampFromString(this.maxDate) : this._getMaxCalendarDate();
	}

	get _minDate() {
		return this.minDate ? this._getTimeStampFromString(this.minDate) : this._getMinCalendarDate();
	}

	_getMinCalendarDate() {
		const minDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		minDate.setYear(1);
		minDate.setMonth(0);
		minDate.setDate(1);
		return minDate.valueOf();
	}

	_getMaxCalendarDate() {
		const maxDate = new CalendarDate(1, 0, 1, this._primaryCalendarType);
		maxDate.setYear(9999);
		maxDate.setMonth(11);
		const tempDate = new CalendarDate(maxDate, this._primaryCalendarType);
		tempDate.setDate(1);
		tempDate.setMonth(tempDate.getMonth() + 1, 0);
		maxDate.setDate(tempDate.getDate());// 31st for Gregorian Calendar
		return maxDate.valueOf();
	}

	get openIconTitle() {
		return this.i18nBundle.getText(DATEPICKER_OPEN_ICON_TITLE);
	}

	get openIconName() {
		return "appointment-2";
	}

	get dateAriaDescription() {
		return this.i18nBundle.getText(DATEPICKER_DATE_ACC_TEXT);
	}

	/**
	 * Defines whether the dialog on mobile should have header
	 * @private
	 */
	get _shouldHideHeader() {
		return false;
	}

	async _respPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-responsive-popover]");
	}

	_canOpenPicker() {
		return !this.disabled && !this.readonly;
	}

	_handleCalendarChange(event) {
		const iNewValue = event.detail.dates && event.detail.dates[0];

		if (this._calendar.selectedDates.indexOf(iNewValue) !== -1) {
			this.closePicker();
			return false;
		}

		const fireChange = this._handleCalendarSelectedDatesChange(event, iNewValue);

		if (fireChange) {
			this.fireEvent("change", { value: this.value, valid: true });
			// Angular two way data binding
			this.fireEvent("value-changed", { value: this.value, valid: true });
		}

		this.closePicker();
	}

	_handleCalendarSelectedDatesChange(event, newValue) {
		this._updateValueCalendarSelectedDatesChange(newValue);

		this._calendar.timestamp = newValue;
		this._calendar.selectedDates = event.detail.dates;
		this._focusInputAfterClose = true;

		if (this.isInValidRange(this._getTimeStampFromString(this.value))) {
			this.valueState = ValueState.None;
		} else {
			this.valueState = ValueState.Error;
		}

		return true;
	}

	_updateValueCalendarSelectedDatesChange(newValue) {
		this.value = this.getFormat().format(
			new Date(CalendarDate.fromTimestamp(
				newValue * 1000,
				this._primaryCalendarType
			).valueOf()),
			true
		);
	}

	/**
	 * Formats a Java Script date object into a string representing a locale date
	 * according to the <code>formatPattern</code> property of the DatePicker instance
	 * @param {object} oDate A Java Script date object to be formatted as string
	 * @public
	 */
	formatValue(oDate) {
		return this.getFormat().format(oDate);
	}

	/**
	 * Closes the picker.
	 * @public
	 */
	closePicker() {
		this.responsivePopover.close();
	}

	/**
	 * Opens the picker.
	 * @param {object} options A JSON object with additional configuration.<br>
	 * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.
	 * Specify this option to focus the input field.
	 * @public
	 */
	async openPicker(options) {
		this._isPickerOpen = true;
		this.responsivePopover = await this._respPopover();
		this._changeCalendarSelection();

		if (options && options.focusInput) {
			this._focusInputAfterOpen = true;
		}

		this.responsivePopover.open(this);
	}

	togglePicker() {
		if (this.isOpen()) {
			this.closePicker();
		} else if (this._canOpenPicker()) {
			this.openPicker();
		}
	}

	_changeCalendarSelection(focusTimestamp) {
		if (this._calendarDate.getYear() < 1) {
			// 0 is a valid year, but we cannot display it
			return;
		}

		const oCalDate = this._calendarDate;
		const timestamp = focusTimestamp || oCalDate.valueOf() / 1000;

		this._calendar = Object.assign({}, this._calendar);
		this._calendar.timestamp = timestamp;
		if (this.value) {
			this._calendar.selectedDates = [timestamp];
		}
	}

	/**
	 * Checks if the picker is open.
	 * @returns {Boolean} true if the picker is open, false otherwise
	 * @public
	 */
	isOpen() {
		return !!this._isPickerOpen;
	}

	/**
	 * Gets some semantic details about an event originated in the control.
	 * @param {*} event An event object
	 * @returns {Object} Semantic details
	 */
	getSemanticTargetInfo(event) {
		const oDomTarget = getDomTarget(event);
		let isInput = false;

		if (oDomTarget && oDomTarget.className.indexOf("ui5-input-inner") > -1) {
			isInput = true;
		}

		return { isInput };
	}

	/**
	 * Currently selected date represented as JavaScript Date instance.
	 *
	 * @readonly
	 * @type { Date }
	 * @public
	 */
	get dateValue() {
		return this.getFormat().parse(this.value);
	}

	get styles() {
		return {
			main: {
				width: "100%",
			},
		};
	}

	get type() {
		return InputType.Text;
	}

	static get dependencies() {
		return [
			Icon,
			ResponsivePopover,
			Calendar,
			Input,
			Button,
		];
	}

	static async onDefine() {
		await Promise.all([
			fetchCldr(getLocale().getLanguage(), getLocale().getRegion(), getLocale().getScript()),
			fetchI18nBundle("@ui5/webcomponents"),
		]);
	}
}

const getDomTarget = event => {
	let target,
		composedPath;

	if (typeof event.composedPath === "function") {
		composedPath = event.composedPath();
	}

	if (Array.isArray(composedPath) && composedPath.length) {
		target = composedPath[0];
	}

	return target;
};

DatePicker.define();

const block0$w = (context) => { return scopedHtml`<div class="ui5-date-picker-root" style="${styleMap(context.styles.main)}" @keydown=${context._onkeydown} @focusout="${context._onfocusout}"><!-- INPUT --><ui5-input id="${ifDefined(context._id)}-inner" class="ui5-date-picker-input" placeholder="${ifDefined(context._placeholder)}" type="${ifDefined(context.type)}" value="${ifDefined(context.value)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" data-sap-focus-ref ._inputAccInfo ="${ifDefined(context.accInfo)}">${ context.valueStateMessage.length ? block1$p() : undefined }${ !context.readonly ? block2$o(context) : undefined }</ui5-input><slot name="formSupport"></slot></div>`; };
const block1$p = (context) => { return scopedHtml`<slot name="valueStateMessage" slot="valueStateMessage"></slot>`; };
const block2$o = (context) => { return scopedHtml`<ui5-icon slot="icon" name="${ifDefined(context.openIconName)}" tabindex="-1" accessible-name="${ifDefined(context.openIconTitle)}" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" dir="${ifDefined(context.effectiveDir)}"></ui5-icon>`; };


const main$w = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$w(context);
};

const MAX_PROCESS_COUNT$1 = 10;

class RenderQueue$1 {
	constructor() {
		this.list = []; // Used to store the web components in order
		this.lookup = new Set(); // Used for faster search
	}

	add(webComponent) {
		if (this.lookup.has(webComponent)) {
			return;
		}

		this.list.push(webComponent);
		this.lookup.add(webComponent);
	}

	remove(webComponent) {
		if (!this.lookup.has(webComponent)) {
			return;
		}

		this.list = this.list.filter(item => item !== webComponent);
		this.lookup.delete(webComponent);
	}

	shift() {
		const webComponent = this.list.shift();
		if (webComponent) {
			this.lookup.delete(webComponent);
			return webComponent;
		}
	}

	isEmpty() {
		return this.list.length === 0;
	}

	isAdded(webComponent) {
		return this.lookup.has(webComponent);
	}

	/**
	 * Processes the whole queue by executing the callback on each component,
	 * while also imposing restrictions on how many times a component may be processed.
	 *
	 * @param callback - function with one argument (the web component to be processed)
	 */
	process(callback) {
		let webComponent;
		const stats = new Map();

		webComponent = this.shift();
		while (webComponent) {
			const timesProcessed = stats.get(webComponent) || 0;
			if (timesProcessed > MAX_PROCESS_COUNT$1) {
				throw new Error(`Web component processed too many times this task, max allowed is: ${MAX_PROCESS_COUNT$1}`);
			}
			callback(webComponent);
			stats.set(webComponent, timesProcessed + 1);
			webComponent = this.shift();
		}
	}
}

// This is needed as IE11 doesn't have Set.prototype.keys/values/entries, so [...mySet.values()] is not an option
const setToArray$1 = s => {
	const arr = [];
	s.forEach(item => {
		arr.push(item);
	});
	return arr;
};

const Definitions$1 = new Set();

const getAllRegisteredTags$1 = () => {
	return setToArray$1(Definitions$1);
};

const rtlAwareSet$1 = new Set();

const isRtlAware$1 = klass => {
	return rtlAwareSet$1.has(klass);
};

const registeredElements$1 = new Set();

// Queue for invalidated web components
const invalidatedWebComponents$1 = new RenderQueue$1();

let renderTaskPromise$1,
	renderTaskPromiseResolve$1;

let mutationObserverTimer$1;

let queuePromise$1;

/**
 * Class that manages the rendering/re-rendering of web components
 * This is always asynchronous
 */
class RenderScheduler$1 {
	constructor() {
		throw new Error("Static class");
	}

	/**
	 * Schedules a render task (if not already scheduled) to render the component
	 *
	 * @param webComponent
	 * @returns {Promise}
	 */
	static async renderDeferred(webComponent) {
		// Enqueue the web component
		invalidatedWebComponents$1.add(webComponent);

		// Schedule a rendering task
		await RenderScheduler$1.scheduleRenderTask();
	}

	/**
	 * Renders a component synchronously
	 *
	 * @param webComponent
	 */
	static renderImmediately(webComponent) {
		webComponent._render();
	}

	/**
	 * Cancels the rendering of a component, added to the queue with renderDeferred
	 *
	 * @param webComponent
	 */
	static cancelRender(webComponent) {
		invalidatedWebComponents$1.remove(webComponent);
	}

	/**
	 * Schedules a rendering task, if not scheduled already
	 */
	static async scheduleRenderTask() {
		if (!queuePromise$1) {
			queuePromise$1 = new Promise(resolve => {
				window.requestAnimationFrame(() => {
					// Render all components in the queue
					invalidatedWebComponents$1.process(component => component._render());

					// Resolve the promise so that callers of renderDeferred can continue
					queuePromise$1 = null;
					resolve();

					// Wait for Mutation observer before the render task is considered finished
					if (!mutationObserverTimer$1) {
						mutationObserverTimer$1 = setTimeout(() => {
							mutationObserverTimer$1 = undefined;
							if (invalidatedWebComponents$1.isEmpty()) {
								RenderScheduler$1._resolveTaskPromise();
							}
						}, 200);
					}
				});
			});
		}

		await queuePromise$1;
	}

	/**
	 * return a promise that will be resolved once all invalidated web components are rendered
	 */
	static whenDOMUpdated() {
		if (renderTaskPromise$1) {
			return renderTaskPromise$1;
		}

		renderTaskPromise$1 = new Promise(resolve => {
			renderTaskPromiseResolve$1 = resolve;
			window.requestAnimationFrame(() => {
				if (invalidatedWebComponents$1.isEmpty()) {
					renderTaskPromise$1 = undefined;
					resolve();
				}
			});
		});

		return renderTaskPromise$1;
	}

	static whenAllCustomElementsAreDefined() {
		const definedPromises = getAllRegisteredTags$1().map(tag => customElements.whenDefined(tag));
		return Promise.all(definedPromises);
	}

	static async whenFinished() {
		await RenderScheduler$1.whenAllCustomElementsAreDefined();
		await RenderScheduler$1.whenDOMUpdated();
	}

	static _resolveTaskPromise() {
		if (!invalidatedWebComponents$1.isEmpty()) {
			// More updates are pending. Resolve will be called again
			return;
		}

		if (renderTaskPromiseResolve$1) {
			renderTaskPromiseResolve$1.call(this);
			renderTaskPromiseResolve$1 = undefined;
			renderTaskPromise$1 = undefined;
		}
	}

	static register(element) {
		registeredElements$1.add(element);
	}

	static deregister(element) {
		registeredElements$1.delete(element);
	}

	/**
	 * Re-renders all UI5 Elements on the page, with the option to specify filters to rerender only some components.
	 *
	 * Usage:
	 * reRenderAllUI5Elements() -> rerenders all components
	 * reRenderAllUI5Elements({tag: "ui5-button"}) -> re-renders only instances of ui5-button
	 * reRenderAllUI5Elements({rtlAware: true}) -> re-renders only rtlAware components
	 * reRenderAllUI5Elements({languageAware: true}) -> re-renders only languageAware components
	 * reRenderAllUI5Elements({rtlAware: true, languageAware: true}) -> re-renders components that are rtlAware or languageAware
	 * etc...
	 *
	 * @public
	 * @param {Object|undefined} filters - Object with keys that can be "rtlAware" or "languageAware"
	 */
	static reRenderAllUI5Elements(filters) {
		registeredElements$1.forEach(element => {
			const tag = element.constructor.getMetadata().getTag();
			const rtlAware = isRtlAware$1(element.constructor);
			const languageAware = element.constructor.getMetadata().isLanguageAware();
			if (!filters || (filters.tag === tag) || (filters.rtlAware && rtlAware) || (filters.languageAware && languageAware)) {
				RenderScheduler$1.renderDeferred(element);
			}
		});
	}
}

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var DateRangePickerCss = ":host(:not([hidden])){display:inline-block}:host{min-width:15rem;color:var(--sapField_TextColor);background-color:var(--sapField_Background)}:host .ui5-date-picker-input{width:100%;min-width:inherit;color:inherit;background-color:inherit}";

/**
 * @public
 */
const metadata$w = {
	tag: "ui5-daterange-picker",
	properties: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {
		/**
		 * Determines the symbol which separates the dates.
		 *
		 * @type {string}
		 * @defaultvalue "-"
		 * @public
		 */
		delimiter: {
			type: String,
			defaultValue: "-",
		},
		/**
		 * Defines the UNIX timestamp of the first date - seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {number}
		 * @private
		*/
		_firstDateTimestamp: {
			type: Integer,
		},
		/**
		 * Defines the UNIX timestamp of the second date- seconds since 00:00:00 UTC on Jan 1, 1970.
		 * @type {number}
		 * @private
		*/
		_lastDateTimestamp: {
			type: Integer,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {
		//
	},
	events: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {
		//
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.
 *
 * <h3>Usage</h3>
 * The user can enter a date by:
 * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).
 * For the <code>ui5-daterange-picker</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/DateRangePicker.js";</code>
 *
 * <h3>Keyboard Handling</h3>
 * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.
 * <br>
 *
 * When the <code>ui5-daterange-picker</code> input field is focused the user can
 * increment or decrement the corresponding field of the JS date object referenced by <code>_firstDateTimestamp</code> propery
 * if the caret symbol is before the delimiter character or <code>_lastDateTimestamp</code> property if the caret symbol is
 * after the delimiter character.
 * The following shortcuts are enabled:
 * <br>
 * <ul>
 * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>
 * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>
 * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>
 * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>
 * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>
 * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>
 * </ul>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.DateRangePicker
 * @extends DatePicker
 * @tagname ui5-daterange-picker
 * @since 1.0.0-rc.8
 * @public
 */
class DateRangePicker extends DatePicker {
	static get metadata() {
		return metadata$w;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return [DatePicker.styles, DateRangePickerCss];
	}

	static get template() {
		return main$w;
	}

	constructor() {
		super();
		this.isFirstDatePick = true;
		this._initialRendering = true;
		this._oneTimeStampSelected = false; // Used to determine whether the first & last date is the same
		this._dayPickerMouseoverHandler = this._itemMouseoverHandler.bind(this);
		this._respPopoverConfig.beforeOpen = this.handleBeforeOpen;
		this._respPopoverConfig.beforeClose = this.handleBeforeClose;
	}

	async onAfterRendering() {
		const daypicker = this.getDayPicker();
		this._cleanHoveredAttributeFromVisibleItems(daypicker);
		this._initialRendering = false;
	}

	async handleBeforeOpen() {
		const daypicker = await this.getDayPicker();
		daypicker.addEventListener("item-mouseover", this._dayPickerMouseoverHandler);
		daypicker.addEventListener("daypickerrendered", this._keyboardNavigationHandler);
	}

	async handleBeforeClose() {
		const daypicker = await this.getDayPicker();
		daypicker.removeEventListener("item-mouseover", this._dayPickerMouseoverHandler);
		daypicker.removeEventListener("daypickerrendered", this._keyboardNavigationHandler);
	}

	_itemMouseoverHandler(event) {
		if (this._oneTimeStampSelected) {
			return;
		}

		const dayItems = event.target.shadowRoot.querySelectorAll(".ui5-dp-item");
		const firstDateTimestamp = event.target._selectedDates[0];
		const lastDateTimestamp = event.detail.target.parentElement.dataset.sapTimestamp;

		for (let i = 0; i < dayItems.length; i++) {
			if ((dayItems[i].dataset.sapTimestamp < firstDateTimestamp && dayItems[i].dataset.sapTimestamp > lastDateTimestamp)
				|| (dayItems[i].dataset.sapTimestamp > firstDateTimestamp && dayItems[i].dataset.sapTimestamp < lastDateTimestamp)) {
				dayItems[i].setAttribute("hovered", "");
			} else {
				dayItems[i].removeAttribute("hovered");
			}
		}
	}

	_keyboardNavigationHandler(event) {
		if (!event.detail.focusedItemIndex) {
			return;
		}

		const dayItems = event.target.shadowRoot.querySelectorAll(".ui5-dp-item");
		const firstDateTimestamp = this._selectedDates[0];
		const lastDateTimestamp = dayItems[event.detail.focusedItemIndex].dataset.sapTimestamp;

		for (let i = 0; i < dayItems.length; i++) {
			if ((dayItems[i].dataset.sapTimestamp < firstDateTimestamp && dayItems[i].dataset.sapTimestamp > lastDateTimestamp)
				|| (dayItems[i].dataset.sapTimestamp > firstDateTimestamp && dayItems[i].dataset.sapTimestamp < lastDateTimestamp)) {
				dayItems[i].setAttribute("hovered", "");
			} else {
				dayItems[i].removeAttribute("hovered");
			}
		}
	}

	_splitValueByDelimiter(value) {
		let returnValue = [];

		if (!value) {
			return ["", ""];
		}

		if (this.delimiter) {
			returnValue = String(value).split(this.delimiter);
		}

		return returnValue;
	}

	_setValue(value) {
		const emptyValue = value === "",
			isValid = emptyValue || this._checkValueValidity(value);
		let dates = [undefined, undefined];

		if (value === this._prevValue) {
			return this;
		}

		if (!value) {
			this.value = "";
			return;
		}

		dates = this._splitValueByDelimiter(value);
		if (!isValid) {
			this.valueState = ValueState.Error;
			console.warn("Value can not be converted to a valid dates", this); // eslint-disable-line
			return;
		}
		this.valueState = ValueState.None;

		const firstDate = this.getFormat().parse(dates[0]);
		const secondDate = this.getFormat().parse(dates[1]);

		this._firstDateTimestamp = Date.UTC(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), firstDate.getHours()) / 1000;
		this._lastDateTimestamp = Date.UTC(secondDate.getFullYear(), secondDate.getMonth(), secondDate.getDate(), secondDate.getHours()) / 1000;

		if (this._firstDateTimestamp > this._lastDateTimestamp) {
			const temp = this._firstDateTimestamp;
			this._firstDateTimestamp = this._lastDateTimestamp;
			this._lastDateTimestamp = temp;
		}

		this._calendar.selectedDates = this.dateIntervalArrayBuilder(this._firstDateTimestamp * 1000, this._lastDateTimestamp * 1000);

		this.value = this._formatValue(firstDate.valueOf() / 1000, secondDate.valueOf() / 1000);
		this.realValue = this.value;
		this._prevValue = this.realValue;
	}

	_changeCalendarSelection(focusTimestamp) {
		if (this._calendarDate.getYear() < 1) {
			// 0 is a valid year, but we cannot display it
			return;
		}

		const oCalDate = this._calendarDate,
			timestamp = focusTimestamp || oCalDate.valueOf() / 1000,
			dates = this._splitValueByDelimiter(this.realValue);

		if (this._initialRendering) {
			this._oneTimeStampSelected = dates[0].trim() === dates[1].trim();
			this._setValue(this.realValue);
		}

		this._calendar = Object.assign({}, this._calendar);
		this._calendar.timestamp = timestamp;
		if (this.realValue && this._checkValueValidity(this.realValue)) {
			this._calendar.selectedDates = this.dateIntervalArrayBuilder(this._getTimeStampFromString(dates[0]), this._getTimeStampFromString(dates[1]));
		}
	}

	get _calendarDate() {
		const dates = this._splitValueByDelimiter(this.realValue),
			value = this._checkValueValidity(this.realValue) ? dates[0] : this.getFormat().format(new Date()),
			millisecondsUTCFirstDate = value ? this.getFormat().parse(value, true).getTime() : this.getFormat().parse(this.validValue, true).getTime(),
			oCalDateFirst = CalendarDate.fromTimestamp(
				millisecondsUTCFirstDate - (millisecondsUTCFirstDate % (24 * 60 * 60 * 1000)),
				this._primaryCalendarType
			);

		return oCalDateFirst;
	}

	get _shoudHideValueInInput() {
		return this._firstDateTimestamp === this._lastDateTimestamp && this._firstDateTimestamp;
	}

	/**
	 * Currently selected first date represented as JavaScript Date instance.
	 *
	 * @readonly
	 * @type { Date }
	 * @public
	 */
	get firstDateValue() {
		const dateValue = new Date(this._firstDateTimestamp * 1000);
		return new Date(dateValue.getUTCFullYear(), dateValue.getUTCMonth(), dateValue.getUTCDate(), dateValue.getUTCHours());
	}

	/**
	 * Currently selected last date represented as JavaScript Date instance.
	 *
	 * @readonly
	 * @type { Date }
	 * @public
	 */
	get lastDateValue() {
		const dateValue = new Date(this._lastDateTimestamp * 1000);
		return new Date(dateValue.getUTCFullYear(), dateValue.getUTCMonth(), dateValue.getUTCDate(), dateValue.getUTCHours());
	}

	get _placeholder() {
		return this.placeholder !== undefined ? this.placeholder : this._displayFormat.concat(" ", this.delimiter, " ", this._displayFormat);
	}

	async getDayPicker() {
		this.responsivePopover = await this._respPopover();
		const calendar = this.responsivePopover.querySelector(`#${this._id}-calendar`);
		return calendar.shadowRoot.querySelector(`#${calendar._id}-daypicker`);
	}

	async _handleInputChange() {
		const nextValue = await this._getInput().getInputValue();
		const emptyValue = nextValue === "";
		const isValid = emptyValue || this._checkValueValidity(nextValue);
		const dates = this._splitValueByDelimiter(nextValue);

		if (dates.length === 2) {
			this._oneTimeStampSelected = dates[0].trim() === dates[1].trim();
		}

		if (isValid) {
			this._setValue(nextValue);
			this.valueState = ValueState.None;
		} else {
			this.valueState = ValueState.Error;
		}

		this.fireEvent("change", { value: nextValue, valid: isValid });
		// Angular two way data binding
		this.fireEvent("value-changed", { value: nextValue, valid: isValid });
	}

	_checkValueValidity(value) {
		return this.isValid(value) && this.isInValidRange(value);
	}

	checkRealValueValidity() {
		return this.isValid(this.realValue) && this.isInValidRange(this.realValue);
	}

	isValid(value) {
		const dateStrings = this._splitValueByDelimiter(value, this.delimiter),
			isFirstDateValid = super.isValid(dateStrings[0]),
			isLastDateValid = super.isValid(dateStrings[1]);

		if (!dateStrings[1]) {
			return isFirstDateValid;
		}

		return isFirstDateValid && isLastDateValid;
	}

	isInValidRange(value) {
		const dateStrings = this._splitValueByDelimiter(value, this.delimiter),
			isFirstDateInValidRange = super.isInValidRange(this._getTimeStampFromString(dateStrings[0])),
			isLastDateInValidRange = super.isInValidRange(this._getTimeStampFromString(dateStrings[1]));

		if (!dateStrings[1]) {
			return isFirstDateInValidRange;
		}

		return isFirstDateInValidRange && isLastDateInValidRange;
	}

	dateIntervalArrayBuilder(firstTimestamp, lastTimestamp) {
		const datesTimestamps = [],
			tempCalendarDate = CalendarDate.fromTimestamp(firstTimestamp);

		while (tempCalendarDate.valueOf() < lastTimestamp) {
			datesTimestamps.push(tempCalendarDate.valueOf() / 1000);
			tempCalendarDate.setDate(tempCalendarDate.getDate() + 1);
		}

		datesTimestamps.push(tempCalendarDate.valueOf() / 1000);

		return datesTimestamps;
	}

	_handleCalendarChange(event) {
		const newValue = event.detail.dates && event.detail.dates[0];
		this._oneTimeStampSelected = false;
		if (this.isFirstDatePick) {
			this.isFirstDatePick = false;
			this._firstDateTimestamp = newValue;
			this._lastDateTimestamp = newValue;
			this._calendar.timestamp = newValue;
			this._handleCalendarSelectedDatesChange();
		} else {
			this.closePicker();
			this.isFirstDatePick = true;
			if (newValue < this._firstDateTimestamp) {
				this._lastDateTimestamp = this._firstDateTimestamp;
				this._firstDateTimestamp = newValue;
			} else {
				this._oneTimeStampSelected = newValue === this._firstDateTimestamp;
				this._lastDateTimestamp = newValue;
			}
			const fireChange = this._handleCalendarSelectedDatesChange();

			if (fireChange) {
				this.fireEvent("change", { value: this.realValue, valid: true });
				// Angular two way data binding
				this.fireEvent("value-changed", { value: this.realValue, valid: true });
			}
		}
	}

	/**
	 * Adds or extracts a given number of measuring units from the "dateValue" property value
	 *
	 * @param {boolean} forward if true indicates addition
	 * @param {boolean} years indicates that the measuring unit is in years
	 * @param {boolean} months indicates that the measuring unit is in months
	 * @param {boolean} days indicates that the measuring unit is in days
	 * @param {int} step number of measuring units to substract or add defaults ot 1
	 */
	async _changeDateValueWrapper(forward, years, months, days, step = 1) {
		const emptyValue = this.value === "";
		const isValid = emptyValue || this._checkValueValidity(this.value);

		if (!isValid) {
			return;
		}

		const dates = this._splitValueByDelimiter(this.value);
		const innerInput = this.shadowRoot.querySelector("ui5-input").shadowRoot.querySelector(".ui5-input-inner");
		const caretPos = this._getCaretPosition(innerInput);
		const first = dates[0] && caretPos <= dates[0].trim().length + 1;
		const last = dates[1] && (caretPos >= this.value.length - dates[1].trim().length - 1 && caretPos <= this.value.length);
		let firstDate = this.getFormat().parse(dates[0]);
		let lastDate = this.getFormat().parse(dates[1]);

		if (first && firstDate) {
			firstDate = this._changeDateValue(firstDate, forward, years, months, days, step);
		} else if (last && lastDate) {
			lastDate = this._changeDateValue(lastDate, forward, years, months, days, step);
		}

		this.value = this._formatValue(firstDate.valueOf() / 1000, lastDate.valueOf() / 1000);

		await RenderScheduler$1.whenFinished();
		// Return the caret on the previous position after rendering
		this._setCaretPosition(innerInput, caretPos);
	}

	/**
	 * This method is used in the derived classes
	 */
	async _handleEnterPressed() {
		const innerInput = this.shadowRoot.querySelector("ui5-input").shadowRoot.querySelector(".ui5-input-inner");
		const caretPos = this._getCaretPosition(innerInput);

		this._confirmInput();

		await RenderScheduler$1.whenFinished();
		// Return the caret on the previous position after rendering
		this._setCaretPosition(innerInput, caretPos);
	}

	_onfocusout() {
		this._confirmInput();
	}

	_confirmInput() {
		const emptyValue = this.value === "";

		if (emptyValue) {
			return;
		}

		const dates = this._splitValueByDelimiter(this.value);
		let firstDate = this.getFormat().parse(dates[0]);
		let lastDate = this.getFormat().parse(dates[1]);

		if (firstDate > lastDate) {
			const temp = firstDate;
			firstDate = lastDate;
			lastDate = temp;
		}

		const newValue = this._formatValue(firstDate.valueOf() / 1000, lastDate.valueOf() / 1000);

		this._setValue(newValue);
	}

	/**
	* Returns the caret (cursor) position of the specified text field (field).
	* Return value range is 0-field.value.length.
	*/
	_getCaretPosition(field) {
		// Initialize
		let caretPos = 0;

		// IE Support
		if (document.selection) {
			// Set focus on the element
			field.focus();

			// To get cursor position, get empty selection range
			const selection = document.selection.createRange();

			// Move selection start to 0 position
			selection.moveStart("character", -field.value.length);

			// The caret position is selection length
			caretPos = selection.text.length;
		} else if (field.selectionStart || field.selectionStart === "0") { // Firefox support
			caretPos = field.selectionDirection === "backward" ? field.selectionStart : field.selectionEnd;
		}

		return caretPos;
	}

	_setCaretPosition(field, caretPos) {
		if (field.createTextRange) {
			const range = field.createTextRange();
			range.move("character", caretPos);
			range.select();
		} else if (field.selectionStart) {
			field.focus();
			field.setSelectionRange(caretPos, caretPos);
		} else {
			field.focus();
		}
	}

	_handleCalendarSelectedDatesChange() {
		this._updateValueCalendarSelectedDatesChange();
		this._cleanHoveredAttributeFromVisibleItems();

		this._calendar.timestamp = this._firstDateTimestamp;
		this._calendar.selectedDates = this.dateIntervalArrayBuilder(this._firstDateTimestamp * 1000, this._lastDateTimestamp * 1000);
		this._focusInputAfterClose = true;

		if (this.isInValidRange(this.realValue)) {
			this.valueState = ValueState.None;
		} else {
			this.valueState = ValueState.Error;
		}

		return true;
	}

	async _cleanHoveredAttributeFromVisibleItems(dayPicker) {
		if (!dayPicker) {
			return;
		}

		const daypicker = await this.getDayPicker();
		const dayItems = daypicker.shadowRoot.querySelectorAll(".ui5-dp-item");

		for (let i = 0; i < dayItems.length; i++) {
			dayItems[i].removeAttribute("hovered");
		}
	}

	_updateValueCalendarSelectedDatesChange() {
		const calStartDate = CalendarDate.fromTimestamp(this._firstDateTimestamp * 1000, this._primaryCalendarType);
		const calEndDate = CalendarDate.fromTimestamp(this._lastDateTimestamp * 1000, this._primaryCalendarType);

		// Collect both dates and merge them into one
		if (this._firstDateTimestamp !== this._lastDateTimestamp || this._oneTimeStampSelected) {
			this.value = this._formatValue(calStartDate.toLocalJSDate().valueOf() / 1000, calEndDate.toLocalJSDate().valueOf() / 1000);
		}

		this.realValue = this._formatValue(calStartDate.toLocalJSDate().valueOf() / 1000, calEndDate.toLocalJSDate().valueOf() / 1000);
		this._prevValue = this.realValue;
	}

	/**
	 * Combines the start and end dates of a range into a formated string
	 *
	 * @param {int} firstDateValue locale start date timestamp
	 * @param {int} lastDateValue locale end date timestamp
	 * @returns {string} formated start to end date range
	 */
	_formatValue(firstDateValue, lastDateValue) {
		let value = "";
		const delimiter = this.delimiter,
			format = this.getFormat(),
			firstDateString = format.format(new Date(firstDateValue * 1000)),
			lastDateString = format.format(new Date(lastDateValue * 1000));

		if (firstDateValue) {
			if (delimiter && delimiter !== "" && lastDateString) {
				value = firstDateString.concat(" ", delimiter, " ", lastDateString);
			} else {
				value = firstDateString;
			}
		}

		return value;
	}
}

DateRangePicker.define();

const name$8 = "date-time";
const pathData$8 = "M352 192q33 0 62 12.5t51 34.5 34.5 51 12.5 62-12.5 62-34.5 51-51 34.5-62 12.5-62-12.5-51-34.5-34.5-51-12.5-62 12.5-62 34.5-51 51-34.5 62-12.5zM32 32h64V0h32v32h192V0h32v32h64q14 0 23 9t9 23v96h-32v-32H32v352h128v32H32q-14 0-23-9t-9-23V64q0-14 9-23t23-9zm192 320q0 27 10 50t27.5 40.5T302 470t50 10 50-10 40.5-27.5T470 402t10-50-10-50-27.5-40.5T402 234t-50-10-50 10-40.5 27.5T234 302t-10 50zm127-64q16 0 16 16v48h49q16 0 16 16 0 6-4.5 11t-11.5 5h-65q-7 0-11.5-5t-4.5-11v-64q0-16 16-16zm1-192V64h-32v32h32zM96 64v32h32V64H96z";
const ltr$8 = true;

registerIcon(name$8, { pathData: pathData$8, ltr: ltr$8});

const block0$x = (context) => { return scopedHtml`<button type="button" class="ui5-button-root" ?disabled="${context.disabled}" data-sap-focus-ref  aria-pressed="${ifDefined(context.pressed)}"  dir="${ifDefined(context.effectiveDir)}" @focusout=${context._onfocusout} @focusin=${context._onfocusin} @click=${context._onclick} @mousedown=${context._onmousedown} @mouseup=${context._onmouseup} @keydown=${context._onkeydown} @keyup=${context._onkeyup} tabindex=${ifDefined(context.tabIndexValue)} aria-expanded="${ifDefined(context.accInfo.ariaExpanded)}" aria-controls="${ifDefined(context.accInfo.ariaControls)}" aria-haspopup="${ifDefined(context.accInfo.ariaHaspopup)}" aria-label="${ifDefined(context.ariaLabelText)}" title="${ifDefined(context.accInfo.title)}" part="button">${ context.icon ? block1$q(context) : undefined }<span id="${ifDefined(context._id)}-content" class="ui5-button-text"><bdi><slot></slot></bdi></span>${ context.hasButtonType ? block2$p(context) : undefined }</button> `; };
const block1$q = (context) => { return scopedHtml`<ui5-icon style="${styleMap(context.styles.icon)}" class="ui5-button-icon" name="${ifDefined(context.icon)}" show-tooltip=${ifDefined(context.iconOnly)}></ui5-icon>`; };
const block2$p = (context) => { return scopedHtml`<span class="ui5-hidden-text">${ifDefined(context.buttonTypeText)}</span>`; };


const main$x = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$x(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var toggleBtnCss = ":host(:not([hidden])){display:inline-block}:host([disabled]){pointer-events:none}:host([design=Positive][pressed]),:host([design=Positive][pressed]:hover),:host([design=Positive][pressed][focused]){background:var(--sapButton_Accept_Active_Background);border-color:var(--sapButton_Accept_Active_BorderColor);color:var(--sapButton_Selected_TextColor);outline-color:var(--sapContent_ContrastFocusColor)}:host([design=Positive][pressed]:hover),:host([design=Positive][pressed][active]){background:var(--sapButton_Accept_Selected_Hover_Background)}:host([design=Negative][pressed]),:host([design=Negative][pressed]:hover),:host([design=Negative][pressed][focused]){background:var(--sapButton_Reject_Active_Background);border-color:var(--sapButton_Reject_Active_BorderColor);color:var(--sapButton_Selected_TextColor);outline-color:var(--sapContent_ContrastFocusColor)}:host([design=Negative][pressed]:hover),:host([design=Negative][pressed][active]){background:var(--sapButton_Reject_Selected_Hover_Background)}:host([design=Emphasized][pressed]),:host([design=Emphasized][pressed]:hover),:host([design=Transparent][pressed]),:host([design=Transparent][pressed]:hover),:host([pressed]),:host([pressed]:hover),:host([pressed][focused]){background:var(--sapButton_Selected_Background);border-color:var(--sapButton_Selected_BorderColor);color:var(--sapButton_Selected_TextColor);outline-color:var(--sapContent_ContrastFocusColor)}:host([pressed]:hover),:host([pressed][active]){background:var(--sapButton_Selected_Hover_Background)}[ui5-togglebutton][focused]{outline:none}[ui5-togglebutton][focused] .ui5-button-root{position:relative}[ui5-togglebutton][focused] .ui5-button-root:after{content:\"\";position:absolute;border-width:1px;border-style:dotted;border-color:var(--_ui5_button_focus_color);top:var(--_ui5_button_focus_offset);bottom:var(--_ui5_button_focus_offset);left:var(--_ui5_button_focus_offset);right:var(--_ui5_button_focus_offset)}[ui5-togglebutton][active] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-togglebutton][design=Positive][focused] .ui5-button-root:after{border-color:var(--_ui5_button_positive_border_focus_hover_color)}[ui5-togglebutton][design=Positive][active][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-togglebutton][design=Negative][focused] .ui5-button-root:after{border-color:var(--_ui5_button_positive_border_focus_hover_color)}[ui5-togglebutton][design=Negative][active][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-togglebutton][design=Emphasized][focused] .ui5-button-root:after{border-color:var(--sapContent_ContrastFocusColor)}[ui5-togglebutton] [ui5-icon].ui5-button-icon{height:var(--_ui5_button_icon_font_size);top:0}";

/**
 * @public
 */
const metadata$x = {
	tag: "ui5-togglebutton",
	properties: /** @lends  sap.ui.webcomponents.main.ToggleButton.prototype */ {
		/**
		 * Determines whether the <code>ui5-togglebutton</code> is displayed as pressed.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		pressed: {
			type: Boolean,
		},
	},
};

/**
 * @class
 *
 *<h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-togglebutton</code> component is an enhanced <code>ui5-button</code>
 * that can be toggled between pressed and normal states.
 * Users can use the <code>ui5-togglebutton</code> as a switch to turn a setting on or off.
 * It can also be used to represent an independent choice similar to a check box.
 * <br><br>
 * Clicking or tapping on a <code>ui5-togglebutton</code> changes its state to <code>pressed</code>. The button returns to
 * its initial state when the user clicks or taps on it again.
 * By applying additional custom CSS-styling classes, apps can give a different style to any <code>ui5-togglebutton</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/ToggleButton";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ToggleButton
 * @extends Button
 * @tagname ui5-togglebutton
 * @public
 */
class ToggleButton extends Button {
	static get metadata() {
		return metadata$x;
	}

	static get template() {
		return main$x;
	}

	static get styles() {
		return [Button.styles, toggleBtnCss];
	}

	_onclick() {
		this.pressed = !this.pressed;
	}
}

ToggleButton.define();

const block0$y = (context) => { return scopedHtml`<div @click="${context._onclick}" @focusin="${context._onfocusin}" class="ui5-segmentedbutton-root" role="group" dir="${ifDefined(context.effectiveDir)}" aria-roledescription="${ifDefined(context.ariaDescription)}"><slot></slot></div>`; };


const main$y = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$y(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var SegmentedButtonCss = ":host(:not([hidden])){display:inline-block}.ui5-segmentedbutton-root{display:flex}::slotted([ui5-togglebutton]){border-radius:0;height:var(--_ui5_button_base_height);min-width:2.5rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}::slotted([ui5-togglebutton]:nth-child(odd)){border:1px solid var(--sapButton_Selected_BorderColor);border-right:0;border-left:0}::slotted([ui5-togglebutton]:last-child){border-top-right-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-right-radius:var(--_ui5_segmented_btn_border_radius);border-right:1px solid var(--sapButton_Selected_BorderColor)}::slotted([ui5-togglebutton]:first-child){border-top-left-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-left-radius:var(--_ui5_segmented_btn_border_radius);border-left:1px solid var(--sapButton_Selected_BorderColor)}[dir=rtl] ::slotted([ui5-togglebutton]:first-child){border-top-right-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-right-radius:var(--_ui5_segmented_btn_border_radius);border-top-left-radius:0;border-bottom-left-radius:0;border-right:1px solid var(--sapButton_Selected_BorderColor)}[dir=rtl] ::slotted([ui5-togglebutton]:last-child){border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-left-radius:var(--_ui5_segmented_btn_border_radius);border-left:1px solid var(--sapButton_Selected_BorderColor)}[dir=rtl] ::slotted([ui5-togglebutton]:only-child){border-top-right-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-right-radius:var(--_ui5_segmented_btn_border_radius);border-top-left-radius:var(--_ui5_segmented_btn_border_radius);border-bottom-left-radius:var(--_ui5_segmented_btn_border_radius)}";

/**
 * @public
 */
const metadata$y = {
	tag: "ui5-segmentedbutton",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */  {},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {

		/**
		 * Defines the buttons of <code>ui5-segmentedbutton</code>.
		 * <br><br>
		 * <b>Note:</b> Multiple buttons are allowed.
		 * <br><br>
		 * <b>Note:</b> Use the <code>ui5-togglebutton</code> for the intended design.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "buttons",
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {

		/**
		 * Fired when the selected button changes.
		 *
		 * @event sap.ui.webcomponents.main.SegmentedButton#selection-change
		 * @param {HTMLElement} selectedButton the pressed button.
		 * @public
		 */
		"selection-change": {
			detail: {
				selectedButton: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-segmentedbutton</code> shows a group of buttons. When the user clicks or taps
 * one of the buttons, it stays in a pressed state. It automatically resizes the buttons
 * to fit proportionally within the component. When no width is set, the component uses the available width.
 * <br><br>
 * <b>Note:</b> There can be just one selected <code>button</code> at a time.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/SegmentedButton";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.SegmentedButton
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-segmentedbutton
 * @since 1.0.0-rc.6
 * @public
 */
class SegmentedButton extends UI5Element {
	static get metadata() {
		return metadata$y;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$y;
	}

	static get styles() {
		return SegmentedButtonCss;
	}

	static get dependencies() {
		return [ToggleButton];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	constructor() {
		super();
		this.initItemNavigation();

		this.absoluteWidthSet = false; // set to true whenever we set absolute width to the component
		this.percentageWidthSet = false; //  set to true whenever we set 100% width to the component
		this.hasPreviouslyFocusedItem = false;

		this._handleResizeBound = this._doLayout.bind(this);
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onEnterDOM() {
		ResizeHandler.register(this.parentNode, this._handleResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(this.parentNode, this._handleResizeBound);
	}

	onBeforeRendering() {
		this.normalizeSelection();
	}

	async onAfterRendering() {
		await this._doLayout();
	}

	prepareToMeasureButtons() {
		this.style.width = "";
		this.buttons.forEach(button => {
			button.style.width = "";
		});
	}

	async measureButtonsWidth() {
		await RenderScheduler.whenDOMUpdated();
		this.prepareToMeasureButtons();

		this.widths = this.buttons.map(button => {
			// +1 is added because for width 100.44px the offsetWidth property returns 100px and not 101px
			let width = button.offsetWidth + 1;

			if (isIE()) {
				// in IE we are adding 1 one px beacause the width of the border on a button in the middle is not calculated and if the
				// longest button is in the middle, it truncates
				width += 1;
			}

			return width;
		});
	}

	initItemNavigation() {
		this._itemNavigation = new ItemNavigation(this);

		this._itemNavigation.getItemsCallback = () => this.getSlottedNodes("buttons");
	}

	normalizeSelection() {
		this._selectedButton = this.buttons.filter(button => button.pressed).pop();

		if (this._selectedButton) {
			this.buttons.forEach(button => {
				button.pressed = false;
			});
			this._selectedButton.pressed = true;
		}
	}

	_onclick(event) {
		if (event.target.disabled || event.target === this.getDomRef()) {
			return;
		}

		if (event.target !== this._selectedButton) {
			if (this._selectedButton) {
				this._selectedButton.pressed = false;
			}
			this._selectedButton = event.target;
			this.fireEvent("selection-change", {
				selectedButton: this._selectedButton,
			});
		}

		this._selectedButton.pressed = true;
		this._itemNavigation.update(this._selectedButton);

		return this;
	}

	_onfocusin(event) {
		// If the component was previously focused,
		// update the ItemNavigation to sync butons` tabindex values
		if (this.hasPreviouslyFocusedItem) {
			this._itemNavigation.update(event.target);
			return;
		}

		// If the component is focused for the first time
		// focus the selected item if such present
		if (this.selectedButton) {
			this.selectedButton.focus();
			this._itemNavigation.update(this._selectedButton);
			this.hasPreviouslyFocusedItem = true;
		}
	}

	async _doLayout() {
		const buttonsHaveWidth = this.widths && this.widths.some(button => button.offsetWidth > 2); // 2 are the pixel's added for rounding & IE
		if (!buttonsHaveWidth) {
			await this.measureButtonsWidth();
		}

		const parentWidth = this.parentNode.offsetWidth;

		if (!this.style.width || this.percentageWidthSet) {
			this.style.width = `${Math.max(...this.widths) * this.buttons.length}px`;
			this.absoluteWidthSet = true;
		}

		this.buttons.forEach(button => {
			button.style.width = "100%";
		});

		if (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {
			this.style.width = "100%";
			this.percentageWidthSet = true;
		}
	}

	/**
	 * Currently selected button.
	 *
	 * @readonly
	 * @type { ui5-togglebutton }
	 * @public
	 */
	get selectedButton() {
		return this._selectedButton;
	}

	get ariaDescription() {
		return this.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);
	}
}

SegmentedButton.define();

const name$9 = "navigation-up-arrow";
const pathData$9 = "M86.5 380q-9 9-22.5 9t-22.5-9q-10-10-10-23t10-23l193-197q4-2 5-3 2-1 2.5-1.5t2.5-1.5q6-2 11-2 2 0 3 .5t2 .5q4 0 6 1t3.5 2 3.5 2q1 1 1.5 1t1.5 1 2 1l192 196q10 10 10 23t-10 23q-9 9-22.5 9t-22.5-9l-154-155q-16-10-32 0z";
const ltr$9 = false;

registerIcon(name$9, { pathData: pathData$9, ltr: ltr$9});

const name$a = "navigation-down-arrow";
const pathData$a = "M425.5 137q9-9 22.5-9t22.5 9q10 10 10 23t-10 23l-193 197q-4 2-5 3-2 1-2.5 1.5t-2.5 1.5q-6 2-11 2-2 0-3-.5t-2-.5q-4 0-6-1t-3.5-2-3.5-2q-1-1-1.5-1t-1.5-1-2-1l-192-196q-10-10-10-23t10-23q9-9 22.5-9t22.5 9l154 155q16 10 32 0z";
const ltr$a = false;

registerIcon(name$a, { pathData: pathData$a, ltr: ltr$a});

const block0$z = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}" ?disabled= "${ifDefined(context.disabled)}" value = "${ifDefined(context.value)}" label = "${ifDefined(context.label)}" ?expanded= "${ifDefined(context._expanded)}" @click = ${ifDefined(context._onclick)} @keydown=${context._onkeydown} class = "${classMap(context.classes.root)}" data-sap-focus-ref @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" tabindex="0" @wheel="${context._handleWheel}"><div class="ui5-wheelslider-header-block"><div id="${ifDefined(context._id)}--label" class="ui5-wheelslider-label">${ifDefined(context.label)}</div><div class="ui5-wheelslider-invisible-text"></div><ui5-button class="ui5-wheelslider-arrow" icon="navigation-up-arrow" @click=${context._onArrowUp} tabindex="-1"></ui5-button></div><div id="${ifDefined(context._id)}--inner" class="ui5-wheelslider-inner"><div id="${ifDefined(context._id)}--selection-frame" class="ui5-wheelslider-selection-frame"></div><div id="${ifDefined(context._id)}--wrapper" class="ui5-wheelslider-wrapper">${ context._expanded ? block1$r(context) : block3$g(context) }</div></div><div class="ui5-wheelslider-footer-block"><ui5-button class="ui5-wheelslider-arrow" icon="navigation-down-arrow" @click=${context._onArrowDown} tabindex="-1"></ui5-button></div></div>`; };
const block1$r = (context) => { return scopedHtml`<ul id="${ifDefined(context._id)}--items-list">${ repeat(context._itemsToShow, (item, index) => item._id || index, (item, index) => block2$q(item, index)) }</ul>`; };
const block2$q = (item, index, context) => { return scopedHtml`<li class="ui5-wheelslider-item" data-item-index="${index}" style="list-style-type: none;">${ifDefined(item)}</li>`; };
const block3$g = (context) => { return scopedHtml`<ul id="${ifDefined(context._id)}--items-list"><li class="ui5-wheelslider-item" style="list-style-type: none;">${ifDefined(context.value)}</li></ul>`; };


const main$z = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$z(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var WheelSliderCss = ".ui5-wheelslider-root{overflow:hidden;height:100%;vertical-align:middle;text-align:center;box-sizing:border-box;font-family:\"72override\",var(--sapFontFamily);justify-content:space-between;flex-direction:column;display:inline-flex;width:var(--_ui5_wheelslider_item_width)}.ui5-wheelslider-root .ui5-wheelslider-label{box-sizing:border-box;height:2rem;line-height:2rem;width:var(--_ui5_wheelslider_item_width);font-size:var(--sapFontSmallSize);color:var(--_ui5_wheelslider_label_text_color);text-align:center;vertical-align:middle;visibility:hidden}.ui5-wheelslider-root .ui5-wheelslider-arrow{visibility:hidden;box-sizing:border-box;height:1.5rem;user-select:none;outline:none}.ui5-wheelslider-root[expanded] .ui5-wheelslider-arrow{visibility:var(--_ui5_wheelslider_arrows_visibility);box-sizing:border-box;border-color:transparent;cursor:pointer}.ui5-wheelslider-root[expanded] .ui5-wheelslider-arrow:hover{visibility:var(--_ui5_wheelslider_arrows_visibility);box-sizing:border-box;border-color:inherit;cursor:pointer}.ui5-wheelslider-root .ui5-wheelslider-inner{position:relative;overflow:hidden;height:100%;box-sizing:border-box;user-select:none;list-style:none;margin-top:0}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner{margin-top:0}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-item{height:var(--_ui5_wheelslider_item_height);line-height:var(--_ui5_wheelslider_item_height);width:var(--_ui5_wheelslider_item_width);box-sizing:border-box;background:var(--_ui5_wheelslider_selected_item_background_color);border:.625px solid var(--_ui5_wheelslider_item_border_color);font-size:var(--_ui5_wheelslider_item_text_size);color:var(--_ui5_wheelslider_collapsed_item_text_color);text-align:center;border-radius:var(--_ui_wheelslider_item_border_radius);cursor:pointer}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-item:hover{background:var(--_ui_wheelslider_item_hover_color);border-color:var(--_ui5_wheelslider_item_hovered_border_color)}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-item:focus{outline:1px dotted #000;outline-offset:-3px}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-selection-frame{width:var(--_ui5_wheelslider_item_width);height:var(--_ui5_wheelslider_item_height);position:absolute;box-sizing:border-box;visibility:hidden;z-index:1}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-wrapper>ul{transition:all .4s;margin:0;padding:0;position:absolute;top:var(--_ui5_wheelslider_selection_frame_margin_top);height:3000px;cursor:pointer;list-style-type:none}.ui5-wheelslider-root.ui5-phone .ui5-wheelslider-inner .ui5-wheelslider-wrapper>ul{top:var(--_ui5_wheelslider_mobile_selection_frame_margin_top)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-wrapper>ul{list-style-type:none;top:0;padding-top:calc(var(--_ui5_wheelslider_item_height)*2)}.ui5-wheelslider-root.ui5-phone[expanded] .ui5-wheelslider-inner .ui5-wheelslider-wrapper>ul{list-style-type:none;top:0;padding-top:calc(var(--_ui5_wheelslider_item_height)*4)}.ui5-wheelslider-root .ui5-wheelslider-inner .ui5-wheelslider-wrapper{height:var(--_ui5_wheelslider_height);position:relative;overflow:hidden;outline:none}.ui5-wheelslider-root.ui5-phone .ui5-wheelslider-inner .ui5-wheelslider-wrapper{height:var(--_ui5_wheelslider_mobile_height)}.ui5-wheelslider-root[expanded]{height:100%;cursor:default;margin:0;justify-content:space-between;flex-direction:column;display:inline-flex}.ui5-wheelslider-root[expanded] .ui5-wheelslider-label{display:block;visibility:visible}.ui5-wheelslider-root .ui5-wheelslider-inner{max-height:100%;height:var(--_ui5_wheelslider_height)}.ui5-wheelslider-root.ui5-phone .ui5-wheelslider-inner{height:var(--_ui5_wheelslider_mobile_height)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-item{background:var(--_ui5_wheelslider_item_background_color);color:var(--_ui5_wheelslider_item_text_color);border:1px solid var(--_ui5_wheelslider_item_border_color);border-radius:var(--_ui_wheelslider_item_border_radius);offset-position:auto;cursor:auto}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-item:hover{background:var(--sapList_Hover_Background);border-color:var(--_ui5_wheelslider_item_hovered_border_color)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-item:active{background:var(--_ui5_wheelslider_active_item_background_color);color:var(--_ui5_wheelslider_active_item_text_color)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-item:focus{outline:1px dotted #000;outline-offset:-3px}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-selection-frame{visibility:visible;-webkit-box-shadow:inset 0 0 0 2px var(--_ui5_wheelslider_selection_frame_color);-moz-box-shadow:inset 0 0 0 2px var(--_ui5_wheelslider_selection_frame_color);box-shadow:inset 0 0 0 2px var(--_ui5_wheelslider_selection_frame_color);border-radius:var(--_ui_wheelslider_item_border_radius);margin-top:var(--_ui5_wheelslider_selection_frame_margin_top)}.ui5-wheelslider-root.ui5-phone[expanded] .ui5-wheelslider-inner .ui5-wheelslider-selection-frame{margin-top:var(--_ui5_wheelslider_mobile_selection_frame_margin_top)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-selection-frame:hover+ul>li.ui5-wheelslider-item.ui5-wheelslider-itemSelected{background:var(--_ui_wheelslider_item_hover_color)}.ui5-wheelslider-root[expanded] .ui5-wheelslider-inner .ui5-wheelslider-selection-frame:active+ul>li.ui5-wheelslider-item.ui5-wheelslider-itemSelected{background:var(--_ui5_wheelslider_selected_item_background_color);color:#d3d3d3}.ui5-wheelslider-root:focus{outline:none}";

/**
 * @private
 */
const metadata$z = {
	tag: "ui5-wheelslider",
	properties: /** @lends sap.ui.webcomponents.main.WheelSlider.prototype */ {
		/**
		 * Defines whether the <code>ui5-wheelslider</code> is disabled
		 * (default is set to <code>false</code>).
		 * A disabled <code>ui5-wheelslider</code> can't be pressed or
		 * focused, and it is not in the tab chain.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the currently selected value
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
			defaultValue: "0",
		},

		/**
		 * Defines the label of the wheelslider.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		label: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Indicates if the wheelslider is expanded.
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		_expanded: {
			type: Boolean,
		},

		_items: {
			type: String,
			multiple: true,
		},

		_itemsToShow: {
			type: String,
			multiple: true,
		},

		/**
		 * Indicates if the wheelslider has a cyclic behaviour.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		cyclic: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.WheelSlider.prototype */ {

	},
	events: /** @lends sap.ui.webcomponents.main.WheelSlider.prototype */ {
		/**
		 * Fires when the wheel slider is expanded.
		 */
		expand: {},

		/**
		 * Fires when the wheel slider is collapsed.
		 */
		collapse: {},

		/**
		 *  Fires when new value is selected.
		 */
		select: {
			value: {
				type: String,
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>ui5-wheelslider</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/WheelSlider.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.WheelSlider
 * @extends UI5Element
 * @tagname ui5-wheelslider
 * @public
 * @since 1.0.0-rc.6
 */
class WheelSlider extends UI5Element {
	static get metadata() {
		return metadata$z;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return WheelSliderCss;
	}

	static get template() {
		return main$z;
	}

	constructor() {
		super();
		this._currentElementIndex = 0;
		this._itemCellHeight = 0;
		this._itemsToShow = [];
		this._scroller = new ScrollEnablement(this);
		this._scroller.attachEvent("scroll", this._updateScrolling.bind(this));
		this._scroller.attachEvent("mouseup", this._handleScrollTouchEnd.bind(this));
		this._scroller.attachEvent("touchend", this._handleScrollTouchEnd.bind(this));
	}

	onBeforeRendering() {
		if (!this._expanded && this.cyclic) {
			const index = this._currentElementIndex % this._items.length;
			this._currentElementIndex = (this._timesMultipliedOnCyclic() / 2) * this._items.length + index;
		}

		if (!this.value) {
			this.value = this._items[0];
		}

		this._buildItemsToShow();
		this._updateItemCellHeight();
	}

	static get dependencies() {
		return [Button];
	}

	onAfterRendering() {
		if (!this._scroller.scrollContainer) {
			this._scroller.scrollContainer = this.shadowRoot.querySelector(`#${this._id}--wrapper`);
		}

		if (!this._expanded) {
			this._scroller.scrollTo(0, 0);
		}

		if (this._expanded) {
			const elements = this.shadowRoot.querySelectorAll(".ui5-wheelslider-item");
			for (let i = 0; i < elements.length; i++) {
				if (elements[i].textContent === this.value) {
					this._selectElementByIndex(Number(elements[i].dataset.itemIndex) + this._getCurrentRepetition() * this._items.length);
					return true;
				}
			}

			this._selectElement(elements[0]);
		}
	}

	get classes() {
		return {
			root: {
				"ui5-wheelslider-root": true,
				"ui5-phone": isPhone(),
			},
		};
	}

	expandSlider() {
		this._expanded = true;
		this.fireEvent("expand", {});
	}

	collapseSlider() {
		this._expanded = false;
		this.fireEvent("collapse", {});
	}

	_updateItemCellHeight() {
		if (this.shadowRoot.querySelectorAll(".ui5-wheelslider-item").length) {
			const itemComputedStyle = getComputedStyle(this.shadowRoot.querySelector(".ui5-wheelslider-item"));
			const itemHeightValue = itemComputedStyle.getPropertyValue("--_ui5_wheelslider_item_height");
			const onlyDigitsValue = itemHeightValue.replace("rem", "");

			this._itemCellHeight = Number(onlyDigitsValue);
		}
	}

	_updateScrolling() {
		const sizeOfOneElementInPixels = this._itemCellHeight * 16,
			scrollWhere = this._scroller.scrollContainer.scrollTop;
		let offsetIndex;

		if (!scrollWhere) {
			return;
		}

		offsetIndex = Math.round(scrollWhere / sizeOfOneElementInPixels);

		if (this.value === this._itemsToShow[offsetIndex]) {
			return;
		}

		if (this.cyclic) {
			const newIndex = this._handleArrayBorderReached(offsetIndex);
			if (offsetIndex !== newIndex) {
				offsetIndex = newIndex;
			}
		}

		this.value = this._itemsToShow[offsetIndex];
		this._currentElementIndex = offsetIndex;
	}

	_handleScrollTouchEnd() {
		if (this._expanded) {
			this._selectElementByIndex(this._currentElementIndex);
		}
	}

	_selectElement(element) {
		if (element && this._items.indexOf(element.textContent) > -1) {
			this._currentElementIndex = Number(element.dataset.itemIndex);
			this._selectElementByIndex(this._currentElementIndex);
		}
	}

	_getCurrentRepetition() {
		if (this._currentElementIndex) {
			return Math.floor(this._currentElementIndex / this._items.length);
		}

		return 0;
	}

	_selectElementByIndex(currentIndex) {
		let index = currentIndex;
		const itemsCount = this._itemsToShow.length;
		const sizeOfCellInCompactInRem = 2;
		const sizeOfCellInCozyInRem = 2.875;
		const sizeOfCellInCompactInPixels = sizeOfCellInCompactInRem * 16;
		const sizeOfCellInCozyInPixels = sizeOfCellInCozyInRem * 16;
		const scrollBy = this.isCompact ? sizeOfCellInCompactInPixels * index : sizeOfCellInCozyInPixels * index;

		if (this.cyclic) {
			index = this._handleArrayBorderReached(index);
		}

		if (index < itemsCount && index > -1) {
			this._scroller.scrollTo(0, scrollBy);
			this._currentElementIndex = index;
			this.value = this._items[index - (this._getCurrentRepetition() * this._items.length)];
			this.fireEvent("select", { value: this.value });
		}
	}

	_timesMultipliedOnCyclic() {
		const minElementsInCyclicWheelSlider = 70;
		const repetitionCount = Math.round(minElementsInCyclicWheelSlider / this._items.length);
		const minRepetitionCount = 3;

		return Math.max(minRepetitionCount, repetitionCount);
	}

	_buildItemsToShow() {
		this._itemsToShow = this._items;
		if (this.cyclic) {
			if (this._itemsToShow.length < this._items.length * this._timesMultipliedOnCyclic()) {
				for (let i = 0; i < this._timesMultipliedOnCyclic(); i++) {
					this._itemsToShow = this._itemsToShow.concat(this._items);
				}
			}
		}
	}

	_handleArrayBorderReached(currentIndex) {
		const arrayLength = this._itemsToShow.length;
		const maxVisibleElementsOnOneSide = 7;
		let index = currentIndex;

		if (maxVisibleElementsOnOneSide > index) {
			index += this._items.length * 2;
		} else if (index > arrayLength - maxVisibleElementsOnOneSide) {
			index -= this._items.length * 2;
		}

		return index;
	}

	_handleWheel(e) {
		if (!e) {
			return;
		}

		e.stopPropagation();
		e.preventDefault();

		if (e.timeStamp === this._prevWheelTimestamp || !this._expanded) {
			return;
		}

		if (e.deltaY > 0) {
			this._itemUp();
		} else if (e.deltaY < 0) {
			this._itemDown();
		}

		this._prevWheelTimestamp = e.timeStamp;
	}

	_onclick(e) {
		if (!e.target.classList.contains("ui5-wheelslider-item")) {
			return;
		}

		if (this._expanded) {
			this.value = e.target.textContent;
			this._selectElement(e.target);
			this.fireEvent("select", { value: this.value });
		} else {
			this._expanded = true;
		}
	}

	_onArrowDown(e) {
		e.preventDefault();
		this._itemDown();
	}

	_onArrowUp(e) {
		e.preventDefault();
		this._itemUp();
	}

	_itemDown() {
		const nextElementIndex = this._currentElementIndex + 1;
		this._selectElementByIndex(nextElementIndex);
	}

	_itemUp() {
		const nextElementIndex = this._currentElementIndex - 1;
		this._selectElementByIndex(nextElementIndex);
	}

	_onkeydown(е) {
		if (!this._expanded) {
			return;
		}

		if (isUp(е)) {
			this._onArrowUp(е);
		}

		if (isDown(е)) {
			this._onArrowDown(е);
		}

		if (isPageDown(е)) {
			this._selectLimitCell(е, false);
		}

		if (isPageUp(е)) {
			this._selectLimitCell(е, true);
		}
	}

	_selectLimitCell(event, isMax) {
		event.preventDefault();
		const intexIncrease = this.cyclic ? this._items.length : 0;
		if (isMax) {
			this._selectElementByIndex(this._items.length - 1 + intexIncrease);
		} else {
			this._selectElementByIndex(intexIncrease);
		}
	}

	_onfocusin(e) {
		e.preventDefault();
		this.expandSlider();
	}

	_onfocusout(e) {
		e.preventDefault();
		this.collapseSlider();
	}
}

WheelSlider.define();

const generateTimeItemsArray = x => {
	const array = [];
	for (let i = 0; i < x; i++) {
		let tempString = i.toString();
		if (tempString.length === 1) {
			tempString = `0${tempString}`;
		}

		array.push(tempString);
	}

	return array;
};

const getHours = config => {
	let hoursValueArray = [];

	if (config.isTwelveHoursFormat) {
		hoursValueArray = generateTimeItemsArray(12);
	} else {
		hoursValueArray = generateTimeItemsArray(24);
	}

	if (config.minHour === 1) {
		for (let i = 0; i < hoursValueArray.length; i++) {
			const tempValue = hoursValueArray[i] * 1 + 1;

			if (tempValue.toString().length === 1) {
				hoursValueArray[i] = `0${tempValue.toString()}`;
			} else {
				hoursValueArray[i] = tempValue.toString();
			}
		}
	}

	return hoursValueArray;
};

const getMinutes = () => {
	return generateTimeItemsArray(60);
};

const getSeconds = () => {
	return generateTimeItemsArray(60);
};

const getHoursConfigByFormat = type => {
	const config = {};

	if (type === "hour0_23") {
		config.minHour = 0;
		config.maxHour = 23;
		config.isTwelveHoursFormat = false;
	} else if (type === "hour1_24") {
		config.minHour = 1;
		config.maxHour = 24;
		config.isTwelveHoursFormat = false;
	} else if (type === "hour0_11") {
		config.minHour = 0;
		config.maxHour = 11;
		config.isTwelveHoursFormat = true;
	} else if (type === "hour1_12") {
		config.minHour = 1;
		config.maxHour = 12;
		config.isTwelveHoursFormat = true;
	}

	return config;
};

const getTimeControlsByFormat = (formatArray, hoursConfig) => {
	const timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm

	for (let i = 0; i < formatArray.length; i++) {
		if (hoursConfig.maxHour !== 0) {
			timeControls[0] = true;
		}
		if (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {
			timeControls[0] = true;
		}
		if (formatArray[i].type === "minute") {
			timeControls[1] = true;
		}
		if (formatArray[i].type === "second") {
			timeControls[2] = true;
		}
		if (formatArray[i].type === "amPmMarker") {
			timeControls[3] = true;
		}
	}

	return timeControls;
};

const block0$A = (context) => { return scopedHtml`<ui5-responsive-popover id="${ifDefined(context._id)}-responsive-popover" allow-target-overlap="${ifDefined(context._respPopoverConfig.allowTargetOverlap)}" stay-open-on-scroll="${ifDefined(context._respPopoverConfig.stayOpenOnScroll)}" placement-type="Bottom" horizontal-align="Left" ?disable-scrolling="${context._isIE}" no-arrow with-padding no-stretch ?_hide-header=${ifDefined(context._shouldHideHeader)} @keydown="${context._onkeydown}" @ui5-before-open="${ifDefined(context._respPopoverConfig.beforeOpen)}" @ui5-after-open="${ifDefined(context._respPopoverConfig.afterOpen)}" @ui5-before-close="${ifDefined(context._respPopoverConfig.beforeClose)}" @ui5-after-close="${ifDefined(context._respPopoverConfig.afterClose)}">${ context.showHeader ? block1$s(context) : undefined }<div class="ui5-dt-picker-content ${classMap(context.classes.picker)}"><ui5-calendar class="ui5-dt-cal ${classMap(context.classes.dateTimeView)}" id="${ifDefined(context._id)}-calendar" primary-calendar-type="${ifDefined(context._calendar.primaryCalendarType)}" format-pattern="${ifDefined(context._calendar.formatPattern)}" timestamp="${ifDefined(context._calTimestamp)}" .selectedDates="${ifDefined(context._calDates)}" .minDate="${ifDefined(context._calendar.minDate)}" .maxDate="${ifDefined(context._calendar.maxDate)}" @ui5-selected-dates-change="${ifDefined(context._calendar.onSelectedDatesChange)}"></ui5-calendar>${ !context.phone ? block3$h() : undefined }<div class="ui5-dt-time ${classMap(context.classes.dateTimeView)}" @keydown="${context._ontimekeydown}">${ context.shouldBuildHoursSlider ? block4$e(context) : undefined }${ context.shouldBuildMinutesSlider ? block5$c(context) : undefined }${ context.shouldBuildSecondsSlider ? block6$9(context) : undefined }${ context.shouldBuildPeriodsSlider ? block7$7(context) : undefined }</div></div>${ context.showFooter ? block8$7(context) : undefined }</ui5-responsive-popover> `; };
const block1$s = (context) => { return scopedHtml`${ context.phone ? block2$r(context) : undefined }`; };
const block2$r = (context) => { return scopedHtml`<div class="ui5-dt-picker-header"><ui5-segmentedbutton style="width: 8rem"><ui5-togglebutton key="Date" ?pressed="${context.showDateView}" @click="${context._dateTimeSwitchChange}">${ifDefined(context.btnDateLabel)}</ui5-togglebutton><ui5-togglebutton key="Time" ?pressed="${context.showTimeView}" @click="${context._dateTimeSwitchChange}">${ifDefined(context.btnTimeLabel)}</ui5-togglebutton></ui5-segmentedbutton></div>`; };
const block3$h = (context) => { return scopedHtml`<span class="ui5-dt-picker-separator"></span>`; };
const block4$e = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.hoursLabel)}" ._items="${ifDefined(context.hoursArray)}" class="ui5-dt-wheel ui5-dt-hours-wheel" cyclic ?_expanded="${ifDefined(context._hoursExpanded)}"></ui5-wheelslider>`; };
const block5$c = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.minutesLabel)}" ._items="${ifDefined(context.minutesArray)}" class="ui5-dt-wheel ui5-dt-minutes-wheel" @expand="${context._sliderClick}" cyclic></ui5-wheelslider>`; };
const block6$9 = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.secondsLabel)}" ._items="${ifDefined(context.secondsArray)}" class="ui5-dt-wheel ui5-dt-seconds-wheel" @expand="${context._sliderClick}" cyclic></ui5-wheelslider>`; };
const block7$7 = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.periodLabel)}" value="AM" ._items="${ifDefined(context.periodsArray)}" class="ui5-dt-wheel ui5-dt-periods-wheel" @expand="${context._sliderClick}"></ui5-wheelslider>`; };
const block8$7 = (context) => { return scopedHtml`<div slot="footer" class="ui5-dt-picker-footer"><ui5-button id="ok" class="ui5-dt-picker-action" design="Emphasized" @click="${context._submitClick}">${ifDefined(context.btnOKLabel)}</ui5-button><ui5-button id="cancel" class="ui5-dt-picker-action" design="Transparent" @click="${context._cancelClick}">${ifDefined(context.btnCancelLabel)}</ui5-button></div>`; };


const main$A = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$A(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var DateTimePickerCss = ":host{min-width:15rem;color:var(--sapField_TextColor);background-color:var(--sapField_Background)}:host .ui5-date-picker-input{min-width:inherit;color:inherit;background-color:inherit}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var DateTimePickerPopoverCss = ".ui5-dt-picker-content{display:flex;flex-direction:row;height:var(--_ui5_datetime_picker_height);min-width:var(--_ui5_datetime_picker_width);box-sizing:border-box;justify-content:center}.ui5-dt-cal{width:auto;padding:.5rem .25rem 0 .25rem;box-sizing:border-box}.ui5-dt-time{display:flex;justify-content:center;align-items:center;width:100%;min-width:var(--_ui5_datetime_timeview_width);padding:var(--_ui5_datetime_timeview_padding);box-sizing:border-box}.ui5-dt-cal.ui5-dt-cal--hidden,.ui5-dt-time.ui5-dt-time--hidden{display:none}.ui5-dt-wheel{height:100%}.ui5-dt-picker-header{display:flex;justify-content:center;width:100%;margin-top:1rem;box-sizing:border-box}.ui5-dt-picker-separator{height:calc(100% - 2rem);width:0;margin-top:1rem;margin-bottom:1rem;border-left:1px solid var(--sapGroup_ContentBorderColor);box-sizing:border-box}.ui5-dt-picker-footer{display:flex;justify-content:flex-end;align-items:center;height:2.75rem;width:100%;padding:0 .5rem 0 .25rem}.ui5-dt-picker-action{margin:.25rem}#ok.ui5-dt-picker-action{padding:0 .5625rem}.ui5-dt-picker-content--phone.ui5-dt-picker-content{min-width:auto;height:calc(100% - 4rem)}.ui5-dt-picker-content--phone .ui5-dt-cal{width:100%}.ui5-dt-picker-content--phone .ui5-dt-time{min-width:var(--_ui5_datetime_timeview_phonemode_width)}";

const PHONE_MODE_BREAKPOINT = 640; // px

/**
 * @public
 */
const metadata$A = {
	tag: "ui5-datetime-picker",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.DateTimePicker.prototype */ {

		/**
		 * Defines the visibility of the time view in <code>phoneMode</code>.
		 * For more information, see the <code>phoneMode</code> property.
		 *
		 * <br><br>
		 * <b>Note:</b> The date view would be displayed by default.
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		_showTimeView: {
			type: Boolean,
			noAttribute: true,
		},

		/**
		 * Defines if the <code>DateTimePicker</code> should be displayed in phone mode.
		 * The phone mode turns on when the component is used on small screens or phone devices.
		 * In phone mode the user can see either the calendar view, or the time view
		 * and can switch between the views via toggle buttons.
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		_phoneMode: {
			type: Boolean,
		},

		/**
		 * Defines the state the hours slider - expanded by default.
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		_hoursCollapsed: {
			type: Boolean,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>DateTimePicker</code> component alows users to select both date (day, month and year) and time (hours, minutes and seconds)
 * and for the purpose it consists of input field and Date/Time picker.
 *
 * <h3>Usage</h3>
 *
 * Use the <code>DateTimePicker</code> if you need a combined date and time input component.
 * Don't use it if you want to use either date, or time value.
 * In this case, use the <code>DatePicker</code> or the <code>TimePicker</code> components instead.
 * <br><br>
 * The user can set date/time by:
 * <ul>
 * <li>using the calendar and the time selectors</li>
 * <li>typing in the input field</li>
 * </ul>
 *
 * Programatically, to set date/time for the <code>DateTimePicker</code>, use the <code>value</code> property
 * <br><br>
 * As most of the input based components, the <code>DateTimePicker</code> supports properties,
 * such as: <code>disabled</code>, <code>readonly</code>, <code>valueState</code> and  <code>placeholder</code>.
 *
 * <h3>Formatting</h3>
 *
 * The value entered by typing into the input field must fit to the used date/time format.
 * <br><br>
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * For more information, see <ui5-link target="_blank" href="https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table" class="api-table-content-cell-link">UTS #35: Unicode Locale Data Markup Language</ui5-link>.
 * <br><br>
 * <b>Example:</b> the following format <code>dd/MM/yyyy, hh:mm:ss aa</code>
 * corresponds the <code>13/04/2020, 03:16:16 AM</code> value.
 * <br>
 * The small 'h' defines "12" hours format and the "aa" symbols - "AM/PM" time periods.
 *
 * <br><br>
 * <b>Example:</b> the following format <code>dd/MM/yyyy, HH:mm:ss</code>
 * corresponds the <code>13/04/2020, 15:16:16</code> value.
 * <br>
 * The capital 'H' indicates "24" hours format.
 *
 * <br><br>
 * <b>Note:</b> If the <code>formatPattern</code> does NOT include time,
 * the <code>DateTimePicker</code> will fallback to the default time format according to the locale.
 *
 * <br><br>
 * <b>Note:</b> If no placeholder is set to the <code>DateTimePicker</code>,
 * the current <code>formatPattern</code> is displayed as a placeholder.
 * If another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.
 *
 * <br><br>
 * <b>Note:</b> If the user input does NOT match the <code>formatPattern</code>,
 * the <code>DateTimePicker</code> makes an attempt to parse it based on the
 * locale settings.
 *
 * <h3>Responsive behavior</h3>
 *
 * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.
 * For larger screens, such as tablet or desktop, it is displayed as a popover, while
 * on phone devices, it is displayed full screen.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/DateTimePicker.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.DateTimePicker
 * @extends DatePicker
 * @tagname ui5-datetime-picker
 * @since 1.0.0-rc.7
 * @public
 */
class DateTimePicker extends DatePicker {
	static get metadata() {
		return metadata$A;
	}

	static get staticAreaTemplate() {
		return main$A;
	}

	static get styles() {
		return [super.styles, DateTimePickerCss];
	}

	static get staticAreaStyles() {
		return [super.staticAreaStyles, DateTimePickerPopoverCss];
	}

	static get dependencies() {
		return [
			...DatePicker.dependencies,
			Calendar,
			Button,
			ToggleButton,
			SegmentedButton,
			WheelSlider,
		];
	}

	constructor() {
		super();

		this._calendarPreview = null; // preview of the calendar selection

		this._hoursConfig = { // hours configuration (12/24 hour format)
			minHour: 0,
			maxHour: 0,
			isTwelveHoursFormat: false,
		};

		const superFn = this._respPopoverConfig.afterClose;
		this._respPopoverConfig.afterClose = () => {
			superFn();
			this._showTimeView = false;
			this._calendarPreview = null;
		};

		this._handleResizeBound = this._handleResize.bind(this);
	}

	/**
	 * LIFECYCLE METHODS
	 */

	onBeforeRendering() {
		super.onBeforeRendering();
		this.updateHoursFormatConfig();
	}

	onEnterDOM() {
		ResizeHandler.register(document.body, this._handleResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(document.body, this._handleResizeBound);
	}

	/**
	 * PUBLIC METHODS
	 */

	/**
	 * Opens the picker.
	 *
	 * @param {object} options A JSON object with additional configuration.<br>
	 * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.
	 * Specify this option to focus the input field.
	 * @public
	 */
	async openPicker(options) {
		await super.openPicker(options);
		await this.setSlidersValue();
		this.expandHoursSlider();
		this.storePreviousValue();
		this._slidersDomRefs = await this.slidersDomRefs();
	}

	/**
	 * Closes the picker.
	 * @public
	 */
	closePicker() {
		return super.closePicker(); // in order to be displayed in the DateTimePicker API reference
	}

	/**
	 * Checks if a value is valid against the current date/time format.
	 *
	 * @param {string} value A value to be tested against the current date/time format
	 * @public
	 */
	isValid(value = "") {
		return super.isValid(value); // in order to be displayed in the DateTimePicker API reference
	}

	async slidersDomRefs() {
		await this.getPicker();
		return this.responsivePopover.getElementsByClassName("ui5-dt-wheel");
	}

	/**
	 * Read-only getters
	 */

	get classes() {
		return {
			picker: {
				"ui5-dt-picker-content--phone": this.phone,
			},
			dateTimeView: {
				"ui5-dt-cal--hidden": this.phone && this.showTimeView,
				"ui5-dt-time--hidden": this.phone && this.showDateView,
			},
		};
	}

	get _formatPattern() {
		return this.normalizePattern(this.formatPattern);
	}

	get _calTimestamp() {
		return this._calendarPreview ? this._calendarPreview.timestamp : this._calendar.timestamp;
	}

	get _calDates() {
		return this._calendarPreview ? this._calendarPreview.selectedDates : this._calendar.selectedDates;
	}

	get secondsArray() {
		return getSeconds();
	}

	get minutesArray() {
		return getMinutes();
	}

	get hoursArray() {
		return getHours(this._hoursConfig);
	}

	get periodsArray() {
		return this.getFormat().aDayPeriods.map(x => x.toUpperCase());
	}

	get openIconName() {
		return "date-time";
	}

	get hoursLabel() {
		return this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);
	}

	get minutesLabel() {
		return this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);
	}

	get secondsLabel() {
		return this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);
	}

	get periodLabel() {
		return this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);
	}

	get btnOKLabel() {
		return this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);
	}

	get btnCancelLabel() {
		return this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);
	}

	get btnDateLabel() {
		return this.i18nBundle.getText(DATETIME_PICKER_DATE_BUTTON);
	}

	get btnTimeLabel() {
		return this.i18nBundle.getText(DATETIME_PICKER_TIME_BUTTON);
	}

	get showFooter() {
		return true;
	}

	get showDateView() {
		return this.phone ? !this._showTimeView : true;
	}

	get showTimeView() {
		return this.phone ? this._showTimeView : true;
	}

	get phone() {
		return super.phone || this._phoneMode;
	}

	get shouldBuildHoursSlider() {
		return this.isTimeControlContained()[0];
	}

	get shouldBuildMinutesSlider() {
		return this.isTimeControlContained()[1];
	}

	get shouldBuildSecondsSlider() {
		return this.isTimeControlContained()[2];
	}

	get shouldBuildPeriodsSlider() {
		return this.isTimeControlContained()[3];
	}

	get _hoursExpanded() {
		return !this._hoursCollapsed;
	}

	/**
	 * Defines whether the dialog on mobile should have header
	 * @private
	 */
	get _shouldHideHeader() {
		return true;
	}

	/**
	 * EVENT HANDLERS
	 */

	 /**
	 * @override
	 * Overwrite the method to update the time sliders.
	 */
	_handleInputLiveChange() {
		super._handleInputLiveChange();
		this.setSlidersValue();
	}

	/**
	 * @override
	 */
	_handleCalendarChange(event) {
		const newValue = event.detail.dates && event.detail.dates[0];
		super._handleCalendarSelectedDatesChange(event, newValue);
		this.storeCalendarSelection();
	}

	/**
	 * @override
	 * Overwrite the method to avoid updating the <code>value</code> when the user clicks on the calendar.
	 *
	 * <b>Note:</b> the <code>DateTimePicker</code> should change and update the value
	 * after user presses the <code>submit</code> button.
	 */
	_updateValueCalendarSelectedDatesChange() {}

	/**
	 * Handles document resize to switch between <code>phoneMode</code> and normal appearance.
	 */
	async _handleResize() {
		const documentWidth = document.body.offsetWidth;
		const toPhoneMode = documentWidth <= PHONE_MODE_BREAKPOINT;
		const modeChange = (toPhoneMode && !this._phoneMode) || (!toPhoneMode && this._phoneMode); // XOR not allowed by lint

		if (modeChange) {
			this._phoneMode = toPhoneMode;
			this.setSlidersValue();
		}
	}

	/**
	 * Handles clicking on the <code>submit</code> button, within the picker`s footer.
	 */
	async _submitClick() {
		const selectedDate = await this.getCurrentDateTime();

		this.value = this.getFormat().format(selectedDate);
		const valid = this.isValid(this.value);

		if (this.value !== this.previousValue) {
			this.fireEvent("change", { value: this.value, valid });
			this.fireEvent("value-changed", { value: this.value, valid });
		}

		this.closePicker();
	}

	/**
	 * Handles clicking on the <code>cancel</code> button, within the picker`s footer,
	 * that would disregard the user selection.
	 */
	async _cancelClick() {
		this.value = this.previousValue;
		this.closePicker();
	}

	/**
	 * Handles the date/time switch available in <code>phoneMode</code> to switch
	 * between the date and time views.
	 * @param {Event} event
	 */
	async _dateTimeSwitchChange(event) {
		this._showTimeView = event.target.getAttribute("key") === "Time";

		if (this._showTimeView) {
			this.expandHoursSlider();
		}
	}

	/**
	 * Handles clicking on "minutes", "seconds" and "periods" sliders.
	 * <b>Note:</b> not bound for "hours" click
	 * @param {Event} event
	 */
	_sliderClick() {
		this.collapseHoursSlider();
	}

	/**
	 * PRIVATE METHODS
	 */

	 /**
	 * Stores a preview of the calendar selection to restore it
	 * when the user switches between the time and date view.
	 * <br><br>
	 * <b>Note:</b> this is needed, because the <code>value</code> is not immediately updated on user interaction,
	 * but only after the user presses the <code>sumbit</code> button.
	 */
	storeCalendarSelection() {
		this._calendarPreview = {
			timestamp: this._calendar.timestamp,
			dates: this._calendar.selectedDates,
		};
	}

	/**
	 * Stores the <code>value</code> when the picker opens to compare with the <code>value</code>,
	 * selected by any user interaction and fire the <code>change</code> event, if they differ.
	 */
	storePreviousValue() {
		this.previousValue = this.value;
	}

	/**
	 * Normalizes the current <code>formatPattern</code>.
	 *
	 * Fallbacks to the default <code>formatPattern</code> according to the locale when:
	 * - no format is set at all
	 * - the format does not include hours
	 *
	 * @param {string} pattern The current <code>formatPattern</code>
	 * @returns {string}
	 */
	normalizePattern(pattern) {
		const hasHours = !!pattern.match(/H/i);
		const fallback = !pattern || !hasHours;

		return fallback ? LocaleData.getInstance(getLocale()).getCombinedDateTimePattern("medium", "medium", this._primaryCalendarType) : pattern;
	}

	/**
	 * Expands the "hours" time slider.
	 */
	expandHoursSlider() {
		this._hoursCollapsed = false;
	}

	/**
	 * Collapses the "hours" time slider.
	 */
	collapseHoursSlider() {
		this._hoursCollapsed = true;
	}

	async getHoursSlider() {
		return (await this.getPicker()).querySelector(".ui5-dt-hours-wheel");
	}

	async getMinutesSlider() {
		return (await this.getPicker()).querySelector(".ui5-dt-minutes-wheel");
	}

	async getSecondsSlider() {
		return (await this.getPicker()).querySelector(".ui5-dt-seconds-wheel");
	}

	async getPeriodsSlider() {
		return (await this.getPicker()).querySelector(".ui5-dt-periods-wheel");
	}

	async getPicker() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-responsive-popover]");
	}

	async getCurrentDateTime() {
		// the time set in the timepicker
		const selectedTime = new Date();
		const timeValues = await this.getTimePickerValues();

		selectedTime.setHours(timeValues.hours);
		selectedTime.setMinutes(timeValues.minutes);
		selectedTime.setSeconds(timeValues.seconds);

		// the date set in the calendar
		const currentCalendarValue = this.getFormat().format(
			new Date(CalendarDate.fromTimestamp(
				this._calTimestamp * 1000,
				this._primaryCalendarType
			).valueOf()),
			true
		);

		// merge both the date and time
		const selectedDate = this.getFormat().parse(currentCalendarValue) || selectedTime;
		selectedDate.setHours(selectedTime.getHours());
		selectedDate.setMinutes(selectedTime.getMinutes());
		selectedDate.setSeconds(selectedTime.getSeconds());

		return selectedDate;
	}

	async getTimePickerValues() {
		const secondsSlider = await this.getSecondsSlider();
		const minutesSlider = await this.getMinutesSlider();
		const hoursSlider = await this.getHoursSlider();
		const periodsSlider = await this.getPeriodsSlider();

		let hours = hoursSlider ? hoursSlider.value : this._hoursConfig.minHour.toString();
		const minutes = minutesSlider ? minutesSlider.value : "0";
		const seconds = secondsSlider ? secondsSlider.value : "0";
		const period = periodsSlider ? periodsSlider.value : this.periodsArray[0];

		if (period === this.periodsArray[0]) { // AM
			hours = hours === "12" ? 0 : hours;
		}

		if (period === this.periodsArray[1]) { // PM
			hours = hours === "12" ? hours : hours * 1 + 12;
		}

		return {
			hours,
			minutes,
			seconds,
			period,
		};
	}

	/**
	 * Sets hours, minutes, seconds and period according to the current <code>value</code>
	 * or the current time if the <code>value</code> is not set.
	 */
	async setSlidersValue() {
		const currentDate = this.value ? this.getFormat().parse(this.value) : new Date();

		if (currentDate) {
			await this.setHours(currentDate.getHours());
			await this.setMinutes(currentDate.getMinutes());
			await this.setSeconds(currentDate.getSeconds());
			await this.setPeriod(currentDate.getHours());
		}
	}

	async setHours(value) {
		let tempValue = "";
		const hoursSlider = await this.getHoursSlider();
		const config = this._hoursConfig;

		if (hoursSlider) {
			if (config.isTwelveHoursFormat && value > config.maxHour) {
				tempValue = value - 12;
			} else if (config.isTwelveHoursFormat && value < config.minHour) {
				tempValue = value + 12;
			} else {
				tempValue = value;
			}

			hoursSlider.value = this.normalizeDigit(tempValue);
		}
	}

	async setMinutes(value) {
		const minutesSlider = await this.getMinutesSlider();

		if (minutesSlider) {
			minutesSlider.value = this.normalizeDigit(value);
		}
	}

	async setSeconds(value) {
		const secondsSlider = await this.getSecondsSlider();

		if (secondsSlider) {
			secondsSlider.value = this.normalizeDigit(value);
		}
	}

	async setPeriod(hours) {
		const config = this._hoursConfig;
		const periodsSlider = await this.getPeriodsSlider();

		if (!periodsSlider) {
			return;
		}

		if (config.isTwelveHoursFormat) {
			if (config.minHour === 1) {
				periodsSlider.value = hours >= config.maxHour ? this.periodsArray[1] : this.periodsArray[0];
			} else {
				periodsSlider.value = (hours > config.maxHour || hours === config.minHour) ? this.periodsArray[1] : this.periodsArray[0];
			}
		}
	}

	async _ontimekeydown(event) {
		if (isLeft(event)) {
			let expandedSliderIndex = 0;
			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex - 1]) {
				this._slidersDomRefs[expandedSliderIndex - 1].focus();
			} else {
				this._slidersDomRefs[this._slidersDomRefs.length - 1].focus();
			}
		} else if (isRight(event)) {
			let expandedSliderIndex = 0;

			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex + 1]) {
				this._slidersDomRefs[expandedSliderIndex + 1].focus();
			} else {
				this._slidersDomRefs[0].focus();
			}
		}
	}

	normalizeDigit(value) {
		const valueAsString = value.toString();
		return valueAsString.length === 1 ? `0${value}` : valueAsString;
	}

	isTimeControlContained() {
		const format = this.getFormat().aFormatArray;
		return getTimeControlsByFormat(format, this._hoursConfig);
	}

	updateHoursFormatConfig() {
		const formatArray = this.getFormat().aFormatArray;

		if (formatArray.length < 7) {
			return; // does not contain time data
		}

		const config = getHoursConfigByFormat(formatArray[6].type);
		this._hoursConfig.minHour = config.minHour;
		this._hoursConfig.maxHour = config.maxHour;
		this._hoursConfig.isTwelveHoursFormat = config.isTwelveHoursFormat;
	}
}

DateTimePicker.define();

const block0$B = (context) => { return scopedHtml`<div class="ui5-duration-picker-root"><ui5-input value="${ifDefined(context.value)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" @keydown="${context._onkeydown}" class="ui5-duration-picker-input">${ !context.readonly ? block1$t(context) : undefined }${ context.valueStateMessage.length ? block2$s() : undefined }</ui5-input></div>`; };
const block1$t = (context) => { return scopedHtml`<ui5-icon slot="icon" name="fob-watch" tabindex="-1" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" class="ui5-duration-picker-input-icon-button"></ui5-icon>`; };
const block2$s = (context) => { return scopedHtml`<slot name="valueStateMessage" slot="valueStateMessage"></slot>`; };


const main$B = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$B(context);
};

const name$b = "fob-watch";
const pathData$b = "M32 288q0-42 15-80t40.5-67.5 61-49T224 66V32h-64V0h192v32h-64v34q53 7 94 36l34-34 46 46-32 32q23 29 36.5 64.5T480 288q0 46-17.5 87t-48 71.5-71 48T256 512q-46 0-87-17.5t-71.5-48-48-71.5T32 288zm224 192q40 0 75-15t61-41.5 41-61.5 15-74q0-40-15-75t-41-61-61-41-75-15-75 15-61 41-41 61-15 75q0 39 15 74t41 61.5 61 41.5 75 15zm-17-272q0-16 16-16t16 16v80h97q16 0 16 16 0 6-4.5 11t-11.5 5H255q-7 0-11.5-5t-4.5-11v-96z";
const ltr$b = false;

registerIcon(name$b, { pathData: pathData$b, ltr: ltr$b});

const block0$C = (context) => { return scopedHtml`<ui5-responsive-popover allow-target-overlap="${ifDefined(context._respPopover.allowTargetOverlap)}" placement-type="${ifDefined(context._respPopover.placementType)}" _hide-header no-arrow no-stretch horizontal-align="${ifDefined(context._respPopover.horizontalAlign)}" stay-open-on-scroll="${ifDefined(context._respPopover.stayOpenOnScroll)}" @ui5-after-close="${ifDefined(context._respPopover._onAfterClose)}" @keydown="${context._handleKeysDown}"><div class="${classMap(context.classes.container)}" @keydown="${context._handleContainerKeysDown}">${ !context.hideHours ? block1$u(context) : undefined }${ !context.hideMinutes ? block2$t(context) : undefined }${ !context.hideSeconds ? block3$i(context) : undefined }</div><div slot="footer" class="ui5-duration-picker-footer" @keydown=${context._onfooterkeydown}><ui5-button id="submit" design="Emphasized" @click="${context.submitPickers}">${ifDefined(context.submitButtonLabel)}</ui5-button><ui5-button id="close" design="Transparent" @click="${context.togglePicker}">${ifDefined(context.cancelButtonLabel)}</ui5-button></div></ui5-responsive-popover>`; };
const block1$u = (context) => { return scopedHtml`<ui5-wheelslider cyclic="true" ._items="${ifDefined(context.hoursArray)}" value="${ifDefined(context.selectedHours)}" class="ui5-duration-picker-wheelslider ui5-duration-picker-hours-wheelslider" label = "${ifDefined(context.hoursSliderTitle)}"></ui5-wheelslider>`; };
const block2$t = (context) => { return scopedHtml`<ui5-wheelslider cyclic="true" ._items="${ifDefined(context.minutesArray)}" value="${ifDefined(context.selectedMinutes)}" class="ui5-duration-picker-wheelslider ui5-duration-picker-minutes-wheelslider" label = "${ifDefined(context.minutesSliderTitle)}"></ui5-wheelslider>`; };
const block3$i = (context) => { return scopedHtml`<ui5-wheelslider cyclic="true" ._items="${ifDefined(context.secondsArray)}" value="${ifDefined(context.selectedSeconds)}" class="ui5-duration-picker-wheelslider ui5-duration-picker-seconds-wheelslider" label = "${ifDefined(context.secondsSliderTitle)}"></ui5-wheelslider>`; };


const main$C = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$C(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var DurationPickerCss = ":host(:not([hidden])){display:inline-block}:host{color:var(--sapField_TextColor);background-color:var(--sapField_Background)}:host .ui5-duration-picker-input{width:100%;color:inherit;background-color:inherit}.ui5-duration-picker-input-icon-button:hover{cursor:pointer;background:var(--sapButton_Hover_Background)}.ui5-duration-picker-input-icon-button:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}.ui5-duration-picker-input-icon-button[pressed]{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var DurationPickerPopoverCss = ".ui5-duration-picker-sliders-container{display:flex;justify-content:center;align-items:stretch;direction:ltr;padding:.5rem;min-width:18rem}.ui5-duration-picker-sliders-container.ui5-phone{height:90vh}.ui5-duration-picker-wheelslider{padding-left:.25rem;padding-right:.25rem}.ui5-duration-picker-footer{height:fit-content;display:flex;justify-content:flex-end;width:100%}.ui5-duration-picker-footer>[ui5-button]{margin:1%;min-width:20%}";

/**
 * @public
 */
const metadata$B = {
	tag: "ui5-duration-picker",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.main.DurationPicker.prototype */ {
		/**
		 * Defines a formatted time value.
		 *
		 * @type {string}
		 * @defaultvalue "00:00:00"
		 * @public
		 */
		value: {
			type: String,
			defaultValue: "00:00:00",
		},

		/**
		 * Defines the selection step for the minutes
		 * @type {Integer}
		 * @public
		 * @defaultValue 1
		 * @since 1.0.0-rc.8
		 */
		minutesStep: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * Defines the selection step for the seconds
		 * @type {Integer}
		 * @public
		 * @defaultValue 1
		 * @since 1.0.0-rc.8
		 */
		secondsStep: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * Defines a formatted maximal time that the user will be able to adjust.
		 *
		 * @type {string}
		 * @defaultvalue "23:59:59"
		 * @public
		 */
		maxValue: {
			type: String,
			defaultValue: "23:59:59",
		},

		/**
		 * Defines whether a slider for seconds will be available. By default there are sliders for hours, minutes and seconds.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		hideSeconds: {
			type: Boolean,
		},

		/**
		 * Defines whether the slider for minutes will be available. By default there are sliders for hours, minutes and seconds.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		hideMinutes: {
			type: Boolean,
		},

		/**
		 * Defines whether the slider for hours will be available. By default there are sliders for hours, minutes and seconds.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		hideHours: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-duration-picker</code> is displayed as disabled.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-duration-picker</code> is displayed as readonly.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Visualizes the validation state of the Web Component, for example
		 * <code>Error</code>, <code>Warning</code> and
		 * <code>Success</code>.
		 *
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {string}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * @private
		 */
		_isPickerOpen: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		_maxValue: {
			type: String,
			multiple: true,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.DurationPicker.prototype */ {
		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-duration-picker</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-duration-picker</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement}
		 * @since 1.0.0-rc.9
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.DurationPicker.prototype */ {
		/**
		 * Fired when the input operation has finished by pressing Enter or on focusout.
		 *
		 * @event
		 * @public
		*/
		change: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-duration-picker</code> component provides an input field with assigned sliders which opens on user action.
 * The <code>ui5-duration-picker</code> allows users to select a time duration.
 * It consists of two parts: the time input field and the sliders.
 *
 *
 * <h3>Usage</h3>
 *
 *
 * The Duration Picker is used for input of time. Users are able to select hours, minutes and seconds.
 * The user can enter a time by:
 * <ul>
 * <li>Using the sliders that opens in a popup</li>
 * <li>Typing it in directly in the input field</li>
 * </ul>
 * <br><br>
 * When the user makes an entry and chooses the enter key, the sliders shows the corresponding time.
 * When the user directly triggers the sliders display, the actual time is displayed.
 *
 * For the <code>ui5-duration-picker</code>
 *
 * <h3>Keyboard handling</h3>
 * [F4], [ALT]+[UP], [ALT]+[DOWN] Open/Close picker dialog and move focus to it.
 * <br>
 * When closed:
 * <ul>
 * <li>[PAGEUP] - Increments hours by 1. If max value is reached, the slider doesn't increment.</li>
 * <li>[PAGEDOWN] - Decrements the corresponding field by 1. If min value is reached, the slider doesn't increment.</li>
 * <li>[SHIFT]+[PAGEUP] Increments minutes by 1.</li>
 * <li>[SHIFT]+ [PAGEDOWN] Decrements minutes by 1.</li>
 * <li>[SHIFT]+[CTRL]+[PAGEUP] Increments seconds by 1.</li>
 * <li>[SHIFT]+[CTRL]+ [PAGEDOWN] Decrements seconds by 1.</li>
 * </ul>
 * When opened:
 * <ul>
 * <li>[UP] If focus is on one of the selection lists: Select the value which is above the current value. If the first value is selected, select the last value in the list.</li>
 * <li>[DOWN] If focus is on one of the selection lists: Select the value which is below the current value. If the last value is selected, select the first value in the list.</li>
 * <li>[LEFT] If focus is on one of the selection lists: Move focus to the selection list which is left of the current selection list. If focus is at the first selection list, move focus to the last selection list.</li>
 * <li>[RIGHT] If focus is on one of the selection lists: Move focus to the selection list which is right of the current selection list. When focus is at the last selection list, move focus to the first selection list.</li>
 * <li>[PAGEUP] If focus is on one of the selection lists: Move focus to the first entry of this list.</li>
 * <li>[PAGEDOWN] If focus is on one of the selection lists: Move focus to the last entry of this list.</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/DurationPicker.js";</code>
 *
 * @constructor
 * @since 1.0.0-rc.7
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.DurationPicker
 * @extends UI5Element
 * @tagname ui5-duration-picker
 * @public
 */
class DurationPicker extends UI5Element {
	static get metadata() {
		return metadata$B;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return DurationPickerCss;
	}

	static get template() {
		return main$B;
	}

	static get staticAreaTemplate() {
		return main$C;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, DurationPickerPopoverCss];
	}

	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");

		this._respPopover = {
			placementType: PopoverPlacementType.Bottom,
			horizontalAlign: PopoverHorizontalAlign.Left,
			allowTargetOverlap: true,
			stayOpenOnScroll: true,
			_onAfterClose: () => {
				this._isPickerOpen = false;
			},
		};

		this._slidersDomRefs = [];
	}

	onBeforeRendering() {
		this.checkValue();
	}

	checkValue() {
		this._setValue("maxValue");
		this.setSelectedValues();
		this.normalizaValue();
	}

	normalizaValue() {
		this.value = `${!this.hideHours ? this.selectedHours || "00" : ""}${!this.hideHours && !this.hideMinutes ? ":" : ""}${!this.hideMinutes ? this.selectedMinutes || "00" : ""}${!this.hideSeconds ? `:${this.selectedSeconds || "00"}` : ""}`;
	}

	/**
	 * reads string from format hh:mm:ss and returns an array which contains the hours, minutes and seconds
	 * @param {string} value string in formathh:mm:ss
	 */
	readFormattedValue(value) {
		value = value.replace(/\s/g, ""); // Remove spaces
		return value.split(":");
	}

	getSecondsFromFormattedValue(destructuredValues) {
		if (this.hideSeconds) {
			return "";
		}

		if (this.hideHours && this.hideMinutes) {
			return destructuredValues[0];
		}

		if (this.hideHours || this.hideMinutes) {
			return destructuredValues[1];
		}

		return destructuredValues[2];
	}

	getMinutesFromFormattedValue(destructuredValues) {
		if (this.hideMinutes) {
			return "";
		}

		if (this.hideHours) {
			return destructuredValues[0];
		}

		return destructuredValues[1];
	}

	setSelectedValues() {
		const destructuredValues = this.readFormattedValue(this.value || "");
		let currentHours = this.hideHours ? "" : destructuredValues[0],
			currentMinutes = this.getMinutesFromFormattedValue(destructuredValues), // this.hideHours && !this.hideMinutes ? destructuredValues[0] : "",
			currentSeconds = this.getSecondsFromFormattedValue(destructuredValues); //  this.hideHours && this.hideHours ? destructuredValues[0] : {};

		if (currentHours > -1) {
			if (parseInt(currentHours) > parseInt(this._maxValue[0])) {
				currentHours = this._maxValue[0];
			}

			this.selectedHours = this._formatSelectedValue(currentHours, parseInt(this.readFormattedValue(this.maxValue)));
		}

		if (currentMinutes > -1) {
			if (currentMinutes && parseInt(currentMinutes) % this.minutesStep !== 0) {
				currentMinutes = this.findNearestStep(currentMinutes, this.minutesStep);
			}
			if (this._maxValue[0] && this.selectedHours === this._maxValue[0]) {
				currentMinutes = currentMinutes > this._maxValue[1] ? this._maxValue[1] : currentMinutes;
			} else if (parseInt(currentMinutes) > parseInt(this._maxValue[1])) {
				currentMinutes = this._maxValue[1];
			}

			this.selectedMinutes = this._formatSelectedValue(currentMinutes, 59);
		}

		if (currentSeconds > -1) {
			if (currentSeconds && parseInt(currentSeconds) % this.secondsStep !== 0) {
				currentSeconds = this.findNearestStep(currentSeconds, this.secondsStep);
			}
			if (this._maxValue[0] && this._maxValue[1] && this.selectedHours >= this._maxValue[0] && this.selectedSeconds >= this._maxValue[1]) {
				currentSeconds = currentSeconds > this._maxValue[2] ? this._maxValue[2] : currentSeconds;
			} else if (parseInt(currentSeconds) > parseInt(this._maxValue[2])) {
				currentSeconds = this._maxValue[2];
			}

			this.selectedSeconds = this._formatSelectedValue(currentSeconds, 59);
		}
	}

	_formatSelectedValue(currentValue, maximum = Infinity) {
		if (currentValue.length === 1) {
			return `0${currentValue}`;
		}

		if (parseInt(currentValue) < 0 || parseInt(currentValue) > maximum) {
			return "00";
		}

		return currentValue;
	}

	/**
	 * Reads maxValue and stores it as array _maxValue
	 * @param {string} name the name of the property to read(could be used for _minValue e.g.)
	 * @private
	 */
	_setValue(name) {
		const _value = this[name];
		if (!_value) {
			return;
		}
		const temp = this.readFormattedValue(_value);
		this[`_${name}`] = temp;
	}

	findNearestStep(currentValue, step) {
		const curr = parseInt(currentValue);
		const biggerClosest = this._getClosest(curr, step, true),
			lowerClosest = this._getClosest(curr, step, false);

		const diffToBiggerClosest = biggerClosest - curr,
			diffToLowerClosest = curr - lowerClosest;

		return diffToBiggerClosest > diffToLowerClosest ? lowerClosest.toString() : biggerClosest.toString();
	}

	/**
	 * Finds the nearest lower/bigger number to the givent curr
	 * @param {Integer} curr the starting number
	 * @param {Boolean} larger defines if we are searching for bigger or lower number
	 */
	_getClosest(curr, step, larger = true) {
		while (curr % step !== 0) {
			curr = larger ? ++curr : --curr;
		}

		return curr;
	}

	async _handleContainerKeysDown(event) {
		if (isLeft(event)) {
			let expandedSliderIndex = 0;
			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex - 1]) {
				this._slidersDomRefs[expandedSliderIndex - 1].focus();
			} else {
				this._slidersDomRefs[this._slidersDomRefs.length - 1].focus();
			}
		} else if (isRight(event)) {
			let expandedSliderIndex = 0;

			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex + 1]) {
				this._slidersDomRefs[expandedSliderIndex + 1].focus();
			} else {
				this._slidersDomRefs[0].focus();
			}
		}
	}

	_onkeydown(event) {
		if (isShow(event)) {
			event.preventDefault();
			this.togglePicker();
		}

		if (isPageUpShiftCtrl(event)) {
			event.preventDefault();
			this._incrementValue(true, false, false, true);
		} else if (isPageUpShift(event)) {
			event.preventDefault();
			this._incrementValue(true, false, true, false);
		} else if (isPageUp(event)) {
			event.preventDefault();
			this._incrementValue(true, true, false, false);
		}

		if (isPageDownShiftCtrl(event)) {
			event.preventDefault();
			this._incrementValue(false, false, false, true);
		} else if (isPageDownShift(event)) {
			event.preventDefault();
			this._incrementValue(false, false, true, false);
		} else if (isPageDown(event)) {
			event.preventDefault();
			this._incrementValue(false, true, false, false);
		}
	}

	_incrementValue(increment, hours, minutes, seconds) {
		const values = this.readFormattedValue(this.value);
		const incrementStep = increment ? 1 : -1;

		if (hours && !this.hideHours) {
			values[0] = Number(values[0]) + incrementStep;
		} else if (minutes && !this.hideMinutes) {
			values[1] = Number(values[1]) + incrementStep;
		} else if (seconds && !this.hideSeconds) {
			values[2] = Number(values[2]) + incrementStep;
		} else {
			return;
		}

		this.value = `${!this.hideHours ? values[0] : ""}${!this.hideHours && !this.hideMinutes ? ":" : ""}${!this.hideMinutes ? values[1] : ""}${!this.hideSeconds ? `:${values[2]}` : ""}`;
		this.fireEvent("change", { value: this.value });
	}


	generateTimeItemsArray(arrayLength, step = 1) {
		const resultArray = [];
		for (let i = 0; i < arrayLength; i++) {
			let tempString = i.toString();
			if (tempString.length === 1) {
				tempString = `0${tempString}`;
			}

			if (tempString % step === 0) {
				resultArray.push(tempString);
			}
		}

		return resultArray;
	}

	submitPickers() {
		const prevValue = this.value;
		this.value = `${!this.hideHours ? this.hoursSlider.value : ""}${!this.hideHours && !this.hideMinutes ? ":" : ""}${!this.hideMinutes ? this.minutesSlider.value : ""}${!this.hideSeconds ? `:${this.secondsSlider.value}` : ""}`;
		this.togglePicker();
		if (prevValue !== this.value) {
			this.fireEvent("change", { value: this.value });
		}
	}

	_handleInputChange(event) {
		const prevValue = this.value;
		this.value = event.target.value.replace(/[^\d:]/g, "");
		this.checkValue();

		if (prevValue !== this.value) {
			this.fireEvent("change", { value: this.value });
		}
	}

	_handleKeysDown(event) {
		if (isShow(event)) {
			event.preventDefault();
			this.togglePicker();
		}
	}

	async _handleInputLiveChange() {
		await this._getResponsivePopover();

		if (this.responsivePopover.opened) {
			this.togglePicker();
		}
	}

	async togglePicker() {
		await this._getResponsivePopover();

		if (this.responsivePopover.opened) {
			this._isPickerOpen = false;
			this.responsivePopover.close();
		} else {
			this._isPickerOpen = true;
			this.responsivePopover.open(this);
			this._slidersDomRefs = await this.slidersDomRefs();
		}
	}

	async _getResponsivePopover() {
		if (this.responsivePopover) {
			return this.responsivePopover;
		}

		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.responsivePopover = staticAreaItem.querySelector("[ui5-responsive-popover]");
		return this.responsivePopover;
	}

	async slidersDomRefs() {
		await this._getResponsivePopover();
		return this.responsivePopover.default.length ? [...this.responsivePopover.default[0].children].filter(x => x.isUI5Element) : this.responsivePopover.default;
	}


	get hours() {
		return this.selectedHours;
	}

	get minutes() {
		return this.selectedMinutes;
	}

	get seconds() {
		return this.selectedSeconds;
	}

	get hoursArray() {
		const _maxHours = parseInt(this.readFormattedValue(this.maxValue)[0]);
		const _currHours = parseInt(this.selectedHours) + 1;
		let hours;

		if (_maxHours) {
			hours = _maxHours + 1;
		} else if (_currHours < 24) {
			hours = 24;
		} else {
			hours = _currHours;
		}

		return this.generateTimeItemsArray(hours);
	}

	get minutesArray() {
		const currentMinutes = parseInt(this.readFormattedValue(this.maxValue)[1]);
		const minutes = currentMinutes && currentMinutes > 0 && currentMinutes < 60 ? currentMinutes + 1 : 60;
		return this.generateTimeItemsArray(minutes, this.minutesStep);
	}

	get secondsArray() {
		const currentSeconds = parseInt(this.readFormattedValue(this.maxValue)[2]);
		const seconds = currentSeconds && currentSeconds > 0 && currentSeconds < 60 ? currentSeconds + 1 : 60;
		return this.generateTimeItemsArray(seconds, this.secondsStep);
	}

	get secondsSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-duration-picker-seconds-wheelslider");
	}

	get minutesSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-duration-picker-minutes-wheelslider");
	}

	get hoursSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-duration-picker-hours-wheelslider");
	}

	get hoursSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);
	}

	get minutesSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);
	}

	get secondsSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);
	}

	get submitButtonLabel() {
		return this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);
	}

	get cancelButtonLabel() {
		return this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);
	}

	get classes() {
		return {
			container: {
				"ui5-duration-picker-sliders-container": true,
				"ui5-phone": isPhone(),
			},
		};
	}

	static get dependencies() {
		return [
			Icon,
			WheelSlider,
			ResponsivePopover,
			Input,
			Button,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

DurationPicker.define();

const block0$D = (context) => { return scopedHtml`<div class="ui5-file-uploader-root" @mouseover="${context._onmouseover}" @mouseout="${context._onmouseout}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}"><div class="ui5-file-uploader-mask">${ !context.hideInput ? block1$v(context) : undefined }<slot></slot></div>${ context._keepInputInShadowDOM ? block2$u(context) : block3$j() }</div>`; };
const block1$v = (context) => { return scopedHtml`<ui5-input value="${ifDefined(context.value)}" value-state="${ifDefined(context.valueState)}" placeholder="${ifDefined(context.placeholder)}" ?disabled="${context.disabled}" tabindex="-1" class="ui5-file-uploader-input"></ui5-input>`; };
const block2$u = (context) => { return scopedHtml`<input type="file" title="${ifDefined(context.titleText)}" accept="${ifDefined(context.accept)}" ?multiple="${context.multiple}" ?disabled="${context.disabled}" @change="${context._onChange}" aria-hidden="true" tabindex="-1">`; };
const block3$j = (context) => { return scopedHtml`<slot name="formSupport"></slot>`; };


const main$D = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$D(context);
};

const block0$E = (context) => { return scopedHtml`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom" horizontal-align="Left"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block1$w(context) : block2$v(context) }</div></ui5-popover>`; };
const block1$w = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block2$v = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block3$k(item)) }`; };
const block3$k = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };


const main$E = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$E(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var FileUploaderCss = ":host{display:inline-block}.ui5-file-uploader-root{position:relative}.ui5-file-uploader-root input[type=file]{opacity:0;position:absolute;top:0;left:0;height:100%;width:100%}.ui5-file-uploader-root input[type=file]:not([disabled]){cursor:pointer}.ui5-file-uploader-mask{display:flex}.ui5-file-uploader-mask [ui5-input]{margin-right:.25rem}:host(:not([value-state]):not([disabled]):hover) [ui5-input]{background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host(:not([disabled]):active) [ui5-button]{background-color:var(--sapButton_Active_Background);border-color:var(--_ui5_button_active_border_color);color:var(--sapButton_Active_TextColor);text-shadow:none}";

/**
 * @public
 */
const metadata$C = {
	tag: "ui5-file-uploader",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.FileUploader.prototype */ {
		/**
		 * Comma-separated list of file types that the <code>ui5-file-uploader</code> should accept.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		accept: {
			type: String,
		},

		/**
		 * If set to "true", the input field of <code>ui5-file-uploader</code> will not be rendered. Only the default slot that is passed will be rendered.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		hideInput: {
			type: Boolean,
		},

		/**
		 * Defines whether <code>ui5-file-uploader</code> is in disabled state.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-file-uploader</code> is completely noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Allows multiple files to be chosen.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		multiple: {
			type: Boolean,
		},

		/**
		 * Determines the name with which the <code>ui5-file-uploader</code> will be submitted in an HTML form.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-file-uploader</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines a short hint intended to aid the user with data entry when the <code>ui5-file-uploader</code> has no value.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		placeholder: {
			type: String,
		},

		/**
		 * Defines the name/names of the file/files to upload.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-file-uploader</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * @private
		 */
		focused: {
			type: Boolean,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.FileUploader.prototype */ {
		/**
		 * By default the <code>ui5-file-uploader</code> contains a single input field. With this slot you can pass any content that you wish to add. See the samples for more information.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "content",
			type: HTMLElement,
		},

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-file-uploader</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5--file-uploader</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.9
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.FileUploader.prototype */ {
		/**
		 * Event is fired when the value of the file path has been changed.
		 * <b>Note:</b> Keep in mind that because of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button of the uploads window is pressed.
		 *
		 * @event
		 * @param {FileList} files The current files.
		 * @public
		 */
		change: {
			detail: {
				files: { type: FileList },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-file-uploader</code> opens a file explorer dialog and enables users to upload files.
 * The component consists of input field, but you can provide an HTML element by your choice
 * to trigger the file upload, by using the default slot.
 * Furthermore, you can set the property "hideInput" to "true" to hide the input field.
 * <br>
 * To get all selected files, you can simply use the read-only "files" property.
 * To restrict the types of files the user can select, you can use the "accept" property.
 * <br>
 * And, similar to all input based components, the FileUploader supports "valueState", "placeholder", "name", and "disabled" properties.
 *
 * For the <code>ui5-file-uploader</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/FileUploader.js";</code>
 *
 * @constructor
 * @since 1.0.0-rc.6
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.FileUploader
 * @extends UI5Element
 * @tagname ui5-file-uploader
 * @public
 */
class FileUploader extends UI5Element {
	static get formAssociated() {
		return true;
	}

	static get metadata() {
		return metadata$C;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return FileUploaderCss;
	}

	static get template() {
		return main$D;
	}

	static get staticAreaTemplate() {
		return main$E;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles];
	}

	constructor() {
		super();
		if (this._canUseNativeFormSupport) {
			this._internals = this.attachInternals();
		}

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	_onmouseover() {
		this.content.forEach(item => {
			item.classList.add("ui5_hovered");
		});
	}

	_onmouseout() {
		this.content.forEach(item => {
			item.classList.remove("ui5_hovered");
		});
	}

	_onfocusin() {
		this.focused = true;
	}

	_onfocusout() {
		this.focused = false;
	}

	/**
	 * FileList of all selected files.
	 * @readonly
	 * @type { FileList }
	 * @public
	 */
	get files() {
		if (this._input) {
			return this._input.files;
		}

		return FileUploader._emptyFilesList;
	}

	onBeforeRendering() {
		this._enableFormSupport();
	}

	onAfterRendering() {
		if (!this.value) {
			this._input.value = "";
		}

		this.toggleValueStatePopover(this.shouldOpenValueStateMessagePopover);
	}

	_enableFormSupport() {
		const FormSupport = getFeature("FormSupport");

		if (FormSupport) {
			if (this._canUseNativeFormSupport) {
				this._setFormValue();
			} else {
				FormSupport.syncNativeFileInput(
					this,
					(element, nativeInput) => {
						nativeInput.disabled = element.disabled;
					},
					this._onChange.bind(this)
				);
			}
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	_onChange(event) {
		this._updateValue(event.target.files);
		this.fireEvent("change", {
			files: event.target.files,
		});
	}

	_updateValue(files) {
		this.value = Array.from(files).reduce((acc, currFile) => {
			return `${acc}"${currFile.name}" `;
		}, "");
	}

	_setFormValue() {
		const formData = new FormData();

		for (let i = 0; i < this.files.length; i++) {
			formData.append(this.name, this.files[i]);
		}

		this._internals.setFormValue(formData);
	}

	toggleValueStatePopover(open) {
		if (open) {
			this.openValueStatePopover();
		} else {
			this.closeValueStatePopover();
		}
	}

	async openValueStatePopover() {
		const popover = await this._getPopover();

		if (popover) {
			popover.openBy(this);
		}
	}

	async closeValueStatePopover() {
		const popover = await this._getPopover();

		if (popover) {
			popover.close();
		}
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector(".ui5-valuestatemessage-popover");
	}

	/**
	 * in case when ui5-file-uploader is not placed in the DOM, return empty FileList, like native input would do
	 * @private
	 */
	static get _emptyFilesList() {
		if (!this.emptyInput) {
			this.emptyInput = document.createElement("input");
			this.emptyInput.type = "file";
		}
		return this.emptyInput.files;
	}

	get browseText() {
		return this.i18nBundle.getText(FILEUPLOAD_BROWSE);
	}

	get titleText() {
		return this.i18nBundle.getText(FILEUPLOADER_TITLE);
	}

	get _canUseNativeFormSupport() {
		return !!this.attachInternals;
	}

	get _keepInputInShadowDOM() {
		// only put input in the light dom when ui5-file-uploader is placed inside form and there is no support for form elements
		return this._canUseNativeFormSupport || !this.name;
	}

	get _input() {
		return this.shadowRoot.querySelector("input[type=file]") || this.querySelector("input[type=file][data-ui5-form-support]");
	}

	/**
	 * Determines input helper type in forms.
	 * @private
	 */
	get _type() {
		return "file";
	}

	get valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Success": i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Information": i18nBundle.getText(VALUE_STATE_INFORMATION),
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	get valueStateText() {
		return this.valueStateTextMappings[this.valueState];
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get hasValueStateText() {
		return this.hasValueState && this.valueState !== ValueState.Success;
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get shouldDisplayDefaultValueStateMessage() {
		return !this.valueStateMessage.length && this.hasValueStateText;
	}

	get shouldOpenValueStateMessagePopover() {
		return this.focused && this.hasValueStateText && !this.hideInput;
	}

	get classes() {
		return {
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		return {
			popoverHeader: {
				"width": `${this.ui5Input ? this.ui5Input.offsetWidth : 0}px`,
			},
		};
	}

	get ui5Input() {
		return this.shadowRoot.querySelector(".ui5-file-uploader-input");
	}

	static get dependencies() {
		return [Input, Popover];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

FileUploader.define();

const block0$F = (context) => { return scopedHtml`<div class="ui5-input-root" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}"><div class="ui5-input-content"><ui5-tokenizer class="ui5-multi-input-tokenizer" .morePopoverOpener=${ifDefined(context)} .popoverMinWidth=${ifDefined(context._inputWidth)} .valueState=${ifDefined(context.valueState)} ?expanded="${context.expandedTokenizer}" show-more @keydown="${context._onTokenizerKeydown}" @show-more-items-press=${context.showMorePress} @token-delete=${context.tokenDelete} @focusout="${context._tokenizerFocusOut}"><slot name="tokens"></slot><div slot="valueStateMessage">${ context.shouldDisplayDefaultValueStateMessage ? block1$x(context) : block2$w(context) }</div></ui5-tokenizer><input id="${ifDefined(context._id)}-inner" class="ui5-input-inner" type="${ifDefined(context.inputType)}" inner-input ?inner-input-with-icon="${context.icon.length}" ?disabled="${context.disabled}" ?readonly="${context._readonly}" ?required="${context.required}" .value="${ifDefined(context.value)}" placeholder="${ifDefined(context.placeholder)}" maxlength="${ifDefined(context.maxlength)}" role="${ifDefined(context.accInfo.input.role)}" aria-owns="${ifDefined(context.accInfo.input.ariaOwns)}" ?aria-invalid="${context.accInfo.input.ariaInvalid}" aria-haspopup="${ifDefined(context.accInfo.input.ariaHasPopup)}" aria-describedby="${ifDefined(context.accInfo.input.ariaDescribedBy)}" aria-autocomplete="${ifDefined(context.accInfo.input.ariaAutoComplete)}" aria-expanded="${ifDefined(context.accInfo.input.ariaExpanded)}" aria-label="${ifDefined(context.accInfo.input.ariaLabel)}" aria-required="${ifDefined(context.accInfo.input.ariaRequired)}" @input="${context._handleInput}" @change="${context._handleChange}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click=${context._click} @focusin=${context.innerFocusIn} data-sap-no-tab-ref data-sap-focus-ref step="${ifDefined(context.step)}" />${ context.icon.length ? block4$f() : undefined }${ context.showValueHelpIcon ? block5$d(context) : undefined }${ context.showSuggestions ? block6$a(context) : undefined }${ context.accInfo.input.ariaDescription ? block7$8(context) : undefined }${ context.hasValueState ? block8$8(context) : undefined }</div><slot name="formSupport"></slot></div>`; };
const block1$x = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block2$w = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block3$l(item)) }`; };
const block3$l = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block4$f = (context) => { return scopedHtml`<div class="ui5-input-icon-root"><slot name="icon"></slot></div>`; };
const block5$d = (context) => { return scopedHtml`<ui5-icon @click=${context.valueHelpPress} @mousedown=${context.valueHelpMouseDown} @mouseup=${context.valueHelpMouseUp} input-icon name="value-help"></ui5-icon>`; };
const block6$a = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-suggestionsText" class="ui5-hidden-text">${ifDefined(context.suggestionsText)}</span><span id="${ifDefined(context._id)}-selectionText" class="ui5-hidden-text" aria-live="polite" role="status"></span><span id="${ifDefined(context._id)}-suggestionsCount" class="ui5-hidden-text" aria-live="polite">${ifDefined(context.availableSuggestionsCount)}</span>`; };
const block7$8 = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-descr" class="ui5-hidden-text">${ifDefined(context.accInfo.input.ariaDescription)}</span>`; };
const block8$8 = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.ariaValueStateHiddenText)}</span>`; };


const main$F = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$F(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$7 = "[input-icon]{color:var(--sapContent_IconColor);cursor:pointer;outline:none;padding:var(--_ui5_input_icon_padding);border-left:1px solid transparent;min-width:1rem;min-height:1rem}[input-icon][pressed]{background:var(--sapButton_Selected_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:not([pressed]):not(:active):hover{background:var(--sapButton_Lite_Hover_Background)}[input-icon]:hover{border-left:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]:hover{border-left:none;border-right:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]{border-left:none;border-right:1px solid transparent}.ui5-multi-input-tokenizer{max-width:calc(100% - 3rem - var(--_ui5_input_icon_min_width));border:none;width:auto;min-width:0;height:100%}[ui5-multi-input] [ui5-tokenizer]{flex:3}";

const name$c = "sys-cancel";
const pathData$c = "M512 256q0 54-20 100.5t-54.5 81T356 492t-100 20q-54 0-100.5-20t-81-55T20 355.5 0 256t20.5-100 55-81.5T157 20t99-20q53 0 100 20t81.5 54.5T492 156t20 100zm-32 0q0-47-17.5-87.5t-48-71-71.5-48T256 32t-87 18-71.5 48.5-48 71T32 256q0 47 17.5 88t48 71 71.5 47.5 87 17.5q47 0 88-17.5t71-47.5 47.5-71 17.5-88zm-186-7q-5 3-1 9l89 89q9 8 0 17l-16 17q-8 4-9 4t-9-4l-89-89q-1-2-4-2-4 0-5 2l-88 89q-6 4-9 4-1 0-9-4l-16-17q-8-9 0-17l88-89q5-5 0-9l-88-89q-8-9 0-17l16-17q4-4 9-4t9 4l88 89q2 2 5 2 2 0 4-2l89-89q4-4 9-4t9 4l16 17q9 8 0 17z";
const ltr$c = false;

registerIcon(name$c, { pathData: pathData$c, ltr: ltr$c});

const block0$G = (context) => { return scopedHtml`<div tabindex="${ifDefined(context._tabIndex)}" @click="${context._handleSelect}" @keydown="${context._keydown}" class="ui5-token--wrapper" dir="${ifDefined(context.effectiveDir)}" role="option" aria-selected="${ifDefined(context.selected)}"><span class="ui5-token--text">${ifDefined(context.text)}</span>${ !context.readonly ? block1$y(context) : undefined }</div>`; };
const block1$y = (context) => { return scopedHtml`<div class="ui5-token--icon" @click="${context._delete}">${ context.closeIcon.length ? block2$x() : block3$m(context) }</div>`; };
const block2$x = (context) => { return scopedHtml`<slot name="closeIcon"></slot>`; };
const block3$m = (context) => { return scopedHtml`<ui5-icon name="${ifDefined(context.iconURI)}" accessible-name="${ifDefined(context.tokenDeletableText)}" show-tooltip></ui5-icon>`; };


const main$G = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$G(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$8 = ":host{display:inline-block;background:var(--sapButton_Background);border-width:1px;border-style:solid;border-color:var(--sapButton_TokenBorderColor);border-radius:var(--_ui5_token_border_radius);color:var(--_ui5_token_text_color);height:var(--_ui5_token_height);box-sizing:border-box}:host([overflows]){visibility:hidden}:host(:not([readonly]):hover){background:var(--sapButton_Hover_Background);border-color:var(--sapButton_Hover_BorderColor)}:host([selected]:not([readonly])){color:var(--sapButton_Selected_TextColor);background:var(--sapButton_Selected_Background);border:1px solid var(--sapButton_Selected_BorderColor)}:host([selected]:not([readonly]):hover){background:var(--sapButton_Selected_Hover_Background);border:1px solid var(--sapButton_Selected_Hover_BorderColor)}:host([readonly]){color:var(--sapContent_ForegroundTextColor)}:host([readonly]) .ui5-token--wrapper{padding-right:.375rem}:host([selected]) .ui5-token--wrapper:focus{outline:var(--_ui5_token_focus_outline_width) dotted var(--sapContent_ContrastFocusColor)}.ui5-token--wrapper{display:flex;align-items:center;height:100%;width:100%;cursor:default;padding-left:.3125rem;padding-top:.25rem;padding-bottom:.25rem;box-sizing:border-box;font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);user-select:none}.ui5-token--wrapper:focus{outline-offset:-2px;outline:var(--_ui5_token_focus_outline_width) dotted var(--sapContent_FocusColor)}.ui5-token--text{white-space:nowrap}.ui5-token--icon{display:flex}:host([selected]) .ui5-token--icon>ui5-icon,:host([selected]) ::slotted(ui5-icon){color:var(--sapButton_Selected_TextColor)}.ui5-token--icon>ui5-icon,::slotted(ui5-icon){color:inherit;cursor:pointer;width:var(--_ui5_token_icon_size);height:var(--_ui5_token_icon_size);padding:var(--_ui5_token_icon_padding);color:var(--_ui5_token_icon_color)}:host .ui5-token--wrapper[dir=rtl]{padding-right:var(--_ui5_token_wrapper_right_padding);padding-left:var(--_ui5_token_wrapper_left_padding)}:host([readonly]) .ui5-token--wrapper[dir=rtl]{padding-right:0;padding-left:.375rem}";

/**
 * @public
 */
const metadata$D = {
	tag: "ui5-token",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.main.Token.prototype */ {

		/**
		 * Defines the text of the token.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: { type: String },

		/**
		 * Defines whether the <code>ui5-token</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-token</code> can not be deleted or selected,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @public
		 */
		readonly: { type: Boolean },

		/**
		 * Set by the tokenizer when a token is in the "more" area (overflowing)
		 * @type {boolean}
		 * @private
		 */
		overflows: { type: Boolean },

		/** Defines whether the <code>ui5-token</code> is selected or not.
		 *
		 * @type {boolean}
		 * @public
		 */
		selected: { type: Boolean },

		/**
		 * Defines the tabIndex of the component.
		 * @type {string}
		 * @private
		 */
		_tabIndex: { type: String, defaultValue: "-1", noAttribute: true },
	},

	slots: /** @lends  sap.ui.webcomponents.main.Token.prototype */ {

		/**
		 * Defines the close icon for the token. If nothing is provided to this slot, the default close icon will be used.
		 * Accepts <code>ui5-icon</code>
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 * @since 1.0.0-rc.9
		 */
		closeIcon: {
			type: HTMLElement,
		},
	},

	events: /** @lends sap.ui.webcomponents.main.Token.prototype */ {

		/**
		 * Fired when the backspace, delete or close icon of the token is pressed
		 *
		 * @event
		 * @param {boolean} backSpace indicates whether token is deleted by backspace key
		 * @param {boolean} delete indicates whether token is deleted by delete key
		 * @private
		 */
		"delete": {
			detail: {
				"backSpace": { type: Boolean },
				"delete": { type: Boolean },
			},
		},

		/**
		 * Fired when the a <code>ui5-token</code> is selected by user interaction with mouse or clicking space.
		 *
		 * @event
		 * @public
		 */
		select: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Token.js";</code>
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Token
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-token
 * @since 1.0.0-rc.9
 * @public
 */
class Token extends UI5Element {
	static get metadata() {
		return metadata$D;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$G;
	}

	static get styles() {
		return styles$8;
	}

	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	_handleSelect() {
		this.selected = !this.selected;
		this.fireEvent("select");
	}

	 _delete() {
		this.fireEvent("delete");
	 }

	 _keydown(event) {
		const isBS = isBackSpace(event);
		const isD = isDelete(event);

		if (!this.readonly && (isBS || isD)) {
			event.preventDefault();

			this.fireEvent("delete", {
				backSpace: isBS,
				"delete": isD,
			});
		}

		if (isSpace(event)) {
			event.preventDefault();

			this._handleSelect();
		}
	}

	get tokenDeletableText() {
		return this.i18nBundle.getText(TOKEN_ARIA_DELETABLE);
	}

	get iconURI() {
		return getTheme$1() === "sap_fiori_3" ? "decline" : "sys-cancel";
	}

	static get dependencies() {
		return [Icon];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Token.define();

const block0$H = (context) => { return scopedHtml`<div class="${classMap(context.classes.wrapper)}"><span id="${ifDefined(context._id)}-hiddenText" class="ui5-hidden-text">${ifDefined(context.tokenizerLabel)}</span><div class="${classMap(context.classes.content)}" @ui5-delete="${ifDefined(context._tokenDelete)}" @click="${context._click}" @mousedown="${context._onmousedown}" @keydown="${context._onkeydown}" role="listbox" aria-labelledby="${ifDefined(context._id)}-hiddenText">${ repeat(context.tokens, (item, index) => item._id || index, (item, index) => block1$z(item)) }</div>${ context.showNMore ? block2$y(context) : undefined }</div>`; };
const block1$z = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item._individualSlot)}"></slot>`; };
const block2$y = (context) => { return scopedHtml`<span @click="${context._openOverflowPopover}" class="ui5-tokenizer-more-text">${ifDefined(context._nMoreText)}</span>`; };


const main$H = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$H(context);
};

const block0$I = (context) => { return scopedHtml`<ui5-responsive-popover tokenizer-popover="true" style=${styleMap(context.styles.popover)} header-text=${ifDefined(context.morePopoverTitle)} ?content-only-on-desktop="${context.hasValueState}" no-arrow placement-type="Bottom" horizontal-align="Left">${ !context.hasValueState ? block1$A(context) : undefined }<ui5-list class="ui5-tokenizer-list" mode="Delete" @ui5-item-delete=${ifDefined(context.itemDelete)}>${ repeat(context._tokens, (item, index) => item._id || index, (item, index) => block4$g(item)) }</ui5-list>${ context._isPhone ? block5$e(context) : undefined }</ui5-responsive-popover>`; };
const block1$A = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header" style="${styleMap(context.styles.popoverHeader)}">${ context._isPhone ? block2$z(context) : undefined }<div class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverValueStateMessage)}">${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block3$n(item)) }</div></div>`; };
const block2$z = (context) => { return scopedHtml`<div class="row" style="${styleMap(context.styles.popoverHeaderTitle)}"><ui5-title level="H5" class="ui5-responsive-popover-header-text">Remove</ui5-title><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context.closeMorePopover}"></ui5-button></div>`; };
const block3$n = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block4$g = (item, index, context) => { return scopedHtml`<ui5-li .tokenRef=${ifDefined(item)}>${ifDefined(item.text)}</ui5-li>`; };
const block5$e = (context) => { return scopedHtml`<div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context.closeMorePopover}">OK</ui5-button></div>`; };


const main$I = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$I(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$9 = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host{display:inline-block;box-sizing:border-box;border:1px solid #000;height:2.25rem}.ui5-tokenizer-root{height:100%;display:flex;align-items:center;padding:var(--_ui5_tokenizer_root_padding);overflow-x:scroll;box-sizing:border-box;font-family:\"72override\",var(--sapFontFamily)}.ui5-tokenizer-no-padding{padding:0}.ui5-tokenizer-root.ui5-tokenizer-nmore--wrapper{overflow-x:hidden}.ui5-tokenizer--token--wrapper{display:inline-flex;align-items:center;box-sizing:border-box;height:100%}:host([expanded]) .ui5-tokenizer--content{display:inline-block;white-space:nowrap}.ui5-tokenizer--content{display:flex;flex-wrap:nowrap;align-items:center;overflow:auto}.ui5-tokenizer--content.ui5-tokenizer-nmore--content{overflow:hidden}.ui5-tokenizer-more-text{display:inline-block;margin-left:.25rem;cursor:pointer;white-space:nowrap;font-size:var(--sapFontSize)}:host([expanded]) .ui5-tokenizer--content{overflow:hidden;justify-content:flex-end}::slotted([ui5-token]){margin-left:.25rem}";

/**
 * @public
 */
const metadata$E = {
	tag: "ui5-tokenizer",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Tokenizer.prototype */ {
		"default": {
			propertyName: "tokens",
			type: HTMLElement,
			individualSlots: true,
		},
		"valueStateMessage": {
			propertyName: "valueStateMessage",
			type: HTMLElement,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.Tokenizer.prototype */ {
		showMore: { type: Boolean },

		disabled: { type: Boolean },

		/**
		 * Indicates if the tokenizer should show all tokens or n more label instead
		 *
		 * @private
		 */
		expanded: { type: Boolean },

		morePopoverOpener: { type: Object },

		popoverMinWidth: {
			type: Integer,
		},

		/**
		 * Indicates the value state of the related input component.
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @private
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		_nMoreCount: { type: Integer },
	},
	events: /** @lends sap.ui.webcomponents.main.Tokenizer.prototype */ {
		"token-delete": {
			detail: {
				ref: { type: HTMLElement },
			},
		},

		"show-more-items-press": {
			detail: {
				ref: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * A container for tokens.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Tokenizer
 * @extends UI5Element
 * @tagname ui5-tokenizer
 * @usestextcontent
 * @private
 */
class Tokenizer extends UI5Element {
	static get metadata() {
		return metadata$E;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$H;
	}

	static get styles() {
		return styles$9;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles];
	}

	static get staticAreaTemplate() {
		return main$I;
	}

	_handleResize() {
		this._nMoreCount = this.overflownTokens.length;
	}

	constructor() {
		super();

		this._resizeHandler = this._handleResize.bind(this);
		this._itemNav = new ItemNavigation(this, { currentIndex: "-1" });
		this._itemNav.getItemsCallback = this._getVisibleTokens.bind(this);
		this._scrollEnablement = new ScrollEnablement(this);
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	async onBeforeRendering() {
		if (this.showPopover && !this._getTokens().length) {
			const popover = await this.getPopover();
			popover.close();
		}
	}

	onEnterDOM() {
		ResizeHandler.register(this.shadowRoot.querySelector(".ui5-tokenizer--content"), this._resizeHandler);
	}

	onExitDOM() {
		ResizeHandler.deregister(this.shadowRoot.querySelector(".ui5-tokenizer--content"), this._resizeHandler);
	}

	async _openOverflowPopover() {
		if (this.showPopover) {
			const popover = await this.getPopover();

			popover.open(this.morePopoverOpener || this);
		}

		this.fireEvent("show-more-items-press");
	}

	_getTokens() {
		return this.getSlottedNodes("tokens");
	}

	get _tokens() {
		return this.getSlottedNodes("tokens");
	}

	get showPopover() {
		return Object.keys(this.morePopoverOpener).length;
	}

	_getVisibleTokens() {
		if (this.disabled) {
			return [];
		}

		return this._tokens.filter((token, index) => {
			return index < (this._tokens.length - this._nMoreCount);
		});
	}

	onAfterRendering() {
		this._nMoreCount = this.overflownTokens.length;
		this._scrollEnablement.scrollContainer = this.expanded ? this.contentDom : this;
	}

	_tokenDelete(event) {
		if (event.detail && event.detail.backSpace) {
			this._deleteByBackspace();
		}

		this._updateAndFocus();
		this.fireEvent("token-delete", { ref: event.target });
	}

	itemDelete(event) {
		const token = event.detail.item.tokenRef;

		this.fireEvent("token-delete", { ref: token });
	}

	_onkeydown(event) {
		if (isSpace(event)) {
			event.preventDefault();

			this._handleTokenSelection(event);
		}
	}

	_click(event) {
		this._handleTokenSelection(event);
	}

	_onmousedown(event) {
		this._itemNav.update(event.target);
	}

	_handleTokenSelection(event) {
		if (event.target.localName === "ui5-token") {
			this._tokens.forEach(token => {
				if (token !== event.target) {
					token.selected = false;
				}
			});
		}
	}

	/* Keyboard handling */

	_updateAndFocus() {
		if (this._tokens.length) {
			this._itemNav.update();

			setTimeout(() => {
				this._itemNav.focusCurrent();
			}, 0);
		}
	}

	_deleteByBackspace() {
		const newIndex = this._itemNav.currentIndex - 1;

		if (newIndex < 0) {
			this._itemNav.currentIndex = 0;
		} else {
			this._itemNav.currentIndex = newIndex;
		}
	}

	/**
	 * Scrolls the container of the tokens to its beginning.
	 * This method is used by MultiInput and MultiComboBox.
	 * @private
	 */
	scrollToStart() {
		this.contentDom.scrollLeft = 0;
	}

	async closeMorePopover() {
		const popover = await this.getPopover();

		popover.close();
	}

	get _nMoreText() {
		return this.i18nBundle.getText(MULTIINPUT_SHOW_MORE_TOKENS, [this._nMoreCount]);
	}

	get showNMore() {
		return !this.expanded && this.showMore && this.overflownTokens.length;
	}

	get contentDom() {
		return this.shadowRoot.querySelector(".ui5-tokenizer--content");
	}

	get tokenizerLabel() {
		return this.i18nBundle.getText(TOKENIZER_ARIA_LABEL);
	}

	get morePopoverTitle() {
		return this.i18nBundle.getText(TOKENIZER_POPOVER_REMOVE);
	}

	get overflownTokens() {
		if (!this.contentDom) {
			return [];
		}

		return this._getTokens().filter(token => {
			const parentRect = this.contentDom.getBoundingClientRect();
			const tokenRect = token.getBoundingClientRect();
			const tokenLeft = tokenRect.left + tokenRect.width;
			const parentLeft = parentRect.left + parentRect.width;

			token.overflows = (tokenLeft > parentLeft) && !this.expanded;

			return token.overflows;
		});
	}

	get hasValueState() {
		return this.valueState === ValueState.None || this.valueState === ValueState.Success;
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get _isPhone() {
		return isPhone();
	}

	get classes() {
		return {
			wrapper: {
				"ui5-tokenizer-root": true,
				"ui5-tokenizer-nmore--wrapper": this.showMore,
				"ui5-tokenizer-no-padding": !this._getTokens().length,
			},
			content: {
				"ui5-tokenizer--content": true,
				"ui5-tokenizer-nmore--content": this.showMore,
			},
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-responsive-popover-header": this.showPopover,
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		return {
			popover: {
				"min-width": `${this.popoverMinWidth}px`,
			},
			popoverValueStateMessage: {
				"width": isPhone() ? "100%" : `${this.popoverMinWidth}px`,
				"min-height": "2rem",
				"padding": isPhone() ? "0.25rem 1rem" : "0.3rem 0.625rem",
			},
			popoverHeader: {
				"min-height": "2rem",
			},
			popoverHeaderTitle: {
				"justify-content": "left",
			},
		};
	}

	static get dependencies() {
		return [
			ResponsivePopover,
			List,
			StandardListItem,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	async getPopover() {
		return (await this.getStaticAreaItemDomRef()).querySelector("[ui5-responsive-popover]");
	}
}

Tokenizer.define();

/**
 * @public
 */
const metadata$F = {
	tag: "ui5-multi-input",
	properties: /** @lends sap.ui.webcomponents.main.MultiInput.prototype */ {
		/**
		 * Determines whether a value help icon will be should in the end of the input.
		 * Pressing the icon will fire <code>value-help-trigger</code> event.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showValueHelpIcon: {
			type: Boolean,
		},

		/**
		 * Indicates whether the tokenizer is expanded or collapsed(shows the n more label)
		 * @private
		 */
		expandedTokenizer: {
			type: Boolean,
		},
	},
	slots: /** @lends  sap.ui.webcomponents.main.MultiInput.prototype */ {
		/**
		 * Defines the <code>ui5-multi-input</code> tokens.
		 * <br><br>
		 * Example: <br>
		 * &lt;ui5-multi-input><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-token slot="tokens" text="Token 1">&lt;/ui5-token><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-token slot="tokens" text="Token 2">&lt;/ui5-token><br>
		 * &lt;/ui5-multi-input>
		 * <br> <br>
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		tokens: {
			type: HTMLElement,
			multiple: true,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.MultiInput.prototype */ {
		/**
		 * Fired when the value help icon is pressed
		 * and F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are used.
		 *
		 * @event sap.ui.webcomponents.main.MultiInput#value-help-trigger
		 * @public
		 */
		"value-help-trigger": {},

		/**
		 * Fired when a token is about to be deleted.
		 *
		 * @event sap.ui.webcomponents.main.MultiInput#token-delete
		 * @param {HTMLElement} token deleted token.
		 * @public
		 */
		"token-delete": {
			detail: {
				token: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 * <h3>Overview</h3>
 * A <code>ui5-multi-input</code> field allows the user to enter multiple values, which are displayed as <code>ui5-token</code>.
 *
 * User can choose interaction for creating tokens.
 * Fiori Guidelines say that user should create tokens when:
 * <ul>
 * <li>Type a value in the input and press enter or focus out the input field (<code>change</code> event is fired)
 * <li>Select a value from the suggestion list</li> (<code>suggestion-item-select</code> event is fired)
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/MultiInput";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.MultiInput
 * @extends Input
 * @tagname ui5-multi-input
 * @appenddocs Token
 * @since 1.0.0-rc.9
 * @public
 */
class MultiInput extends Input {
	static get metadata() {
		return metadata$F;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$F;
	}

	static get styles() {
		return [Input.styles, styles$7];
	}

	constructor() {
		super();

		// Prevent suggestions' opening.
		this._skipOpenSuggestions = false;
	}

	valueHelpPress(event) {
		this.closePopover();
		this.fireEvent("value-help-trigger", {});
	}

	showMorePress(event) {
		this.expandedTokenizer = false;
		this.focus();
	}

	tokenDelete(event) {
		this.fireEvent("token-delete", {
			token: event.detail.ref,
		});

		this.focus();
	}

	valueHelpMouseDown(event) {
		this.closePopover();
		this.tokenizer.closeMorePopover();
		this._valueHelpIconPressed = true;
		event.target.focus();
	}

	_tokenizerFocusOut(event) {
		if (!this.contains(event.relatedTarget)) {
			this.tokenizer._tokens.forEach(token => { token.selected = false; });
			this.tokenizer.scrollToStart();
		}
	}

	valueHelpMouseUp(event) {
		setTimeout(() => {
			this._valueHelpIconPressed = false;
		}, 0);
	}

	innerFocusIn() {
		this.expandedTokenizer = true;
	}

	_onkeydown(event) {
		super._onkeydown(event);

		if (isLeft(event)) {
			this._skipOpenSuggestions = true; // Prevent input focus when navigating through the tokens.

			return this._handleLeft(event);
		}

		this._skipOpenSuggestions = false;
		if (isBackSpace(event) && event.target.value === "") {
			event.preventDefault();

			this._focusLastToken();
		}

		if (isShow(event)) {
			this.valueHelpPress();
		}
	}

	_onTokenizerKeydown(event) {
		if (isRight(event)) {
			const lastTokenIndex = this.tokenizer._tokens.length - 1;

			if (this.tokenizer._tokens[lastTokenIndex] === document.activeElement) {
				setTimeout(() => {
					this.focus();
				}, 0);
			}
		}
	}

	_handleLeft() {
		const cursorPosition = this.getDomRef().querySelector(`input`).selectionStart;

		if (cursorPosition === 0) {
			this._focusLastToken();
		}
	}

	_focusLastToken() {
		const lastTokenIndex = this.tokenizer._tokens.length - 1;

		if (lastTokenIndex < 0) {
			return;
		}

		this.tokenizer._itemNav.currentIndex = lastTokenIndex;
		this.tokenizer._tokens[lastTokenIndex].focus();
	}

	_onfocusout(event) {
		super._onfocusout(event);
		const relatedTarget = event.relatedTarget;
		const insideDOM = this.contains(relatedTarget);
		const insideShadowDom = this.shadowRoot.contains(relatedTarget);

		if (!insideDOM && !insideShadowDom) {
			this.expandedTokenizer = false;
		}
	}

	shouldOpenSuggestions() {
		const parent = super.shouldOpenSuggestions();
		const valueHelpPressed = this._valueHelpIconPressed;
		const nonEmptyValue = this.value !== "";

		return parent && nonEmptyValue && !valueHelpPressed && !this._skipOpenSuggestions;
	}

	lastItemDeleted() {
		setTimeout(() => {
			this.focus();
		}, 0);
	}

	get tokenizer() {
		return this.shadowRoot.querySelector("[ui5-tokenizer]");
	}

	static get dependencies() {
		return [
			...Input.dependencies,
			Tokenizer,
			Token,
			Icon,
		];
	}
}

MultiInput.define();

/**
 * @lends sap.ui.webcomponents.main.types.LinkDesign.prototype
 * @public
 */
const LinkTypes = {
	/**
	 * default type (no special styling)
	 * @public
	 * @type {Default}
	 */
	Default: "Default",

	/**
	 * subtle type (appears as regular text, rather than a link)
	 * @public
	 * @type {Subtle}
	 */
	Subtle: "Subtle",

	/**
	 * emphasized type
	 * @public
	 * @type {Emphasized}
	 */
	Emphasized: "Emphasized",
};

/**
 * @class
 * Different types of Button.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.LinkDesign
 * @public
 * @enum {string}
 */
class LinkDesign extends DataType {
	static isValid(value) {
		return !!LinkTypes[value];
	}
}

LinkDesign.generataTypeAcessors(LinkTypes);

const block0$J = (context) => { return scopedHtml`<a class="ui5-link-root" role="link" href="${ifDefined(context.parsedRef)}" target="${ifDefined(context.target)}" rel="${ifDefined(context._rel)}" tabindex="${ifDefined(context.tabIndex)}" ?disabled="${context.disabled}" aria-disabled="${ifDefined(context.ariaDisabled)}" aria-label="${ifDefined(context.ariaLabelText)}" @focusin=${context._onfocusin} @click=${context._onclick} @keydown=${context._onkeydown} @keyup=${context._onkeyup}><slot></slot>${ context.hasLinkType ? block1$B(context) : undefined }</a>`; };
const block1$B = (context) => { return scopedHtml`<span class="ui5-hidden-text">${ifDefined(context.linkTypeText)}</span>`; };


const main$J = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$J(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var linkCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-flex}:host{max-width:100%;color:var(--sapLinkColor);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);cursor:pointer;outline:none}:host([disabled]){pointer-events:none}:host(:not([disabled])) .ui5-link-root:hover{color:var(--sapLinkColor);text-decoration:var(--_ui5_link_hover_text_decoration)}:host([disabled]) .ui5-link-root{text-shadow:none;outline:none;cursor:default;pointer-events:none;opacity:var(--_ui5_link_opacity)}:host([design=Emphasized]) .ui5-link-root{font-weight:700}:host([design=Subtle]) .ui5-link-root,:host([design=Subtle]) .ui5-link-root:visited{color:var(--sapLink_SubtleColor)}:host([design=Subtle]) .ui5-link-root:focus{color:var(--sapLinkColor)}:host([wrap]) .ui5-link-root{white-space:normal;word-wrap:break-word}.ui5-link-root{display:inline-block;position:relative;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;word-wrap:normal;text-decoration:none;outline:none;text-decoration:var(--_ui5_link_text_decoration)}.ui5-link-root,.ui5-link-root:active,.ui5-link-root:visited{color:currentColor}.ui5-link-root:focus{outline-offset:-1px;outline:1px dotted var(--sapContent_FocusColor);text-decoration:underline}";

/**
 * @public
 */
const metadata$G = {
	tag: "ui5-link",
	languageAware: true,
	properties: /** @lends  sap.ui.webcomponents.main.Link.prototype */  {

		/**
		 * Defines whether the <code>ui5-link</code> is disabled.
		 * <br><br>
		 * <b>Note:</b> When disabled, the <code>ui5-link</code> cannot be triggered by the user.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the <code>ui5-link</code> href.
		 * <br><br>
		 * <b>Note:</b> Standard hyperlink behavior is supported.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		href: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-link</code> target.
		 * <br><br>
		 * <b>Notes:</b>
		 * <ul>
		 * <li>Available options are the standard values: <code>_self</code>, <code>_top</code>,
		 * <code>_blank</code>, <code>_parent</code>, and <code>_search</code>.</li>
		 * <li>This property must only be used when the <code>href</code> property is set.</li>
		 * </ul>
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		target: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-link</code> design.
		 * <br><br>
		 * <b>Note:</b> Avaialble options are <code>Default</code>, <code>Subtle</code>, and <code>Emphasized</code>.
		 *
		 * @type {LinkDesign}
		 * @defaultvalue "Default"
		 * @public
		 */
		design: {
			type: LinkDesign,
			defaultValue: LinkDesign.Default,
		},

		/**
		 * Defines whether the <code>ui5-link</code> text should wrap
		 * when there is no sufficient space.
		 * <br><br>
		 * <b>Note:</b> The text is truncated by default.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		wrap: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the link.
		 *
		 * @type {String}
		 * @since 1.0.0-rc.10
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the input
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.10
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_rel: {
			type: String,
			noAttribute: true,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.Link.prototype */ {
		/**
		 * Defines the text of the <code>ui5-link</code>.
		 * <br><b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Link.prototype */ {

		/**
		 * Fired when the <code>ui5-link</code> is triggered either with a mouse/tap
		 * or by using the Enter key.
		 *
		 * @event
		 * @public
		 */
		click: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-link</code> is a hyperlink component that is used to navigate to other
 * apps and web pages, or to trigger actions.
 * It is a clickable text element, visualized in such a way that it stands out
 * from the standard text.
 * On hover, it changes its style to an underlined text to provide additional feedback to the user.
 *
 *
 * <h3>Usage</h3>
 *
 * You can set the <code>ui5-link</code> to be enabled or disabled.
 * <br><br>
 * To create a visual hierarchy in large lists of links, you can set the less important links as
 * <code>Subtle</code> or the more important ones as <code>Emphasized</code>,
 * by using the <code>design</code> property.
 * <br><br>
 * If the <code>href</code> property is set, the link behaves as the basic HTML
 * anchor tag (<code><a></code>) and opens the specified URL in the given target frame (<code>target</code> property).
 * To specify where the linked content is opened, you can use the <code>target</code> property.
 *
 * <h3>Responsive behavior</h3>
 *
 * If there is not enough space, the text of the <code>ui5-link</code> becomes truncated.
 * If the <code>wrap</code> property is set to <code>true</code>, the text is displayed
 * on several lines instead of being truncated.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Link";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Link
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-link
 * @public
 */
class Link extends UI5Element {
	constructor() {
		super();
		this._dummyAnchor = document.createElement("a");
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get metadata() {
		return metadata$G;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$J;
	}

	static get styles() {
		return linkCss;
	}

	onBeforeRendering() {
		const needsNoReferrer = this.target === "_blank"
			&& this.href
			&& this._isCrossOrigin();

		this._rel = needsNoReferrer ? "noreferrer" : undefined;
	}

	_isCrossOrigin() {
		const loc = window.location;

		this._dummyAnchor.href = this.href;

		return !(this._dummyAnchor.hostname === loc.hostname
			&& this._dummyAnchor.port === loc.port
			&& this._dummyAnchor.protocol === loc.protocol);
	}

	get tabIndex() {
		return (this.disabled || !this.textContent.length) ? "-1" : "0";
	}

	get ariaDisabled() {
		return this.disabled ? "true" : undefined;
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	get hasLinkType() {
		return this.design !== LinkDesign.Default;
	}

	static typeTextMappings() {
		return {
			"Subtle": LINK_SUBTLE,
			"Emphasized": LINK_EMPHASIZED,
		};
	}

	get linkTypeText() {
		return this.i18nBundle.getText(Link.typeTextMappings()[this.design]);
	}

	get parsedRef() {
		return (this.href && this.href.length > 0) ? this.href : undefined;
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	_onclick(event) {
		event.isMarked = "link";
	}

	_onfocusin(event) {
		event.isMarked = "link";
	}

	_onkeydown(event) {
		event.isMarked = "link";
	}

	_onkeyup(event) {
		event.isMarked = "link";
	}
}

Link.define();

var slideDown = ({
	element = animationConfig.element,
	duration = animationConfig.defaultDuration,
	progress: progressCallback = animationConfig.identity,
}) => {
	let computedStyles,
		paddingTop,
		paddingBottom,
		marginTop,
		marginBottom,
		height;
	let storedOverflow,
		storedPaddingTop,
		storedPaddingBottom,
		storedMarginTop,
		storedMarginBottom,
		storedHeight;

	const animation = animate({
		beforeStart: () => {
			// Show the element to measure its properties
			element.style.display = "block";

			// Get Computed styles
			computedStyles = getComputedStyle(element);
			paddingTop = parseFloat(computedStyles.paddingTop);
			paddingBottom = parseFloat(computedStyles.paddingBottom);
			marginTop = parseFloat(computedStyles.marginTop);
			marginBottom = parseFloat(computedStyles.marginBottom);
			height = parseFloat(computedStyles.height);

			// Store inline styles
			storedOverflow = element.style.overflow;
			storedPaddingTop = element.style.paddingTop;
			storedPaddingBottom = element.style.paddingBottom;
			storedMarginTop = element.style.marginTop;
			storedMarginBottom = element.style.marginBottom;
			storedHeight = element.style.height;

			element.style.overflow = "hidden";
			element.style.paddingTop = 0;
			element.style.paddingBottom = 0;
			element.style.marginTop = 0;
			element.style.marginBottom = 0;
			element.style.height = 0;
		},
		duration,
		element,
		progress(progress) {
			progressCallback(progress);

			// WORKAROUND
			element.style.display = "block";
			// END OF WORKAROUND

			/* eslint-disable */
			element.style.paddingTop = 0 + (paddingTop * progress) + "px";
			element.style.paddingBottom = 0 + (paddingBottom * progress) + "px";
			element.style.marginTop = 0 + (marginTop * progress) + "px";
			element.style.marginBottom = 0 + (marginBottom * progress) + "px";
			element.style.height = 0 + (height * progress) + "px";
			/* eslint-enable */
		},
	});

	animation.promise().then(() => {
		element.style.overflow = storedOverflow;
		element.style.paddingTop = storedPaddingTop;
		element.style.paddingBottom = storedPaddingBottom;
		element.style.marginTop = storedMarginTop;
		element.style.marginBottom = storedMarginBottom;
		element.style.height = storedHeight;
	});

	return animation;
};

var slideUp = ({
	element = animationConfig.element,
	duration = animationConfig.defaultDuration,
	progress: progressCallback = animationConfig.identity,
}) => {
	// Get Computed styles
	let computedStyles,
		paddingTop,
		paddingBottom,
		marginTop,
		marginBottom,
		height;

	// Store inline styles
	let storedOverflow,
		storedPaddingTop,
		storedPaddingBottom,
		storedMarginTop,
		storedMarginBottom,
		storedHeight;

	const animation = animate({
		beforeStart: () => {
			// Get Computed styles
			computedStyles = getComputedStyle(element);
			paddingTop = parseFloat(computedStyles.paddingTop);
			paddingBottom = parseFloat(computedStyles.paddingBottom);
			marginTop = parseFloat(computedStyles.marginTop);
			marginBottom = parseFloat(computedStyles.marginBottom);
			height = parseFloat(computedStyles.height);

			// Store inline styles
			storedOverflow = element.style.overflow;
			storedPaddingTop = element.style.paddingTop;
			storedPaddingBottom = element.style.paddingBottom;
			storedMarginTop = element.style.marginTop;
			storedMarginBottom = element.style.marginBottom;
			storedHeight = element.style.height;

			element.style.overflow = "hidden";
		},
		duration,
		element,
		progress(progress) {
			progressCallback(progress);

			element.style.paddingTop = `${paddingTop - (paddingTop * progress)}px`;
			element.style.paddingBottom = `${paddingBottom - (paddingBottom * progress)}px`;
			element.style.marginTop = `${marginTop - (marginTop * progress)}px`;
			element.style.marginBottom = `${marginBottom - (marginBottom * progress)}px`;
			element.style.height = `${height - (height * progress)}px`;
		},
	});

	animation.promise().then(oReason => {
		if (!(oReason instanceof Error)) {
			element.style.overflow = storedOverflow;
			element.style.paddingTop = storedPaddingTop;
			element.style.paddingBottom = storedPaddingBottom;
			element.style.marginTop = storedMarginTop;
			element.style.marginBottom = storedMarginBottom;
			element.style.height = storedHeight;
			element.style.display = "none";
		}
	});

	return animation;
};

/**
 * @lends sap.ui.webcomponents.main.types.PanelAccessibleRole.prototype
 * @public
 */
const PanelAccessibleRoles = {

	/**
	 * Represents the ARIA role <code>complementary</code>. A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.
	 * @public
	 * @type {Complementary}
	 */
	Complementary: "Complementary",

	/**
	 * Represents the ARIA role <code>Form</code>. A landmark region that contains a collection of items and objects that, as a whole, create a form.
	 * @public
	 * @type {Form}
	 */
	Form: "Form",

	/**
	 * Represents the ARIA role <code>Region</code>. A section of a page, that is important enough to be included in a page summary or table of contents.
	 * @public
	 * @type {Region}
	 */
	Region: "Region",
};

/**
 * @class
 * Available Panel Accessible Landmark Roles.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.PanelAccessibleRole
 * @public
 * @enum {string}
 */
class PanelAccessibleRole extends DataType {
	static isValid(value) {
		return !!PanelAccessibleRoles[value];
	}
}

PanelAccessibleRole.generataTypeAcessors(PanelAccessibleRoles);

const block0$K = (context) => { return scopedHtml`<div data-sap-ui-fastnavgroup="true" class="ui5-panel-root" role="${ifDefined(context.accRole)}"><!-- header: either header or h1 with header text --><div @click="${context._headerClick}" @keydown="${context._headerKeyDown}" @keyup="${context._headerKeyUp}" class="ui5-panel-header" tabindex="${ifDefined(context.headerTabIndex)}" role="${ifDefined(context.accInfo.role)}" aria-expanded="${ifDefined(context.accInfo.ariaExpanded)}" aria-controls="${ifDefined(context.accInfo.ariaControls)}" aria-label="${ifDefined(context.accInfo.ariaLabel)}" aria-labelledby="${ifDefined(context.accInfo.ariaLabelledby)}">${ !context.fixed ? block1$C(context) : undefined }${ context._hasHeader ? block2$A() : block3$o(context) }</div><div id="aria-labelledby-texts"></div><span id="${ifDefined(context._id)}-headerText" class="ui5-hidden-text">${ifDefined(context.headerAriaLabelledByText)}</span><!-- content area --><div class="ui5-panel-content" id="${ifDefined(context._id)}-content" tabindex="-1" style="${styleMap(context.styles.content)}"><slot></slot></div></div>`; };
const block1$C = (context) => { return scopedHtml`<div class="ui5-panel-header-button-root"><ui5-button design="Transparent" class="ui5-panel-header-button ${classMap(context.classes.headerBtn)}" icon="slim-arrow-right" ?non-focusable="${context.nonFocusableButton}" @click="${context._toggleButtonClick}" ._buttonAccInfo="${ifDefined(context.accInfo.button)}" aria-label="${ifDefined(context.accInfo.ariaLabelButton)}" aria-labelledby="${ifDefined(context.accInfo.ariaLabelledbyButton)}"></ui5-button></div>`; };
const block2$A = (context) => { return scopedHtml`<slot name="header"></slot>`; };
const block3$o = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}-header-title" role="heading" aria-level="${ifDefined(context.headerAriaLevel)}" class="ui5-panel-header-title" aria-labelledby="${ifDefined(context._id)}-headerText">${ifDefined(context.headerText)}</div>`; };


const main$K = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$K(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var panelCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:block}:host{font-family:\"72override\",var(--sapFontFamily);background-color:var(--sapGroup_TitleBackground);border-bottom:1px solid var(--sapGroup_TitleBorderColor)}:host([fixed]) .ui5-panel-header{padding-left:1rem}.ui5-panel-header{height:var(--_ui5_panel_header_height);width:100%;display:flex;justify-content:flex-start;align-items:center;outline:none;box-sizing:border-box;padding-right:1rem;padding-left:.25rem;border-bottom:1px solid transparent}.ui5-panel-header-button-animated{transition:transform .4s ease-out}:host(:not([_has-header])) .ui5-panel-header-button{pointer-events:none}:host(:not([_has-header]):not([fixed])){cursor:pointer}:host(:not([_has-header]):not([fixed])) .ui5-panel-header:focus{outline:var(--_ui5_panel_focus_border);outline-offset:-3px}:host(:not([collapsed])) .ui5-panel-header-button{transform:rotate(90deg)}:host([fixed]) .ui5-panel-header-title{width:100%}.ui5-panel-header-title{width:calc(100% - var(--_ui5_panel_button_root_width));overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-family:\"72override\",var(--sapFontHeaderFamily);font-size:var(--sapFontHeader5Size);font-weight:400;color:var(--sapGroup_TitleTextColor)}.ui5-panel-content{padding:.625rem 1rem 1.375rem 1rem;background-color:var(--sapGroup_ContentBackground);outline:none}.ui5-panel-header-button-root{display:flex;justify-content:center;align-items:center;flex-shrink:0;width:var(--_ui5_panel_button_root_width);margin-right:.25rem}";

/**
 * @public
 */
const metadata$H = {
	tag: "ui5-panel",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Panel.prototype */ {

		/**
		 * Defines the <code>ui5-panel</code> header area.
		 * <br><br>
		 * <b>Note:</b> When a header is provided, the <code>headerText</code> property is ignored.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},

		/**
		 * Determines the content of the <code>ui5-panel</code>.
		 * The content is visible only when the <code>ui5-panel</code> is expanded.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: HTMLElement,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.Panel.prototype */ {

		/**
		 * This property is used to set the header text of the <code>ui5-panel</code>.
		 * The text is visible in both expanded and collapsed states.
		 * <br><br>
		 * <b>Note:</b> This property is overridden by the <code>header</code> slot.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		headerText: {
			type: String,
		},

		/**
		 * Determines whether the <code>ui5-panel</code> is in a fixed state that is not
		 * expandable/collapsible by user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		fixed: {
			type: Boolean,
		},

		/**
		 * Indicates whether the <code>ui5-panel</code> is collapsed and only the header is displayed.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		collapsed: {
			type: Boolean,
		},

		/**
		 * Sets the accessible aria role of the <code>ui5-panel</code>.
		 * Depending on the usage, you can change the role from the default <code>Form</code>
		 * to <code>Region</code> or <code>Complementary</code>.
		 *
		 * @type {PanelAccessibleRole}
		 * @defaultvalue "Form"
		 * @public
		 */
		accessibleRole: {
			type: PanelAccessibleRole,
			defaultValue: PanelAccessibleRole.Form,
		},

		/**
		 * Defines the "aria-level" of <code>ui5-panel</code> heading,
		 * set by the <code>headerText</code>.
		 * <br><br>
		 * Available options are: <code>"H6"</code> to <code>"H1"</code>.
		 * @type {TitleLevel}
		 * @defaultvalue "H2"
		 * @public
		*/
		headerLevel: {
			type: TitleLevel,
			defaultValue: TitleLevel.H2,
		},

		/**
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the panel
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Receives id(or many ids) of the elements that label the header of the panel
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		headerAriaLabelledby: {
			type: String,
		},

		/**
		 * @private
		 */
		_hasHeader: {
			type: Boolean,
		},

		_header: {
			type: Object,
		},

		_contentExpanded: {
			type: Boolean,
			noAttribute: true,
		},

		_animationRunning: {
			type: Boolean,
			noAttribute: true,
		},

		_buttonAccInfo: {
			type: Object,
		},
	},
	events: {

		/**
		 * Fired when the ui5-panel is expanded/collapsed by user interaction.
		 *
		 * @event
		 * @public
		 */
		toggle: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-panel</code> component is a container which has a header and a
 * content area and is used
 * for grouping and displaying information. It can be collapsed to save space on the screen.
 *
 * <h3>Guidelines:</h3>
 * <ul>
 * <li>Nesting two or more panels is not recommended.</li>
 * <li>Do not stack too many panels on one page.</li>
 * </ul>
 *
 * <h3>Structure</h3>
 * A panel consists of a title bar with a header text or custom header.
 * <br>
 * The content area can contain an arbitrary set of controls.
 * The header is clickable and can be used to toggle between the expanded and collapsed state.
 * It includes an icon which rotates depending on the state.
 * <br>
 * The custom header can be set through the <code>header</code> slot and it may contain arbitraray content, such as: title, buttons or any other HTML elements.
 * <br><b>Note:</b> the custom header is not clickable out of the box, but in this case the icon is interactive and allows to show/hide the content area.
 *
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li>If the width of the panel is set to 100% (default), the panel and its children are
 * resized responsively,
 * depending on its parent container.</li>
 * <li>If the panel has a fixed height, it will take up the space even if the panel is
 * collapsed.</li>
 * <li>When the panel is expandable (the <code>fixed</code> property is set to <code>false</code>),
 * an arrow icon (pointing to the right) appears in front of the header.</li>
 * <li>When the animation is activated, expand/collapse uses a smooth animation to open or
 * close the content area.</li>
 * <li>When the panel expands/collapses, the arrow icon rotates 90 degrees
 * clockwise/counter-clockwise.</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Panel";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Panel
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-panel
 * @public
 */
class Panel extends UI5Element {
	static get metadata() {
		return metadata$H;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$K;
	}

	static get styles() {
		return panelCss;
	}

	constructor() {
		super();

		this._header = {};
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		// If the animation is running, it will set the content expanded state at the end
		if (!this._animationRunning) {
			this._contentExpanded = !this.collapsed;
		}

		this._hasHeader = !!this.header.length;
	}

	shouldToggle(node) {
		const customContent = this.header.length;
		if (customContent) {
			return node.classList.contains("ui5-panel-header-button");
		}
		return true;
	}

	shouldAnimate() {
		return getAnimationMode$1() !== AnimationMode.None;
	}

	_headerClick(event) {
		if (!this.shouldToggle(event.target)) {
			return;
		}

		this._toggleOpen();
	}

	_toggleButtonClick(event) {
		if (event.x === 0 && event.y === 0) {
			event.stopImmediatePropagation();
		}
	}

	_headerKeyDown(event) {
		if (!this.shouldToggle(event.target)) {
			return;
		}


		if (isEnter(event)) {
			this._toggleOpen();
		}

		if (isSpace(event)) {
			event.preventDefault();
		}
	}

	_headerKeyUp(event) {
		if (!this.shouldToggle(event.target)) {
			return;
		}

		if (isSpace(event)) {
			this._toggleOpen();
		}
	}

	_toggleOpen() {
		if (this.fixed) {
			return;
		}

		this.collapsed = !this.collapsed;

		if (!this.shouldAnimate()) {
			this.fireEvent("toggle");
			return;
		}

		this._animationRunning = true;

		const elements = this.getDomRef().querySelectorAll(".ui5-panel-content");
		const animations = [];

		[].forEach.call(elements, oElement => {
			if (this.collapsed) {
				animations.push(slideUp({
					element: oElement,
				}).promise());
			} else {
				animations.push(slideDown({
					element: oElement,
				}).promise());
			}
		});

		Promise.all(animations).then(_ => {
			this._animationRunning = false;
			this._contentExpanded = !this.collapsed;
			this.fireEvent("toggle");
		});
	}

	_headerOnTarget(target) {
		return target.classList.contains("sapMPanelWrappingDiv");
	}

	get classes() {
		return {
			headerBtn: {
				"ui5-panel-header-button-animated": this.shouldAnimate(),
			},
		};
	}

	get toggleButtonTitle() {
		return this.i18nBundle.getText(PANEL_ICON);
	}

	get expanded() {
		return !this.collapsed;
	}

	get accRole() {
		return this.accessibleRole.toLowerCase();
	}

	get accInfo() {
		return {
			"button": {
				"ariaExpanded": this._hasHeader ? this.expanded : undefined,
				"ariaControls": this._hasHeader ? `${this._id}-content` : undefined,
				"title": this.toggleButtonTitle,
			},
			"ariaExpanded": this.nonFixedInternalHeader ? this.expanded : undefined,
			"ariaControls": this.nonFixedInternalHeader ? `${this._id}-content` : undefined,
			"ariaLabelledby": this.nonFocusableButton ? this.ariaLabelledbyReference : undefined,
			"ariaLabel": this.nonFocusableButton ? this.ariaLabelTxt : undefined,
			"ariaLabelledbyButton": this.nonFocusableButton ? undefined : this.ariaLabelledbyReference,
			"ariaLabelButton": this.nonFocusableButton ? undefined : this.ariaLabelTxt,
			"role": this.nonFixedInternalHeader ? "button" : undefined,
		};
	}

	get ariaLabelledbyReference() {
		if (this.ariaLabelledby || this.ariaLabel) {
			return undefined;
		}

		return (this.nonFocusableButton && this.headerText) ? `${this._id}-header-title` : undefined;
	}

	get ariaLabelTxt() {
		return getEffectiveAriaLabelText(this);
	}

	get header() {
		return this.getDomRef().querySelector(`#${this._id}-header-title`);
	}

	get headerAriaLevel() {
		return this.headerLevel.slice(1);
	}

	get headerTabIndex() {
		return (this.header.length || this.fixed) ? "-1" : "0";
	}

	get headerAriaLabelledByText() {
		if (!this.headerAriaLabelledby) {
			return;
		}
		return getAriaLabelledByTexts(this.header, findNodeOwner(this), this.headerAriaLabelledby);
	}

	get nonFixedInternalHeader() {
		return !this._hasHeader && !this.fixed;
	}

	get nonFocusableButton() {
		return !this.header.length;
	}

	get shouldRenderH1() {
		return !this.header.length && (this.headerText || !this.fixed);
	}

	get styles() {
		return {
			content: {
				display: this._contentExpanded ? "block" : "none",
			},
		};
	}

	static get dependencies() {
		return [Button];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Panel.define();

/**
* @public
*/
const metadata$I = {
	tag: "ui5-option",
	properties: /** @lends  sap.ui.webcomponents.main.Option.prototype */ {

		/**
		 * Defines the selected state of the <code>ui5-option</code>.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: {
			type: Boolean,
		},

		/**
		 * Defines the <code>icon</code> source URI.
		 * <br><br>
		 * <b>Note:</b>
		 * SAP-icons font provides numerous buil-in icons. To find all the available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @public
		 */
		icon: {
			type: String,
			defaultValue: null,
		},

		/**
		 * Defines the value of the <code>ui5-select</code> inside an HTML Form element when this <code>ui5-option</code> is selected.
		 * For more information on HTML Form support, see the <code>name</code> property of <code>ui5-select</code>.
		 *
		 * @type {string}
		 * @public
		 */
		value: {
			type: String,
		},
	},

	events: /** @lends sap.ui.webcomponents.main.Option.prototype */ {},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-option</code> component defines the content of an opton in the <code>ui5-select</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Option
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-option
 * @public
 */
class Option extends UI5Element {
	static get metadata() {
		return metadata$I;
	}
}

Option.define();

const block0$L = (context) => { return scopedHtml`<div class="ui5-select-root" dir="${ifDefined(context.effectiveDir)}" tabindex="${ifDefined(context.tabIndex)}" id="${ifDefined(context._id)}-select" role="button" aria-haspopup="listbox" aria-label="${ifDefined(context.ariaLabelText)}" aria-labelledby="${ifDefined(context._id)}-label" aria-describedby="${ifDefined(context.valueStateTextId)}" aria-disabled="${ifDefined(context.isDisabled)}" aria-required="${ifDefined(context.required)}" aria-expanded="${ifDefined(context._isPickerOpen)}" aria-roledescription="${ifDefined(context.selectRoleDescription)}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @click="${context._toggleRespPopover}"><div class="ui5-select-label-root"><ui5-label id="${ifDefined(context._id)}-label" for="${ifDefined(context._id)}-select">${ifDefined(context._text)}</ui5-label></div><ui5-icon name="slim-arrow-down" input-icon ?pressed="${context._iconPressed}" dir="${ifDefined(context.effectiveDir)}"></ui5-icon>${ context.hasValueState ? block1$D(context) : undefined }<slot name="formSupport"></slot></div>`; };
const block1$D = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`; };


const main$L = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$L(context);
};

const block0$M = (context) => { return scopedHtml`${ context.options ? block1$E(context) : undefined }${ context.shouldOpenValueStateMessagePopover ? block13$4(context) : undefined }`; };
const block1$E = (context) => { return scopedHtml`<ui5-responsive-popover no-arrow _disable-initial-focus content-only-on-desktop placement-type="Bottom" horizontal-align="Left" @ui5-after-open="${ifDefined(context._applyFocusAfterOpen)}" @ui5-before-open="${ifDefined(context._beforeOpen)}" @ui5-after-close="${ifDefined(context._afterClose)}" @keydown="${context._onkeydown}"><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._toggleRespPopover}"></ui5-button></div>${ context._isPhone ? block2$B(context) : undefined }</div>${ !context._isPhone ? block7$9(context) : undefined }<ui5-list mode="SingleSelectAuto" separators="None" @keydown="${context._handlePickerKeydown}" @ui5-selection-change="${ifDefined(context._handleSelectionChange)}" @ui5-item-press="${ifDefined(context._handleItemPress)}">${ repeat(context._syncedOptions, (item, index) => item._id || index, (item, index) => block12$4(item)) }</ui5-list></ui5-responsive-popover>`; };
const block2$B = (context) => { return scopedHtml`${ context.hasValueStateText ? block3$p(context) : undefined }`; };
const block3$p = (context) => { return scopedHtml`<div class="${classMap(context.classes.popoverValueState)} row ui5-select-value-state-dialog-header">${ context.shouldDisplayDefaultValueStateMessage ? block4$h(context) : block5$f(context) }</div>`; };
const block4$h = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block5$f = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block6$b(item)) }`; };
const block6$b = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block7$9 = (context) => { return scopedHtml`${ context.hasValueStateText ? block8$9(context) : undefined }`; };
const block8$9 = (context) => { return scopedHtml`<div class="${classMap(context.classes.popoverValueState)} ui5-select-value-state-popover-padding" style="${styleMap(context.styles.responsivePopoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block9$5(context) : block10$5(context) }</div>`; };
const block9$5 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block10$5 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block11$4(item)) }`; };
const block11$4 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block12$4 = (item, index, context) => { return scopedHtml`<ui5-li id="${ifDefined(item.id)}-li" icon="${ifDefined(item.icon)}" ?selected="${item.selected}" ?aria-selected="${item.selected}">${ifDefined(item.textContent)}</ui5-li>`; };
const block13$4 = (context) => { return scopedHtml`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom"><div slot="header" class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block14$4(context) : block15$3(context) }</div></ui5-popover>`; };
const block14$4 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block15$3 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block16$2(item)) }`; };
const block16$2 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };


const main$M = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$M(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var selectCss = "[input-icon]{color:var(--sapContent_IconColor);cursor:pointer;outline:none;padding:var(--_ui5_input_icon_padding);border-left:1px solid transparent;min-width:1rem;min-height:1rem}[input-icon][pressed]{background:var(--sapButton_Selected_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:not([pressed]):not(:active):hover{background:var(--sapButton_Lite_Hover_Background)}[input-icon]:hover{border-left:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]:hover{border-left:none;border-right:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]{border-left:none;border-right:1px solid transparent}.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{width:var(--_ui5_input_width);min-width:var(--_ui5_input_width);height:var(--_ui5_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);font-style:normal;background-color:var(--sapField_Background);border:1px solid var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}:host([focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-3px}:host([value-state]:not([value-state=None])[focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}.ui5-input-root{width:100%;height:100%;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit}:host([disabled]){opacity:var(--_ui5_input_disabled_opacity);cursor:default;pointer-events:none;background:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor)}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5_input_inner_padding_with_icon)}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]:-ms-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]:-ms-input-placeholder{visibility:hidden}[inner-input]:-ms-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit}:host([readonly]){border-color:var(--sapField_ReadOnly_BorderColor);background:var(--sapField_ReadOnly_Background)}:host(:not([value-state]):not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state=None]:not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state]:not([value-state=None])){border-width:var(--_ui5_input_state_border_width)}:host([value-state=Error]) [inner-input],:host([value-state=Warning]) [inner-input]{font-style:var(--_ui5_input_error_warning_font_style)}:host([value-state=Error]) [inner-input]{font-weight:var(--_ui5_input_error_font_weight)}:host([value-state=Error]:not([readonly])){background-color:var(--sapField_InvalidBackground);border-color:var(--sapField_InvalidColor)}:host([value-state=Error]:not([readonly]):not([disabled])),:host([value-state=Information]:not([readonly]):not([disabled])),:host([value-state=Warning]:not([readonly]):not([disabled])){border-style:var(--_ui5_input_error_warning_border_style)}:host([value-state=Warning]:not([readonly])){background-color:var(--sapField_WarningBackground);border-color:var(--sapField_WarningColor)}:host([value-state=Success]:not([readonly])){background-color:var(--sapField_SuccessBackground);border-color:var(--sapField_SuccessColor);border-width:1px}:host([value-state=Information]:not([readonly])){background-color:var(--sapField_InformationBackground);border-color:var(--sapField_InformationColor);border-width:var(--_ui5-input-information_border_width)}[inner-input]::-ms-clear{height:0;width:0}.ui5-input-icon-root{min-width:var(--_ui5_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot=icon]){padding:var(--_ui5_input_icon_padding)}.ui5-select-root{width:100%;height:100%;display:flex;outline:none;cursor:pointer;overflow:hidden;box-shadow:var(--sapUiContentShadow1)}.ui5-select-label-root{display:inline-flex;align-items:center;flex-shrink:1;flex-grow:1;height:100%;min-width:1rem;padding-left:.5rem}.ui5-select-label-root [ui5-label]{cursor:pointer}:host [dir=rtl].ui5-select-root .ui5-select-label-root{padding-left:0;padding-right:.5rem}:host(:not([disabled])){cursor:pointer}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var SelectPopoverCss = ".ui5-select-value-state-popover-padding{padding:.5625rem 1rem}.ui5-select-value-state-dialog-header.row{padding:.5625rem 1rem;height:auto;display:inline-block}";

/**
 * @public
 */
const metadata$J = {
	tag: "ui5-select",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Select.prototype */ {

		/**
		 * Defines the <code>ui5-select</code> options.
		 *
		 * <br><br>
		 * <b>Note:</b> Only one selected option is allowed.
		 * If more than one option is defined as selected, the last one would be considered as the selected one.
		 *
		 * <br><br>
		 * <b>Note:</b> Use the <code>ui5-option</code> component to define the desired options.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "options",
			type: HTMLElement,
			listenFor: { include: ["*"] },
		},

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-select</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-select</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.9
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.Select.prototype */  {

		/**
		 * Defines whether <code>ui5-select</code> is in disabled state.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-select</code> is noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Determines the name with which the <code>ui5-select</code> will be submitted in an HTML form.
		 * The value of the <code>ui5-select</code> will be the value of the currently selected <code>ui5-option</code>.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-select</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-select</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines whether the <code>ui5-select</code> is required.
		 *
		 * @since 1.0.0-rc.9
		 * @type {Boolean}
		 * @defaultvalue false
		 * @public
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the select.
		 *
		 * @type {String}
		 * @since 1.0.0-rc.9
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},

		/**
		 * Receives id(or many ids) of the elements that label the select.
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		ariaLabelledby: {
			type: String,
			defaultValue: "",
		},

		_text: {
			type: String,
			noAttribute: true,
		},

		_iconPressed: {
			type: Boolean,
			noAttribute: true,
		},

		/**
		 * @private
		 */
		opened: {
			type: Boolean,
		},

		_listWidth: {
			type: Integer,
			defaultValue: 0,
			noAttribute: true,
		},

		/**
		 * @private
		 */
		focused: {
			type: Boolean,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Select.prototype */ {
		/**
		 * Fired when the selected option changes.
		 *
		 * @event
		 * @param {HTMLElement} selectedOption the selected option.
		 * @public
		 */
		change: {
			detail: {
				selectedOption: {},
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-select</code> component is used to create a drop-down list.
 * The items inside the <code>ui5-select</code> define the available options by using the <code>ui5-option</code> component.
 *
 * <h3>Keyboard Handling</h3>
 * The <code>ui5-select</code> provides advanced keyboard handling.
 * If the <code>ui5-select</code> is focused,
 * you can open or close the drop-down by pressing <code>F4</code>, <code>ALT+UP</code> or <code>ALT+DOWN</code> keys.
 * Once the drop-down is opened, you can use the <code>UP</code> and <code>DOWN</code> arrow keys
 * to navigate through the available options and select one by pressing the <code>Space</code> or <code>Enter</code> keys.
 * <br>
 * <h3>ES6 Module Import</h3>
 * <code>import "@ui5/webcomponents/dist/Select";</code>
 * <br>
 * <code>import "@ui5/webcomponents/dist/Option";</code>
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Select
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-select
 * @appenddocs Option
 * @public
 * @since 0.8.0
 */
class Select extends UI5Element {
	static get metadata() {
		return metadata$J;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$L;
	}

	static get staticAreaTemplate() {
		return main$M;
	}

	static get styles() {
		return selectCss;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles, SelectPopoverCss];
	}

	constructor() {
		super();

		this._syncedOptions = [];
		this._selectedIndex = -1;
		this._selectedIndexBeforeOpen = -1;
		this._escapePressed = false;
		this._lastSelectedOption = null;
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this._syncSelection();
		this._enableFormSupport();
	}

	onAfterRendering() {
		this.toggleValueStatePopover(this.shouldOpenValueStateMessagePopover);

		if (this._isPickerOpen && !this._listWidth) {
			this._listWidth = this.responsivePopover.offsetWidth;
		}
	}

	_onfocusin() {
		this.focused = true;
	}

	_onfocusout() {
		this.focused = false;
	}

	get _isPickerOpen() {
		return this.responsivePopover && this.responsivePopover.opened;
	}

	async _respPopover() {
		this._iconPressed = true;
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-responsive-popover]");
	}

	/**
	 * Currently selected option.
	 * @readonly
	 * @type { ui5-option }
	 * @public
	 */
	get selectedOption() {
		return this.options.find(option => option.selected);
	}

	async _toggleRespPopover() {
		this.responsivePopover = await this._respPopover();
		if (this.disabled) {
			return;
		}

		if (this._isPickerOpen) {
			this.responsivePopover.close();
		} else {
			this.responsivePopover.open(this);
		}
	}

	_syncSelection() {
		let lastSelectedOptionIndex = -1;
		const opts = this.options.map((opt, index) => {
			if (opt.selected) {
				lastSelectedOptionIndex = index;
			}

			opt.selected = false;

			return {
				selected: false,
				icon: opt.icon,
				value: opt.value,
				textContent: opt.textContent,
				id: opt._id,
			};
		});

		if (lastSelectedOptionIndex > -1) {
			opts[lastSelectedOptionIndex].selected = true;
			this.options[lastSelectedOptionIndex].selected = true;
			this._text = opts[lastSelectedOptionIndex].textContent;
			this._selectedIndex = lastSelectedOptionIndex;
		} else {
			this._text = "";
			this._selectedIndex = -1;
		}

		if (lastSelectedOptionIndex === -1 && opts[0]) {
			opts[0].selected = true;
			this.options[0].selected = true;
			this._selectedIndex = 0;
			this._text = this.options[0].textContent;
		}

		this._syncedOptions = opts;
	}

	_enableFormSupport() {
		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this, (element, nativeInput) => {
				nativeInput.disabled = element.disabled;
				nativeInput.value = element._currentlySelectedOption.value;
			});
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	_onkeydown(event) {
		const isTab = (isTabNext(event) || isTabPrevious(event));

		if (isTab && this.responsivePopover && this.responsivePopover.opened) {
			this.responsivePopover.close();
		}

		if (isShow(event)) {
			event.preventDefault();
			this._toggleRespPopover();
		}

		if (isSpace(event)) {
			event.preventDefault();
		}

		if (!this._isPickerOpen) {
			this._handleArrowNavigation(event, true);
		}
	}

	_onkeyup(event) {
		if (isSpace(event) && !this._isPickerOpen) {
			this._toggleRespPopover();
		}
	}

	_getSelectedItemIndex(item) {
		return [].indexOf.call(item.parentElement.children, item);
	}

	_select(index) {
		this.options[this._selectedIndex].selected = false;
		this._selectedIndex = index;
		this.options[index].selected = true;
	}

	/**
	 * The user clicked on an item from the list
	 * @private
	 */
	_handleItemPress(event) {
		const item = event.detail.item;
		const selectedItemIndex = this._getSelectedItemIndex(item);
		this._select(selectedItemIndex);

		this._toggleRespPopover();
	}

	/**
	 * The user used arrow up/down on the list
	 * @private
	 */
	_handleSelectionChange(event) {
		const item = event.detail.selectedItems[0];
		const selectedItemIndex = this._getSelectedItemIndex(item);
		this._select(selectedItemIndex);
	}

	_applyFocusAfterOpen() {
		if (!this._currentlySelectedOption) {
			return;
		}

		const li = this.responsivePopover.querySelector(`#${this._currentlySelectedOption._id}-li`);

		li.parentElement._itemNavigation.currentIndex = this._selectedIndex;
		li && li.focus();
	}

	_handlePickerKeydown(event) {
		if (isEscape(event) && this._isPickerOpen) {
			this._escapePressed = true;
		}

		if (isEnter(event) || isSpace(event)) {
			this._shouldClosePopover = true;
		}
	}

	_handleArrowNavigation(event, shouldFireEvent) {
		let nextIndex = -1;
		const isDownKey = isDown(event);
		const isUpKey = isUp(event);

		if (isDownKey || isUpKey) {
			event.preventDefault();
			if (isDownKey) {
				nextIndex = this._getNextOptionIndex();
			} else {
				nextIndex = this._getPreviousOptionIndex();
			}

			this.options[this._selectedIndex].selected = false;
			this.options[nextIndex].selected = true;
			this._selectedIndex = nextIndex === -1 ? this._selectedIndex : nextIndex;

			if (shouldFireEvent) {
				this._fireChangeEvent(this.options[nextIndex]);
			}
		}
	}

	_getNextOptionIndex() {
		return this._selectedIndex === (this.options.length - 1) ? this._selectedIndex : (this._selectedIndex + 1);
	}

	_getPreviousOptionIndex() {
		return this._selectedIndex === 0 ? this._selectedIndex : (this._selectedIndex - 1);
	}

	_beforeOpen() {
		this._selectedIndexBeforeOpen = this._selectedIndex;
		this._lastSelectedOption = this.options[this._selectedIndex];
	}

	_afterClose() {
		this._iconPressed = false;
		this._listWidth = 0;

		if (this._escapePressed) {
			this._select(this._selectedIndexBeforeOpen);
			this._escapePressed = false;
		} else if (this._lastSelectedOption !== this.options[this._selectedIndex]) {
			this._fireChangeEvent(this.options[this._selectedIndex]);
			this._lastSelectedOption = this.options[this._selectedIndex];
		}
	}

	_fireChangeEvent(selectedOption) {
		this.fireEvent("change", { selectedOption });

		//  Angular two way data binding
		this.selectedItem = selectedOption;
		this.fireEvent("selected-item-changed");
	}

	get valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Success": i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Information": i18nBundle.getText(VALUE_STATE_INFORMATION),
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	get valueStateText() {
		return this.valueStateTextMappings[this.valueState];
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get valueStateTextId() {
		return this.hasValueState ? `${this._id}-valueStateDesc` : undefined;
	}

	get isDisabled() {
		return this.disabled || undefined;
	}

	get selectRoleDescription() {
		return this.i18nBundle.getText(SELECT_ROLE_DESCRIPTION);
	}

	get _headerTitleText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
	}

	get _currentSelectedItem() {
		return this.shadowRoot.querySelector(`#${this.options[this._selectedIndex]._id}-li`);
	}

	get _currentlySelectedOption() {
		return this.options[this._selectedIndex];
	}

	get tabIndex() {
		return this.disabled
		|| (this.responsivePopover // Handles focus on Tab/Shift + Tab when the popover is opened
		&& this.responsivePopover.opened) ? "-1" : "0";
	}

	get classes() {
		return {
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		return {
			popoverHeader: {
				"width": `${this.offsetWidth}px`,
			},
			responsivePopoverHeader: {
				"display": this.options.length && this._listWidth === 0 ? "none" : "inline-block",
				"width": `${this.options.length ? this._listWidth : this.offsetWidth}px`,
			},
		};
	}

	get ariaLabelText() {
		return getEffectiveAriaLabelText(this);
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get shouldDisplayDefaultValueStateMessage() {
		return !this.valueStateMessage.length && this.hasValueStateText;
	}

	get hasValueStateText() {
		return this.hasValueState && this.valueState !== ValueState.Success;
	}

	get shouldOpenValueStateMessagePopover() {
		return this.focused && this.hasValueStateText && !this._iconPressed
			&& !this._isPickerOpen && !this._isPhone;
	}

	get _isPhone() {
		return isPhone();
	}

	async openValueStatePopover() {
		this.popover = await this._getPopover();
		if (this.popover) {
			this.popover.openBy(this);
		}
	}

	closeValueStatePopover() {
		this.popover && this.popover.close();
	}

	toggleValueStatePopover(open) {
		if (open) {
			this.openValueStatePopover();
		} else {
			this.closeValueStatePopover();
		}
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-popover]");
	}

	static get dependencies() {
		return [
			Option,
			Label,
			ResponsivePopover,
			Popover,
			List,
			StandardListItem,
			Icon,
			Button,
		];
	}
}

Select.define();

const block0$N = (context) => { return scopedHtml`<div class="ui5-switch-root ${classMap(context.classes.main)}" role="checkbox" aria-checked="${ifDefined(context.checked)}" aria-disabled="${ifDefined(context.ariaDisabled)}" aria-labelledby="${ifDefined(context._id)}-hiddenText" @click="${context._onclick}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" tabindex="${ifDefined(context.tabIndex)}" dir="${ifDefined(context.effectiveDir)}"><div class="ui5-switch-inner"><div class="ui5-switch-track" part="slider"><div class="ui5-switch-slider">${ context.graphical ? block1$F() : block2$C(context) }<span class="ui5-switch-handle" part="handle"></span></div></div></div><input type='checkbox' ?checked="${context.checked}" class="ui5-switch-input" data-sap-no-tab-ref/><span id="${ifDefined(context._id)}-hiddenText" class="ui5-hidden-text">${ifDefined(context.hiddenText)}</span></div>`; };
const block1$F = (context) => { return scopedHtml`<span class="ui5-switch-text ui5-switch-text--on"><ui5-icon name="accept" dir="ltr" class="ui5-switch-icon-on"></ui5-icon></span><span class="ui5-switch-text ui5-switch-text--off"><ui5-icon name="decline" class="ui5-switch-icon-off"></ui5-icon></span>`; };
const block2$C = (context) => { return scopedHtml`<span class="ui5-switch-text ui5-switch-text--on" part="text-on">${ifDefined(context._textOn)}</span><span class="ui5-switch-text ui5-switch-text--off" part="text-off">${ifDefined(context._textOff)}</span>`; };


const main$N = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$N(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var switchCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}.ui5-switch-root{position:relative;width:100%;height:var(--_ui5_switch_height);min-width:var(--_ui5_switch_width);cursor:pointer;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.ui5-switch-root.ui5-switch--no-label{min-width:var(--_ui5_switch_no_label_width)}.ui5-switch-inner{display:flex;align-items:center;justify-content:center;height:100%;overflow:hidden;pointer-events:none;will-change:transform}.ui5-switch-track{height:var(--_ui5_switch_track_height);width:100%;display:flex;align-items:center;background:var(--sapButton_Track_Background);border:1px solid;border-color:var(--sapContent_ForegroundBorderColor);border-radius:var(--_ui5_switch_track_border_radius);box-sizing:border-box}.ui5-switch--no-label .ui5-switch-track{height:var(--_ui5_switch_track_no_label_height)}.ui5-switch-slider{position:relative;height:var(--_ui5_switch_height);width:100%;transition:transform .1s ease-in;transform-origin:top left}.ui5-switch-handle{position:absolute;left:-1px;width:var(--_ui5_switch_handle_width);height:var(--_ui5_switch_handle_height);background:var(--_ui5_switch_handle_bg);border:var(--_ui5_switch_handle_border_width) solid var(--sapContent_ForegroundBorderColor);border-radius:var(--_ui5_switch_handle_border_radius);box-sizing:border-box}.ui5-switch-text{display:flex;justify-content:center;position:absolute;min-width:1.625rem;padding:0 .125rem;font-size:var(--sapFontSmallSize);font-family:\"72override\",var(--sapFontFamily);text-transform:uppercase;text-align:center;color:var(--sapTextColor);white-space:nowrap;user-select:none;-webkit-user-select:none;-ms-user-select:none}.ui5-switch-text--on{left:var(--_ui5_switch_text_on_left)}.ui5-switch-text--off{right:0}.ui5-switch-handle,.ui5-switch-text{top:50%;transform:translateY(-50%)}.ui5-switch-desktop.ui5-switch-root:focus:after{content:\"\";position:absolute;left:-var(--_ui5_switch_outline);top:0;bottom:0;left:0;right:0;border:var(--_ui5_switch_outline) dotted var(--sapContent_FocusColor);pointer-events:none}.ui5-switch-root .ui5-switch-input{position:absolute;left:0;width:0;height:0;margin:0;visibility:hidden;-webkit-appearance:none}.ui5-switch-root.ui5-switch--disabled{opacity:.4;cursor:default}.ui5-switch-root.ui5-switch--disabled.ui5-switch--checked .ui5-switch-track{background:var(--_ui5_switch_track_disabled_checked_bg)}.ui5-switch-root.ui5-switch--disabled.ui5-switch--checked .ui5-switch-handle{background:var(--_ui5_switch_handle_disabled_checked_bg)}.ui5-switch-root.ui5-switch--disabled .ui5-switch-handle{background:var(--_ui5_switch_handle_disabled_bg)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled .ui5-switch-track{background:var(--_ui5_switch_track_disabled_semantic_checked_bg)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled .ui5-switch-handle{background:var(--_ui5_switch_handle_disabled_semantic_checked_bg)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled:not(.ui5-switch--checked) .ui5-switch-track{background:var(--_ui5_switch_track_disabled_semantic_bg)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled:not(.ui5-switch--checked) .ui5-switch-handle{background:var(--sapButton_Background)}.ui5-switch-root.ui5-switch--checked .ui5-switch-handle{background:var(--_ui5_switch_handle_checked_bg);border-color:var(--_ui5_switch_handle_checked_border_color)}.ui5-switch-root.ui5-switch--checked .ui5-switch-track{background:var(--sapButton_Track_Selected_Background)}.ui5-switch-root.ui5-switch--checked .ui5-switch-slider{transform:var(--_ui5_switch_slide_transform)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--checked:not(.ui5-switch--disabled) .ui5-switch-text--on,.ui5-switch-root.ui5-switch--checked .ui5-switch-text--off{color:var(--sapButton_Track_Selected_TextColor)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-handle,.ui5-switch-root.ui5-switch--semantic .ui5-switch-track{border-color:var(--sapSuccessBorderColor)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-track{background:var(--sapSuccessBackground)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-handle{background:var(--sapButton_Background)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-text{justify-content:center;font-size:var(--sapFontSmallSize)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-icon-off,.ui5-switch-root.ui5-switch--semantic .ui5-switch-icon-on{width:.75rem;height:.75rem}.ui5-switch-root.ui5-switch--semantic .ui5-switch-icon-on{color:var(--sapPositiveElementColor)}.ui5-switch-root.ui5-switch--semantic .ui5-switch-icon-off{color:var(--sapNegativeElementColor)}.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--checked) .ui5-switch-handle,.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--checked) .ui5-switch-track{border-color:var(--sapErrorBorderColor)}.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--checked) .ui5-switch-track{background:var(--sapErrorBackground)}.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--checked) .ui5-switch-handle{background:var(--sapButton_Background)}.ui5-switch-desktop.ui5-switch-root:not(.ui5-switch--disabled):hover .ui5-switch-track{border-color:var(--sapButton_Hover_BorderColor);background:var(--sapButton_Track_Background)}.ui5-switch-desktop.ui5-switch-root:not(.ui5-switch--disabled):hover .ui5-switch-handle{background:var(--sapButton_Hover_Background);border-color:var(--sapButton_Hover_BorderColor)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--checked:not(.ui5-switch--disabled):hover .ui5-switch-handle{background:var(--sapButton_Selected_Hover_Background);border-color:var(--sapButton_Hover_BorderColor)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--checked:not(.ui5-switch--disabled):hover .ui5-switch-track{border-color:var(--sapButton_Hover_BorderColor);background:var(--_ui5_switch_track_hover_checked_background_color)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--disabled):hover .ui5-switch-handle{background:var(--_ui5_switch_handle_semantic_hover_bg);border-color:var(--_ui5_switch_handle_semantic_hover_border_color)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--semantic:not(.ui5-switch--disabled):hover .ui5-switch-track{border-color:var(--_ui5_switch_handle_semantic_hover_border_color)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--semantic.ui5-switch--checked:not(.ui5-switch--disabled):hover .ui5-switch-handle{background:var(--_ui5_switch_handle_semantic_checked_hover_bg);border-color:var(--_ui5_switch_handle_semantic_checked_hover_border_color)}.ui5-switch-desktop.ui5-switch-root.ui5-switch--semantic.ui5-switch--checked:not(.ui5-switch--disabled):hover .ui5-switch-track{border-color:var(--_ui5_switch_handle_semantic_checked_hover_border_color)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled .ui5-switch-icon--on,.ui5-switch-root.ui5-switch--semantic:hover .ui5-switch-icon--on{color:var(--_ui5_switch_text_on_semantic_color)}.ui5-switch-root.ui5-switch--semantic.ui5-switch--disabled .ui5-switch-icon--off,.ui5-switch-root.ui5-switch--semantic:hover .ui5-switch-icon--off{color:var(--_ui5_switch_text_off_semantic_color)}[dir=rtl].ui5-switch-root .ui5-switch-handle{left:0;right:-1px}[dir=rtl].ui5-switch-root.ui5-switch--checked .ui5-switch-slider{transform:var(--_ui5_switch_rtl_transform)}[dir=rtl].ui5-switch-root .ui5-switch-text--on{right:var(--_ui5_switch_text_right);left:auto}[dir=rtl].ui5-switch-root .ui5-switch-text--off{right:auto;left:0}";

/**
 * @public
 */
const metadata$K = {
	tag: "ui5-switch",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.Switch.prototype */ {

		/**
		 * Defines if the <code>ui5-switch</code> is checked.
		 * <br><br>
		 * <b>Note:</b> The property can be changed with user interaction,
		 * either by cliking/tapping on the <code>ui5-switch</code>, or by
		 * pressing the <code>Enter</code> or <code>Space</code> key.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		checked: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-switch</code> is disabled.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-switch</code> is noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the text of the <code>ui5-switch</code> when switched on.
		 *
		 * <br><br>
		 * <b>Note:</b> We recommend using short texts, up to 3 letters (larger texts would be cut off).
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		textOn: {
			type: String,
		},

		/**
		 * Defines the text of the <code>ui5-switch</code> when switched off.
		 * <br><br>
		 * <b>Note:</b> We recommend using short texts, up to 3 letters (larger texts would be cut off).
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		textOff: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-switch</code> type.
		 * <br><br>
		 * <b>Note:</b> If <code>graphical</code> type is set,
		 * positive and negative icons will replace the <code>textOn</code> and <code>textOff</code>.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		graphical: {
			type: Boolean,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Switch.prototype */ {

		/**
		 * Fired when the <code>ui5-switch</code> checked state changes.
		 *
		 * @public
		 * @event
		 */
		change: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-switch</code> component is used for changing between binary states.
 * <br>
 * The component can display texts, that will be switched, based on the component state, via the <code>textOn</code> and <code>textOff</code> properties,
 * but texts longer than 3 letters will be cutted off.
 * <br>
 * However, users are able to customize the width of <code>ui5-switch</code> with pure CSS (&lt;ui5-switch style="width: 200px">), and set widths, depending on the texts they would use.
 * <br>
 * Note: the component would not automatically stretch to fit the whole text width.
 *
 * <h3>Keyboard Handling</h3>
 * The state can be changed by pressing the Space and Enter keys.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Switch";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Switch
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-switch
 * @public
 * @since 0.8.0
 */
class Switch extends UI5Element {
	static get metadata() {
		return metadata$K;
	}

	static get styles() {
		return switchCss;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$N;
	}

	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	_onclick(event) {
		this.toggle();
	}

	_onkeydown(event) {
		if (isSpace(event)) {
			event.preventDefault();
		}

		if (isEnter(event)) {
			this.toggle();
		}
	}

	_onkeyup(event) {
		if (isSpace(event)) {
			this.toggle();
		}
	}

	toggle() {
		if (!this.disabled) {
			this.checked = !this.checked;
			this.fireEvent("change");
			// Angular two way data binding;
			this.fireEvent("value-changed");
		}
	}

	get _textOn() {
		return this.graphical ? "" : this.textOn;
	}

	get _textOff() {
		return this.graphical ? "" : this.textOff;
	}

	get tabIndex() {
		return this.disabled ? undefined : "0";
	}

	get classes() {
		const hasLabel = this.graphical || this.textOn || this.textOff;

		return {
			main: {
				"ui5-switch-desktop": isDesktop(),
				"ui5-switch--disabled": this.disabled,
				"ui5-switch--checked": this.checked,
				"ui5-switch--semantic": this.graphical,
				"ui5-switch--no-label": !hasLabel,
			},
		};
	}

	get ariaDisabled() {
		return this.disabled ? "true" : undefined;
	}

	get accessibilityOnText() {
		return this._textOn || this.i18nBundle.getText(SWITCH_ON);
	}

	get accessibilityOffText() {
		return this._textOff || this.i18nBundle.getText(SWITCH_OFF);
	}

	get hiddenText() {
		return this.checked ? this.accessibilityOnText : this.accessibilityOffText;
	}

	static get dependencies() {
		return [Icon];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

Switch.define();

const ICON_MESSAGE_ERROR = {key: "ICON_MESSAGE_ERROR", defaultText: "Error"};const ICON_MESSAGE_INFORMATION = {key: "ICON_MESSAGE_INFORMATION", defaultText: "Information"};const ICON_MESSAGE_SUCCESS = {key: "ICON_MESSAGE_SUCCESS", defaultText: "Successful"};const ICON_MESSAGE_WARNING = {key: "ICON_MESSAGE_WARNING", defaultText: "Warning"};

const name$d = "message-information";
const pathData$d = "M0 256q0-53 20.5-100t55-81.5T157 20t99-20q54 0 100.5 20t81 55 54.5 81.5 20 99.5q0 54-20 100.5t-54.5 81T356 492t-100 20q-54 0-100.5-20t-81-55T20 355.5 0 256zm256 224q47 0 88-17.5t71-48 47.5-71.5 17.5-87q0-47-17.5-87.5t-48-71-71-48T256 32q-46 0-87 18T97.5 98.5t-48 71T32 256q0 47 17.5 88t48 71 71.5 47.5 87 17.5zm-64-112h33V240h-32v-31h95v159h32v33H192v-33zm64-256q13 0 22 9 10 9 10 24 0 13-10 22-9 9-22 9-14 0-23-8.5t-9-22.5 8.5-23.5T256 112z";
const ltr$d = true;
const accData = ICON_MESSAGE_INFORMATION;

registerIcon(name$d, { pathData: pathData$d, ltr: ltr$d, accData });

const name$e = "message-success";
const pathData$e = "M383 163q3 3 1 8L248 382q-3 3-6 3t-4-1l-107-90q-5-3-1-9l27-38q2-3 5-3 2 0 4 2l65 49q2 1 5 1 4 0 5-3l99-162q2-4 6-4 2 0 4 2zm129 93q0 54-20 100.5t-54.5 81T356 492t-100 20q-54 0-100.5-20t-81-55T20 355.5 0 256t20.5-100 55-81.5T157 20t99-20q53 0 100 20t81.5 54.5T492 156t20 100zm-32 0q0-47-17.5-87.5t-48-71-71.5-48T256 32t-87 18-71.5 48.5-48 71T32 256q0 47 17.5 88t48 71 71.5 47.5 87 17.5q47 0 88-17.5t71-47.5 47.5-71 17.5-88z";
const ltr$e = true;
const accData$1 = ICON_MESSAGE_SUCCESS;

registerIcon(name$e, { pathData: pathData$e, ltr: ltr$e, accData: accData$1 });

const name$f = "message-error";
const pathData$f = "M256 0q-53 0-99.5 20T75 75t-55 81.5T0 256t20 100 55 81.5 81.5 54.5 99.5 20 100-20 81.5-54.5T492 356t20-100-20-99.5T437.5 75 356 20 256 0zm0 480q-46 0-87-17.5t-71.5-48-48-71T32 256q0-46 17.5-87t48-71.5 71.5-48T256 32t87 17.5 71.5 48 48 71.5 17.5 87q0 47-17.5 87.5t-48 71-71.5 48-87 17.5zm38-231q-5 3-1 9l89 89q9 8 0 17l-16 17q-8 4-9 4t-9-4l-89-89q-1-2-4-2-4 0-5 2l-88 89q-6 4-9 4-1 0-9-4l-16-17q-8-9 0-17l88-89q5-5 0-9l-88-89q-8-9 0-17l16-17q4-4 9-4t9 4l88 89q2 2 5 2 2 0 4-2l89-89q4-4 9-4t9 4l16 17q9 8 0 17z";
const ltr$f = false;
const accData$2 = ICON_MESSAGE_ERROR;

registerIcon(name$f, { pathData: pathData$f, ltr: ltr$f, accData: accData$2 });

const name$g = "message-warning";
const pathData$g = "M256.1 143.944q12.995 0 23.49 7.997t10.497 24.99l-8.997 83.967-1.999 36.986q-2 20.991-23.99 20.991-7.998 0-15.495-4.998t-7.497-15.993q-1.999-37.986-3.498-61.476t-3-36.486-2.498-17.993l-1-4.998q0-16.993 10.496-24.99t23.491-7.997zm0 205.92q13.994 0 22.991 8.996t8.996 22.99-8.996 22.992-22.991 8.996-22.991-8.996-8.997-22.991 8.997-22.991 22.991-8.997zm244.904 22.99q8.997 18.993 10.996 36.986v5.998q0 30.987-22.991 47.481t-49.98 16.494H73.17q-12.995 0-25.99-4.499t-23.49-12.495-16.994-20.492T.2 414.837q-1-10.995 2.999-20.99t8.996-20.993L197.123 37.985Q220.114-1 258.099-1q36.986 0 58.977 38.985zm-64.974 74.971q42.983 0 42.983-31.987 0-9.997-7.997-27.99l-179.93-333.87q-5.997-11.994-15.494-17.492T257.1 30.988t-17.993 5.498-14.995 17.493L42.184 387.849q-6.998 12.994-6.998 27.989 0 31.987 41.984 31.987h358.86z";
const ltr$g = false;
const accData$3 = ICON_MESSAGE_WARNING;

registerIcon(name$g, { pathData: pathData$g, ltr: ltr$g, accData: accData$3 });

/**
 * @lends sap.ui.webcomponents.main.types.MessageStripType.prototype
 * @public
 */
const MessageStripTypes = {
	/**
	 * Message should be just an information
	 * @public
	 * @type {Information}
	 */
	Information: "Information",

	/**
	 * Message is a success message
	 * @public
	 * @type {Positive}
	 */
	Positive: "Positive",

	/**
	 * Message is an error
	 * @public
	 * @type {Negative}
	 */
	Negative: "Negative",

	/**
	 * Message is a warning
	 * @public
	 * @type {Warning}
	 */
	Warning: "Warning",
};

/**
 * @class
 * Defines different types of MessageStrip.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.MessageStripType
 * @public
 * @enum {string}
 */
class MessageStripType extends DataType {
	static isValid(value) {
		return !!MessageStripTypes[value];
	}
}

MessageStripType.generataTypeAcessors(MessageStripTypes);

const block0$O = (context) => { return scopedHtml`<div class="${classMap(context.classes.root)}" id="${ifDefined(context._id)}" role="note" dir="${ifDefined(context.effectiveDir)}" aria-live="assertive" aria-labelledby="${ifDefined(context._id)}">${ !context.noIcon ? block1$G(context) : undefined }<span class="ui5-hidden-text">${ifDefined(context.hiddenText)}</span><span class="ui5-messagestrip-text"><slot></slot></span>${ !context.noCloseButton ? block4$i(context) : undefined }</div>`; };
const block1$G = (context) => { return scopedHtml`<div class="ui5-messagestrip-icon-wrapper" aria-hidden="true">${ context.iconProvided ? block2$D() : block3$q(context) }</div>`; };
const block2$D = (context) => { return scopedHtml`<slot name="icon"></slot>`; };
const block3$q = (context) => { return scopedHtml`<ui5-icon name="${ifDefined(context.standardIconName)}" class="ui5-messagestrip-icon"></ui5-icon>`; };
const block4$i = (context) => { return scopedHtml`<ui5-button icon="decline" icon-size=".75rem" design="Transparent" class="ui5-messagestrip-close-button" title="${ifDefined(context._closeButtonText)}" @click=${context._closeClick}></ui5-button>`; };


const main$O = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$O(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var messageStripCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block;width:100%}.ui5-messagestrip-root{width:100%;height:100%;display:flex;border-radius:var(--_ui5_messagestrip_border_radius);padding:var(--_ui5_messagestrip_padding);border-width:var(--_ui5_messagestrip_border_width);border-style:solid;box-sizing:border-box;position:relative}.ui5-messagestrip-root-no-icon{padding:var(--_ui5_messagestrip_padding_no_icon)}.ui5-messagestrip-root-no-close-button{padding-right:1rem}.ui5-messagestrip-root--info{background-color:var(--sapInformationBackground);border-color:var(--sapInformationBorderColor);color:var(--sapTextColor)}.ui5-messagestrip-root--info .ui5-messagestrip-icon{color:var(--sapInformativeElementColor)}.ui5-messagestrip-root--positive{background-color:var(--sapSuccessBackground);border-color:var(--sapSuccessBorderColor)}.ui5-messagestrip-root--positive .ui5-messagestrip-icon{color:var(--sapPositiveElementColor)}.ui5-messagestrip-root--negative{background-color:var(--sapErrorBackground);border-color:var(--sapErrorBorderColor)}.ui5-messagestrip-root--negative .ui5-messagestrip-icon{color:var(--sapNegativeElementColor)}.ui5-messagestrip-root--warning{background-color:var(--sapWarningBackground);border-color:var(--sapWarningBorderColor)}.ui5-messagestrip-root--warning .ui5-messagestrip-icon{color:var(--sapCriticalElementColor)}.ui5-messagestrip-icon-wrapper{position:absolute;top:var(--_ui5_messagestrip_icon_top);left:.75rem;box-sizing:border-box}.ui5-messagestrip-text{width:100%;color:var(--sapTextColor);line-height:1.2;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize)}.ui5-messagestrip-close-button{width:var(--_ui5_messagestrip_close_button_size);min-width:var(--_ui5_messagestrip_close_button_size);height:var(--_ui5_messagestrip_close_button_size);min-height:var(--_ui5_messagestrip_close_button_size);position:absolute;right:.125rem;top:.125rem;color:var(--sapTextColor)}.ui5-messagestrip-close-button[active]{color:var(--sapButton_Active_TextColor)}.ui5-messagestrip-root[dir=rtl]{padding-right:2.5rem;padding-left:2rem}[dir=rtl] .ui5-messagestrip-root-no-icon{padding-right:1rem;padding-left:2rem}[dir=rtl] .ui5-messagestrip-root-no-close-button{padding-left:1rem;padding-right:0}[dir=rtl] .ui5-messagestrip-icon-wrapper{right:.75rem;left:0}[dir=rtl] .ui5-messagestrip-close-button{left:.125rem;right:auto}";

/**
 * @public
 */
const metadata$L = {
	tag: "ui5-messagestrip",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.MessageStrip.prototype */ {

		/**
		 * Defines the <code>ui5-messagestrip</code> type.
		 * <br><br>
		 * <b>Note:</b> Available options are <code>"Information"</code>, <code>"Positive"</code>, <code>"Negative"</code>,
		 * and <code>"Warning"</code>.
		 *
		 * @type {MessageStripType}
		 * @defaultvalue "Information"
		 * @public
		 */
		type: {
			type: MessageStripType,
			defaultValue: MessageStripType.Information,
		},

		/**
		 * Defines whether the MessageStrip will show an icon in the beginning.
		 * You can directly provide an icon with the <code>icon</code> slot. Otherwise, the default icon for the type will be used.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noIcon: {
			type: Boolean,
		},

		/**
		 * Defines whether the MessageStrip renders close icon.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noCloseButton: {
			type: Boolean,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.MessageStrip.prototype */ {
		/**
		 * Defines the text of the <code>ui5-messagestrip</code>.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements,
		 * it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},

		/**
		 * Defines the content to be displayed as graphical element within the <code>ui5-messagestrip</code>.
		 * <br><br>
		 * <b>Note:</b> If no icon is given, the default icon for the <code>ui5-messagestrip</code> type will be used.
		 * The SAP-icons font provides numerous options.
		 * <br><br>
		 *
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {HTMLElement}
         * @slot
		 * @public
		 */
		"icon": {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.MessageStrip.prototype */ {

		/**
		 * Fired when the close button is pressed either with a
		 * click/tap or by using the Enter or Space key.
		 *
		 * @event
		 * @public
		 */
		close: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-messagestrip</code> component enables the embedding of app-related messages.
 * It displays 4 types of messages, each with corresponding semantic color and icon: Information, Positive, Warning and Negative.
 * Each message can have a Close button, so that it can be removed from the UI, if needed.
 *
 * <h3>Usage</h3>
 *
 * For the <code>ui5-messagestrip</code> component, you can define whether it displays
 * an icon in the beginning and a close button. Moreover, its size and background
 * can be controlled with CSS.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/MessageStrip";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.MessageStrip
 * @extends UI5Element
 * @tagname ui5-messagestrip
 * @public
 * @since 0.9.0
 */
class MessageStrip extends UI5Element {
	static get metadata() {
		return metadata$L;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$O;
	}

	static get styles() {
		return messageStripCss;
	}

	constructor() {
		super();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	_closeClick() {
		this.fireEvent("close", {});
	}

	static get dependencies() {
		return [
			Icon,
			Button,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	static typeClassesMappings() {
		return {
			"Information": "ui5-messagestrip-root--info",
			"Positive": "ui5-messagestrip-root--positive",
			"Negative": "ui5-messagestrip-root--negative",
			"Warning": "ui5-messagestrip-root--warning",
		};
	}

	static iconMappings() {
		return {
			"Information": "message-information",
			"Positive": "message-success",
			"Negative": "message-error",
			"Warning": "message-warning",
		};
	}

	get hiddenText() {
		return `Message Strip ${this.type} ${this.noCloseButton ? "" : "closable"}`;
	}

	get _closeButtonText() {
		return this.i18nBundle.getText(MESSAGE_STRIP_CLOSE_BUTTON);
	}

	get classes() {
		return {
			root: {
				"ui5-messagestrip-root": true,
				"ui5-messagestrip-root-no-icon": this.noIcon,
				"ui5-messagestrip-root-no-close-button": this.noCloseButton,
				[this.typeClasses]: true,
			},
		};
	}

	get iconProvided() {
		return this.icon.length > 0;
	}

	get standardIconName() {
		return MessageStrip.iconMappings()[this.type];
	}

	get typeClasses() {
		return MessageStrip.typeClassesMappings()[this.type];
	}
}

MessageStrip.define();

const name$h = "multiselect-all";
const pathData$h = "M92 472l80-97 20 19L92 512l-60-59 20-20zm80-285l20 19L92 323l-60-59 20-19 40 38zm0-187l20 19L92 137 32 78l20-21 40 40zm292 65q16 0 16 16 0 6-4.5 11T464 97H273q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h191zm0 191q16 0 16 16 0 6-4.5 11t-11.5 5H273q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h191zm0 192q16 0 16 16 0 6-4.5 11t-11.5 5H273q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h191z";
const ltr$h = true;

registerIcon(name$h, { pathData: pathData$h, ltr: ltr$h});

/**
 * @public
 */
const metadata$M = {
	tag: "ui5-mcb-item",
	properties: /** @lends  sap.ui.webcomponents.main.MultiComboBoxItem.prototype */ {
		/**
		 * Defines the selected state of the <code>ui5-mcb-item</code>.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: { type: Boolean },
	},
};

/**
 * @class
 * The <code>ui5-cb-item</code> represents the item for a <code>ui5-multi-combobox</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.MultiComboBoxItem
 * @extends ComboBoxItem
 * @tagname ui5-mcb-item
 * @public
 */
class MultiComboBoxItem extends ComboBoxItem {
	static get metadata() {
		return metadata$M;
	}
}

MultiComboBoxItem.define();

const block0$P = (context) => { return scopedHtml`<div class="ui5-multi-combobox-root" @focusin=${context.rootFocusIn} @focusout=${context.rootFocusOut}><span id="${ifDefined(context._id)}-hiddenText-nMore" class="ui5-hidden-text">${ifDefined(context.nMoreCountText)}</span>${ context.hasValueState ? block1$H(context) : undefined }<ui5-tokenizer slot="_beginContent" show-more class="ui5-multi-combobox-tokenizer" ?disabled="${context.disabled}" @ui5-show-more-items-press="${ifDefined(context._showMorePopover)}" @ui5-token-delete="${ifDefined(context._tokenDelete)}" @focusout="${context._tokenizerFocusOut}" @click=${context._click} @keydown="${context._onTokenizerKeydown}" ?expanded="${context._tokenizerExpanded}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block2$E(item, index, context)) }</ui5-tokenizer><input id="ui5-multi-combobox-input" .value="${ifDefined(context.value)}" inner-input placeholder="${ifDefined(context.placeholder)}" ?disabled=${context.disabled} ?readonly=${context.readonly} ?required=${context.required} value-state="${ifDefined(context.valueState)}" @input="${context._inputLiveChange}" @change=${context._inputChange} @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click=${context._click} role="combobox" aria-haspopup="listbox" aria-expanded="${ifDefined(context.open)}" aria-autocomplete="both" aria-labelledby="${ifDefined(context._id)}-hiddenText-nMore" aria-describedby="${ifDefined(context.valueStateTextId)}" />${ context.icon ? block4$j() : undefined }${ !context.readonly ? block5$g(context) : undefined }</div>`; };
const block1$H = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`; };
const block2$E = (item, index, context) => { return scopedHtml`${ item.selected ? block3$r(item, index, context) : undefined }`; };
const block3$r = (item, index, context) => { return scopedHtml`<ui5-token ?readonly="${context.readonly}" class="ui5-multi-combobox-token" data-ui5-id="${ifDefined(item._id)}" part="token-${index}" text="${ifDefined(item.text)}"></ui5-token>`; };
const block4$j = (context) => { return scopedHtml`<slot name="icon"></slot>`; };
const block5$g = (context) => { return scopedHtml`<ui5-icon name="slim-arrow-down" input-icon slot="icon" tabindex="-1" @click="${context.togglePopover}" @mousedown="${context._onIconMousedown}" ?pressed="${context.open}" dir="${ifDefined(context.effectiveDir)}" accessible-name="${ifDefined(context._iconAccessibleNameText)}"></ui5-icon>`; };


const main$P = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$P(context);
};

const block0$Q = (context) => { return scopedHtml`<ui5-responsive-popover placement-type="Bottom" horizontal-align="Left" class="ui5-multi-combobox-all-items-responsive-popover" no-arrow _disable-initial-focus @ui5-selection-change=${ifDefined(context._listSelectionChange)} @ui5-after-close=${ifDefined(context._toggle)} @ui5-after-open=${ifDefined(context._toggle)}>${ context._isPhone ? block1$I(context) : undefined }${ !context._isPhone ? block6$c(context) : undefined }<ui5-list separators="None" mode="MultiSelect" class="ui5-multi-combobox-all-items-list">${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block11$5(item, index, context)) }</ui5-list>${ context._isPhone ? block12$5(context) : undefined }</ui5-responsive-popover>${ context.hasValueStateMessage ? block13$5(context) : undefined } `; };
const block1$I = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header" style="${styleMap(context.styles.popoverHeader)}"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context.togglePopover}"></ui5-button></div><div class="row"><div slot="header" class="input-root-phone" value-state="${ifDefined(context.valueState)}"><input .value="${ifDefined(context.value)}" inner-input placeholder="${ifDefined(context.placeholder)}" ?required=${context.required} value-state="${ifDefined(context.valueState)}" @input="${context._inputLiveChange}" @change=${context._inputChange} aria-autocomplete="both" aria-labelledby="${ifDefined(context._id)}-hiddenText-nMore" aria-describedby="${ifDefined(context._id)}-valueStateDesc" /></div><ui5-togglebutton slot="header" class="ui5-multi-combobox-toggle-button" icon="multiselect-all" design="Transparent" ?pressed=${context._showAllItemsButtonPressed} ?disabled=${context.allItemsSelected} @click="${context.filterSelectedItems}"></ui5-togglebutton></div>${ context.hasValueStateMessage ? block2$F(context) : undefined }</div></div>`; };
const block2$F = (context) => { return scopedHtml`<div class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverValueStateMessage)}">${ context.shouldDisplayDefaultValueStateMessage ? block3$s(context) : block4$k(context) }</div>`; };
const block3$s = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block4$k = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block5$h(item)) }`; };
const block5$h = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block6$c = (context) => { return scopedHtml`${ context.hasValueStateMessage ? block7$a(context) : undefined }`; };
const block7$a = (context) => { return scopedHtml`<div slot="header" class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" style=${styleMap(context.styles.popoverValueStateMessage)}>${ context.shouldDisplayDefaultValueStateMessage ? block8$a(context) : block9$6(context) }</div>`; };
const block8$a = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block9$6 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block10$6(item)) }`; };
const block10$6 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block11$5 = (item, index, context) => { return scopedHtml`<ui5-li type="${ifDefined(context._listItemsType)}" ?selected=${item.selected} data-ui5-token-id="${ifDefined(item._id)}">${ifDefined(item.text)}</ui5-li>`; };
const block12$5 = (context) => { return scopedHtml`<div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context.togglePopover}">${ifDefined(context._dialogOkButton)}</ui5-button></div>`; };
const block13$5 = (context) => { return scopedHtml`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block14$5(context) : block15$4(context) }</div></ui5-popover>`; };
const block14$5 = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };
const block15$4 = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block16$3(item)) }`; };
const block16$3 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };


const main$Q = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$Q(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$a = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host{width:var(--_ui5_input_width);min-width:var(--_ui5_input_width);height:var(--_ui5_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);font-style:normal;background-color:var(--sapField_Background);border:1px solid var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}:host([focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-3px}:host([value-state]:not([value-state=None])[focused]){outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}.ui5-input-root{width:100%;height:100%;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit}:host([disabled]){opacity:var(--_ui5_input_disabled_opacity);cursor:default;pointer-events:none;background:var(--sapField_ReadOnly_Background);border-color:var(--sapField_ReadOnly_BorderColor)}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5_input_inner_padding_with_icon)}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}:host([disabled]) [inner-input]:-ms-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]:-ms-input-placeholder{visibility:hidden}[inner-input]:-ms-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit}:host([readonly]){border-color:var(--sapField_ReadOnly_BorderColor);background:var(--sapField_ReadOnly_Background)}:host(:not([value-state]):not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state=None]:not([readonly]):hover){background-color:var(--sapField_Hover_Background);border:1px solid var(--sapField_Hover_BorderColor)}:host([value-state]:not([value-state=None])){border-width:var(--_ui5_input_state_border_width)}:host([value-state=Error]) [inner-input],:host([value-state=Warning]) [inner-input]{font-style:var(--_ui5_input_error_warning_font_style)}:host([value-state=Error]) [inner-input]{font-weight:var(--_ui5_input_error_font_weight)}:host([value-state=Error]:not([readonly])){background-color:var(--sapField_InvalidBackground);border-color:var(--sapField_InvalidColor)}:host([value-state=Error]:not([readonly]):not([disabled])),:host([value-state=Information]:not([readonly]):not([disabled])),:host([value-state=Warning]:not([readonly]):not([disabled])){border-style:var(--_ui5_input_error_warning_border_style)}:host([value-state=Warning]:not([readonly])){background-color:var(--sapField_WarningBackground);border-color:var(--sapField_WarningColor)}:host([value-state=Success]:not([readonly])){background-color:var(--sapField_SuccessBackground);border-color:var(--sapField_SuccessColor);border-width:1px}:host([value-state=Information]:not([readonly])){background-color:var(--sapField_InformationBackground);border-color:var(--sapField_InformationColor);border-width:var(--_ui5-input-information_border_width)}[inner-input]::-ms-clear{height:0;width:0}.ui5-input-icon-root{min-width:var(--_ui5_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot=icon]){padding:var(--_ui5_input_icon_padding)}[input-icon]{color:var(--sapContent_IconColor);cursor:pointer;outline:none;padding:var(--_ui5_input_icon_padding);border-left:1px solid transparent;min-width:1rem;min-height:1rem}[input-icon][pressed]{background:var(--sapButton_Selected_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}[input-icon]:not([pressed]):not(:active):hover{background:var(--sapButton_Lite_Hover_Background)}[input-icon]:hover{border-left:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]:hover{border-left:none;border-right:var(--_ui5_select_hover_icon_left_border)}[input-icon][dir=rtl]{border-left:none;border-right:1px solid transparent}:host(:not([hidden])){display:inline-block;--_ui5_popup_content_padding:0}.ui5-multi-combobox-root{display:flex;overflow:hidden;width:100%;height:100%}.ui5-multi-combobox-tokenizer{max-width:calc(100% - 3rem - var(--_ui5_input_icon_min_width));border:none;width:auto;min-width:0;height:100%}[ui5-multi-combobox]{width:100%}[ui5-multi-combobox] [ui5-tokenizer]{flex:3}";

/**
 * @public
 */
const metadata$N = {
	tag: "ui5-multi-combobox",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.MultiComboBox.prototype */ {
		/**
		 * Defines the <code>ui5-multi-combobox</code> items.
		 * <br><br>
		 * Example: <br>
		 * &lt;ui5-multi-combobox><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-li>Item #1&lt;/ui5-li><br>
		 * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ui5-li>Item #2&lt;/ui5-li><br>
		 * &lt;/ui5-multi-combobox>
		 * <br> <br>
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
			listenFor: { include: ["*"] },
		},

		/**
		* Defines the icon to be displayed in the <code>ui5-multi-combobox</code>.
		*
		* @type {HTMLElement[]}
		* @slot
		* @public
		* @since 1.0.0-rc.9
		*/
	   icon: {
		   type: HTMLElement,
	   },

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-multicombobox</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-select</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.9
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.MultiComboBox.prototype */ {
		/**
		 * Defines the value of the <code>ui5-multi-combobox</code>.
		 * <br><br>
		 * <b>Note:</b> The property is updated upon typing.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Defines a short hint intended to aid the user with data entry when the
		 * <code>ui5-multi-combobox</code> has no value.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		placeholder: {
			type: String,
			defaultValue: "",
		},

		/**
		 * Defines if the user input will be prevented, if no matching item has been found
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		allowCustomValues: {
			type: Boolean,
		},

		/**
		 * Defines whether <code>ui5-multi-combobox</code> is in disabled state.
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-multi-combobox</code> is completely noninteractive.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the value state of the <code>ui5-multi-combobox</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines whether the <code>ui5-multi-combobox</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-multi-combobox</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-multi-combobox</code> is required.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.5
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Indicates whether the dropdown is open. True if the dropdown is open, false otherwise.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @since 1.0.0-rc.5
		 * @public
		 */
		open: {
			type: Boolean,
		},

		_filteredItems: {
			type: Object,
		},


		filterSelected: {
			type: Boolean,
		},

		_rootFocused: {
			type: Boolean,
		},

		_iconPressed: {
			type: Boolean,
			noAttribute: true,
		},

		_inputWidth: {
			type: Integer,
			noAttribute: true,
		},

		_listWidth: {
			type: Integer,
			defaultValue: 0,
			noAttribute: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.MultiComboBox.prototype */ {
		/**
		 * Fired when the input operation has finished by pressing Enter or on focusout.
		 *
		 * @event
		 * @public
		 */
		change: {},

		/**
		 * Fired when the value of the <code>ui5-multi-combobox</code> changes at each keystroke.
		 *
		 * @event
		 * @public
		 */
		input: {},

		/**
		 * Fired when the dropdown is opened or closed.
		 *
		 * @event sap.ui.webcomponents.main.MultiComboBox#open-change
		 * @since 1.0.0-rc.5
		 * @public
		 */
		"open-change": {},

		/**
		 * Fired when selection is changed by user interaction
		 * in <code>SingleSelect</code> and <code>MultiSelect</code> modes.
		 *
		 * @event sap.ui.webcomponents.main.MultiComboBox#selection-change
		 * @param {Array} items an array of the selected items.
		 * @public
		 */
		"selection-change": {
			detail: {
				items: { type: Array },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-multi-combobox</code> component provides a list box with items and a text field allowing the user to either type a value directly into the control, or choose from the list of existing items.
 *
 * It is a drop-down list for selecting and filtering values, commonly used to enable users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow of available options.
 * The select options in the list have checkboxes that permit multi-selection. Entered values are displayed as tokens.
 * <h3>Structure</h3>
 * The <code>ui5-multi-combobox</code> consists of the following elements:
 * <ul>
 * <li> Tokenizer - a list of tokens with selected options.
 * <li> Input field - displays the selected option/s as token/s. Users can type to filter the list.
 * <li> Drop-down arrow - expands\collapses the option list.</li>
 * <li> Option list - the list of available options.</li>
 * </ul>
 * <h3>Keyboard Handling</h3>
 *
 * The <code>ui5-multi-combobox</code> provides advanced keyboard handling.
 *
 * <h4>Picker</h4>
 * If the <code>ui5-multi-combobox</code> is focused,
 * you can open or close the drop-down by pressing <code>F4</code>, <code>ALT+UP</code> or <code>ALT+DOWN</code> keys.
 * Once the drop-down is opened, you can use the <code>UP</code> and <code>DOWN</code> arrow keys
 * to navigate through the available options and select one by pressing the <code>Space</code> or <code>Enter</code> keys.
 * <br>
 *
 * <h4>Tokens</h4>
 * <ul>
 * <li> Left/Right arrow keys - moves the focus selection form the currently focused token to the previous/next one (if available). </li>
 * <li> Delete -  deletes the token and focuses the previous token. </li>
 * <li> Backspace -  deletes the token and focus the next token. </li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/MultiComboBox";</code>
 *
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.MultiComboBox
 * @extends UI5Element
 * @tagname ui5-multi-combobox
 * @public
 * @appenddocs MultiComboBoxItem
 * @since 0.11.0
 */
class MultiComboBox extends UI5Element {
	static get metadata() {
		return metadata$N;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$P;
	}

	static get staticAreaTemplate() {
		return main$Q;
	}

	static get styles() {
		return styles$a;
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, valueStateMessageStyles];
	}

	static get dependencies() {
		return [
			MultiComboBoxItem,
			Tokenizer,
			Token,
			Icon,
			ResponsivePopover,
			List,
			StandardListItem,
			ToggleButton,
			Button,
		];
	}

	constructor() {
		super();

		this._filteredItems = [];
		this._inputLastValue = "";
		this._deleting = false;
		this._validationTimeout = null;
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
		this._handleResizeBound = this._handleResize.bind(this);
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._handleResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this._handleResizeBound);
	}

	_handleResize() {
		this._inputWidth = this.offsetWidth;
	}

	_inputChange() {
		this.fireEvent("change");
	}

	_showMorePopover() {
		this.filterSelected = true;
		this._toggleRespPopover();
	}

	togglePopover() {
		this._toggleRespPopover();

		if (!isPhone()) {
			this._inputDom.focus();
		}
	}

	filterSelectedItems(event) {
		if (this.allItemsSelected) {
			this.filterSelected = true;
			return;
		}

		this.filterSelected = event.target.pressed;
	}

	get _showAllItemsButtonPressed() {
		return this.filterSelected || this.allItemsSelected;
	}

	get allItemsSelected() {
		return this.items.length === this.selectedValues.length;
	}

	get _inputDom() {
		return this.shadowRoot.querySelector("#ui5-multi-combobox-input");
	}

	_inputLiveChange(event) {
		const input = event.target;
		const value = input.value;
		const filteredItems = this._filterItems(value);
		const oldValueState = this.valueState;

		/* skip calling change event when an input with a placeholder is focused on IE
			- value of the host and the internal input should be differnt in case of actual input
			- input is called when a key is pressed => keyup should not be called yet
		*/
		const skipFiring = (this._inputDom.value === this.value) && isIE && !this._keyDown && !!this.placeholder;

		if (skipFiring) {
			event.preventDefault();

			return;
		}

		if (this._validationTimeout) {
			input.value = this._inputLastValue;
			return;
		}

		if (!filteredItems.length && value && !this.allowCustomValues) {
			input.value = this._inputLastValue;
			this.valueState = "Error";

			this._validationTimeout = setTimeout(() => {
				this.valueState = oldValueState;
				this._validationTimeout = null;
			}, 2000);

			return;
		}


		this._inputLastValue = input.value;
		this.value = input.value;
		this._filteredItems = filteredItems;

		if (!isPhone()) {
			if (filteredItems.length === 0) {
				this.allItemsPopover.close();
			} else {
				this.allItemsPopover.open(this);
			}
		}

		this.fireEvent("input");
	}

	_tokenDelete(event) {
		const token = event.detail.ref;
		const deletingItem = this.items.find(item => item._id === token.getAttribute("data-ui5-id"));

		deletingItem.selected = false;
		this._deleting = true;

		this.fireSelectionChange();
	}

	_handleLeft() {
		const cursorPosition = this.getDomRef().querySelector(`input`).selectionStart;

		if (cursorPosition === 0) {
			this._focusLastToken();
		}
	}

	_focusLastToken() {
		const lastTokenIndex = this._tokenizer.tokens.length - 1;

		if (lastTokenIndex < 0) {
			return;
		}

		this._tokenizer.tokens[lastTokenIndex].focus();
		this._tokenizer._itemNav.currentIndex = lastTokenIndex;
	}

	_tokenizerFocusOut(event) {
		const tokenizer = this.shadowRoot.querySelector("[ui5-tokenizer]");
		const tokensCount = tokenizer.tokens.length - 1;

		if (!event.relatedTarget || event.relatedTarget.localName !== "ui5-token") {
			this._tokenizer.tokens.forEach(token => { token.selected = false; });
			this._tokenizer.scrollToStart();
		}

		if (tokensCount === 0 && this._deleting) {
			setTimeout(() => {
				if (!isPhone()) {
					this.shadowRoot.querySelector("input").focus();
				}

				this._deleting = false;
			}, 0);
		}
	}

	_onkeyup() {
		this._keyDown = false;
	}

	async _onkeydown(event) {
		if (isLeft(event)) {
			this._handleLeft(event);
		}

		if (isShow(event) && !this.readonly && !this.disabled) {
			event.preventDefault();
			this._toggleRespPopover();
		}

		if (isDown(event) && this.allItemsPopover.opened && this.items.length) {
			event.preventDefault();
			await this._getList();
			this.list._itemNavigation.current = 0;
			this.list.items[0].focus();
		}

		if (isBackSpace(event) && event.target.value === "") {
			event.preventDefault();

			this._focusLastToken();
		}

		this._keyDown = true;
	}

	_onTokenizerKeydown(event) {
		if (isRight(event)) {
			const lastTokenIndex = this._tokenizer.tokens.length - 1;

			if (this._tokenizer.tokens[lastTokenIndex] === document.activeElement.shadowRoot.activeElement) {
				setTimeout(() => {
					this.shadowRoot.querySelector("input").focus();
				}, 0);
			}
		}
	}

	_filterItems(value) {
		return this.items.filter(item => {
			return item.text
				&& item.text.toLowerCase().startsWith(value.toLowerCase())
				&& (this.filterSelected ? item.selected : true);
		});
	}

	_toggle() {
		this.open = !this.open;
		this.fireEvent("open-change");

		if (!this.open) {
			this._afterClosePopover();
		}
	}

	_getSelectedItems() {
		// Angular 2 way data binding
		this.selectedValues = this.items.filter(item => item.selected);
		return this.selectedValues;
	}

	_listSelectionChange(event) {
		event.target.items.forEach(item => {
			this.items.forEach(mcbItem => {
				if (mcbItem._id === item.getAttribute("data-ui5-token-id")) {
					mcbItem.selected = item.selected;
				}
			});
		});

		this.fireSelectionChange();

		if (!event.detail.selectionComponentPressed && !isSpace(event.detail)) {
			this.allItemsPopover.close();
			this.value = "";
			this.fireEvent("input");
		}
	}

	fireSelectionChange() {
		this.fireEvent("selection-change", { items: this._getSelectedItems() });
		// Angular 2 way data binding
		this.fireEvent("value-changed");
	}

	async _getRespPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.allItemsPopover = staticAreaItem.querySelector(`.ui5-multi-combobox-all-items-responsive-popover`);
	}

	async _getList() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.list = staticAreaItem.querySelector(".ui5-multi-combobox-all-items-list");
	}

	_toggleRespPopover() {
		this.allItemsPopover.toggle(this);
	}

	_click(event) {
		if (isPhone() && !this.readonly && !this._showMorePressed) {
			this.allItemsPopover.open(this);
		}

		this._showMorePressed = false;
	}

	_afterClosePopover() {
		// close device's keyboard and prevent further typing
		if (isPhone()) {
			this.blur();
		}

		this._iconPressed = false;
		this.filterSelected = false;
	}

	onBeforeRendering() {
		const input = this.shadowRoot.querySelector("input");
		this._inputLastValue = this.value;

		if (input && !input.value) {
			this._filteredItems = this.items;
		}

		const filteredItems = this._filterItems(this.value);
		this._filteredItems = filteredItems;
	}

	async onAfterRendering() {
		await this._getRespPopover();
		await this._getList();

		this.toggle(this.shouldDisplayOnlyValueStateMessage);
		this.storeResponsivePopoverWidth();
	}

	get _isPhone() {
		return isPhone();
	}

	_onIconMousedown() {
		this._iconPressed = true;
	}

	storeResponsivePopoverWidth() {
		if (this.open && !this._listWidth) {
			this._listWidth = this.list.offsetWidth;
		}
	}

	toggle(isToggled) {
		if (isToggled && !this.open) {
			this.openPopover();
		} else {
			this.closePopover();
		}
	}

	async openPopover() {
		const popover = await this._getPopover();

		if (popover) {
			popover.openBy(this);
		}
	}

	async closePopover() {
		const popover = await this._getPopover();

		popover && popover.close();
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-popover]");
	}

	get _tokenizer() {
		return this.shadowRoot.querySelector("[ui5-tokenizer]");
	}

	get nMoreCountText() {
		const iTokenCount = this._getSelectedItems().length;

		if (iTokenCount === 0) {
			return this.i18nBundle.getText(TOKENIZER_ARIA_CONTAIN_TOKEN);
		}

		if (iTokenCount === 1) {
			return this.i18nBundle.getText(TOKENIZER_ARIA_CONTAIN_ONE_TOKEN);
		}

		return this.i18nBundle.getText(TOKENIZER_ARIA_CONTAIN_SEVERAL_TOKENS, iTokenCount);
	}

	rootFocusIn() {
		if (!isPhone()) {
			this._rootFocused = true;
		}
	}

	rootFocusOut(event) {
		if (!this.shadowRoot.contains(event.relatedTarget) && !this._deleting) {
			this._rootFocused = false;
		}
	}

	get editable() {
		return !this.readonly;
	}

	get selectedItemsListMode() {
		return this.readonly ? "None" : "MultiSelect";
	}

	get _listItemsType() {
		return this.readonly ? "Inactive" : "Active";
	}

	get hasValueState() {
		return this.valueState !== ValueState.None;
	}

	get hasValueStateMessage() {
		return this.hasValueState && this.valueState !== ValueState.Success;
	}

	get valueStateText() {
		return this.valueStateTextMappings[this.valueState];
	}

	get valueStateTextId() {
		return this.hasValueState ? `${this._id}-valueStateDesc` : undefined;
	}

	get valueStateMessageText() {
		return this.getSlottedNodes("valueStateMessage").map(el => el.cloneNode(true));
	}

	get shouldDisplayDefaultValueStateMessage() {
		return !this.valueStateMessage.length && this.hasValueStateMessage;
	}

	get shouldDisplayOnlyValueStateMessage() {
		return this._rootFocused && this.hasValueStateMessage && !this._iconPressed;
	}

	get valueStateTextMappings() {
		return {
			"Success": this.i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Error": this.i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": this.i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	get _innerInput() {
		if (isPhone()) {
			if (this.allItemsPopover.opened) {
				return this.allItemsPopover.querySelector("input");
			}
		}

		return this.getDomRef().querySelector("#ui5-multi-combobox-input");
	}

	get _headerTitleText() {
		return this.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
	}

	get _iconAccessibleNameText() {
		return this.i18nBundle.getText(ICON_ACCESSIBLE_NAME);
	}

	get _dialogOkButton() {
		return this.i18nBundle.getText(MULTICOMBOBOX_DIALOG_OK_BUTTON);
	}

	get _tokenizerExpanded() {
		return (this._rootFocused || this.open) && !this.readonly;
	}

	get classes() {
		return {
			popoverValueState: {
				"ui5-valuestatemessage-root": true,
				"ui5-valuestatemessage--success": this.valueState === ValueState.Success,
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		return {
			popoverValueStateMessage: {
				"width": `${this._listWidth}px`,
				"min-height": "2.5rem",
				"padding": "0.5625rem 1rem",
				"display": this._listWidth === 0 ? "none" : "inline-block",
			},
			popoverHeader: {
				"width": `${this._inputWidth}px`,
			},
		};
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

MultiComboBox.define();

const block0$R = (context) => { return scopedHtml`<div class="ui5-progress-indicator-root ${classMap(context.classes.root)}" dir="${ifDefined(context.effectiveDir)}" role="progressbar" aria-valuemin="0" aria-valuenow="${ifDefined(context.validatedValue)}" aria-valuemax="100" aria-valuetext="${ifDefined(context.valueStateText)}" aria-disabled="${ifDefined(context._ariaDisabled)}"><div class="ui5-progress-indicator-bar" style="${styleMap(context.styles.bar)}">${ !context.showValueInRemainingBar ? block1$J(context) : undefined }</div><div class="ui5-progress-indicator-remaining-bar">${ context.showValueInRemainingBar ? block4$l(context) : undefined }</div></div>`; };
const block1$J = (context) => { return scopedHtml`${ context.showIcon ? block2$G(context) : undefined }${ !context.hideValue ? block3$t(context) : undefined }`; };
const block2$G = (context) => { return scopedHtml`<ui5-icon name="${ifDefined(context.valueStateIcon)}" class="ui5-progress-indicator-icon"></ui5-icon>`; };
const block3$t = (context) => { return scopedHtml`<span class="ui5-progress-indicator-value">${ifDefined(context.validatedValue)}%</span>`; };
const block4$l = (context) => { return scopedHtml`${ context.showIcon ? block5$i(context) : undefined }${ !context.hideValue ? block6$d(context) : undefined }`; };
const block5$i = (context) => { return scopedHtml`<ui5-icon name="${ifDefined(context.valueStateIcon)}" class="ui5-progress-indicator-icon"></ui5-icon>`; };
const block6$d = (context) => { return scopedHtml`<span class="ui5-progress-indicator-value">${ifDefined(context.validatedValue)}%</span>`; };


const main$R = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$R(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ProgressIndicatorCss = ":host(:not([hidden])){display:inline-block;min-height:1rem;min-width:4rem;width:100%;height:1rem;overflow:hidden}.ui5-progress-indicator-root{box-sizing:border-box;display:flex;align-items:center;background:var(--sapField_Background);border-radius:.5rem;overflow:hidden;height:100%;width:100%;font-size:var(--sapFontSmallSize);font-family:\"72override\",var(--sapFontFamily)}.ui5-progress-indicator-bar{background:var(--_ui5_progress_indicator_value_state_none);justify-content:flex-end;height:100%;display:flex;align-items:center;color:var(--_ui5_progress_indicator_bar_color);transition-property:width;transition-timing-function:linear;box-sizing:border-box;border:var(--_ui5_progress_indicator_bar_border_max);border-radius:.5rem 0 0 .5rem}.ui5-progress-indicator-max-value .ui5-progress-indicator-remaining-bar,.ui5-progress-indicator-min-value .ui5-progress-indicator-bar{border:none}.ui5-progress-indicator-max-value .ui5-progress-indicator-bar{border-radius:.5rem}.ui5-progress-indicator-min-value .ui5-progress-indicator-remaining-bar{border-left:var(--_ui5_progress_indicator_border);border-radius:.5rem}.ui5-progress-indicator-remaining-bar{justify-content:flex-start;height:100%;display:flex;align-items:center;flex-grow:1;flex-basis:0;border:var(--_ui5_progress_indicator_border);border-left:none;border-radius:0 .5rem .5rem 0;box-sizing:border-box;color:var(--_ui5_progress_indicator_color)}.ui5-progress-indicator-value{margin:0 .375rem}.ui5-progress-indicator-icon{margin-left:.375rem;width:var(--sapFontSmallSize);height:var(--sapFontSmallSize);display:var(--_ui5_progress_indicator_icon_visibility)}:host([value-state=Error]) .ui5-progress-indicator-bar{background:var(--_ui5_progress_indicator_value_state_error)}:host([value-state=Warning]) .ui5-progress-indicator-bar{background:var(--_ui5_progress_indicator_value_state_warning)}:host([value-state=Success]) .ui5-progress-indicator-bar{background:var(--_ui5_progress_indicator_value_state_success)}:host([value-state=Information]) .ui5-progress-indicator-bar{background:var(--_ui5_progress_indicator_value_state_information)}:host([disabled]) .ui5-progress-indicator-root{opacity:.5}[dir=rtl] .ui5-progress-indicator-bar{border-radius:0 .5rem .5rem 0;flex-direction:row-reverse;justify-content:flex-start}[dir=rtl].ui5-progress-indicator-max-value .ui5-progress-indicator-remaining-bar,[dir=rtl].ui5-progress-indicator-min-value .ui5-progress-indicator-bar{border:none}[dir=rtl].ui5-progress-indicator-max-value .ui5-progress-indicator-bar{border-radius:.5rem}[dir=rtl] .ui5-progress-indicator-remaining-bar{border:var(--_ui5_progress_indicator_border);border-right:none;border-radius:.5rem 0 0 .5rem;flex-direction:row-reverse;justify-content:flex-end}[dir=rtl].ui5-progress-indicator-min-value .ui5-progress-indicator-remaining-bar{border-right:var(--_ui5_progress_indicator_border);border-radius:.5rem}";

/**
 * @public
 */
const metadata$O = {
	tag: "ui5-progress-indicator",
	properties: /** @lends sap.ui.webcomponents.main.ProgressIndicator.prototype */ {
		/**
		 * Defines whether <code>ui5-progress-indicator</code> is in disabled state.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},
		/**
		 * Defines whether <code>ui5-progress-indicator</code> value is shown.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		hideValue: {
			type: Boolean,
		},
		/**
		 * Specifies the numerical value in percent for the length of the <code>ui5-progress-indicator</code>.
		 *
		 * <b>Note:</b>
		 * If a value greater than 100 is provided, the percentValue is set to 100. In other cases of invalid value, percentValue is set to its default of 0.
		 * @type {Integer}
		 * @defaultvalue 0
		 * @public
		 */
		value: {
			type: Integer,
			defaultValue: 0,
		},
		/**
		 * Defines the value state of the <code>ui5-progress-indicator</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.ProgressIndicator.prototype */ {
		//
	},
	events: /** @lends sap.ui.webcomponents.main.ProgressIndicator.prototype */ {
		//
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * Shows the progress of a process in a graphical way. To indicate the progress,
 * the inside of the <code>ui5-progress-indicator</code> is filled with a color.
 *
 * <h3>Responsive Behavior</h3>
 * You can change the size of the Rating Indicator by changing its <code>width</code> or <code>height</code> CSS properties.
 * <br>
 * Example: <code>&lt;ui5-progress-indicator style="height: 2rem; width: 6rem;">&lt;/ui5-progress-indicator></code>
 *
 * For the <code>ui5-progress-indicator</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/ProgressIndicator.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.ProgressIndicator
 * @extends UI5Element
 * @tagname ui5-progress-indicator
 * @public
 * @since 1.0.0-rc.8
 */
class ProgressIndicator extends UI5Element {
	static get metadata() {
		return metadata$O;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ProgressIndicatorCss;
	}

	static get template() {
		return main$R;
	}

	constructor() {
		super();

		this._previousValue = 0;
		this._transitionDuration = 0;

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this._transitionDuration = Math.abs(this._previousValue - this.validatedValue) * 20;
		this._previousValue = this.validatedValue;
	}

	valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
			"Success": i18nBundle.getText(VALUE_STATE_SUCCESS),
			"Information": i18nBundle.getText(VALUE_STATE_INFORMATION),
		};
	}

	valueStateIconMappings() {
		return {
			"Error": "status-negative",
			"Warning": "status-critical",
			"Success": "status-positive",
			"Information": "hint",
		};
	}

	get styles() {
		return {
			bar: {
				"width": `${this.validatedValue}%`,
				"transition-duration": this.shouldAnimate ? `${this._transitionDuration}ms` : "none",
			},
		};
	}

	get classes() {
		return {
			root: {
				"ui5-progress-indicator-max-value": this.validatedValue === 100,
				"ui5-progress-indicator-min-value": this.validatedValue === 0,
			},
		};
	}

	get validatedValue() {
		if (this.value < 0) {
			return 0;
		}

		if (this.value > 100) {
			return 100;
		}

		return this.value;
	}

	get showValueInRemainingBar() {
		return this.value <= 50;
	}

	get shouldAnimate() {
		return getAnimationMode$1() !== AnimationMode.None;
	}

	get valueStateText() {
		const percentValue = `${this.validatedValue}%`;
		const valueText = this.valueStateTextMappings()[this.valueState];

		return valueText ? `${percentValue} ${valueText}` : percentValue;
	}

	get showIcon() {
		return this.valueState !== ValueState.None;
	}

	get valueStateIcon() {
		return this.valueStateIconMappings()[this.valueState];
	}

	get _ariaDisabled() {
		return this.disabled || undefined;
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

ProgressIndicator.define();

const block0$S = (context) => { return scopedHtml`<div class="ui5-rating-indicator-root" role="slider" aria-roledescription="${ifDefined(context._ariaRoleDescription)}" aria-valuemin="0" aria-valuenow="${ifDefined(context.value)}" aria-valuemax="${ifDefined(context.maxValue)}" aria-orientation="horizontal" aria-disabled="${ifDefined(context._ariaDisabled)}" ?aria-readonly="${context.readOnly}" tabindex="${ifDefined(context.tabIndex)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @click="${context._onclick}" @keydown="${context._onkeydown}" title="${ifDefined(context.tooltip)}" aria-label="${ifDefined(context.ariaLabel)}"><div class="ui5-rating-indicator-stars-wrapper">${ repeat(context._stars, (item, index) => item._id || index, (item, index) => block1$K(item)) }</div></div>`; };
const block1$K = (item, index, context) => { return scopedHtml`${ item.selected ? block2$H(item) : block3$u(item) }`; };
const block2$H = (item, index, context) => { return scopedHtml`<div class="ui5-rating-indicator-icon ui5-rating-indicator-active-icon" data-value="${ifDefined(item.index)}">&#9733;</div>`; };
const block3$u = (item, index, context) => { return scopedHtml`${ item.halfStar ? block4$m(item) : block5$j(item) }`; };
const block4$m = (item, index, context) => { return scopedHtml`<div class="ui5-rating-indicator-icon ui5-rating-indicator-half-icon" data-value="${ifDefined(item.index)}">&#9734;</div>`; };
const block5$j = (item, index, context) => { return scopedHtml`<div class="ui5-rating-indicator-icon" data-value="${ifDefined(item.index)}">&#9734;</div>`; };


const main$S = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$S(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var RatingIndicatorCss = ":host(:not([hidden])){display:inline-block;font-size:1.5rem;cursor:pointer}:host([disabled]){opacity:.6;cursor:auto;outline:none}:host([readonly]){cursor:auto}:host([_focused]){outline:1px dotted var(--sapContent_FocusColor)}.ui5-rating-indicator-root{outline:none}.ui5-rating-indicator-icon{position:relative;color:var(--sapContent_UnratedColor);user-select:none}.ui5-rating-indicator-icon.ui5-rating-indicator-active-icon{color:var(--sapContent_RatedColor)}.ui5-rating-indicator-icon.ui5-rating-indicator-half-icon:before{content:\"\\2605\";position:absolute;top:0;left:0;width:50%;height:100%;color:var(--sapContent_RatedColor);overflow:hidden}.ui5-rating-indicator-stars-wrapper{display:flex}";

/**
 * @public
 */
const metadata$P = {
	tag: "ui5-rating-indicator",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.main.RatingIndicator.prototype */ {

		/**
		 * The indicated value of the rating
		 * <br><br>
		 * <b>Note:</b> If you set a number which is not round, it would be shown as follows:
		 * <ul>
		 * <li>1.0 - 1.2 -> 1</li>
		 * <li>1.3 - 1.7 -> 1.5</li>
		 * <li>1.8 - 1.9 -> 2</li>
		 * <ul>
		 * @type {Float}
		 * @defaultvalue 0
		 * @public
		 */
		value: {
			type: Float,
			defaultValue: 0,
		},

		/**
		 * The number of displayed rating symbols
		 * @type {Integer}
		 * @defaultvalue 5
		 * @public
		 */
		maxValue: {
			type: Integer,
			defaultValue: 5,
		},

		/**
		 * Defines whether the <code>ui5-rating-indicator</code> is disabled.
		 *
		 * <br><br>
		 * <b>Note:</b> A disabled <code>ui5-rating-indicator</code> is completely noninteractive.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-rating-indicator</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-rating-indicator</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines the aria-label attribute for the rating indicator.
		 * @type {String}
		 * @defaultvalue: undefined
		 * @private
		 * @since 1.0.0-rc.8
		 */
		ariaLabel: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Defines the tooltip for the rating indicator.
		 * @type {String}
		 * @defaultvalue: undefined
		 * @private
		 * @since 1.0.0-rc.8
		 */
		title: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * @private
		 */
		_stars: {
			type: Object,
			multiple: true,
		},

		/**
		 * @private
		 */
		_focused: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.RatingIndicator.prototype */ {
		//
	},
	events: /** @lends sap.ui.webcomponents.main.RatingIndicator.prototype */ {

		/**
		 * The event is fired when the value changes.
		 *
		 * @event
		 * @public
		 */
		change: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The rating indicator is used to display a specific number of icons that are used to rate an item.
 * Additionally, it is also used to display the average and overall ratings.
 *
 * <h3>Usage</h3>
 * The reccomended number of icons is between 5 and 7.
 *
 * <h3>Responsive Behavior</h3>
 * You can change the size of the Rating Indicator by changing its <code>font-size</code> CSS property.
 * <br>
 * Example: <code>&lt;ui5-rating-indicator style="font-size: 3rem;">&lt;/ui5-rating-indicator></code>
 *
 * <h3>Usage</h3>
 *
 * For the <code>ui5-rating-indicator</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/RatingIndicator.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.RatingIndicator
 * @extends UI5Element
 * @tagname ui5-rating-indicator
 * @public
 * @since 1.0.0-rc.8
 */
class RatingIndicator extends UI5Element {
	static get metadata() {
		return metadata$P;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return RatingIndicatorCss;
	}

	static get template() {
		return main$S;
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	constructor() {
		super();

		this._liveValue = null; // stores the value to determine when to fire change
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		this.calcState();
	}

	calcState() {
		this._stars = [];

		for (let i = 1; i < this.maxValue + 1; i++) {
			const remainder = Math.round((this.value - Math.floor(this.value)) * 10);
			let halfStar = false,
				tempValue = this.value;

			if (Math.floor(this.value) + 1 === i && remainder > 2 && remainder < 8) {
				halfStar = true;
			} else if (remainder <= 2) {
				tempValue = Math.floor(this.value);
			} else if (remainder >= 8) {
				tempValue = Math.ceil(this.value);
			}

			this._stars.push({
				selected: i <= tempValue,
				index: i,
				halfStar,
			});
		}
	}

	_onclick(event) {
		if (this.disabled || this.readonly) {
			return;
		}

		this.value = parseInt(event.target.getAttribute("data-value"));

		if (this.value === 1 && this._liveValue === 1) {
			this.value = 0;
		}

		if (this._liveValue !== this.value) {
			this.fireEvent("change");
			this._liveValue = this.value;
		}
	}

	_onkeydown(event) {
		if (this.disabled || this.readonly) {
			return;
		}

		const down = isDown(event) || isLeft(event);
		const up = isRight(event) || isUp(event) || isSpace(event) || isEnter(event);

		if (down || up) {
			event.preventDefault();

			if (down && this.value > 0) {
				this.value = Math.round(this.value - 1);
				this.fireEvent("change");
			} else if (up && this.value < this.maxValue) {
				this.value = Math.round(this.value + 1);
				this.fireEvent("change");
			}
		}
	}

	_onfocusin() {
		if (this.disabled) {
			return;
		}

		this._focused = true;
		this._liveValue = this.value;
	}

	_onfocusout() {
		this._focused = false;
	}

	get tabIndex() {
		return this.disabled ? "-1" : "0";
	}

	get tooltip() {
		return this.title || this.defaultTooltip;
	}

	get defaultTooltip() {
		return this.i18nBundle.getText(RATING_INDICATOR_TOOLTIP_TEXT);
	}

	get _ariaRoleDescription() {
		return this.i18nBundle.getText(RATING_INDICATOR_TEXT);
	}

	get _ariaDisabled() {
		return this.disabled || undefined;
	}
}

RatingIndicator.define();

const name$i = "slim-arrow-up";
const pathData$i = "M261.5 197q-6-6-11 0l-160 160q-5 5-11.5 5t-11.5-5-5-11.5 5-11.5l166-165q9-9 22-9t23 9l165 165q5 5 5 11t-5 11q-12 12-23 0z";
const ltr$i = false;

registerIcon(name$i, { pathData: pathData$i, ltr: ltr$i});

/**
 * @lends sap.ui.webcomponents.main.types.TabContainerTabsPlacement.prototype
 * @public
 */
const TabContainerTabsPlacements = {
	/**
	 * The tab strip is displayed above the tab content (Default)
	 * @public
	 * @type {Top}
	 */
	Top: "Top",

	/**
	 * The tab strip is displayed below the tab content
	 * @public
	 * @type {Bottom}
	 */
	Bottom: "Bottom",
};

/**
 * @class
 * Different options for the position of the tab strip relative to the tab content area.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.TabContainerTabsPlacement
 * @public
 * @enum {string}
 */
class TabContainerTabsPlacement extends DataType {
	static isValid(value) {
		return !!TabContainerTabsPlacements[value];
	}
}

TabContainerTabsPlacement.generataTypeAcessors(TabContainerTabsPlacements);

const block0$T = (context) => { return scopedHtml`<div class="${classMap(context.classes.root)}" dir="${ifDefined(context.effectiveDir)}">${ context.tabsAtTheBottom ? block1$L(context) : undefined }<div class="${classMap(context.classes.header)}" id="${ifDefined(context._id)}-header"><ui5-icon @click="${context._onHeaderBackArrowClick}" class="${classMap(context.classes.headerBackArrow)}" name="slim-arrow-left" tabindex="-1" accessible-name="${ifDefined(context.previousIconACCName)}" show-tooltip></ui5-icon><!-- tab items --><div class="${classMap(context.classes.headerScrollContainer)}" id="${ifDefined(context._id)}-headerScrollContainer"><ul role="tablist" class="${classMap(context.classes.headerList)}" @click="${context._onHeaderClick}" @keydown="${context._onHeaderKeyDown}" @keyup="${context._onHeaderKeyUp}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block4$n(item, index, context)) }</ul></div><ui5-icon @click="${context._onHeaderForwardArrowClick}" class="${classMap(context.classes.headerForwardArrow)}" name="slim-arrow-right" tabindex="-1" accessible-name="${ifDefined(context.nextIconACCName)}" show-tooltip></ui5-icon><!-- overflow button -->${ context.shouldShowOverflow ? block7$b(context) : undefined }</div>${ !context.tabsAtTheBottom ? block10$7(context) : undefined }</div> `; };
const block1$L = (context) => { return scopedHtml`<div class="${classMap(context.classes.content)}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block2$I(item)) }</div>`; };
const block2$I = (item, index, context) => { return scopedHtml`${ !item.isSeparator ? block3$v(item) : undefined }`; };
const block3$v = (item, index, context) => { return scopedHtml`<div class="ui5-tc__contentItem" id="ui5-tc-contentItem-${ifDefined(item._posinset)}" ?hidden="${item.effectiveHidden}" role="tabpanel" aria-labelledby="${ifDefined(item._id)}"><slot name="${ifDefined(item._individualSlot)}"></slot></div>`; };
const block4$n = (item, index, context) => { return scopedHtml`${ !item.isSeparator ? block5$k(item) : undefined }${ item.isSeparator ? block6$e(item, index, context) : undefined }`; };
const block5$k = (item, index, context) => { return scopedHtml`${ifDefined(item.stripPresentation)}`; };
const block6$e = (item, index, context) => { return scopedHtml`<li id="${ifDefined(item._id)}" role="separator" class="${classMap(context.classes.separator)}" style="list-style-type: none;"></li>`; };
const block7$b = (context) => { return scopedHtml`<div class="ui-tc__overflowButton" @click="${context._onOverflowButtonClick}">${ context.overflowButton.length ? block8$b() : block9$7(context) }</div>`; };
const block8$b = (context) => { return scopedHtml`<slot name="overflowButton"></slot>`; };
const block9$7 = (context) => { return scopedHtml`<ui5-button icon="${ifDefined(context.overflowMenuIcon)}" design="Transparent" aria-label="${ifDefined(context.overflowMenuTitle)}" aria-haspopup="true"></ui5-button>`; };
const block10$7 = (context) => { return scopedHtml`<div class="${classMap(context.classes.content)}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block11$6(item)) }</div>`; };
const block11$6 = (item, index, context) => { return scopedHtml`${ !item.isSeparator ? block12$6(item) : undefined }`; };
const block12$6 = (item, index, context) => { return scopedHtml`<div class="ui5-tc__contentItem" id="ui5-tc-contentItem-${ifDefined(item._posinset)}" ?hidden="${item.effectiveHidden}" role="tabpanel" aria-labelledby="${ifDefined(item._id)}"><slot name="${ifDefined(item._individualSlot)}"></slot></div>`; };


const main$T = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$T(context);
};

const block0$U = (context) => { return scopedHtml`<ui5-responsive-popover id="${ifDefined(context._id)}-overflowMenu" horizontal-align="Right" placement-type="Bottom" content-only-on-desktop with-padding no-arrow _hide-header><ui5-list @ui5-item-press="${ifDefined(context._onOverflowListItemSelect)}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block1$M(item)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">Cancel</ui5-button></div></ui5-responsive-popover>`; };
const block1$M = (item, index, context) => { return scopedHtml`${ !item.isSeparator ? block2$J(item) : undefined }`; };
const block2$J = (item, index, context) => { return scopedHtml`${ifDefined(item.overflowPresentation)}`; };


const main$U = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$U(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var tabContainerCss = ":host(:not([hidden])){display:inline-block;width:100%}.ui5-tc-root{display:flex;flex-direction:column;width:100%;height:100%;font-family:\"72override\",var(--sapFontFamily);font-size:1rem}.ui5-tc__header{display:flex;align-items:center;height:var(--_ui5_tc_header_height);background-color:var(--sapObjectHeader_Background);box-shadow:var(--sapContent_HeaderShadow);box-sizing:border-box}:host([tabs-placement=Bottom]) .ui5-tc__header{border-top:var(--_ui5_tc_header_border_bottom)}.ui5-tc-root.ui5-tc--textOnly .ui5-tc__header{height:var(--_ui5_tc_header_height_text_only)}.ui-tc__headerScrollContainer{box-sizing:border-box;overflow:hidden;flex:1}.ui5-tc__headerList{display:flex;margin:0;padding:0;list-style:none}.ui5-tc__separator{width:0;border-left:2px solid var(--sapList_BorderColor);margin:.5rem .25rem}.ui5-tc__separator:focus{outline:none}.ui5-tc__headerArrow{cursor:pointer;color:var(--sapContent_IconColor);padding:0 .25rem;visibility:hidden}.ui5-tc__headerArrow:active,.ui5-tc__headerArrow:hover{color:var(--sapHighlightColor)}.ui5-tc__headerArrow--visible{visibility:visible}.ui-tc__overflowButton{margin-left:auto;margin-right:.25rem}.ui5-tc-root.ui5-tc--textOnly .ui5-tc__content{height:calc(100% - var(--_ui5_tc_header_height_text_only))}.ui5-tc__content{position:relative;display:flex;height:calc(100% - var(--_ui5_tc_header_height));padding:1rem;background-color:var(--sapGroup_ContentBackground);border-bottom:var(--_ui5_tc_content_border_bottom);box-sizing:border-box}:host([tabs-placement=Bottom]) .ui5-tc__content{border-top:var(--_ui5_tc_content_border_bottom)}.ui5-tc__content--collapsed{display:none}.ui5-tc--transparent .ui5-tc__content{background-color:transparent}.ui5-tc__contentItem{max-height:100%;display:flex;flex-grow:1;overflow:auto}.ui5-tc__contentItem[hidden]{display:none}[dir=rtl] .ui-tc__overflowButton{margin-right:auto;margin-left:.25rem}";

/**
 * @lends sap.ui.webcomponents.main.types.TabLayout.prototype
 * @public
 */
const TabLayouts = {
	/**
	 * Inline type, the tab <code>main text</code> and <code>additionalText</code> are displayed horizotally.
	 * @public
	 * @type {Inline}
	 */
	Inline: "Inline",

	/**
	 * Standard type, the tab <code>main text</code> and <code>additionalText</code> are displayed vertically.
	 * @public
	 * @type {Standard}
	 */
	Standard: "Standard",
};

/**
 * @class
 * Different types of Tab layouts.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.TabLayout
 * @public
 * @enum {string}
 */
class TabLayout extends DataType {
	static isValid(value) {
		return !!TabLayouts[value];
	}
}

TabLayout.generataTypeAcessors(TabLayouts);

const SCROLL_STEP = 128;

const tabStyles = [];
const staticAreaTabStyles = [];

/**
 * @public
 */
const metadata$Q = {
	tag: "ui5-tabcontainer",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends  sap.ui.webcomponents.main.TabContainer.prototype */ {
		/**
		 * Defines the tabs.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-tab</code> and <code>ui5-tab-separator</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @public
		 * @slot
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
			individualSlots: true,
			listenFor: { include: ["*"] },
		},

		/**
		 * Defines the button which will open the overflow menu. If nothing is provided to this slot, the default button will be used.
		 *
		 * @type {HTMLElement[]}
		 * @public
		 * @slot
		 * @since 1.0.0-rc.9
		 */
		overflowButton: {
			type: HTMLElement,
		},
	},
	properties: /** @lends  sap.ui.webcomponents.main.TabContainer.prototype */ {
		/**
		 * Defines whether the tabs are in a fixed state that is not
		 * expandable/collapsible by user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		fixed: {
			type: Boolean,
		},

		/**
		 * Defines whether the tab content is collapsed.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		collapsed: {
			type: Boolean,
		},

		/**
		 * Defines the placement of the tab strip (tab buttons area) relative to the actual tabs' content.
		 * <br><br>
		 * <b>Note:</b> By default the tab strip is displayed above the tabs' content area and this is the recommended
		 * layout for most scenarios. Set to <code>Bottom</code> only when the <code>ui5-tabcontainer</code> is at the
		 * bottom of the page and you want the tab strip to act as a menu.
		 *
		 * @type {TabContainerTabsPlacement}
		 * @defaultvalue "Top"
		 * @since 1.0.0-rc.7
		 * @public
		 */
		tabsPlacement: {
			type: TabContainerTabsPlacement,
			defaultValue: TabContainerTabsPlacement.Top,
		},

		/**
		 * Defines whether the overflow select list is displayed.
		 * <br><br>
		 * The overflow select list represents a list, where all tab filters are displayed
		 * so that it's easier for the user to select a specific tab filter.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showOverflow: {
			type: Boolean,
		},

		/**
		 * Defines the alignment of the <code>main text</code> and the <code>additionalText</code> of a tab.
		 *
		 * <br><br>
		 * <b>Note:</b>
		 * The <code>main text</code> and the <code>additionalText</code> would be displayed vertically by defualt,
		 * but when set to <code>Inline</code>, they would be displayed horizontally.
		 *
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>Standard</code></li>
		 * <li><code>Inline</code></li>
		 * <ul>
		 *
		 * @type {TabLayout}
		 * @defaultvalue "Standard"
		 * @public
		 */
		tabLayout: {
			type: String,
			defaultValue: TabLayout.Standard,
		},

		_selectedTab: {
			type: Object,
		},

		_scrollable: {
			type: Boolean,
			noAttribute: true,
		},

		_scrollableBack: {
			type: Boolean,
			noAttribute: true,
		},

		_scrollableForward: {
			type: Boolean,
			noAttribute: true,
		},

		_animationRunning: {
			type: Boolean,
			noAttribute: true,
		},

		_contentCollapsed: {
			type: Boolean,
			noAttribute: true,
		},
	},
	events: /** @lends  sap.ui.webcomponents.main.TabContainer.prototype */ {

		/**
		 * Fired when a tab is selected.
		 *
		 * @event sap.ui.webcomponents.main.TabContainer#tab-select
		 * @param {HTMLElement} tab The selected <code>tab</code>.
		 * @param {Number} tabIndex The selected <code>tab</code> index.
		 * @public
		 */
		"tab-select": {
			tab: { type: HTMLElement },
			tabIndex: { type: Number },
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-tabcontainer</code> represents a collection of tabs with associated content.
 * Navigation through the tabs changes the content display of the currently active content area.
 * A tab can be labeled with text only, or icons with text.
 *
 * <h3>Structure</h3>
 *
 * The <code>ui5-tabcontainer</code> can hold two types of entities:
 * <ul>
 * <li><code>ui5-tab</code> - contains all the information on an item (text and icon)</li>
 * <li><code>ui5-tab-separator</code> - used to separate tabs with a vertical line</li>
 * </ul>
 *
 * <h3>ES6 import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/TabContainer";</code>
 * <br>
 * <code>import "@ui5/webcomponents/dist/Tab";</code> (for <code>ui5-tab</code>)
 * <br>
 * <code>import "@ui5/webcomponents/dist/TabSeparator";</code> (for <code>ui5-tab-separator</code>)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TabContainer
 * @extends sap.ui.webcomponents.base.UI5Element
 * @appenddocs Tab TabSeparator
 * @tagname ui5-tabcontainer
 * @public
 */
class TabContainer extends UI5Element {
	static get metadata() {
		return metadata$Q;
	}

	static get styles() {
		return [tabStyles, tabContainerCss];
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, staticAreaTabStyles];
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$T;
	}

	static get staticAreaTemplate() {
		return main$U;
	}

	static registerTabStyles(styles) {
		tabStyles.push(styles);
	}

	static registerStaticAreaTabStyles(styles) {
		staticAreaTabStyles.push(styles);
	}

	constructor() {
		super();

		this._handleHeaderResize = this._handleHeaderResize.bind(this);

		// Init ScrollEnablement
		this._scrollEnablement = new ScrollEnablement(this);
		this._scrollEnablement.attachEvent("scroll", this._updateScrolling.bind(this));

		// Init ItemNavigation
		this._initItemNavigation();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onBeforeRendering() {
		// Set external properties to items
		this.items.filter(item => !item.isSeparator).forEach((item, index, arr) => {
			item._isInline = this.tabLayout === TabLayout.Inline;
			item._mixedMode = this.mixedMode;
			item._posinset = index + 1;
			item._setsize = arr.length;
			item._getTabContainerHeaderItemCallback = _ => {
				return this.getDomRef().querySelector(`#${item._id}`);
			};
			item._itemSelectCallback = this._onItemSelect.bind(this);
		});

		if (!this._animationRunning) {
			this._contentCollapsed = this.collapsed;
		}
	}

	onAfterRendering() {
		this._scrollEnablement.scrollContainer = this._getHeaderScrollContainer();
		this._updateScrolling();
	}

	onEnterDOM() {
		ResizeHandler.register(this._getHeader(), this._handleHeaderResize);
	}

	onExitDOM() {
		ResizeHandler.deregister(this._getHeader(), this._handleHeaderResize);
	}

	_onHeaderClick(event) {
		const tab = getTab(event.target);
		if (!tab) {
			return;
		}

		this._onHeaderItemSelect(tab);
	}

	_onHeaderKeyDown(event) {
		const tab = getTab(event.target);
		if (!tab) {
			return;
		}

		if (isEnter(event)) {
			this._onHeaderItemSelect(tab);
		}

		// Prevent Scrolling
		if (isSpace(event)) {
			event.preventDefault();
		}
	}

	_onHeaderKeyUp(event) {
		const tab = getTab(event.target);
		if (!tab) {
			return;
		}

		if (isSpace(event)) {
			this._onHeaderItemSelect(tab);
		}
	}

	_initItemNavigation() {
		this._itemNavigation = new ItemNavigation(this);
		this._itemNavigation.getItemsCallback = () => this._getTabs();
	}

	_onHeaderItemSelect(tab) {
		if (!tab.hasAttribute("disabled")) {
			this._onItemSelect(tab);
		}
	}

	_onOverflowListItemSelect(event) {
		this._onItemSelect(event.detail.item);
		this.responsivePopover.close();
		this.shadowRoot.querySelector(`#${event.detail.item.id}`).focus();
	}

	_onItemSelect(target) {
		const selectedIndex = findIndex(this.items, item => item._id === target.id);
		const selectedTabIndex = findIndex(this._getTabs(), item => item._id === target.id);
		const selectedTab = this.items[selectedIndex];

		// update selected items
		this.items.forEach((item, index) => {
			if (!item.isSeparator) {
				const selected = selectedIndex === index;
				item.selected = selected;

				if (selected) {
					this._itemNavigation.current = selectedTabIndex;
				}
			}
		}, this);

		if (this.fixed) {
			this.selectTab(selectedTab, selectedTabIndex);
			return;
		}

		if (!this.animate) {
			this.toggle(selectedTab);
			this.selectTab(selectedTab, selectedTabIndex);
			return;
		}

		this.toggleAnimated(selectedTab);
		this.selectTab(selectedTab, selectedTabIndex);
	}

	async toggleAnimated(selectedTab) {
		const content = this.shadowRoot.querySelector(".ui5-tc__content");
		let animationPromise = null;

		this._animationRunning = true;

		if (selectedTab === this._selectedTab) {
			// click on already selected tab - animate both directions
			this.collapsed = !this.collapsed;
			animationPromise = this.collapsed ? this.slideContentUp(content) : this.slideContentDown(content);
		} else {
			// click on new tab - animate if the content is currently collapsed
			animationPromise = this.collapsed ? this.slideContentDown(content) : Promise.resolve();
			this.collapsed = false;
		}

		await animationPromise;
		this._contentCollapsed = this.collapsed;
		this._animationRunning = false;
	}

	toggle(selectedTab) {
		if (selectedTab === this._selectedTab) {
			this.collapsed = !this.collapsed;
		} else {
			this.collapsed = false;
		}
	}

	selectTab(selectedTab, selectedTabIndex) {
		// select the tab
		this._selectedTab = selectedTab;
		this.fireEvent("tab-select", {
			tab: selectedTab,
			tabIndex: selectedTabIndex,
		});
	}

	slideContentDown(element) {
		return slideDown({ element }).promise();
	}

	slideContentUp(element) {
		return slideUp({ element }).promise();
	}

	async _onOverflowButtonClick(event) {
		const button = this.overflowButton[0] || this.getDomRef().querySelector(".ui-tc__overflowButton > ui5-button");

		if (event.target !== button) {
			return;
		}

		this.responsivePopover = await this._respPopover();
		this.updateStaticAreaItemContentDensity();
		if (this.responsivePopover.opened) {
			this.responsivePopover.close();
		} else {
			this.responsivePopover.open(button);
		}
	}

	_onHeaderBackArrowClick() {
		this._scrollEnablement.move(-SCROLL_STEP, 0).promise()
			.then(_ => this._updateScrolling());
	}

	_onHeaderForwardArrowClick() {
		this._scrollEnablement.move(SCROLL_STEP, 0).promise()
			.then(_ => this._updateScrolling());
	}

	_handleHeaderResize() {
		this._updateScrolling();
	}

	async _closeRespPopover() {
		this.responsivePopover = await this._respPopover();
		this.responsivePopover.close();
	}

	_updateScrolling() {
		const headerScrollContainer = this._getHeaderScrollContainer();

		this._scrollable = headerScrollContainer.offsetWidth < headerScrollContainer.scrollWidth;
		this._scrollableBack = headerScrollContainer.scrollLeft > 0;
		this._scrollableForward = Math.ceil(headerScrollContainer.scrollLeft) < headerScrollContainer.scrollWidth - headerScrollContainer.offsetWidth;

		if (!this._scrollable) {
			this._closeRespPopover();
		}
	}

	_getHeader() {
		return this.shadowRoot.querySelector(`#${this._id}-header`);
	}

	_getTabs() {
		return this.items.filter(item => !item.isSeparator);
	}

	_getHeaderScrollContainer() {
		return this.shadowRoot.querySelector(`#${this._id}-headerScrollContainer`);
	}

	async _respPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector(`#${this._id}-overflowMenu`);
	}

	get shouldShowOverflow() {
		return this.showOverflow && this._scrollable;
	}

	get classes() {
		return {
			root: {
				"ui5-tc-root": true,
				"ui5-tc--textOnly": this.textOnly,
			},
			header: {
				"ui5-tc__header": true,
				"ui5-tc__header--scrollable": this._scrollable,
			},
			headerScrollContainer: {
				"ui-tc__headerScrollContainer": true,
			},
			headerList: {
				"ui5-tc__headerList": true,
			},
			separator: {
				"ui5-tc__separator": true,
			},
			headerBackArrow: {
				"ui5-tc__headerArrow": true,
				"ui5-tc__headerArrowLeft": true,
				"ui5-tc__headerArrow--visible": this._scrollableBack,
			},
			headerForwardArrow: {
				"ui5-tc__headerArrow": true,
				"ui5-tc__headerArrowRight": true,
				"ui5-tc__headerArrow--visible": this._scrollableForward,
			},
			content: {
				"ui5-tc__content": true,
				"ui5-tc__content--collapsed": this._contentCollapsed,
			},
		};
	}

	get mixedMode() {
		return this.items.some(item => item.icon) && this.items.some(item => item.text);
	}

	get textOnly() {
		return this.items.every(item => !item.icon);
	}

	get previousIconACCName() {
		return this.i18nBundle.getText(TABCONTAINER_PREVIOUS_ICON_ACC_NAME);
	}

	get nextIconACCName() {
		return this.i18nBundle.getText(TABCONTAINER_NEXT_ICON_ACC_NAME);
	}

	get overflowMenuTitle() {
		return this.i18nBundle.getText(TABCONTAINER_OVERFLOW_MENU_TITLE);
	}

	get tabsAtTheBottom() {
		return this.tabsPlacement === TabContainerTabsPlacement.Bottom;
	}

	get overflowMenuIcon() {
		return this.tabsAtTheBottom ? "slim-arrow-up" : "slim-arrow-down";
	}

	get animate() {
		return getAnimationMode$1() !== AnimationMode.None;
	}

	static get dependencies() {
		return [
			Button,
			Icon,
			List,
			ResponsivePopover,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

const isTabLi = el => el.localName === "li" && el.getAttribute("role") === "tab";

const getTab = el => {
	while (el) {
		if (isTabLi(el)) {
			return el;
		}

		el = el.parentElement;
	}

	return false;
};

const findIndex = (arr, predicate) => {
	for (let i = 0; i < arr.length; i++) {
		const result = predicate(arr[i]);

		if (result) {
			return i;
		}
	}

	return -1;
};

TabContainer.define();

/**
 * @lends sap.ui.webcomponents.main.types.SemanticColor.prototype
 * @public
 */
const SemanticColors = {
	/**
	 * Default color (brand color)
	 * @public
	 * @type {Default}
	 */
	Default: "Default",

	/**
	 * Positive color
	 * @public
	 * @type {Positive}
	 */
	Positive: "Positive",

	/**
	 * Negative color
	 * @public
	 * @type {Negative}
	 */
	Negative: "Negative",

	/**
	 * Critical color
	 * @public
	 * @type {Critical}
	 */
	Critical: "Critical",

	/**
	 * Neutral color.
	 * @public
	 * @type {Neutral}
	 */
	Neutral: "Neutral",
};

/**
 * @class
 * Defines the semantic color
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.SemanticColor
 * @public
 * @enum {string}
 */
class SemanticColor extends DataType {
	static isValid(value) {
		return !!SemanticColors[value];
	}
}

SemanticColor.generataTypeAcessors(SemanticColors);

const block0$V = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" @mouseup="${context._onmouseup}" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @touchend="${context._ontouchend}" @click="${context._onclick}" aria-selected="${ifDefined(context.ariaSelected)}" role="${ifDefined(context._accInfo.role)}" aria-expanded="${ifDefined(context._accInfo.ariaExpanded)}" aria-level="${ifDefined(context._accInfo.ariaLevel)}" style="list-style-type: none;">${ context.placeSelectionElementBefore ? block1$N(context) : undefined }<div id="${ifDefined(context._id)}-content" class="ui5-li-content"><slot></slot></div>${ context.typeDetail ? block5$l(context) : undefined }${ context.placeSelectionElementAfter ? block6$f(context) : undefined }</li> `; };
const block1$N = (context) => { return scopedHtml`${ context.modeSingleSelect ? block2$K(context) : undefined }${ context.modeMultiSelect ? block3$w(context) : undefined }${ context.modeDelete ? block4$o(context) : undefined }`; };
const block2$K = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block3$w = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block4$o = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };
const block5$l = (context) => { return scopedHtml`<div class="ui5-li-detailbtn"><ui5-button design="Transparent" icon="edit" @click="${context.onDetailClick}"></ui5-button></div>`; };
const block6$f = (context) => { return scopedHtml`${ context.modeSingleSelect ? block7$c(context) : undefined }${ context.modeMultiSelect ? block8$c(context) : undefined }${ context.modeDelete ? block9$8(context) : undefined }`; };
const block7$c = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block8$c = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block9$8 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };


const main$V = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$V(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var customListItemCss = ":host(:not([hidden])){display:block}:host{height:var(--_ui5_custom_list_item_height);box-sizing:border-box}.ui5-li-root.ui5-custom-li-root{padding:0;pointer-events:inherit}.ui5-li-root.ui5-custom-li-root .ui5-li-content{pointer-events:inherit}[ui5-checkbox].ui5-li-singlesel-radiobtn,[ui5-radiobutton].ui5-li-singlesel-radiobtn{display:flex;align-items:center}.ui5-li-root.ui5-custom-li-root,[ui5-checkbox].ui5-li-singlesel-radiobtn,[ui5-radiobutton].ui5-li-singlesel-radiobtn{min-width:var(--_ui5_custom_list_item_rb_min_width)}";

/**
 * @public
 */
const metadata$R = {
	tag: "ui5-li-custom",
	slots: /** @lends sap.ui.webcomponents.main.CustomListItem.prototype */ {

		/**
		 * Defines the content of the <code>ui5-li-custom</code>.
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.CustomListItem.prototype */ {
	},
};

/**
 * @class
 *
 * A component to be used as custom list item within the <code>ui5-list</code>
 * the same way as the standard <code>ui5-li</code>.
 *
 * The <code>ui5-li-custom</code> accepts arbitrary HTML content to allow full customization.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.CustomListItem
 * @extends ListItem
 * @tagname ui5-li-custom
 * @public
 */
class CustomListItem extends ListItem {
	static get metadata() {
		return metadata$R;
	}

	static get template() {
		return main$V;
	}

	static get styles() {
		return [ListItem.styles, customListItemCss];
	}

	get classes() {
		const result = super.classes;
		result.main["ui5-custom-li-root"] = true;
		return result;
	}
}

CustomListItem.define();

const block0$W = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}" class="ui5-tab-root"><slot></slot></div>`; };


const main$W = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$W(context);
};

const block0$X = (context) => { return scopedHtml`<li id="${ifDefined(context._id)}" class="${ifDefined(context.headerClasses)}" tabindex="${ifDefined(context._tabIndex)}" role="tab" aria-posinset="${ifDefined(context._posinset)}" aria-setsize="${ifDefined(context._setsize)}" aria-controls="ui5-tc-contentItem-${ifDefined(context._posinset)}" aria-selected="${ifDefined(context.effectiveSelected)}" aria-disabled="${ifDefined(context.effectiveDisabled)}" ?disabled="${context.effectiveDisabled}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" data-ui5-stable="${ifDefined(context.stableDomRef)}" style="list-style-type: none;">${ context.icon ? block1$O(context) : undefined }<div class="ui5-tab-strip-itemContent">${ !context._isInline ? block2$L(context) : undefined }${ context.text ? block4$p(context) : undefined }${ context._isInline ? block5$m(context) : undefined }</div></li><!-- Additional text --> `; };
const block1$O = (context) => { return scopedHtml`<div class="ui5-tab-strip-item-icon-outer"><ui5-icon name="${ifDefined(context.icon)}" class="ui5-tab-strip-item-icon"></ui5-icon></div>`; };
const block2$L = (context) => { return scopedHtml`${ context.additionalText ? block3$x(context) : undefined }`; };
const block3$x = (context) => { return scopedHtml`<span class="ui5-tab-strip-itemAdditionalText" id="${ifDefined(context._id)}-additionalText">${ifDefined(context.additionalText)}</span>`; };
const block4$p = (context) => { return scopedHtml`<span class="ui5-tab-strip-itemText" id="${ifDefined(context._id)}-text"><span class="${ifDefined(context.headerSemanticIconClasses)}"></span>${ifDefined(context.text)}</span>`; };
const block5$m = (context) => { return scopedHtml`${ context.additionalText ? block6$g(context) : undefined }`; };
const block6$g = (context) => { return scopedHtml`<span class="ui5-tab-strip-itemAdditionalText" id="${ifDefined(context._id)}-additionalText">${ifDefined(context.additionalText)}</span>`; };


const main$X = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$X(context);
};

const block0$Y = (context) => { return scopedHtml`<ui5-li-custom id="${ifDefined(context._id)}" class="${ifDefined(context.overflowClasses)}" type="${ifDefined(context.overflowState)}" ?selected="${context.effectiveSelected}" ?disabled="${context.effectiveDisabled}" aria-disabled="${ifDefined(context.effectiveDisabled)}" aria-selected="${ifDefined(context.effectiveSelected)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}"><div class="ui5-tab-overflow-itemContent">${ context.icon ? block1$P(context) : undefined }${ifDefined(context.text)}${ context.additionalText ? block2$M(context) : undefined }</div></ui5-li-custom>`; };
const block1$P = (context) => { return scopedHtml`<ui5-icon name="${ifDefined(context.icon)}"></ui5-icon>`; };
const block2$M = (context) => { return scopedHtml` (${ifDefined(context.additionalText)}) `; };


const main$Y = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$Y(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var css = ":host{display:inline-block;width:100%}.ui5-tab-root{width:100%;height:100%}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var stripCss = ".ui5-tab-strip-item{color:var(--_ui5_tc_headerItem_color);cursor:pointer;flex-shrink:0;margin:0 1rem;font-size:var(--sapFontSmallSize);text-shadow:var(--sapContent_TextShadow);position:relative;display:inline-flex;align-items:center}.ui5-tab-strip-item:last-child{margin-right:0}.ui5-tab-strip-itemContent{pointer-events:none}.ui5-tab-strip-item--selected.ui5-tab-strip-item--textOnly{color:var(--_ui5_tc_headeritem_text_selected_color)}.ui5-tab-strip-item--selected.ui5-tab-strip-item--mixedMode .ui5-tab-strip-itemContent:after,.ui5-tab-strip-item--selected.ui5-tab-strip-item--textOnly .ui5-tab-strip-itemContent:after,.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer:after{content:\"\";position:absolute;width:100%;bottom:0;left:0;border-bottom:var(--_ui5_tc_headerItemContent_border_bottom)}.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer:after{bottom:-.8rem}.ui5-tab-strip-item--disabled{cursor:default;opacity:.5}.ui5-tab-strip-item:focus{outline:none}.ui5-tab-strip-item--textOnly:not(.ui5-tab-strip-item--inline):focus .ui5-tab-strip-itemText,.ui5-tab-strip-item--withIcon:focus .ui5-tab-strip-item-icon-outer{outline:var(--_ui5_tc_headerItem_focus_border)}.ui5-tab-strip-item--inline.ui5-tab-strip-item--textOnly:focus .ui5-tab-strip-itemContent,.ui5-tab-strip-item--mixedMode:focus .ui5-tab-strip-itemContent{outline:var(--_ui5_tc_headerItem_focus_border)}.ui5-tab-strip-item-semanticIcon:before{display:var(--_ui5_tc_headerItemSemanticIcon_display);font-family:SAP-icons;font-size:.75rem;margin-right:.25rem;speak:none;-webkit-font-smoothing:antialiased}.ui5-tab-strip-item-semanticIcon--positive:before{content:\"\\e1ab\"}.ui5-tab-strip-item-semanticIcon--negative:before{content:\"\\e1ac\"}.ui5-tab-strip-item-semanticIcon--critical:before{content:\"\\e1ae\"}.ui5-tab-strip-item--mixedMode,.ui5-tab-strip-item--withIcon{margin-top:.75rem;padding-bottom:.75rem}.ui5-tab-strip-item-icon-outer{display:flex;justify-content:center;align-items:center;position:relative;border:var(--_ui5_tc_headerItemIcon_border);border-radius:50%;margin-right:.25rem;height:var(--_ui5_tc_item_text);width:var(--_ui5_tc_item_text);pointer-events:none}.ui5-tab-strip-item-icon{width:var(--_ui5_tc_item_icon_size);height:var(--_ui5_tc_item_icon_size);color:var(--_ui5_tc_headerItemIcon_color);text-shadow:var(--sapContent_TextShadow);pointer-events:none}.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer{background-color:var(--_ui5_tc_headerItemIcon_selected_background)}.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItemIcon_selected_color);text-shadow:none}.ui5-tab-strip-itemAdditionalText+.ui5-tab-strip-itemText{display:block}.ui5-tab-strip-item--inline .ui5-tab-strip-itemAdditionalText+.ui5-tab-strip-itemText{display:inline}.ui5-tab-strip-item--withIcon .ui5-tab-strip-itemAdditionalText+.ui5-tab-strip-itemText{margin-top:var(--_ui5_tc_item_add_text_margin_top)}.ui5-tab-strip-item--textOnly{font-size:var(--sapFontSize);height:var(--_ui5_tc_item_text_text_only);display:flex;align-items:center;line-height:var(--_ui5_tc_item_text_line_height)}.ui5-tab-strip-item--mixedMode .ui5-tab-strip-itemAdditionalText,.ui5-tab-strip-item--mixedMode .ui5-tab-strip-itemText{display:inline-block;vertical-align:middle}.ui5-tab-strip-item--mixedMode .ui5-tab-strip-itemAdditionalText{font-size:1.5rem;margin-right:.5rem}.ui5-tab-strip-item--positive.ui5-tab-strip-item--textOnly,.ui5-tab-strip-item--positive .ui5-tab-strip-item-icon-outer,.ui5-tab-strip-item-semanticIcon--positive:before{color:var(--sapPositiveColor);border-color:var(--_ui5_tc_headerItem_positive_selected_border_color)}.ui5-tab-strip-item--positive .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItem_positive_color)}.ui5-tab-strip-item--positive.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer{background-color:var(--_ui5_tc_headerItemIcon_positive_selected_background);color:var(--_ui5_tc_headerItemIcon_semantic_selected_color)}.ui5-tab-strip-item--positive.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItemIcon_semantic_selected_color)}.ui5-tab-strip-item--positive .ui5-tab-strip-item-icon-outer:after,.ui5-tab-strip-item.ui5-tab-strip-item--positive .ui5-tab-strip-itemContent:after{border-color:var(--_ui5_tc_headerItem_positive_border_color)}.ui5-tab-strip-item--negative.ui5-tab-strip-item--textOnly,.ui5-tab-strip-item--negative .ui5-tab-strip-item-icon-outer,.ui5-tab-strip-item-semanticIcon--negative:before{color:var(--sapNegativeColor);border-color:var(--_ui5_tc_headerItem_negative_selected_border_color)}.ui5-tab-strip-item--negative .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItem_negative_color)}.ui5-tab-strip-item--negative.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer{background-color:var(--_ui5_tc_headerItemIcon_negative_selected_background)}.ui5-tab-strip-item--negative.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItemIcon_semantic_selected_color)}.ui5-tab-strip-item--negative .ui5-tab-strip-item-icon-outer:after,.ui5-tab-strip-item.ui5-tab-strip-item--negative .ui5-tab-strip-itemContent:after{border-color:var(--_ui5_tc_headerItem_negative_border_color)}.ui5-tab-strip-item--critical.ui5-tab-strip-item--textOnly,.ui5-tab-strip-item--critical .ui5-tab-strip-item-icon-outer,.ui5-tab-strip-item-semanticIcon--critical:before{color:var(--sapCriticalColor);border-color:var(--_ui5_tc_headerItem_critical_selected_border_color)}.ui5-tab-strip-item--critical .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItem_critical_color)}.ui5-tab-strip-item--critical.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer{background-color:var(--_ui5_tc_headerItemIcon_critical_selected_background)}.ui5-tab-strip-item--critical.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItemIcon_semantic_selected_color)}.ui5-tab-strip-item--critical .ui5-tab-strip-item-icon-outer:after,.ui5-tab-strip-item.ui5-tab-strip-item--critical .ui5-tab-strip-itemContent:after{border-color:var(--_ui5_tc_headerItem_critical_border_color)}.ui5-tab-strip-item--neutral .ui5-tab-strip-item-icon-outer,.ui5-tab-strip-item--nutral.ui5-tab-strip-item--textOnly{color:var(--sapNeutralColor);border-color:var(--_ui5_tc_headerItem_neutral_selected_border_color)}.ui5-tab-strip-item--neutral .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItem_neutral_color)}.ui5-tab-strip-item--neutral.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon-outer{background-color:var(--_ui5_tc_headerItemIcon_neutral_selected_background)}.ui5-tab-strip-item--neutral.ui5-tab-strip-item--selected .ui5-tab-strip-item-icon{color:var(--_ui5_tc_headerItemIcon_semantic_selected_color)}.ui5-tab-strip-item--neutral .ui5-tab-strip-item-icon:after,.ui5-tab-strip-items.ui5-tab-strip-item--neutral .ui5-tab-strip-itemContent:after{border-color:var(--_ui5_tc_headerItem_neutral_border_color)}[dir=rtl] .ui5-tab-strip-item:last-child{margin-left:0}[dir=rtl] .ui5-tab-strip-item-semanticIcon:before{margin-left:.25rem;margin-right:0}[dir=rtl] .ui5-tab-strip-item-icon-outer{margin-left:.25rem;margin-right:0}[dir=rtl] .ui5-tab-strip-item--mixedMode .ui5-tab-strip-itemAdditionalText{margin-right:0;margin-left:.5rem}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var overflowCss = ".ui5-tab-overflow-item{color:var(--_ui5_tc_overflowItem_default_color)}.ui5-tab-overflow-item--disabled{cursor:default;opacity:.5}.ui5-tab-overflow-item--positive{color:var(--_ui5_tc_overflowItem_positive_color);border-color:var(--_ui5_tc_headerItem_positive_selected_border_color)}.ui5-tab-overflow-item--negative{color:var(--_ui5_tc_overflowItem_negative_color);border-color:var(--_ui5_tc_headerItem_negative_selected_border_color)}.ui5-tab-overflow-item--critical{color:var(--_ui5_tc_overflowItem_critical_color);border-color:var(--_ui5_tc_headerItem_critical_selected_border_color)}.ui5-tab-overflow-item--neutral{color:var(--_ui5_tc_overflowItem_neutral_color);border-color:var(--_ui5_tc_headerItem_neutral_selected_border_color)}.ui5-tab-overflow-item[active] .ui5-tab-overflow-itemContent{color:var(--sapList_Active_TextColor)}.ui5-tab-overflow-itemContent{display:flex;align-items:center;padding:0 .5rem;height:var(--_ui5_tc_item_text);pointer-events:none}.ui5-tab-overflow-item [ui5-icon]{width:1.375rem;height:1.375rem;padding-right:1rem;color:var(--_ui5_tc_overflowItem_current_color)}";

/**
 * @public
 */
const metadata$S = {
	tag: "ui5-tab",
	slots: /** @lends sap.ui.webcomponents.main.Tab.prototype */ {

		/**
		 * Defines the tab content.
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.Tab.prototype */ {

		/**
		 * The text to be displayed for the item.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Enabled items can be selected.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Represents the "additionalText" text, which is displayed in the tab filter.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		additionalText: {
			type: String,
		},

		/**
		 * Defines the icon source URI to be displayed as graphical element within the <code>ui5-tab</code>.
		 * The SAP-icons font provides numerous built-in icons.
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-tab</code> semantic color.
		 * <br><br>
		 * The color is applied to:
		 * <ul>
		 * <li>the <code>ui5-tab</code> icon</li>
		 * <li>the <code>text</code> when <code>ui5-tab</code> overflows</li>
		 * <li>the tab selection line</li>
		 * </ul>
		 *
		 * <br><br>
		 * Available semantic colors are: <code>"Default"</code>, <code>"Neutral"</code>, <code>"Positive"</code>, <code>"Critical"</code> and <code>"Negative"</code>.
		 *
		 * <br><br>
		 * <b>Note:</b> The color value depends on the current theme.
		 * @type {SemanticColor}
		 * @defaultvalue "Default"
		 * @public
		 */
		semanticColor: {
			type: SemanticColor,
			defaultValue: SemanticColor.Default,
		},

		/**
		 * Defines the stable selector that you can use via getStableDomRef method.
		 * @public
		 * @since 1.0.0-rc.8
		 */
		stableDomRef: {
			type: String,
		},

		/**
		 * Specifies if the <code>ui5-tab</code> is selected.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: {
			type: Boolean,
		},

		_tabIndex: {
			type: String,
			defaultValue: "-1",
			noAttribute: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Tab.prototype */ {
	},
};

/**
 * @class
 * The <code>ui5-tab</code> represents a selectable item inside a <code>ui5-tabcontainer</code>.
 * It defines both the item in the tab strip (top part of the <code>ui5-tabcontainer</code>) and the
 * content that is presented to the user once the tab is selected.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Tab
 * @extends UI5Element
 * @tagname ui5-tab
 * @public
 */
class Tab extends UI5Element {
	static get metadata() {
		return metadata$S;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$W;
	}

	static get stripTemplate() {
		return main$X;
	}

	static get overflowTemplate() {
		return main$Y;
	}

	static get styles() {
		return css;
	}

	static get dependencies() {
		return [
			Icon,
			CustomListItem,
		];
	}

	get isSeparator() {
		return false;
	}

	get stripPresentation() {
		return executeTemplate(this.constructor.stripTemplate, this);
	}

	get overflowPresentation() {
		return executeTemplate(this.constructor.overflowTemplate, this);
	}

	getFocusDomRef() {
		let focusedDomRef = super.getFocusDomRef();

		if (this._getTabContainerHeaderItemCallback) {
			focusedDomRef = this._getTabContainerHeaderItemCallback();
		}

		return focusedDomRef;
	}

	get isMixedModeTab() {
		return !this.icon && this._mixedMode;
	}

	get isTextOnlyTab() {
		return !this.icon && !this._mixedMode;
	}

	get isIconTab() {
		return !!this.icon;
	}

	get effectiveDisabled() {
		return this.disabled || undefined;
	}

	get effectiveSelected() {
		return this.selected || false;
	}

	get effectiveHidden() {
		return !this.selected;
	}

	get ariaLabelledBy() {
		const labels = [];

		if (this.text) {
			labels.push(`${this._id}-text`);
		}

		if (this.additionalText) {
			labels.push(`${this._id}-additionalText`);
		}

		if (this.icon) {
			labels.push(`${this._id}-icon`);
		}

		return labels.join(" ");
	}

	get headerClasses() {
		const classes = ["ui5-tab-strip-item"];

		if (this.selected) {
			classes.push("ui5-tab-strip-item--selected");
		}

		if (this.disabled) {
			classes.push("ui5-tab-strip-item--disabled");
		}

		if (this.tabLayout === TabLayout.Inline) {
			classes.push("ui5-tab-strip-item--inline");
		}

		if (!this.icon && !this._mixedMode) {
			classes.push("ui5-tab-strip-item--textOnly");
		}

		if (this.icon) {
			classes.push("ui5-tab-strip-item--withIcon");
		}

		if (!this.icon && this._mixedMode) {
			classes.push("ui5-tab-strip-item--mixedMode");
		}

		if (this.semanticColor !== SemanticColor.Default) {
			classes.push(`ui5-tab-strip-item--${this.semanticColor.toLowerCase()}`);
		}

		return classes.join(" ");
	}

	get headerSemanticIconClasses() {
		const classes = ["ui5-tab-strip-item-semanticIcon"];

		if (this.semanticColor !== SemanticColor.Default) {
			classes.push(`ui5-tab-strip-item-semanticIcon--${this.semanticColor.toLowerCase()}`);
		}

		return classes.join(" ");
	}

	get overflowClasses() {
		const classes = ["ui5-tab-overflow-item"];

		if (this.semanticColor !== SemanticColor.Default) {
			classes.push(`ui5-tab-overflow-item--${this.semanticColor.toLowerCase()}`);
		}

		if (this.disabled) {
			classes.push("ui5-tab-overflow-item--disabled");
		}

		return classes.join(" ");
	}

	get overflowState() {
		return this.disabled ? "Inactive" : "Active";
	}
}

Tab.define();

TabContainer.registerTabStyles(stripCss);
TabContainer.registerStaticAreaTabStyles(overflowCss);

const block0$Z = (context) => { return scopedHtml`<li id="${ifDefined(context._id)}" role="separator" style="list-style-type: none;"></li>`; };


const main$Z = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$Z(context);
};

/**
 * @public
 */
const metadata$T = {
	tag: "ui5-tab-separator",
};

/**
 * @class
 * The <code>ui5-tab-separator</code> represents a vertical line to separate tabs inside a <code>ui5-tabcontainer</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TabSeparator
 * @extends UI5Element
 * @tagname ui5-tab-separator
 * @public
 */
class TabSeparator extends UI5Element {
	static get metadata() {
		return metadata$T;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$Z;
	}

	get isSeparator() {
		return true;
	}
}

TabSeparator.define();

const block0$_ = (context) => { return scopedHtml`<table border="0" cellspacing="0" cellpadding="0" @keydown="${context._onkeydown}"><thead><tr id="${ifDefined(context._id)}-columnHeader" class="ui5-table-header-row" tabindex="0" style="height: 48px" @click="${context._onColumnHeaderClick}">${ repeat(context.visibleColumns, (item, index) => item._id || index, (item, index) => block1$Q(item)) }</tr></thead><tbody>${ repeat(context.rows, (item, index) => item._id || index, (item, index) => block2$N(item)) }${ !context.rows.length ? block3$y(context) : undefined }</tbody></table>`; };
const block1$Q = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item._individualSlot)}"></slot>`; };
const block2$N = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item._individualSlot)}"></slot>`; };
const block3$y = (context) => { return scopedHtml`${ context.showNoData ? block4$q(context) : undefined }`; };
const block4$q = (context) => { return scopedHtml`<tr class="ui5-table-no-data-row-root"><td colspan="${ifDefined(context.visibleColumnsCount)}"><div class="ui5-table-no-data-row"><span>${ifDefined(context.noDataText)}</span></div></td></tr>`; };


const main$_ = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$_(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$b = ":host(:not([hidden])){display:inline-block;width:100%}table{width:100%;border-spacing:0;border-collapse:collapse}.ui5-table-header-row{color:var(--sapTextColor);height:3rem;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize)}.ui5-table-header-row:focus{outline:var(--ui5_table_header_row_outline_width) dotted var(--sapContent_FocusColor);outline-offset:-.125rem}tr{height:3rem}.ui5-table-no-data-row{display:flex;align-items:center;width:100%;height:auto;justify-content:center;text-align:center;padding:.5rem 1rem;font-family:\"72override\",var(--sapFontFamily);font-size:.875rem;box-sizing:border-box;color:var(--sapTextColor);min-height:3rem;background-color:var(--sapList_Background);border-top:1px solid var(--sapList_BorderColor)}:host([_no-data-displayed]){border-bottom:1px solid var(--sapList_TableGroupHeaderBorderColor)}";

/**
 * @public
 */
const metadata$U = {
	tag: "ui5-table",
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Table.prototype */ {

		/**
		 * Defines the <code>ui5-table</code> rows.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-table-row</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "rows",
			type: HTMLElement,
			individualSlots: true,
		},

		/**
		 * Defines the configuration for the columns of the <code>ui5-table</code>.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-table-column</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		columns: {
			type: HTMLElement,
			individualSlots: true,
			listenFor: { include: ["*"] },
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.Table.prototype */ {

		/**
		 * Defines the text that will be displayed when there is no data and <code>showNoData</code> is present.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		noDataText: {
			type: String,
		},

		/**
		 * Defines if the value of <code>noDataText</code> will be diplayed when there is no rows present in the table.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showNoData: {
			type: Boolean,
		},
		/**
		 * Determines whether the column headers remain fixed at the top of the page during
		 * vertical scrolling as long as the Web Component is in the viewport.
		 * <br><br>
		 * <b>Limitations:</b>
		 * <ul>
		 * <li>Browsers that do not support this feature:
		 * <ul>
		 * <li>Internet Explorer</li>
		 * <li>Microsoft Edge lower than version 41 (EdgeHTML 16)</li>
		 * <li>Mozilla Firefox lower than version 59</li>
		 * </ul>
		 * </li>
		 * <li>Scrolling behavior:
		 * <ul>
		 * <li>If the Web Component is placed in layout containers that have the <code>overflow: hidden</code>
		 * or <code>overflow: auto</code> style definition, this can
		 * prevent the sticky elements of the Web Component from becoming fixed at the top of the viewport.</li>
		 * </ul>
		 * </li>
		 * </ul>
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		stickyColumnHeader: {
			type: Boolean,
		},

		_hiddenColumns: {
			type: Object,
			multiple: true,
		},

		_noDataDisplayed: {
			type: Boolean,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Table.prototype */ {
		/**
		 * Fired when a row is clicked.
		 *
		 * @event sap.ui.webcomponents.main.Table#row-click
		 * @param {HTMLElement} row the clicked row.
		 * @public
		 */
		"row-click": {
			detail: {
				row: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the <code>ui5-table-column</code> is shown as a pop-in instead of hiding it.
		 *
		 * @event sap.ui.webcomponents.main.Table#popin-change
		 * @param {Array} poppedColumns popped-in columns.
		 * @since 1.0.0-rc.6
		 * @public
		 */
		"popin-change": {
			detail: {
				poppedColumns: {},
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-table</code> component provides a set of sophisticated and convenient functions for responsive table design.
 * It provides a comprehensive set of features for displaying and dealing with vast amounts of data.
 * <br><br>
 * To render the <code>Table</code> properly, the order of the <code>columns</code> should match with the
 * order of the item <code>cells</code> in the <code>rows</code>.
 * <br><br>
 * Desktop and tablet devices are supported.
 * On tablets, special consideration should be given to the number of visible columns
 * and rows due to the limited performance of some devices.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Table.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents/dist/TableColumn.js";</code> (for <code>ui5-table-column</code>)
 * <br>
 * <code>import "@ui5/webcomponents/dist/TableRow.js";</code> (for <code>ui5-table-row</code>)
 * <br>
 * <code>import "@ui5/webcomponents/dist/TableCell.js";</code> (for <code>ui5-table-cell</code>)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Table
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-table
 * @appenddocs TableColumn TableRow TableCell
 * @public
 */
class Table extends UI5Element {
	static get metadata() {
		return metadata$U;
	}

	static get styles() {
		return styles$b;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$_;
	}

	constructor() {
		super();

		this._itemNavigation = new ItemNavigation(this, {
			navigationMode: NavigationMode.Vertical,
		});

		this._itemNavigation.getItemsCallback = function getItemsCallback() {
			const columnHeader = this.getColumnHeader();
			return columnHeader ? [columnHeader, ...this.rows] : this.rows;
		}.bind(this);

		this.fnOnRowFocused = this.onRowFocused.bind(this);

		this._handleResize = this.popinContent.bind(this);
	}

	onBeforeRendering() {
		const columnSettings = this.getColumnPropagationSettings();
		const columnSettingsString = JSON.stringify(columnSettings);

		this.rows.forEach(row => {
			if (row._columnsInfoString !== columnSettingsString) {
				row._columnsInfo = columnSettings;
				row._columnsInfoString = JSON.stringify(row._columnsInfo);
			}

			row.removeEventListener("ui5-_focused", this.fnOnRowFocused);
			row.addEventListener("ui5-_focused", this.fnOnRowFocused);
		});

		this.visibleColumns = this.columns.filter((column, index) => {
			column.sticky = this.stickyColumnHeader;
			return !this._hiddenColumns[index];
		});

		this._noDataDisplayed = !this.rows.length && this.showNoData;
		this.visibleColumnsCount = this.visibleColumns.length;
	}

	onEnterDOM() {
		ResizeHandler.register(this.getDomRef(), this._handleResize);
	}

	onExitDOM() {
		ResizeHandler.deregister(this.getDomRef(), this._handleResize);
	}

	onRowFocused(event) {
		this._itemNavigation.update(event.target);
	}

	_onColumnHeaderClick(event) {
		this.getColumnHeader().focus();
		this._itemNavigation.update(event.target);
	}

	getColumnHeader() {
		return this.getDomRef() && this.getDomRef().querySelector(`#${this._id}-columnHeader`);
	}

	popinContent(_event) {
		const clientRect = this.getDomRef().getBoundingClientRect();
		const tableWidth = clientRect.width;
		const hiddenColumns = [];
		const visibleColumnsIndexes = [];

		// store the hidden columns
		this.columns.forEach((column, index) => {
			if (tableWidth < column.minWidth && column.minWidth !== Infinity) {
				hiddenColumns[index] = {
					index,
					popinText: column.popinText,
					demandPopin: column.demandPopin,
				};
			} else {
				visibleColumnsIndexes.push(index);
			}
		});

		if (visibleColumnsIndexes.length) {
			this.columns[visibleColumnsIndexes[0]].first = true;
			this.columns[visibleColumnsIndexes[visibleColumnsIndexes.length - 1]].last = true;
		}

		// invalidate only if hidden columns count has changed
		if (this._hiddenColumns.length !== hiddenColumns.length) {
			this._hiddenColumns = hiddenColumns;
			if (hiddenColumns.length) {
				this.fireEvent("popin-change", {
					poppedColumns: this._hiddenColumns,
				});
			}
		}
	}

	/**
	 * Gets settings to be propagated from columns to rows.
	 *
	 * @returns {object}
	 * @memberof Table
	 */
	getColumnPropagationSettings() {
		return this.columns.map((column, index) => {
			return {
				index,
				minWidth: column.minWidth,
				demandPopin: column.demandPopin,
				text: column.textContent,
				popinText: column.popinText,
				visible: !this._hiddenColumns[index],
			};
		}, this);
	}
}

Table.define();

const block0$$ = (context) => { return scopedHtml`<th scope="col" part="column"><slot></slot></th>`; };


const main$$ = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$$();
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$c = ":host{display:contents}th{background:var(--sapList_HeaderBackground);border:none;border-bottom:1px solid var(--sapList_BorderColor);width:inherit;font-weight:400;padding:.25rem;box-sizing:border-box;height:3rem;text-align:left;vertical-align:middle}:host([first]) th{padding-left:1rem}:host([sticky]) th{position:sticky;top:0;z-index:99}";

const metadata$V = {
	tag: "ui5-table-column",
	slots: /** @lends sap.ui.webcomponents.main.TableColumn.prototype */ {

		/**
		 * Defines the content of the column header.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.TableColumn.prototype */ {

		/**
		 * Defines the minimum table width required to display this column. By default it is always displayed.
		 * <br><br>
		 * The responsive behavior of the <code>ui5-table</code> is determined by this property. As an example, by setting
		 * <code>minWidth</code> property to <code>40em</code> shows this column on tablet (and desktop) but hides it on mobile.
		 * <br>
		 * For further responsive design options, see <code>demandPopin</code> property.
		 *
		 * @type {number}
		 * @defaultvalue Infinity
		 * @public
		 */
		minWidth: {
			type: Integer,
			defaultValue: Infinity,
		},

		/**
		 * The text for the column when it pops in.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		popinText: {
			type: String,
		},

		/**
		 * According to your <code>minWidth</code> settings, the <code>ui5-table-column</code> can be hidden
		 * in different screen sizes.
		 * <br><br>
		 * Setting this property to <code>true</code>, shows this column as pop-in instead of hiding it.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		demandPopin: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		first: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		last: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		sticky: {
			type: Boolean,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-table-column</code> component allows to define column specific properties that are applied
 * when rendering the <code>ui5-table</code> component.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TableColumn
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-table-column
 * @public
 */
class TableColumn extends UI5Element {
	static get metadata() {
		return metadata$V;
	}

	static get styles() {
		return styles$c;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$$;
	}
}

TableColumn.define();

const block0$10 = (context) => { return scopedHtml`<tr class="ui5-table-row-root" tabindex="${ifDefined(context._tabIndex)}" @focusin="${context._onfocusin}" @click="${context._onrowclick}" aria-label="${ifDefined(context.ariaLabelText)}" data-sap-focus-ref part="row">${ context.shouldPopin ? block1$R(context) : block3$z(context) }</tr>${ context.shouldPopin ? block5$n(context) : undefined } `; };
const block1$R = (context) => { return scopedHtml`${ repeat(context.visibleCells, (item, index) => item._id || index, (item, index) => block2$O(item)) }`; };
const block2$O = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item._individualSlot)}"></slot>`; };
const block3$z = (context) => { return scopedHtml`${ repeat(context.cells, (item, index) => item._id || index, (item, index) => block4$r(item)) }`; };
const block4$r = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item._individualSlot)}"></slot>`; };
const block5$n = (context) => { return scopedHtml`${ repeat(context.popinCells, (item, index) => item._id || index, (item, index) => block6$h(item, index, context)) }`; };
const block6$h = (item, index, context) => { return scopedHtml`<tr part="popin-row" class="${ifDefined(item.classes)}" @click="${context._onrowclick}"><td colspan="${ifDefined(context.visibleCellsCount)}">${ item.popinText ? block7$d(item) : undefined }<div><slot name="${ifDefined(item.cell._individualSlot)}"></slot></div></td></tr>`; };
const block7$d = (item, index, context) => { return scopedHtml`<span class="ui5-table-row-popin-title">${ifDefined(item.popinText)}:</span>`; };


const main$10 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$10(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$d = ":host{display:contents}.ui5-table-row-root{background-color:var(--sapList_Background);border-top:1px solid var(--sapList_BorderColor)}.ui5-table-row-root:focus{outline:var(--ui5_table_row_outline_width) dotted var(--sapContent_FocusColor);outline-offset:-.125rem}.ui5-table-popin-row{background-color:var(--sapList_Background)}.ui5-table-popin-row.all-columns-popped-in.popin-header{border-top:1px solid var(--sapList_BorderColor)}.ui5-table-popin-row td{padding:.25rem;padding-left:1rem}.ui5-table-row-popin-title{color:var(--sapContent_LabelColor);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize)}";

/**
 * @public
 */
const metadata$W = {
	tag: "ui5-table-row",
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.TableRow.prototype */ {
		/**
		 * Defines the cells of the <code>ui5-table-row</code>.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-table-cell</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "cells",
			type: HTMLElement,
			individualSlots: true,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.TableRow.prototype */ {
		_columnsInfo: {
			type: Object,
			multiple: true,
		},
		_tabIndex: {
			type: String,
			defaultValue: "-1",
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TableRow.prototype */ {
		"row-click": {},
		_focused: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-table-row</code> component represents a row in the <code>ui5-table</code>.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TableRow
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-table-row
 * @public
 */
class TableRow extends UI5Element {
	static get metadata() {
		return metadata$W;
	}

	static get styles() {
		return styles$d;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$10;
	}

	_onfocusin(event, forceSelfFocus = false) {
		if (forceSelfFocus || this._getActiveElementTagName() === "ui5-table-cell") {
			this.getDomRef().focus();
		}

		this.fireEvent("_focused", event);
	}

	_onrowclick(event) {
		if (this._getActiveElementTagName() === "body") {
			// If the user clickes on non-focusable element within the ui5-table-cell,
			// the focus goes to the body, se we have to bring it back to the row.
			// If the user clicks on input, button or similar clickable element,
			// the focus remains on that element.
			this._onfocusin(event, true /* force row focus */);
		}

		this.fireEvent("row-click", { row: this });
	}

	_getActiveElementTagName() {
		return document.activeElement.localName.toLocaleLowerCase();
	}

	get shouldPopin() {
		return this._columnsInfo.filter(el => {
			return el.demandPopin;
		}).length;
	}

	get allColumnsPoppedIn() {
		return this._columnsInfo.every(el => el.demandPopin && !el.visible);
	}

	onBeforeRendering() {
		if (!this.shouldPopin) {
			return;
		}

		this.visibleCells = [];
		this.popinCells = [];

		if (this.cells.length === 0) {
			return;
		}

		const allColumnsPoppedInClass = this.allColumnsPoppedIn ? "all-columns-popped-in" : "";
		this._columnsInfo.forEach((info, index) => {
			const cell = this.cells[index];

			if (!cell) {
				return;
			}

			if (info.visible) {
				this.visibleCells.push(cell);
				cell.firstInRow = (index === 0);
				cell.popined = false;
			} else if (info.demandPopin) {
				const popinHeaderClass = this.popinCells.length === 0 ? "popin-header" : "";
				this.popinCells.push({
					cell,
					popinText: info.popinText,
					classes: `ui5-table-popin-row ${allColumnsPoppedInClass} ${popinHeaderClass}`,
				});

				cell.popined = true;
			} else {
				cell.popined = false;
			}
		}, this);

		const lastVisibleCell = this.visibleCells[this.visibleCells.length - 1];

		if (lastVisibleCell) {
			lastVisibleCell.lastInRow = true;
		}
	}

	get visibleCellsCount() {
		return this.visibleCells.length;
	}

	get ariaLabelText() {
		return this.cells.map((cell, index) => {
			const columText = this.getColumnTextByIdx(index);
			const cellText = this.getCellText(cell);
			return `${columText} ${cellText}`;
		}).join(" ");
	}

	getCellText(cell) {
		return this.getNormilzedTextContent(cell.textContent);
	}

	getColumnTextByIdx(index) {
		const columnInfo = this._columnsInfo[index];

		if (!columnInfo) {
			return "";
		}

		return this.getNormilzedTextContent(columnInfo.text);
	}

	getNormilzedTextContent(textContent) {
		return textContent.replace(/[\n\r\t]/g, "").trim();
	}
}

TableRow.define();

const block0$11 = (context) => { return scopedHtml`<td tabindex="-1" part="cell"><slot></slot></td>`; };


const main$11 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$11();
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$e = ":host{display:contents;font-family:\"72override\",var(--sapFontFamily);font-size:.875rem;height:100%;box-sizing:border-box;overflow:hidden;color:var(--sapContent_LabelColor)}td{padding:.5rem .25rem;box-sizing:border-box;word-break:break-word}.ui5-table-popin-row td,:host([first-in-row]) td{padding-left:1rem}:host([first-in-row]) td{padding-left:1rem}:host([popined]) td{padding-left:0}";

/**
 * @public
 */
const metadata$X = {
	tag: "ui5-table-cell",
	slots: /** @lends sap.ui.webcomponents.main.TableCell.prototype */ {
		/**
		 * Specifies the content of the <code>ui5-table-cell</code>.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.TableCell.prototype */ {

		/**
		 * @private
		 */
		firstInRow: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		lastInRow: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		popined: {
			type: Boolean,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TableCell.prototype */ {
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-table-cell</code> component defines the structure of the data in a single <code>ui5-table</code> cell.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TableCell
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-table-cell
 * @public
 */
class TableCell extends UI5Element {
	static get metadata() {
		return metadata$X;
	}

	static get styles() {
		return styles$e;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$11;
	}
}

TableCell.define();

const block0$12 = (context) => { return scopedHtml`<div class="ui5-textarea-root" style="${styleMap(context.styles.main)}" ?aria-invalid="${context.ariaInvalid}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}">${ context.growing ? block1$S(context) : undefined }<textarea id="${ifDefined(context._id)}-inner" class="ui5-textarea-inner" placeholder="${ifDefined(context.placeholder)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" ?required="${context.required}" aria-required="${ifDefined(context.required)}" aria-label="${ifDefined(context.ariaLabelText)}" aria-describedby="${ifDefined(context.ariaDescribedBy)}" maxlength="${ifDefined(context._exceededTextProps.calcedMaxLength)}" .value="${ifDefined(context.value)}" @input="${context._oninput}" @change="${context._onchange}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" data-sap-focus-ref part="textarea"></textarea>${ context.showExceededText ? block3$A(context) : undefined }${ context.hasValueState ? block4$s(context) : undefined }<slot name="formSupport"></slot></div> `; };
const block1$S = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}-mirror" style="${styleMap(context.styles.mirror)}" class="ui5-textarea-mirror" aria-hidden="true">${ repeat(context._mirrorText, (item, index) => item._id || index, (item, index) => block2$P(item)) }</div>`; };
const block2$P = (item, index, context) => { return scopedHtml`${ifDefined(item.text)}<br />`; };
const block3$A = (context) => { return scopedHtml`<span class="ui5-textarea-exceeded-text">${ifDefined(context._exceededTextProps.exceededText)}</span>`; };
const block4$s = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.ariaValueStateHiddenText)}</span>`; };


const main$12 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$12(context);
};

const block0$13 = (context) => { return scopedHtml`${ context.displayValueStateMessagePopover ? block1$T(context) : undefined }`; };
const block1$T = (context) => { return scopedHtml`<ui5-popover skip-registry-update prevent-focus-restore no-padding no-arrow _disable-initial-focus class="ui5-valuestatemessage-popover" style="${styleMap(context.styles.valueStateMsgPopover)}" placement-type="Bottom" horizontal-align="Left"><div slot="header" class="ui5-valuestatemessage-root ${classMap(context.classes.valueStateMsg)}">${ context.hasCustomValueState ? block2$Q(context) : block4$t(context) }</div></ui5-popover>`; };
const block2$Q = (context) => { return scopedHtml`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block3$B(item)) }`; };
const block3$B = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block4$t = (context) => { return scopedHtml`${ifDefined(context.valueStateText)}`; };


const main$13 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$13(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$f = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:inline-block}:host{width:100%;color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);font-style:normal;border-color:var(--sapField_BorderColor);border-radius:var(--_ui5_input_wrapper_border_radius);box-sizing:border-box}:host([disabled]){opacity:var(--_ui5_input_disabled_opacity);cursor:default;pointer-events:none;border-color:var(--sapField_ReadOnly_BorderColor);-webkit-text-fill-color:var(--sapContent_DisabledTextColor);color:var(--sapContent_DisabledTextColor)}:host([disabled]) .ui5-textarea-inner{background:var(--sapField_ReadOnly_Background)}:host([focused]) .ui5-textarea-inner{outline:var(--_ui5_textarea_focus_after_width) dotted var(--sapContent_FocusColor);outline-offset:-3px}:host([exceeding]) .ui5-textarea-inner,:host([value-state]:not([value-state=None])[focused]) .ui5-textarea-inner{outline:var(--_ui5_input_focus_border_width) dotted var(--sapContent_FocusColor);outline-offset:-4px}:host([placeholder]){font-style:italic}.ui5-textarea-root{height:100%;min-height:var(--_ui5_input_height);display:inline-flex;vertical-align:top;outline:none;overflow:hidden;box-sizing:border-box;border-radius:inherit;border-color:inherit}.ui5-textarea-inner{width:100%;height:100%;margin:0;padding:var(--_ui5_textarea_padding);line-height:1.4;box-sizing:border-box;color:inherit;font-size:inherit;font-family:inherit;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;overflow:auto;resize:none;border-color:inherit;border-radius:inherit;background-color:var(--sapField_Background);border-width:1px;border-style:solid}:host([growing]) .ui5-textarea-root{position:relative}:host([growing]) .ui5-textarea-inner{position:absolute;top:0;left:0}.ui5-textarea-mirror{line-height:1.4;visibility:hidden;width:100%;word-break:break-all;padding:var(--_ui5_textarea_padding);font-size:var(--sapFontSize);font-family:\"72override\",var(--sapFontFamily);white-space:pre-wrap;box-sizing:border-box}:host([readonly]){border-color:var(--sapField_ReadOnly_BorderColor)}:host([readonly]) .ui5-textarea-inner{background:var(--sapField_ReadOnly_Background)}:host([show-exceeded-text]) .ui5-textarea-root{flex-direction:column}.ui5-textarea-inner::-webkit-input-placeholder{color:var(--sapField_PlaceholderTextColor)}.ui5-textarea-inner::-moz-placeholder{color:var(--sapField_PlaceholderTextColor)}.ui5-textarea-inner:-ms-input-placeholder{color:var(--sapField_PlaceholderTextColor)}.ui5-textarea-inner:-moz-placeholder{color:var(--sapField_PlaceholderTextColor)}:host(:not([value-state]):not([exceeding]):not([readonly]):hover){border-color:var(--sapField_Hover_BorderColor)}:host(:not([value-state]):not([exceeding]):not([readonly]):hover) .ui5-textarea-inner{background-color:var(--sapField_Hover_Background)}:host([exceeding]) .ui5-textarea-inner,:host([value-state]:not([value-state=None])) .ui5-textarea-inner{border-width:var(--_ui5_textarea_error_warning_border_width)}:host([value-state=Error]) .ui5-textarea-inner,:host([value-state=Warning]) .ui5-textarea-inner{font-style:var(--_ui5_input_error_warning_font_style)}:host([value-state=Error]) .ui5-textarea-inner{font-weight:var(--_ui5_input_error_font_weight)}:host([value-state=Error]:not([readonly])){border-color:var(--sapField_InvalidColor)}:host([value-state=Error]:not([readonly])) .ui5-textarea-inner{background-color:var(--sapField_InvalidBackground)}:host([value-state=Error]:not([readonly]):not([disabled])) .ui5-textarea-inner,:host([value-state=Information]:not([readonly]):not([disabled])) .ui5-textarea-inner,:host([value-state=Warning]:not([readonly]):not([disabled])) .ui5-textarea-inner{border-style:var(--_ui5_input_error_warning_border_style)}:host([exceeding]),:host([value-state=Warning]:not([readonly])){border-color:var(--sapField_WarningColor)}:host([exceeding]) .ui5-textarea-inner,:host([value-state=Warning]:not([readonly])) .ui5-textarea-inner{background-color:var(--sapField_WarningBackground)}:host([value-state=Success]:not([readonly]):not([exceeding])){border-color:var(--sapField_SuccessColor)}:host([value-state=Success]:not([readonly]):not([exceeding])) .ui5-textarea-inner{background-color:var(--sapField_SuccessBackground);border-width:1px}:host([value-state=Information]:not([readonly]):not([exceeding])){border-color:var(--sapField_InformationColor)}:host([value-state=Information]:not([readonly]):not([exceeding])) .ui5-textarea-inner{background-color:var(--sapField_InformationBackground);border-width:var(--_ui5_textarea_information_border_width)}.ui5-textarea-exceeded-text{overflow:hidden;align-self:flex-end;padding:.125rem .125rem .5rem;color:var(--sapContent_LabelColor);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSmallSize)}";

/**
 * @public
 */
const metadata$Y = {
	tag: "ui5-textarea",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.main.TextArea.prototype */ {
		/**
		 * Defines the value of the Web Component.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		value: {
			type: String,
		},

		/**
		 * Indicates whether the user can interact with the component or not.
		 * <br><br>
		 * <b>Note:</b> Disabled components cannot be focused and they are out of the tab chain.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-textarea</code> is read-only.
		 * <br><br>
		 * <b>Note:</b> A read-only <code>ui5-textarea</code> is not editable,
		 * but still provides visual feedback upon user interaction.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		/**
		 * Defines whether the <code>ui5-textarea</code> is required.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.3
		 */
		required: {
			type: Boolean,
		},

		/**
		 * Defines a short hint intended to aid the user with data entry when the component has no value.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		placeholder: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-textarea</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 * <br><br>
		 * <b>Note:</b> If <code>maxlength</code> property is set,
		 * the component turns into "Warning" state once the characters exceeds the limit.
		 * In this case, only the "Error" state is considered and can be applied.
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @since 1.0.0-rc.7
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Defines the number of visible text lines for the component.
		 * <br><br>
		 * <b>Notes:</b>
		 * <ul>
		 * <li>If the <code>growing</code> property is enabled, this property defines the minimum rows to be displayed
		 * in the textarea.</li>
		 * <li>The CSS <code>height</code> property wins over the <code>rows</code> property, if both are set.</li>
		 * </ul>
		 *
		 * @type {number}
		 * @defaultvalue 0
		 * @public
		 */
		rows: {
			type: Integer,
			defaultValue: 0,
		},

		/**
		 * Defines the maximum number of characters that the <code>value</code> can have.
		 *
		 * @type {number}
		 * @defaultValue null
		 * @public
		 */
		maxlength: {
			type: Integer,
			defaultValue: null,
		},

		/**
		 * Determines whether the characters exceeding the maximum allowed character count are visible
		 * in the <code>ui5-textarea</code>.
		 * <br><br>
		 * If set to <code>false</code>, the user is not allowed to enter more characters than what is set in the
		 * <code>maxlength</code> property.
		 * If set to <code>true</code> the characters exceeding the <code>maxlength</code> value are selected on
		 * paste and the counter below the <code>ui5-textarea</code> displays their number.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showExceededText: {
			type: Boolean,
		},

		/**
		 * Enables the <code>ui5-textarea</code> to automatically grow and shrink dynamically with its content.
		 * <br><br>
		 * <b>Note:</b> If set to <code>true</code>, the CSS <code>height</code> property is ignored.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		growing: {
			type: Boolean,
		},

		/**
		 * Defines the maximum number of lines that the Web Component can grow.
		 *
		 * @type {number}
		 * @defaultvalue 0
		 * @public
		 */
		growingMaxLines: {
			type: Integer,
			defaultValue: 0,
		},

		/**
		 * Determines the name with which the <code>ui5-textarea</code> will be submitted in an HTML form.
		 *
		 * <br><br>
		 * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:
		 * <code>import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";</code>
		 *
		 * <br><br>
		 * <b>Note:</b> When set, a native <code>input</code> HTML element
		 * will be created inside the <code>ui5-textarea</code> so that it can be submitted as
		 * part of an HTML form. Do not use this property unless you need to submit a form.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		name: {
			type: String,
		},

		/**
		 * Defines the aria-label attribute for the textarea.
		 *
		 * @type {String}
		 * @since 1.0.0-rc.9
		 * @private
		 * @defaultvalue ""
		 */
		ariaLabel: {
			type: String,
		},


		/**
		 * Receives id(or many ids) of the elements that label the textarea.
		 *
		 * @type {String}
		 * @defaultvalue ""
		 * @private
		 * @since 1.0.0-rc.9
		 */
		ariaLabelledby: {
			type: String,
		},

		/**
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		exceeding: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		_mirrorText: {
			type: Object,
			multiple: true,
			defaultValue: "",
		},

		/**
		 * @private
		 */
		_maxHeight: {
			type: String,
			noAttribute: true,
		},

		/**
		 * @private
		 */
		_width: {
			type: Integer,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.TextArea.prototype */ {

		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-textarea</code>.
		 *
		 * <br><br>
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 *
		 * <br><br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed if the <code>ui5-textarea</code> has
		 * <code>valueState</code> of type <code>Information</code>, <code>Warning</code> or <code>Error</code>.
		 * @type {HTMLElement[]}
		 * @since 1.0.0-rc.7
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TextArea.prototype */ {
		/**
		 * Fired when the text has changed and the focus leaves the <code>ui5-textarea</code>.
		 *
		 * @event
		 * @public
		 */
		change: {},

		/**
		 * Fired when the value of the <code>ui5-textarea</code> changes at each keystroke or when
		 * something is pasted.
		 *
		 * @event
		 * @since 1.0.0-rc.5
		 * @public
		 */
		input: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-textarea</code> component provides large spaces for text
 * entries in the form of multiple rows.
 * It has the functionality of the <code>TextField</code> with the additional
 * functionality for multiline texts.
 * <br><br>
 * When empty, it can hold a placeholder similar to a <code>ui5-input</code>.
 * You can define the rows of the <code>ui5-textarea</code> and also determine specific behavior when handling long texts.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/TextArea";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TextArea
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-textarea
 * @public
 */
class TextArea extends UI5Element {
	static get metadata() {
		return metadata$Y;
	}

	static get styles() {
		return styles$f;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$12;
	}

	static get staticAreaTemplate() {
		return main$13;
	}

	static get staticAreaStyles() {
		return valueStateMessageStyles;
	}

	constructor() {
		super();

		this._firstRendering = true;
		this._openValueStateMsgPopover = false;
		this._fnOnResize = this._onResize.bind(this);
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._fnOnResize);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this._fnOnResize);
	}

	onBeforeRendering() {
		this._exceededTextProps = this._calcExceededText();
		this._mirrorText = this._tokenizeText(this.value);

		this.exceeding = this._exceededTextProps.leftCharactersCount < 0;

		if (this.growingMaxLines) {
			// this should be complex calc between line height and paddings - TODO: make it stable
			this._maxHeight = `${this.growingMaxLines * 1.4 * 14 + 9}px`;
		}

		const FormSupport = getFeature("FormSupport");
		if (FormSupport) {
			FormSupport.syncNativeHiddenInput(this);
		} else if (this.name) {
			console.warn(`In order for the "name" property to have effect, you should also: import "@ui5/webcomponents/dist/features/InputElementsFormSupport.js";`); // eslint-disable-line
		}
	}

	onAfterRendering() {
		this.toggleValueStateMessage(this.openValueStateMsgPopover);
		this._firstRendering = false;
	}

	getInputDomRef() {
		return this.getDomRef().querySelector("textarea");
	}

	_onkeydown() {
		this._keyDown = true;
	}

	_onkeyup() {
		this._keyDown = false;
	}

	_onfocusin() {
		this.focused = true;
		this._openValueStateMsgPopover = true;
	}

	_onfocusout() {
		this.focused = false;
		this._openValueStateMsgPopover = false;
	}

	_onchange() {
		this.fireEvent("change", {});
	}

	_oninput(event) {
		const nativeTextArea = this.getInputDomRef();

		/* skip calling change event when an textarea with a placeholder is focused on IE
			- value of the host and the internal textarea should be different in case of actual input
			- input is called when a key is pressed => keyup should not be called yet
		*/
		const skipFiring = (nativeTextArea.value === this.value) && isIE() && !this._keyDown && !!this.placeholder;
		if (event.target === nativeTextArea) {
			// stop the native event, as the semantic "input" would be fired.
			event.stopImmediatePropagation();
		}

		if (skipFiring) {
			return;
		}

		this.value = nativeTextArea.value;
		this.fireEvent("input", {});

		// Angular two way data binding
		this.fireEvent("value-changed");
	}

	_onResize() {
		if (this.displayValueStateMessagePopover) {
			this._width = this.offsetWidth;
		}
	}

	toggleValueStateMessage(toggle) {
		if (toggle) {
			this.openPopover();
		} else {
			this.closePopover();
		}
	}

	async openPopover() {
		this.popover = await this._getPopover();
		this.popover && this.popover.openBy(this.shadowRoot.querySelector(".ui5-textarea-inner"));
	}

	async closePopover() {
		this.popover = await this._getPopover();
		this.popover && this.popover.close();
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector("[ui5-popover]");
	}

	_tokenizeText(value) {
		const tokenizedText = value.replace(/&/gm, "&amp;").replace(/"/gm, "&quot;").replace(/'/gm, "&apos;").replace(/</gm, "&lt;")
			.replace(/>/gm, "&gt;")
			.split("\n");

		if (tokenizedText.length < this.rows) {
			return this._mapTokenizedTextToObject([...tokenizedText, ...Array(this.rows - tokenizedText.length).fill("")]);
		}

		return this._mapTokenizedTextToObject(tokenizedText);
	}

	_mapTokenizedTextToObject(tokenizedText) {
		return tokenizedText.map((token, index) => {
			return {
				text: token,
				last: index === (tokenizedText.length - 1),
			};
		});
	}

	_calcExceededText() {
		let calcedMaxLength,
			exceededText,
			leftCharactersCount;

		if (this.showExceededText) {
			const maxLength = this.maxlength || 0;

			if (maxLength) {
				leftCharactersCount = maxLength - this.value.length;

				if (leftCharactersCount >= 0) {
					exceededText = this.i18nBundle.getText(TEXTAREA_CHARACTERS_LEFT, [leftCharactersCount]);
				} else {
					exceededText = this.i18nBundle.getText(TEXTAREA_CHARACTERS_EXCEEDED, [Math.abs(leftCharactersCount)]);
				}
			}
		} else {
			calcedMaxLength = this.maxlength;
		}

		return {
			exceededText, leftCharactersCount, calcedMaxLength,
		};
	}

	get classes() {
		return {
			valueStateMsg: {
				"ui5-valuestatemessage--error": this.valueState === ValueState.Error,
				"ui5-valuestatemessage--warning": this.valueState === ValueState.Warning || this.exceeding,
				"ui5-valuestatemessage--information": this.valueState === ValueState.Information,
			},
		};
	}

	get styles() {
		const lineHeight = 1.4 * 16;

		return {
			mirror: {
				"max-height": this._maxHeight,
			},
			main: {
				width: "100%",
				height: (this.rows && !this.growing) ? `${this.rows * lineHeight}px` : "100%",
			},
			focusDiv: {
				"height": (this.showExceededText ? "calc(100% - 26px)" : "100%"),
				"max-height": (this._maxHeight),
			},
			valueStateMsgPopover: {
				"max-width": `${this._width}px`,
			},
		};
	}

	get tabIndex() {
		return this.disabled ? undefined : "0";
	}

	get ariaLabelText() {
		const effectiveAriaLabelText = getEffectiveAriaLabelText(this);

		if (this.showExceededText) {
			if (effectiveAriaLabelText) {
				return `${effectiveAriaLabelText} ${this._exceededTextProps.exceededText}`;
			}

			return this._exceededTextProps.exceededText;
		}

		return effectiveAriaLabelText;
	}

	get ariaDescribedBy() {
		return this.hasValueState ? `${this._id}-valueStateDesc` : undefined;
	}

	get ariaValueStateHiddenText() {
		if (!this.hasValueState) {
			return;
		}

		if (this.hasCustomValueState) {
			return this.valueStateMessageText.map(el => el.textContent).join(" ");
		}

		return this.valueStateText;
	}

	get ariaInvalid() {
		return this.valueState === "Error" ? "true" : undefined;
	}

	get openValueStateMsgPopover() {
		return !this._firstRendering && this._openValueStateMsgPopover && this.displayValueStateMessagePopover;
	}

	get displayValueStateMessagePopover() {
		return this.hasCustomValueState || this.hasValueState || this.exceeding;
	}

	get hasCustomValueState() {
		return !!this.valueStateMessage.length && this.hasValueState;
	}

	get hasValueState() {
		return this.valueState === ValueState.Error || this.valueState === ValueState.Warning || this.valueState === ValueState.Information;
	}

	get valueStateMessageText() {
		return this.valueStateMessage.map(x => x.cloneNode(true));
	}

	get valueStateText() {
		if (this.valueState !== ValueState.Error && this.exceeding) {
			return this.valueStateTextMappings()[ValueState.Warning];
		}

		return this.valueStateTextMappings()[this.valueState];
	}

	valueStateTextMappings() {
		const i18nBundle = this.i18nBundle;

		return {
			"Information": i18nBundle.getText(VALUE_STATE_INFORMATION),
			"Error": i18nBundle.getText(VALUE_STATE_ERROR),
			"Warning": i18nBundle.getText(VALUE_STATE_WARNING),
		};
	}

	static get dependencies() {
		return [Popover];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}
}

TextArea.define();

const block0$14 = (context) => { return scopedHtml`<div class="ui5-timeline-root"><ul class="ui5-timeline-list" role="listbox" aria-live="polite" aria-label="${ifDefined(context.ariaLabel)}">${ repeat(context.items, (item, index) => item._id || index, (item, index) => block1$U(item)) }</ul></div>`; };
const block1$U = (item, index, context) => { return scopedHtml`<li class="ui5-timeline-list-item" style="list-style-type: none;"><slot name="${ifDefined(item._individualSlot)}"></slot></li>`; };


const main$14 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$14(context);
};

const block0$15 = (context) => { return scopedHtml`<div class="ui5-tli-root" dir="${ifDefined(context.effectiveDir)}"><div class="ui5-tli-indicator">${ context.icon ? block1$V(context) : undefined }</div><div class="ui5-tli-bubble" tabindex="${ifDefined(context._tabIndex)}" role="option" data-sap-focus-ref><div class="ui5-tli-title">${ context.itemName ? block2$R(context) : undefined }<span>${ifDefined(context.titleText)}</span></div><div class="ui5-tli-subtitle">${ifDefined(context.subtitleText)}</div>${ context.textContent ? block5$o() : undefined }<span class="ui5-tli-bubble-arrow ui5-tli-bubble-arrow--left"></span></div></div> `; };
const block1$V = (context) => { return scopedHtml`<div class="ui5-tli-icon-outer"><ui5-icon class="ui5-tli-icon" name="${ifDefined(context.icon)}"></ui5-icon></div>`; };
const block2$R = (context) => { return scopedHtml`${ context.itemNameClickable ? block3$C(context) : undefined }${ !context.itemNameClickable ? block4$u(context) : undefined }`; };
const block3$C = (context) => { return scopedHtml`<ui5-link @click="${context.onItemNamePress}">${ifDefined(context.itemName)}</ui5-link>`; };
const block4$u = (context) => { return scopedHtml`<span>${ifDefined(context.itemName)}</span>`; };
const block5$o = (context) => { return scopedHtml`<div class="ui5-tli-desc"><slot></slot></div>`; };


const main$15 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$15(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$g = ":host(:not([hidden])){display:block}.ui5-tli-root{display:flex}.ui5-tli-indicator{position:relative;width:2rem}.ui5-tli-indicator:before{content:\"\";display:inline-block;background-color:var(--sapContent_ForegroundBorderColor);width:1px;position:absolute;top:2.125rem;bottom:-1.625rem;left:50%}:host(:not([icon])) .ui5-tli-indicator:before{bottom:-2.125rem;top:1.875rem}:host(:not([icon])) .ui5-tli-indicator:after{content:\"\";display:inline-block;box-sizing:border-box;border:1px solid var(--sapContent_NonInteractiveIconColor);background-color:var(--sapContent_NonInteractiveIconColor);border-radius:50%;width:.4375rem;height:.4375rem;position:absolute;top:.9375rem;left:50%;transform:translateX(-50%)}:host(:last-child) .ui5-tli-indicator:before{display:none}.ui5-tli-icon-outer{display:flex;justify-content:center;align-items:center;margin-top:.25rem;height:1.625rem;width:2rem}.ui5-tli-icon{color:var(--sapContent_NonInteractiveIconColor);height:1.375rem;width:1.375rem}.ui5-tli-bubble{background:var(--sapGroup_ContentBackground);border:1px solid var(--sapList_BorderColor);box-sizing:border-box;border-radius:.25rem;flex:1;position:relative;margin-left:.5rem;padding:var(--_ui5_tl_bubble_padding)}.ui5-tli-bubble:focus{outline:none}.ui5-tli-bubble:focus:after{content:\"\";border:var(--_ui5_TimelineItem_bubble_outline_width) dotted var(--sapContent_FocusColor);position:absolute;top:var(--_ui5_TimelineItem_bubble_outline_top);right:var(--_ui5_TimelineItem_bubble_outline_right);bottom:var(--_ui5_TimelineItem_bubble_outline_bottom);left:var(--_ui5_TimelineItem_bubble_outline_left);pointer-events:none}.ui5-tli-bubble-arrow{width:var(--_ui5_TimelineItem_arrow_size);padding-bottom:var(--_ui5_TimelineItem_arrow_size);position:absolute;pointer-events:none;top:0;left:0;overflow:hidden}.ui5-tli-bubble-arrow:before{content:\"\";background:var(--sapGroup_ContentBackground);border:1px solid var(--sapList_BorderColor);position:absolute;top:0;left:0;width:100%;height:100%;transform-origin:0 100%;transform:rotate(45deg)}.ui5-tli-bubble-arrow--left{left:calc(-1*var(--_ui5_TimelineItem_arrow_size))}.ui5-tli-bubble-arrow--left:before{left:50%;width:50%;transform-origin:100% 100%}.ui5-tli-desc,.ui5-tli-title{color:var(--sapTextColor);font-family:\"72override\",var(--sapFontFamily);font-weight:400;font-size:var(--sapFontSize)}.ui5-tli-title span{display:inline-block;vertical-align:top}.ui5-tli-subtitle{color:var(--sapContent_LabelColor);font-family:\"72override\",var(--sapFontFamily);font-weight:400;font-size:var(--sapFontSmallSize);padding-top:.375rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-tli-desc{padding-top:.75rem}[dir=rtl] .ui5-tli-bubble-arrow--left{right:calc(-1*var(--_ui5_TimelineItem_arrow_size));left:auto;transform:scaleX(-1)}[dir=rtl] .ui5-tli-bubble{margin-left:auto;margin-right:.5rem}[dir=rtl] .ui5-tli-bubble:focus:after{left:var(--_ui5_TimelineItem_bubble_rtl_left_offset);right:var(--_ui5_TimelineItem_bubble_rtl_right_offset)}";

/**
 * @public
 */
const metadata$Z = {
	tag: "ui5-timeline-item",
	slots: /** @lends sap.ui.webcomponents.main.TimelineItem.prototype */ {
		/**
		 * Determines the description of the <code>ui5-timeline-item</code>.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	properties: /** @lends sap.ui.webcomponents.main.TimelineItem.prototype */ {
		/**
		 * Defines the icon to be displayed as graphical element within the <code>ui5-timeline-item</code>.
		 * SAP-icons font provides numerous options.
		 * <br><br>
		 *
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines the name of the item.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		itemName: {
			type: String,
		},

		/**
		 * Defines whether the <code>itemName</code> is clickable.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		itemNameClickable: {
			type: Boolean,
		},

		/**
		 * Defines the title text of the component.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		titleText: {
			type: String,
		},

		/**
		 * Defines the subtitle text of the component.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		subtitleText: {
			type: String,
		},

		_tabIndex: {
			type: String,
			defaultValue: "-1",
			noAttribute: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TimelineItem.prototype */ {
		/**
		 * Fired when the item name is pressed either with a
		 * click/tap or by using the Enter or Space key.
		 * <br><br>
		 * <b>Note:</b> The event will not be fired if the <code>item-name-clickable</code>
		 * attribute is not set.
		 *
		 * @event sap.ui.webcomponents.main.TimelineItem#item-name-click
		 * @public
		 */
		"item-name-click": {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * An entry posted on the timeline.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TimelineItem
 * @extends UI5Element
 * @tagname ui5-timeline-item
 * @public
 */
class TimelineItem extends UI5Element {
	static get metadata() {
		return metadata$Z;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$15;
	}

	static get styles() {
		return styles$g;
	}

	constructor() {
		super();
	}

	onItemNamePress() {
		this.fireEvent("item-name-click", {});
	}

	static get dependencies() {
		return [
			Icon,
			Link,
		];
	}
}

TimelineItem.define();

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var styles$h = ":host(:not([hidden])){display:block}.ui5-timeline-root{padding:var(--_ui5_tl_padding);box-sizing:border-box;overflow:hidden}.ui5-timeline-list{list-style:none;margin:0;padding:0}.ui5-timeline-list-item{margin-bottom:var(--_ui5_tl_li_margin_bottom)}.ui5-timeline-list-item:last-child{margin-bottom:0}";

/**
 * @public
 */
const metadata$_ = {
	tag: "ui5-timeline",
	languageAware: true,
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Timeline.prototype */ {
		/**
		 * Determines the content of the <code>ui5-timeline</code>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
			individualSlots: true,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-timeline</code> component shows entries (such as objects, events, or posts) in chronological order.
 * A common use case is to provide information about changes to an object, or events related to an object.
 * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
 * There are two distinct variants of the timeline: basic and social. The basic timeline is read-only,
 * while the social timeline offers a high level of interaction and collaboration, and is integrated within SAP Jam.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Timeline
 * @extends UI5Element
 * @tagname ui5-timeline
 * @appenddocs TimelineItem
 * @public
 * @since 0.8.0
 */
class Timeline extends UI5Element {
	static get metadata() {
		return metadata$_;
	}

	static get styles() {
		return styles$h;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$14;
	}

	constructor() {
		super();

		this.initItemNavigation();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");
	}

	static get dependencies() {
		return [TimelineItem];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents");
	}

	initItemNavigation() {
		this._itemNavigation = new ItemNavigation(this);
		this._itemNavigation.getItemsCallback = () => this.items;
	}

	get ariaLabel() {
		return this.i18nBundle.getText(TIMELINE_ARIA_LABEL);
	}
}

Timeline.define();

const name$j = "time-entry-request";
const pathData$j = "M416 272q0 16-16 16H224V144q0-16 16-16t16 16v112h144q16 0 16 16zM256 0q53 0 99.5 20T437 75t55 81.5 20 99.5q0 49-17.5 92.5T447 426t-71 56-88 28v-32q40-6 75.5-25.5t61-49T465 336t15-80q0-46-17.5-87t-48-71.5-71.5-48T256 32q-38 0-72.5 12T121 77.5t-49 51T41 192H8q11-41 34.5-76.5t56-61 72.5-40T256 0zM144 480q16 0 16 16 0 6-4.5 11t-11.5 5H16q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h128zm0-64q16 0 16 16 0 6-4.5 11t-11.5 5H16q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h128zm0-64q16 0 16 16 0 6-4.5 11t-11.5 5H16q-6 0-11-5t-5-11q0-7 5-11.5t11-4.5h128z";
const ltr$j = false;

registerIcon(name$j, { pathData: pathData$j, ltr: ltr$j});

const block0$16 = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}" class="ui5-time-picker-root" @keydown="${context._ontimepickerkeydown}"><ui5-input id="${ifDefined(context._id)}-inner" value="${ifDefined(context.value)}" placeholder="${ifDefined(context._placeholder)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" @click="${context._handleInputClick}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" class="ui5-time-picker-input">${ context.valueStateMessage.length ? block1$W() : undefined }${ !context.readonly ? block2$S(context) : undefined }</ui5-input></div>`; };
const block1$W = (context) => { return scopedHtml`<slot name="valueStateMessage" slot="valueStateMessage"></slot>`; };
const block2$S = (context) => { return scopedHtml`<ui5-icon slot="icon" name="time-entry-request" tabindex="-1" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" class="ui5-time-picker-input-icon-button"></ui5-icon>`; };


const main$16 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$16(context);
};

const block0$17 = (context) => { return scopedHtml`<ui5-responsive-popover id="${ifDefined(context._id)}-responsive-popover" allow-target-overlap="${ifDefined(context._respPopover.allowTargetOverlap)}" placement-type="${ifDefined(context._respPopover.placementType)}" _hide-header no-arrow no-stretch horizontal-align="${ifDefined(context._respPopover.horizontalAlign)}" stay-open-on-scroll="${ifDefined(context._respPopover.stayOpenOnScroll)}" @ui5-after-close="${ifDefined(context._respPopover.afterClose)}" @ui5-after-open="${ifDefined(context._respPopover.afterOpen)}" class="ui5-time-picker-popover" @keydown="${context._ontimepickerpopoverkeydown}" @wheel="${context._handleWheel}"><div class="${classMap(context.classes.container)}" @keydown=${context._oncontainerkeydown} tabindex="-1" @focusin="${context._onfocuscontainerin}">${ context.shouldBuildHoursSlider ? block1$X(context) : undefined }${ context.shouldBuildMinutesSlider ? block2$T(context) : undefined }${ context.shouldBuildSecondsSlider ? block3$D(context) : undefined }${ context.shouldBuildPeriodsSlider ? block4$v(context) : undefined }</div><div slot="footer" class="ui5-time-picker-footer" @keydown=${context._onfooterkeydown}><ui5-button id="submit" design="Emphasized" @click="${context.submitPickers}">${ifDefined(context.submitButtonLabel)}</ui5-button><ui5-button id="close" design="Transparent" @click="${context.closePicker}">${ifDefined(context.cancelButtonLabel)}</ui5-button></div></ui5-responsive-popover>`; };
const block1$X = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.hoursSliderTitle)}" ._items="${ifDefined(context.hoursArray)}" @click="${context.handleSliderClicked}" class="ui5-time-picker-wheelslider ui5-time-picker-hours-wheelslider" cyclic></ui5-wheelslider>`; };
const block2$T = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.minutesSliderTitle)}" ._items="${ifDefined(context.minutesArray)}" @click="${context.handleSliderClicked}" class="ui5-time-picker-wheelslider ui5-time-picker-minutes-wheelslider" cyclic></ui5-wheelslider>`; };
const block3$D = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.secondsSliderTitle)}" ._items="${ifDefined(context.secondsArray)}" @click="${context.handleSliderClicked}" class="ui5-time-picker-wheelslider ui5-time-picker-seconds-wheelslider" cyclic></ui5-wheelslider>`; };
const block4$v = (context) => { return scopedHtml`<ui5-wheelslider label = "${ifDefined(context.periodSliderTitle)}" value="AM" ._items="${ifDefined(context.periodsArray)}" @click="${context.handleSliderClicked}" class="ui5-time-picker-wheelslider ui5-time-picker-period-wheelslider"></ui5-wheelslider>`; };


const main$17 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$17(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var TimePickerCss = ":host(:not([hidden])){display:inline-block}:host{color:var(--sapField_TextColor);background-color:var(--sapField_Background)}:host .ui5-time-picker-input{width:100%;color:inherit;background-color:inherit}.ui5-time-picker-input-icon-button{border-left:.0625rem solid transparent}.ui5-time-picker-input-icon-button:hover{cursor:pointer;border-left:var(--_ui5_time_picker_border);background:var(--sapButton_Hover_Background)}.ui5-time-picker-input-icon-button:active{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}.ui5-time-picker-input-icon-button[pressed]{background-color:var(--sapButton_Active_Background);color:var(--sapButton_Active_TextColor)}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var TimePickerPopoverCss = ".ui5-time-picker-sliders-container{display:flex;justify-content:center;align-items:stretch;direction:ltr;padding:.5rem;min-width:18rem;box-sizing:border-box}.ui5-time-picker-sliders-container.ui5-phone{height:90vh}.ui5-time-picker-footer{height:fit-content;display:flex;justify-content:flex-end;width:100%}.ui5-time-picker-wheelslider{padding-left:.25rem;padding-right:.25rem}.ui5-time-picker-footer>[ui5-button]{margin:1%;min-width:20%}";

/**
 * @public
 */
const metadata$$ = {
	tag: "ui5-time-picker",
	altTag: "ui5-timepicker",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.main.TimePicker.prototype */ {
		/**
		 * Defines a formatted time value.
		 *
		 * @type {string}
		 * @defaultvalue undefined
		 * @public
		 */
		value: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Defines a short hint, intended to aid the user with data entry when the
		 * <code>ui5-time-picker</code> has no value.
		 *
		 * <br><br>
		 * <b>Note:</b> When no placeholder is set, the format pattern is displayed as a placeholder.
		 * Passing an empty string as the value of this property will make the <code>ui5-time-picker</code> appear empty - without placeholder or format pattern.
		 *
		 * @type {string}
		 * @defaultvalue undefined
		 * @public
		 */
		placeholder: {
			type: String,
			defaultValue: undefined,
		},

		/**
		 * Determines the format, displayed in the input field.
		 *
		 * Example:
		 * HH:mm:ss -> 11:42:35
		 * hh:mm:ss a -> 2:23:15 PM
		 * mm:ss -> 12:04 (only minutes and seconds)
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		formatPattern: {
			type: String,
		},

		/**
		 * Defines the value state of the <code>ui5-time-picker</code>.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>None</code></li>
		 * <li><code>Error</code></li>
		 * <li><code>Warning</code></li>
		 * <li><code>Success</code></li>
		 * <li><code>Information</code></li>
		 * </ul>
		 *
		 * @type {ValueState}
		 * @defaultvalue "None"
		 * @public
		 */
		valueState: {
			type: ValueState,
			defaultValue: ValueState.None,
		},

		/**
		 * Determines whether the <code>ui5-time-picker</code> is displayed as disabled.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Determines whether the <code>ui5-time-picker</code> is displayed as readonly.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		readonly: {
			type: Boolean,
		},

		_isPickerOpen: {
			type: Boolean,
			noAttribute: true,
		},

		_respPopover: {
			type: Object,
		},

		_hours: {
			type: String,
		},

		_minutes: {
			type: String,
		},

		_seconds: {
			type: String,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.TimePicker.prototype */ {
		/**
		 * Defines the value state message that will be displayed as pop up under the <code>ui5-time-picker</code>.
		 * <br><br>
		 *
		 * <b>Note:</b> If not specified, a default text (in the respective language) will be displayed.
		 * <br>
		 * <b>Note:</b> The <code>valueStateMessage</code> would be displayed,
		 * when the <code>ui5-time-picker</code> is in <code>Information</code>, <code>Warning</code> or <code>Error</code> value state.
		 * @type {HTMLElement}
		 * @since 1.0.0-rc.8
		 * @slot
		 * @public
		 */
		valueStateMessage: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TimePicker.prototype */ {
		/**
		 * Fired when the input operation has finished by clicking the "OK" button or
		 * when the text in the input field has changed and the focus leaves the input field.
		 *
		 * @event
		 * @public
		*/
		change: {},
		/**
		 * Fired when the value of the <code>ui5-time-picker</code> is changed at each key stroke.
		 *
		 * @event
		 * @public
		*/
		input: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-time-picker</code> component provides an input field with assigned sliders which opens on user action.
 * The <code>ui5-time-picker</code> allows users to select a localized time using touch,
 * mouse, or keyboard input. It consists of two parts: the time input field and the
 * sliders.
 *
 * <h3>Usage</h3>
 * The user can enter a time by:
 * <ul>
 * <li>Using the sliders that opens in a popup</li>
 * <li>Typing it in directly in the input field</li>
 * </ul>
 * <br><br>
 * When the user makes an entry and chooses the enter key, the sliders shows the corresponding time.
 * When the user directly triggers the sliders display, the actual time is displayed.
 * For the <code>ui5-time-picker</code>
 *
 * <h3>Formatting</h3>
 *
 * If a time is entered by typing it into
 * the input field, it must fit to the used time format.
 * <br><br>
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * For more information, see <ui5-link target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table" class="api-table-content-cell-link">UTS #35: Unicode Locale Data Markup Language</ui5-link>.
 * <br><br>
 * For example, if the <code>format-pattern</code> is "HH:mm:ss",
 * a valid value string is "11:42:35" and the same is displayed in the input.
 *
 * <h3>Keyboard handling</h3>
 * [F4], [ALT]+[UP], [ALT]+[DOWN] Open/Close picker dialog and move focus to it.
 * <br>
 * When closed:
 * <ul>
 * <li>[PAGEUP] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.</li>
 * <li>[PAGEDOWN] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am and vice versa.</li>
 * <li>[SHIFT]+[PAGEUP] Increments minutes by 1.</li>
 * <li>[SHIFT]+ [PAGEDOWN] Decrements minutes by 1.</li>
 * <li>[SHIFT]+[CTRL]+[PAGEUP] Increments seconds by 1.</li>
 * <li>[SHIFT]+[CTRL]+ [PAGEDOWN] Decrements seconds by 1.</li>
 * </ul>
 * When opened:
 * <ul>
 * <li>[UP] If focus is on one of the selection lists: Select the value which is above the current value. If the first value is selected, select the last value in the list. Exception: AM/ PM List: stay on the first item.</li>
 * <li>[DOWN] If focus is on one of the selection lists: Select the value which is below the current value. If the last value is selected, select the first value in the list. Exception: AM/ PM List: stay on the last item.</li>
 * <li>[LEFT] If focus is on one of the selection lists: Move focus to the selection list which is left of the current selection list. If focus is at the first selection list, move focus to the last selection list.</li>
 * <li>[RIGHT] If focus is on one of the selection lists: Move focus to the selection list which is right of the current selection list. When focus is at the last selection list, move focus to the first selection list.</li>
 * <li>[PAGEUP] If focus is on one of the selection lists: Move focus to the first entry of this list.</li>
 * <li>[PAGEDOWN] If focus is on one of the selection lists: Move focus to the last entry of this list.</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/TimePicker.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TimePicker
 * @extends UI5Element
 * @tagname ui5-time-picker
 * @public
 * @since 1.0.0-rc.6
 */
class TimePicker extends UI5Element {
	static get metadata() {
		return metadata$$;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return TimePickerCss;
	}

	static get staticAreaTemplate() {
		return main$17;
	}

	static get template() {
		return main$16;
	}

	static get dependencies() {
		return [
			Icon,
			ResponsivePopover,
			WheelSlider,
			Input,
			Button,
		];
	}

	static async onDefine() {
		await Promise.all([
			fetchCldr(getLocale().getLanguage(), getLocale().getRegion(), getLocale().getScript()),
			fetchI18nBundle("@ui5/webcomponents"),
		]);
	}

	static get staticAreaStyles() {
		return [ResponsivePopoverCommonCss, TimePickerPopoverCss];
	}


	constructor() {
		super();

		this.prevValue = null;
		this._isPickerOpen = false;
		this.i18nBundle = getI18nBundle("@ui5/webcomponents");

		this._respPopover = {
			placementType: PopoverPlacementType.Bottom,
			horizontalAlign: PopoverHorizontalAlign.Left,
			allowTargetOverlap: true,
			stayOpenOnScroll: true,
			afterClose: () => {
				this._isPickerOpen = false;
				this.closePicker();
			},
		};

		this._hoursParameters = {
			minHour: 0,
			maxHour: 0,
			isTwelveHoursFormat: false,
		};

		this._slidersDomRefs = [];
	}

	onBeforeRendering() {
		if (!this.formatPattern) {
			this.formatPattern = LocaleData.getInstance(getLocale()).getTimePattern(this.getFormat().oFormatOptions.style);
		}

		if (this.value === undefined) {
			this.value = this.getFormat().format(new Date());
		}

		this._initHoursFormatParameters();
	}

	async _handleInputClick() {
		if (this._isPickerOpen) {
			return;
		}

		const inputField = await this._getInputField();

		if (inputField) {
			inputField.select();
		}
	}

	async _handleInputChange() {
		const nextValue = await this._getInput().getInputValue();
		const isValid = this.isValid(nextValue);

		this.setValue(nextValue);
		this.fireEvent("change", { value: nextValue, valid: isValid });
		this.fireEvent("value-changed", { value: nextValue, valid: isValid });
	}

	async _handleInputLiveChange() {
		const nextValue = await this._getInput().getInputValue();
		const isValid = this.isValid(nextValue);

		this.value = nextValue;
		this.setSlidersValue();
		this.fireEvent("input", { value: nextValue, valid: isValid });
	}

	setSlidersValue() {
		const currentDate = this._getInput() ? this.getFormat().parse(this._getInput().getAttribute("value")) : null,
			secondsSlider = this.secondsSlider,
			minutesSlider = this.minutesSlider,
			hoursSlider = this.hoursSlider,
			periodsSlider = this.periodsSlider;

		if (!currentDate) {
			return;
		}
		if (hoursSlider) {
			let tempValue = "";
			if (this._hoursParameters.isTwelveHoursFormat && currentDate.getHours() > this._hoursParameters.maxHour) {
				tempValue = currentDate.getHours() - 12;
			} else if (this._hoursParameters.isTwelveHoursFormat && currentDate.getHours() < this._hoursParameters.minHour) {
				tempValue = currentDate.getHours() + 12;
			} else {
				tempValue = currentDate.getHours();
			}
			if (tempValue.toString().length === 1) {
				hoursSlider.value = `0${tempValue}`;
			} else {
				hoursSlider.value = tempValue.toString();
			}
		}
		if (minutesSlider) {
			const tempValue = currentDate.getMinutes();
			if (tempValue.toString().length === 1) {
				minutesSlider.value = `0${tempValue}`;
			} else {
				minutesSlider.value = tempValue.toString();
			}
		}
		if (secondsSlider) {
			const tempValue = currentDate.getSeconds();
			if (tempValue.toString().length === 1) {
				secondsSlider.value = `0${tempValue}`;
			} else {
				secondsSlider.value = tempValue.toString();
			}
		}
		if (this._hoursParameters.isTwelveHoursFormat && periodsSlider && this._hoursParameters.minHour === 1) {
			periodsSlider.value = currentDate.getHours() >= this._hoursParameters.maxHour ? this.periodsArray[1] : this.periodsArray[0];
		} else if (this._hoursParameters.isTwelveHoursFormat && periodsSlider) {
			periodsSlider.value = (currentDate.getHours() > this._hoursParameters.maxHour || currentDate.getHours() === this._hoursParameters.minHour) ? this.periodsArray[1] : this.periodsArray[0];
		}
	}

	/**
	 * Closes the picker
	 * @public
	 */
	async closePicker() {
		await this._getPopover();
		this.responsivePopover.close();
		this._isPickerOpen = false;

		for (let i = 0; i < this._slidersDomRefs.length; i++) {
			this._slidersDomRefs[i].collapseSlider();
		}
	}

	/**
	 * Opens the picker.
	 * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.
	 * Specify this option to focus the input field.
	 * @public
	 */
	async openPicker() {
		await this._getPopover();
		this.responsivePopover.open(this);
		this._isPickerOpen = true;
		this._slidersDomRefs = await this.slidersDomRefs();

		this.setSlidersValue();

		if (this._slidersDomRefs[0]) {
			this._slidersDomRefs[0].focus();
		}
	}

	togglePicker() {
		if (this.isOpen()) {
			this.closePicker();
			this._isPickerOpen = false;
		} else if (this._canOpenPicker()) {
			this.openPicker();
			this._isPickerOpen = true;
		}
	}

	/**
	 * Checks if a value is valid against the current date format of the TimePicker
	 * @param {string} value A value to be tested against the current date format
	 * @public
	 */
	isOpen() {
		return !!this._isPickerOpen;
	}

	_canOpenPicker() {
		return !this.disabled && !this.readonly;
	}

	async _getPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.responsivePopover = staticAreaItem.querySelector("[ui5-responsive-popover]");
		return this.responsivePopover;
	}

	get secondsArray() {
		return getSeconds();
	}

	get minutesArray() {
		return getMinutes();
	}

	get hoursArray() {
		return getHours(this._hoursParameters);
	}

	get periodsArray() {
		return this.getFormat().aDayPeriods.map(x => x.toUpperCase());
	}

	async slidersDomRefs() {
		await this._getPopover();
		return this.responsivePopover.default.length ? [...this.responsivePopover.default[0].children].filter(x => x.isUI5Element) : this.responsivePopover.default;
	}

	_getInput() {
		return this.shadowRoot.querySelector("[ui5-input]");
	}

	_getInputField() {
		const input = this._getInput();
		return input && input.getInputDOMRef();
	}

	get secondsSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-time-picker-seconds-wheelslider");
	}

	get minutesSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-time-picker-minutes-wheelslider");
	}

	get hoursSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-time-picker-hours-wheelslider");
	}

	get periodsSlider() {
		return this.responsivePopover && this.responsivePopover.querySelector(".ui5-time-picker-period-wheelslider");
	}

	submitPickers() {
		const selectedDate = new Date(),
			secondsSlider = this.secondsSlider,
			minutesSlider = this.minutesSlider,
			hoursSlider = this.hoursSlider,
			periodsSlider = this.periodsSlider,
			minutes = minutesSlider ? minutesSlider.getAttribute("value") : "0",
			seconds = secondsSlider ? secondsSlider.getAttribute("value") : "0",
			period = periodsSlider ? periodsSlider.getAttribute("value") : this.periodsArray[0],
			isTwelveHoursFormat = this._hoursParameters.isTwelveHoursFormat;

		let hours = hoursSlider ? hoursSlider.getAttribute("value") : this._hoursParameters.minHour.toString();

		if (isTwelveHoursFormat) {
			if (period === this.periodsArray[0]) { // AM
				hours = hours === "12" ? 0 : hours;
			}

			if (period === this.periodsArray[1]) { // PM
				hours = hours === "12" ? hours : hours * 1 + 12;
			}
		}

		selectedDate.setHours(hours);
		selectedDate.setMinutes(minutes);
		selectedDate.setSeconds(seconds);

		this.setPrevValue(this.value);
		this.setValue(this.getFormat().format(selectedDate));

		if (this.prevValue !== this.value) {
			this.fireEvent("change", { value: this.value, valid: true });
			this.previousValue = this.value;
		}

		this.closePicker();
	}

	/**
	 * Checks if a value is valid against the current format patternt of the TimePicker.
	 *
	 * <br><br>
	 * <b>Note:</b> an empty string is considered as valid value.
	 * @param {string} value The value to be tested against the current date format
	 * @public
	 */
	isValid(value) {
		if (value === "") {
			return true;
		}
		return !!(value && this.getFormat().parse(value));
	}

	normalizeValue(value) {
		if (value === "") {
			return value;
		}

		return this.getFormat().format(this.getFormat().parse(value));
	}

	get _formatPattern() {
		return this.formatPattern || "medium"; // get from config
	}

	get _isPattern() {
		return this._formatPattern !== "medium" && this._formatPattern !== "short" && this._formatPattern !== "long";
	}

	get _displayFormat() {
		return this.getFormat().oFormatOptions.pattern;
	}

	get _placeholder() {
		return this.placeholder !== undefined ? this.placeholder : this._displayFormat;
	}

	handleSliderClicked(event) {
		if (event.target._expanded) {
			this.openSlider(event.target.label);
		}
	}

	openSlider(label) {
		for (let i = 0; i < this._slidersDomRefs.length; i++) {
			if (this._slidersDomRefs[i].label !== label) {
				this._slidersDomRefs[i].collapseSlider();
			}
		}
	}

	async _onfocuscontainerin(e) {
		if (e.target !== e.currentTarget) {
			return;
		}
		let sliders = [];
		if (this._slidersDomRefs.length) {
			sliders = await this.slidersDomRefs();
		} else {
			sliders = this._slidersDomRefs;
		}
		if (sliders[0]) {
			sliders[0].focus();
		}
	}

	async _oncontainerkeydown(e) {
		if (isLeft(e)) {
			let expandedSliderIndex = 0;
			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex - 1]) {
				this._slidersDomRefs[expandedSliderIndex - 1].focus();
			} else {
				this._slidersDomRefs[this._slidersDomRefs.length - 1].focus();
			}
		} else if (isRight(e)) {
			let expandedSliderIndex = 0;

			for (let i = 0; i < this._slidersDomRefs.length; i++) {
				if (this._slidersDomRefs[i]._expanded) {
					expandedSliderIndex = i;
				}
			}
			if (this._slidersDomRefs[expandedSliderIndex + 1]) {
				this._slidersDomRefs[expandedSliderIndex + 1].focus();
			} else {
				this._slidersDomRefs[0].focus();
			}
		}

		if (isTabNext(e) && e.target === this._slidersDomRefs[this._slidersDomRefs.length - 1]) {
			const responsivePopover = await this._getPopover();
			e.preventDefault();
			responsivePopover.querySelector(".ui5-time-picker-footer").firstElementChild.focus();
		} else if (isTabPrevious(e) && e.target === this._slidersDomRefs[0]) {
			const responsivePopover = await this._getPopover();
			e.preventDefault();
			responsivePopover.querySelector(`.ui5-time-picker-footer`).lastElementChild.focus();
		}
	}

	_onfooterkeydown(e) {
		if (isTabNext(e) && e.target === e.target.parentElement.lastElementChild) {
			e.preventDefault();
			this._slidersDomRefs[0].focus();
		}

		if (isTabPrevious(e) && e.target === e.target.parentElement.firstElementChild) {
			e.preventDefault();
			this._slidersDomRefs[this._slidersDomRefs.length - 1].focus();
		}
	}

	_ontimepickerkeydown(e) {
		this._handleTimepickerKeysDown(e);
	}

	_ontimepickerpopoverkeydown(e) {
		this._handleTimepickerKeysDown(e);
	}

	_handleTimepickerKeysDown(e) {
		if (isShow(e)) {
			e.preventDefault();
			this.togglePicker();
		}

		if (this.isOpen()) {
			return;
		}

		if (isPageUpShiftCtrl(e)) {
			e.preventDefault();
			this._incrementValue(true, false, false, true);
		} else if (isPageUpShift(e)) {
			e.preventDefault();
			this._incrementValue(true, false, true, false);
		} else if (isPageUp(e)) {
			e.preventDefault();
			this._incrementValue(true, true, false, false);
		}

		if (isPageDownShiftCtrl(e)) {
			e.preventDefault();
			this._incrementValue(false, false, false, true);
		} else if (isPageDownShift(e)) {
			e.preventDefault();
			this._incrementValue(false, false, true, false);
		} else if (isPageDown(e)) {
			e.preventDefault();
			this._incrementValue(false, true, false, false);
		}
	}

	_incrementValue(increment, hours, minutes, seconds) {
		const date = this.dateValue;
		const incrementStep = increment ? 1 : -1;

		if (hours && this.shouldBuildHoursSlider) {
			date.setHours(date.getHours() + incrementStep);
		} else if (minutes && this.shouldBuildMinutesSlider) {
			date.setMinutes(date.getMinutes() + incrementStep);
		} else if (seconds && this.shouldBuildSecondsSlider) {
			date.setSeconds(date.getSeconds() + incrementStep);
		} else {
			return;
		}

		this.setValue(this.formatValue(date));
		this.fireEvent("change", { value: this.value, valid: true });
	}

	_handleWheel(e) {
		e.preventDefault();
	}

	getFormat() {
		if (this._isPattern) {
			this._oDateFormat = DateFormat.getInstance({
				pattern: this._formatPattern,
			});
		} else {
			this._oDateFormat = DateFormat.getInstance({
				style: this._formatPattern,
			});
		}

		return this._oDateFormat;
	}

	setValue(value) {
		if (this.isValid(value)) {
			this.value = this.normalizeValue(value);
			this.setSlidersValue();
			this.valueState = ValueState.None;
		} else {
			this.valueState = ValueState.Error;
		}
	}

	setPrevValue(value) {
		if (this.isValid(value)) {
			this.prevValue = this.normalizeValue(value);
		}
	}

	/**
	 * Formats a Java Script date object into a string representing a locale date and time
	 * according to the <code>formatPattern</code> property of the TimePicker instance
	 * @param {object} oDate A Java Script date object to be formatted as string
	 * @public
	 */
	formatValue(oDate) {
		return this.getFormat().format(oDate);
	}

	_getSlidersContained() {
		const formatArray = this.getFormat().aFormatArray;
		return getTimeControlsByFormat(formatArray, this._hoursParameters);
	}

	_initHoursFormatParameters() {
		const formatArray = this.getFormat().aFormatArray;
		const config = getHoursConfigByFormat(formatArray[0].type);

		this._hoursParameters.minHour = config.minHour;
		this._hoursParameters.maxHour = config.maxHour;
		this._hoursParameters.isTwelveHoursFormat = config.isTwelveHoursFormat;
	}

	/**
	 * Currently selected date represented as JavaScript Date instance
	 *
	 * @readonly
	 * @type { Date }
	 * @public
	 */
	get dateValue() {
		return this.getFormat().parse(this.value);
	}

	get shouldBuildHoursSlider() {
		return this._getSlidersContained()[0];
	}

	get shouldBuildMinutesSlider() {
		return this._getSlidersContained()[1];
	}

	get shouldBuildSecondsSlider() {
		return this._getSlidersContained()[2];
	}

	get shouldBuildPeriodsSlider() {
		return this._getSlidersContained()[3];
	}

	get hoursSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);
	}

	get minutesSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);
	}

	get secondsSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);
	}

	get periodSliderTitle() {
		return this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);
	}

	get submitButtonLabel() {
		return this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);
	}

	get cancelButtonLabel() {
		return this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);
	}

	get classes() {
		return {
			container: {
				"ui5-time-picker-sliders-container": true,
				"ui5-phone": isPhone(),
			},
		};
	}
}

TimePicker.define();

/**
 * @lends sap.ui.webcomponents.main.types.ToastPlacement.prototype
 * @public
 */
const ToastPlacements = {

	/**
	 * <code>ui5-toast</code> is placed at the <code>TopStart</code> position of its container.
	 * @public
	 * @type {TopStart}
	 */
	TopStart: "TopStart",

	/**
	 * <code>ui5-toast</code> is placed at the <code>TopCenter</code> position of its container.
	 * @public
	 * @type {TopCenter}
	 */
	TopCenter: "TopCenter",

	/**
	 * <code>ui5-toast</code> is placed at the <code>TopEnd</code> position of its container.
	 * @public
	 * @type {TopEnd}
	 */
	TopEnd: "TopEnd",

	/**
	 * <code>ui5-toast</code> is placed at the <code>MiddleStart</code> position of its container.
	 * @public
	 * @type {MiddleStart}
	 */
	MiddleStart: "MiddleStart",

	/**
	 * <code>ui5-toast</code> is placed at the <code>MiddleCenter</code> position of its container.
	 * @public
	 * @type {MiddleCenter}
	 */
	MiddleCenter: "MiddleCenter",

	/**
	 * <code>ui5-toast</code> is placed at the <code>MiddleEnd</code> position of its container.
	 * @public
	 * @type {MiddleEnd}
	 */
	MiddleEnd: "MiddleEnd",

	/**
	 * <code>ui5-toast</code> is placed at the <code>BottomStart</code> position of its container.
	 * @public
	 * @type {BottomStart}
	 */
	BottomStart: "BottomStart",

	/**
	 * <code>ui5-toast</code> is placed at the <code>BottomCenter</code> position of its container.
	 * Default placement (no selection)
	 * @public
	 * @type {BottomCenter}
	 */
	BottomCenter: "BottomCenter",

	/**
	 * <code>ui5-toast</code> is placed at the <code>BottomEnd</code> position of its container.
	 * @public
	 * @type {BottomEnd}
	 */
	BottomEnd: "BottomEnd",
};

/**
 * @class
 * Defines where the <code>ui5-toast</code> will be placed.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.ToastPlacement
 * @public
 * @enum {string}
 */
class ToastPlacement extends DataType {
	static isValid(value) {
		return !!ToastPlacements[value];
	}
}

ToastPlacement.generataTypeAcessors(ToastPlacements);

const block0$18 = (context) => { return scopedHtml`<div class="ui5-toast-root" role="alert" style="${styleMap(context.styles.root)}" dir="${ifDefined(context.effectiveDir)}" @mouseover="${context._onmouseover}" @mouseleave="${context._onmouseleave}" @transitionend="${context._ontransitionend}"><bdi><slot></slot></bdi></div>`; };


const main$18 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$18(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var ToastCss = ":host{font-family:\"72override\",var(--sapFontFamily);color:var(--sapTextColor);font-size:var(--sapFontSize)}:host([open]) .ui5-toast-root{display:block}.ui5-toast-root{position:fixed;display:none;box-sizing:border-box;max-width:15rem;overflow:hidden;padding:1rem;background:var(--_ui5_toast_background);box-shadow:var(--_ui5_toast_shadow);border-radius:.25rem;transition-property:opacity;opacity:1;font-family:inherit;color:inherit;font-weight:inherit;font-size:inherit;word-wrap:break-word;text-align:center;text-overflow:ellipsis;white-space:pre-line}@media screen and (-ms-high-contrast:active){.ui5-toast-root{border:1px solid var(--sapPageFooter_BorderColor)}}:host(:not([placement])) .ui5-toast-root{bottom:var(--_ui5_toast_vertical_offset);left:50%;transform:translateX(-50%)}:host([placement=TopStart]) .ui5-toast-root{top:var(--_ui5_toast_vertical_offset);left:var(--_ui5_toast_horizontal_offset)}:host([placement=MiddleStart]) .ui5-toast-root{left:var(--_ui5_toast_horizontal_offset);top:50%;transform:translateY(-50%)}:host([placement=BottomStart]) .ui5-toast-root{left:var(--_ui5_toast_horizontal_offset);bottom:var(--_ui5_toast_vertical_offset)}:host([placement=TopCenter]) .ui5-toast-root{top:var(--_ui5_toast_vertical_offset);left:50%;transform:translateX(-50%)}:host([placement=MiddleCenter]) .ui5-toast-root{left:50%;top:50%;transform:translate(-50%,-50%)}:host([placement=BottomCenter]) .ui5-toast-root{bottom:var(--_ui5_toast_vertical_offset);left:50%;transform:translateX(-50%)}:host([placement=TopEnd]) .ui5-toast-root{right:var(--_ui5_toast_horizontal_offset);top:var(--_ui5_toast_vertical_offset)}:host([placement=MiddleEnd]) .ui5-toast-root{right:var(--_ui5_toast_horizontal_offset);top:50%;transform:translateY(-50%)}:host([placement=BottomEnd]) .ui5-toast-root{right:var(--_ui5_toast_horizontal_offset);bottom:var(--_ui5_toast_vertical_offset)}";

// Constants
const MIN_DURATION = 500;
const MAX_DURATION = 1000;

/**
 * @public
 */
const metadata$10 = {
	tag: "ui5-toast",
	properties: /** @lends sap.ui.webcomponents.main.Toast.prototype */ {

		/**
		 * Defines the duration in milliseconds for which <code>ui5-toast</code>
		 * remains on the screen before it's automatically closed.
		 * <br><br>
		 * <b>Note:</b> The minimum supported value is <code>500</code> ms
		 * and even if a lower value is set, the duration would remain <code>500</code> ms.
		 *
		 * @type {Integer}
		 * @defaultvalue 3000
		 * @public
		 */
		duration: {
			type: Integer,
			defaultValue: 3000,
		},

		/**
		 * Defines the placement of the <code>ui5-toast</code> web component.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>TopStart</code></li>
		 * <li><code>TopCenter</code></li>
		 * <li><code>TopEnd</code></li>
		 * <li><code>MiddleStart</code></li>
		 * <li><code>MiddleCenter</code></li>
		 * <li><code>MiddleEnd</code></li>
		 * <li><code>BottomStart</code></li>
		 * <li><code>BottomCenter</code></li>
		 * <li><code>BottomEnd</code></li>
		 * </ul>
		 *
		 * @type {ToastPlacement}
		 * @defaultvalue "BottomCenter"
		 * @public
		 */
		placement: {
			type: ToastPlacement,
			defaultValue: ToastPlacement.BottomCenter,
		},

		/**
		 * Indicates whether <code>ui5-toast</code> is open (visible).
		 * @type {boolean}
		 * @private
		 */
		open: {
			type: Boolean,
		},

		/**
		 * Indicates whether <code>ui5-toast</code> is hovered.
		 * @type {boolean}
		 * @private
		 */
		hover: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.Toast.prototype */ {
		/**
		 * Defines the text of the <code>ui5-toast</code> web component.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-toast</code> is a small, non-disruptive popup for success or information messages that
 * disappears automatically after a few seconds.
 *
 *
 * <h3>Usage</h3>
 *
 * <h4>When to use:</h4>
 * <ul>
 * <li>You want to display a short success or information message.</li>
 * <li>You do not want to interrupt users while they are performing an action.</li>
 * <li>You want to confirm a successful action.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>You want to display error or warning message.</li>
 * <li>You want to interrupt users while they are performing an action.</li>
 * <li>You want to make sure that users read the message before they leave the page.</li>
 * <li>You want users to be able to copy some part of the message text.</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Toast";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Toast
 * @extends UI5Element
 * @tagname ui5-toast
 * @public
 * @since 1.0.0-rc.6
 */
class Toast extends UI5Element {
	static get metadata() {
		return metadata$10;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ToastCss;
	}

	static get template() {
		return main$18;
	}

	onAfterRendering() {
		if (this._reopen) {
			this._reopen = false;
			this._initiateOpening();
		}
	}

	/**
	 * Shows the <code>ui5-toast</code>.
	 * @public
	 */
	show() {
		if (this.open) {
			// If the Toast is already opened, we set the _reopen flag to true, in
			// order to trigger re-rendering after an animation frame
			// in the onAfterRendering hook.
			// This is needed for properly resetting the opacity transition.
			this._reopen = true;
			this.open = false;
		} else {
			this._initiateOpening();
		}
	}

	/**
	 * If the minimum duration is lower than 500ms, we force
	 * it to be 500ms, as described in the documentation.
	 * @private
	 * @returns {*}
	 */
	get effectiveDuration() {
		return this.duration < MIN_DURATION ? MIN_DURATION : this.duration;
	}

	get styles() {
		// Transition duration (animation) should be a third of the duration
		// property, but not bigger than the maximum allowed (1000ms).
		const transitionDuration = Math.min(this.effectiveDuration / 3, MAX_DURATION);

		return {
			root: {
				"transition-duration": this.open ? `${transitionDuration}ms` : "",

				// Transition delay is the duration property minus the
				// transition duration (animation).
				"transition-delay": this.open ? `${this.effectiveDuration - transitionDuration}ms` : "",

				// We alter the opacity property, in order to trigger transition
				"opacity": this.open && !this.hover ? "0" : "",

				"z-index": getNextZIndex(),
			},
		};
	}

	_initiateOpening() {
		requestAnimationFrame(_ => {
			this.open = true;
		});
	}

	_ontransitionend() {
		if (this.hover) {
			return;
		}
		this.open = false;
	}

	_onmouseover() {
		this.hover = true;
	}

	_onmouseleave() {
		this.hover = false;
	}
}

Toast.define();

/**
 * @public
 */
const metadata$11 = {
	tag: "ui5-tree-item",
	properties: /** @lends sap.ui.webcomponents.main.TreeItem.prototype */ {

		/**
		 * Defines the text of the tree item.
		 *
		 * @public
		 * @type {String}
		 * @defaultValue ""
		 */
		text: {
			type: String,
		},

		/**
		 * Defines whether the tree node is expanded or collapsed. Only has visual effect for tree nodes with children.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		expanded: {
			type: Boolean,
		},

		/**
		 * Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.
		 * <br>
		 * <i>Note:</i> This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.
		 * Set this to <code>true</code> for nodes you intend to load lazily, when the user clicks the expand button.
		 * It is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		hasChildren: {
			type: Boolean,
		},

		/**
		 * Defines whether the tree node is selected by the user. Only has effect if the <code>ui5-tree</code> is in one of the
		 * following modes: in <code>SingleSelect</code>, <code>SingleSelectBegin</code>, <code>SingleSelectEnd</code> and <code>MultiSelect</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		selected: {
			type: Boolean,
		},

		/**
		 * If set, an icon will be displayed before the text, representing the tree item.
		 *
		 * @public
		 * @type {String}
		 * @defaultValue ""
		 */
		icon: {
			type: String,
		},
	},
	slots: /** @lends sap.ui.webcomponents.main.TreeItem.prototype */ {

		/**
		 * Defines the items of this <code>ui5-tree-item</code>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: HTMLElement,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * This is the item to use inside a <code>ui5-tree</code>.
 * You can represent an arbitrary tree structure by recursively nesting tree items.
 *
 * <h3>Usage</h3>
 * <code>ui5-tree-item</code> is an abstract element, representing a node in a <code>ui5-tree</code>. The tree itself is rendered as a list,
 * and each <code>ui5-tree-item</code> is represented by a list item(<code>ui5-li-tree</code>) in that list. Therefore, you should only use
 * <code>ui5-tree-item</code> directly in your apps. The <code>ui5-li-tree</code> list item is internal for the list, and not intended for public use.
 *
 * <h3>ES6 Module Import</h3>
 * <code>import @ui5/webcomponents/dist/TreeItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TreeItem
 * @extends UI5Element
 * @tagname ui5-tree-item
 * @public
 * @since 1.0.0-rc.8
 */
class TreeItem extends UI5Element {
	static get metadata() {
		return metadata$11;
	}

	get items() {
		return [...this.children];
	}

	get requiresToggleButton() {
		return this.hasChildren || this.items.length > 0;
	}

	/**
	 * Call this method to manually switch the <code>expanded</code> state of a tree item.
	 *
	 * @public
	 */
	toggle() {
		this.expanded = !this.expanded;
	}
}

TreeItem.define();

const name$k = "navigation-right-arrow";
const pathData$k = "M296 268q11-12 0-23L139 86q-10-10-10-23t10-22q9-10 22-10t23 10l191 193q9 9 9 22.5t-9 22.5L183 471q-10 10-23 10t-23-10q-9-9-9-22.5t9-22.5z";
const ltr$k = false;

registerIcon(name$k, { pathData: pathData$k, ltr: ltr$k});

const block0$19 = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" @mouseup="${context._onmouseup}" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @touchend="${context._ontouchend}" @click="${context._onclick}" aria-selected="${ifDefined(context.ariaSelected)}" role="${ifDefined(context._accInfo.role)}" aria-expanded="${ifDefined(context._accInfo.ariaExpanded)}" aria-level="${ifDefined(context._accInfo.ariaLevel)}" style="list-style-type: none;"><div class="ui5-li-tree-toggle-box" style="padding-left: ${ifDefined(context.effectiveLevel)}rem; padding-left: calc(var(--_ui5-tree-indent-step) * ${ifDefined(context.effectiveLevel)});">${ context._showToggleButtonBeginning ? block1$Y(context) : undefined }</div>${ context.placeSelectionElementBefore ? block2$U(context) : undefined }<div id="${ifDefined(context._id)}-content" class="ui5-li-content">${ context.icon ? block6$i(context) : undefined }${ context._showTitle ? block7$e() : undefined }</div>${ context._showToggleButtonEnd ? block8$d(context) : undefined }${ context.typeDetail ? block9$9(context) : undefined }${ context.placeSelectionElementAfter ? block10$8(context) : undefined }</li> `; };
const block1$Y = (context) => { return scopedHtml`<ui5-icon class="ui5-li-tree-toggle-icon" name="${ifDefined(context._toggleIconName)}" @click="${context._toggleClick}"></ui5-icon>`; };
const block2$U = (context) => { return scopedHtml`${ context.modeSingleSelect ? block3$E(context) : undefined }${ context.modeMultiSelect ? block4$w(context) : undefined }${ context.modeDelete ? block5$p(context) : undefined }`; };
const block3$E = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block4$w = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block5$p = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };
const block6$i = (context) => { return scopedHtml`<ui5-icon part="icon" name="${ifDefined(context.icon)}" class="ui5-li-icon"></ui5-icon>`; };
const block7$e = (context) => { return scopedHtml`<div part="title" class="ui5-li-title"><slot></slot></div>`; };
const block8$d = (context) => { return scopedHtml`<ui5-icon class="ui5-li-tree-toggle-icon" name="${ifDefined(context._toggleIconName)}" @click="${context._toggleClick}"></ui5-icon>`; };
const block9$9 = (context) => { return scopedHtml`<div class="ui5-li-detailbtn"><ui5-button design="Transparent" icon="edit" @click="${context.onDetailClick}"></ui5-button></div>`; };
const block10$8 = (context) => { return scopedHtml`${ context.modeSingleSelect ? block11$7(context) : undefined }${ context.modeMultiSelect ? block12$7(context) : undefined }${ context.modeDelete ? block13$6(context) : undefined }`; };
const block11$7 = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block12$7 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block13$6 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };


const main$19 = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$19(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var treeListItemCss = ":host(:not([hidden])){display:block;cursor:pointer;position:relative}:host([_minimal]) .ui5-li-tree-toggle-box{width:0}:host([_minimal]) .ui5-li-icon{padding:0}:host([_minimal]) .ui5-li-content{justify-content:center}:host([_minimal]) .ui5-li-root-tree{padding:0}:host([_minimal][show-toggle-button]):after{content:\"\";width:0;height:0;border-left:.375rem solid transparent;border-bottom:.375rem solid var(--sapContent_IconColor);position:absolute;right:.1875rem;bottom:.125rem}.ui5-li-root-tree{padding-left:0}:host(:not([level=\"1\"])),:host([selected][has-border]:not([level=\"1\"])){border-bottom:none}:host([_toggle-button-end][selected]:not([level=\"1\"])){border-bottom:var(--ui5-listitem-selected-border-bottom)}:host([_toggle-button-end]:not([selected])) .ui5-li-root-tree:hover{background:var(--sapList_Hover_Background);cursor:pointer}:host(:not([level=\"1\"])) .ui5-li-root-tree{background:var(--sapList_AlternatingBackground)}:host([_toggle-button-end]:not([level=\"1\"])) .ui5-li-root-tree{background:var(--ui5-listitem-background-color)}:host([_toggle-button-end][selected]:not([level=\"1\"])) .ui5-li-root-tree{background:var(--sapList_SelectionBackgroundColor)}.ui5-li-tree-toggle-box{width:var(--_ui5-tree-toggle-box-width);height:var(--_ui5-tree-toggle-box-height);display:flex;align-items:center;justify-content:center}.ui5-li-tree-toggle-icon{width:var(--_ui5-tree-toggle-icon-size);height:var(--_ui5-tree-toggle-icon-size)}:host([actionable]) .ui5-li-tree-toggle-icon{color:var(--sapButton_TextColor)}:host([active][actionable]) .ui5-li-tree-toggle-icon{color:var(--sapList_Active_TextColor)}";

/**
 * @public
 */
const metadata$12 = {
	tag: "ui5-li-tree",
	properties: /** @lends sap.ui.webcomponents.main.TreeListItem.prototype */ {

		/**
		 * Defines the indentation of the tree list item. Use level 1 for tree list items, representing top-level tree nodes.
		 *
		 * @type {Integer}
		 * @public
		 * @defaultValue 1
		 */
		level: {
			type: Integer,
			defaultValue: 1,
		},

		/**
		 * If set, an icon will be displayed before the text of the tree list item.
		 *
		 * @public
		 * @type {String}
		 * @defaultValue ""
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines whether the tree list item should display an expand/collapse button.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showToggleButton: {
			type: Boolean,
		},

		/**
		 * Defines whether the tree list item will show a collapse or expand icon inside its toggle button.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		expanded: {
			type: Boolean,
		},

		/**
		 * Defines whether the toggle button is shown at the end, rather than at the beginning of the item
		 *
		 * @protected
		 * @since 1.0.0-rc.8
		 */
		_toggleButtonEnd: {
			type: Boolean,
		},

		/**
		 * Defines whether the item shows minimal details - only icon (no text or toggle button)
		 *
		 * @protected
		 * @since 1.0.0-rc.8
		 */
		_minimal: {
			type: Boolean,
		},

	},
	slots: /** @lends sap.ui.webcomponents.main.TreeListItem.prototype */ {
		/**
		 * Defines the text of the <code>ui5-li-tree</code>.
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.TreeListItem.prototype */ {

		/**
		 * Fired when the user interacts with the expand/collapse button of the tree list item.
		 * @event
		 * @param {HTMLElement} item the toggled item.
		 * @public
		 */
		toggle: {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the user drills down into the tree hierarchy by pressing the right arrow on the tree node.
		 *
		 * @event sap.ui.webcomponents.main.TreeListItem#step-in
		 * @param {HTMLElement} item the item on which right arrow was pressed.
		 * @public
		 */
		"step-in": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the user goes up the tree hierarchy by pressing the left arrow on the tree node.
		 *
		 * @event sap.ui.webcomponents.main.TreeListItem#step-out
		 * @param {HTMLElement} item the item on which left arrow was pressed.
		 * @public
		 */
		"step-out": {
			detail: {
				item: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 * The <code>ui5-li-tree</code> represents a node in a tree structure, shown as a <code>ui5-list</code>.
 * <br>
 * <i>Note:</i> Do not use <code>ui5-li-tree</code> directly in your apps. Use <code>ui5-tree-item</code> instead, as it can be nested inside a <code>ui5-tree</code>.
 * On the other hand, <code>ui5-li-tree</code> can only be slotted inside a <code>ui5-list</code>, being a list item. It may be useful if you want to build a custom tree component, for example.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.TreeListItem
 * @extends ListItem
 * @tagname ui5-li-tree
 * @public
 * @since 1.0.0-rc.8
 */
class TreeListItem extends ListItem {
	static get template() {
		return main$19;
	}

	static get styles() {
		return [ListItem.styles, treeListItemCss];
	}

	static get metadata() {
		return metadata$12;
	}

	static get dependencies() {
		return [
			...ListItem.dependencies,
			Icon,
		];
	}

	onBeforeRendering() {
		this.actionable = false;
	}

	get classes() {
		const allClasses = super.classes;
		allClasses.main["ui5-li-root-tree"] = true;
		return allClasses;
	}

	get effectiveLevel() {
		return this.level - 1;
	}

	get hasParent() {
		return this.level > 1;
	}

	get _toggleIconName() {
		return this.expanded ? "navigation-down-arrow" : "navigation-right-arrow";
	}

	get _showToggleButtonBeginning() {
		return this.showToggleButton && !this._minimal && !this._toggleButtonEnd;
	}

	get _showToggleButtonEnd() {
		return this.showToggleButton && !this._minimal && this._toggleButtonEnd;
	}

	get _showTitle() {
		return this.textContent.length && !this._minimal;
	}

	get _accInfo() {
		return {
			role: "treeitem",
			ariaExpanded: this.showToggleButton ? this.expanded : undefined,
			ariaLevel: this.level,
		};
	}

	_toggleClick(event) {
		event.stopPropagation();
		this.fireEvent("toggle", { item: this });
	}

	_onkeydown(event) {
		super._onkeydown(event);

		if (this.showToggleButton && isRight(event)) {
			if (!this.expanded) {
				this.fireEvent("toggle", { item: this });
			} else {
				this.fireEvent("step-in", { item: this });
			}
		}

		if (isLeft(event)) {
			if (this.expanded) {
				this.fireEvent("toggle", { item: this });
			} else if (this.hasParent) {
				this.fireEvent("step-out", { item: this });
			}
		}
	}
}

TreeListItem.define();

const block0$1a = (context) => { return scopedHtml`<ui5-list .mode="${ifDefined(context.mode)}" .headerText="${ifDefined(context.headerText)}" .footerText="${ifDefined(context.footerText)}" .noDataText="${ifDefined(context.noDataText)}" .role="${ifDefined(context._role)}" @ui5-item-click="${ifDefined(context._onListItemClick)}" @ui5-item-delete="${ifDefined(context._onListItemDelete)}" @ui5-selection-change="${ifDefined(context._onListSelectionChange)}"><slot name="header" slot="header"></slot>${ repeat(context._listItems, (item, index) => item._id || index, (item, index) => block1$Z(item, index, context)) }</ui5-list> `; };
const block1$Z = (item, index, context) => { return scopedHtml`<ui5-li-tree type="Active" level="${ifDefined(item.level)}" icon="${ifDefined(item.treeItem.icon)}" ?_toggle-button-end="${ifDefined(context._toggleButtonEnd)}" ?_minimal="${ifDefined(context._minimal)}" .treeItem="${ifDefined(item.treeItem)}" .expanded="${ifDefined(item.treeItem.expanded)}" .selected="${ifDefined(item.treeItem.selected)}" .showToggleButton="${ifDefined(item.treeItem.requiresToggleButton)}" @ui5-toggle="${ifDefined(context._onListItemToggle)}" @ui5-step-in="${ifDefined(context._onListItemStepIn)}" @ui5-step-out="${ifDefined(context._onListItemStepOut)}">${ifDefined(item.treeItem.text)}</ui5-li-tree>`; };


const main$1a = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1a(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents", "sap_fiori_3", defaultTheme);
var TreeCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:block;width:100%}";

/**
 * @public
 */
const metadata$13 = {
	tag: "ui5-tree",
	properties: /** @lends sap.ui.webcomponents.main.Tree.prototype */ {
		/**
		 * Defines the mode of the <code>ui5-tree</code>. Since the tree uses a <code>ui5-list</code> to display its structure,
		 * the tree modes are exactly the same as the list modes, and are all applicable.
		 * <br><br>
		 * <b>Note:</b> Available options are <code>None</code>, <code>SingleSelect</code>, <code>SingleSelectBegin</code>,
		 * <code>SingleSelectEnd</code>, <code>MultiSelect</code>, and <code>Delete</code>.
		 *
		 * @public
		 * @type {ListMode}
		 * @defaultValue "None"
		 */
		mode: {
			type: ListMode,
			defaultValue: ListMode.None,
		},

		/**
		 * Defines the text that is displayed when the <code>ui5-tree</code> contains no items.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		noDataText: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-tree</code> header text.
		 * <br><br>
		 * <b>Note:</b> If the <code>header</code> slot is set, this property is ignored.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		headerText: {
			type: String,
		},

		/**
		 * Defines the <code>ui5-tree</code> footer text.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		footerText: {
			type: String,
		},

		/**
		 * An array, containing a flat structure of list items to render
		 *
		 * @private
		 */
		_listItems: {
			type: Object,
			multiple: true,
		},

		/**
		 * Shows the toggle button at the end, rather than at the beginning of the items
		 *
		 * @protected
		 * @since 1.0.0-rc.8
		 */
		_toggleButtonEnd: {
			type: Boolean,
		},

		/**
		 * Represents the tree in a very minimal state - icons only with no text and no toggle buttons
		 *
		 * @protected
		 * @since 1.0.0-rc.8
		 */
		_minimal: {
			type: Boolean,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.main.Tree.prototype */ {

		/**
		 * Defines the items of the <code>ui5-tree</code>. Tree items may have other tree items as children.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-tree-item</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: HTMLElement,
			propertyName: "items",
		},

		/**
		 * Defines the <code>ui5-tree</code> header.
		 * <br><br>
		 * <b>Note:</b> When the <code>header</code> slot is set, the
		 * <code>headerText</code> property is ignored.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.main.Tree.prototype */ {

		/**
		 * Fired when a tree item is expanded or collapsed.
		 * <i>Note:</i> You can call <code>preventDefault()</code> on the event object to suppress the event, if needed.
		 * This may be handy for example if you want to dynamically load tree items upon the user expanding a node.
		 * Even if you prevented the event's default behavior, you can always manually call <code>toggle()</code> on a tree item.
		 *
		 * @event sap.ui.webcomponents.main.Tree#item-toggle
		 * @param {HTMLElement} item the toggled item.
		 * @public
		 */
		"item-toggle": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when a tree item is activated.
		 *
		 * @event sap.ui.webcomponents.main.Tree#item-click
		 * @param {HTMLElement} item the clicked item.
		 * @public
		 */
		"item-click": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when the Delete button of any tree item is pressed.
		 * <br><br>
		 * <b>Note:</b> A Delete button is displayed on each item,
		 * when the <code>ui5-tree</code> <code>mode</code> property is set to <code>Delete</code>.
		 *
		 * @event sap.ui.webcomponents.main.Tree#item-delete
		 * @param {HTMLElement} item the deleted item.
		 * @public
		 */
		"item-delete": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when selection is changed by user interaction
		 * in <code>SingleSelect</code>, <code>SingleSelectBegin</code>, <code>SingleSelectEnd</code> and <code>MultiSelect</code> modes.
		 *
		 * @event sap.ui.webcomponents.main.Tree#selection-change
		 * @param {Array} selectedItems An array of the selected items.
		 * @param {Array} previouslySelectedItems An array of the previously selected items.
		 * @public
		 */
		"selection-change": {
			detail: {
				selectedItems: { type: Array },
				previouslySelectedItems: { type: Array },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-tree</code> component provides a tree structure for displaying data in a hierarchy.
 *
 * <h3>Keyboard Handling</h3>
 * <code>ui5-tree</code> provides advanced keyboard handling. You can use the up/down arrow keys to navigate to the previous/next item in the list,
 * representing the tree, regardless of nesting, but also the left/right arrow keys to drill down and go up the tree. If you press the right arrow
 * on a tree node, it will expand, if not expanded. If you press the right arrow key once more, the first child of this node will be selected.
 * If you press the left arrow on a tree node, it will collapse, if expanded. If you press the left arrow key once more, the parent node of this
 * tree node will be selected.
 *
 * <h3>ES6 Module Import</h3>
 * <code>import @ui5/webcomponents/dist/Tree.js";</code>
 * <br>
 * <code>import @ui5/webcomponents/dist/TreeItem.js";</code> (for its respective item element)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.Tree
 * @extends UI5Element
 * @tagname ui5-tree
 * @appenddocs TreeItem
 * @public
 * @since 1.0.0-rc.8
 */
class Tree extends UI5Element {
	static get metadata() {
		return metadata$13;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return TreeCss;
	}

	static get template() {
		return main$1a;
	}

	static get dependencies() {
		return [
			List,
			TreeListItem,
			TreeItem,
		];
	}

	constructor() {
		super();
		this._observer = new MutationObserver(this.onTreeStructureChange.bind(this));
	}

	onBeforeRendering() {
		this._listItems = [];
		buildTree(this, 1, this._listItems);
	}

	onEnterDOM() {
		this._observer.observe(this, { attributes: true, childList: true, subtree: true });
	}

	onExitDOM() {
		this._observer.disconnect();
	}

	onTreeStructureChange() {
		// setTimeout is needed for IE11 so that it does not interfere with ItemNavigation.js and its await on RenderScheduler.
		// Otherwise this invalidation happens too soon and the ItemNavigation is blocked on waiting the tree to finish
		setTimeout(() => {
			this._listItems = []; // trigger onBeforeRendering by modifying the tracked property and force tree re-build
		}, 0);
	}

	get list() {
		return this.getDomRef();
	}

	get _role() {
		return "tree";
	}

	_onListItemStepIn(event) {
		const listItem = event.detail.item;
		const treeItem = listItem.treeItem;
		if (treeItem.items.length > 0) {
			const firstChild = treeItem.items[0];
			const firstChildListItem = this.list.getSlottedNodes("items").find(li => li.treeItem === firstChild);
			firstChildListItem && this.list.focusItem(firstChildListItem);
		}
	}

	_onListItemStepOut(event) {
		const listItem = event.detail.item;
		const treeItem = listItem.treeItem;
		if (treeItem.parentElement !== this) {
			const parent = treeItem.parentElement;
			const parentListItem = this.list.getSlottedNodes("items").find(li => li.treeItem === parent);
			parentListItem && this.list.focusItem(parentListItem);
		}
	}

	_onListItemToggle(event) {
		const listItem = event.detail.item;
		const treeItem = listItem.treeItem;
		const defaultPrevented = !this.fireEvent("item-toggle", { item: treeItem }, true);
		if (!defaultPrevented) {
			treeItem.toggle();
		}
	}

	_onListItemClick(event) {
		const listItem = event.detail.item;
		const treeItem = listItem.treeItem;
		this.fireEvent("item-click", { item: treeItem });
	}

	_onListItemDelete(event) {
		const listItem = event.detail.item;
		const treeItem = listItem.treeItem;
		this.fireEvent("item-delete", { item: treeItem });
	}

	_onListSelectionChange(event) {
		const previouslySelectedItems = event.detail.previouslySelectedItems.map(item => item.treeItem);
		const selectedItems = event.detail.selectedItems.map(item => item.treeItem);

		previouslySelectedItems.forEach(item => {
			item.selected = false;
		});
		selectedItems.forEach(item => {
			item.selected = true;
		});

		this.fireEvent("selection-change", {
			previouslySelectedItems,
			selectedItems,
		});
	}

	/**
	 * Returns the corresponding list item for a given tree item
	 *
	 * @param item The tree item
	 * @protected
	 */
	_getListItemForTreeItem(item) {
		return this.list.items.find(listItem => listItem.treeItem === item);
	}

	/**
	 * Perform Depth-First-Search walk on the tree and run a callback on each node
	 *
	 * @public
	 * @param {function} callback function to execute on each node of the tree with 2 arguments: the node and the level
	 */
	walk(callback) {
		walkTree(this, 1, callback);
	}
}

const walkTree = (el, level, callback) => {
	el.items.forEach(item => {
		callback(item, level);
		if (item.items.length > 0) {
			walkTree(item, level + 1, callback);
		}
	});
};

const buildTree = (el, level, result) => {
	el.items.forEach(item => {
		const listItem = {
			treeItem: item,
			level,
		};

		result.push(listItem);
		if (item.expanded && item.items.length > 0) {
			buildTree(item, level + 1, result);
		}
	});
};

Tree.define();

/**
 * Re-renders all RTL-aware UI5 Elements.
 * Call this method whenever you change the "dir" property anywhere in your HTML page
 * Example: document.body.dir = "rtl"; applyDirection();
 *
 * @returns {Promise<void>}
 */
const applyDirection = () => {
	RenderScheduler.reRenderAllUI5Elements({ rtlAware: true });
	return RenderScheduler.whenFinished();
};

attachThemeLoaded(theme => {
	console.log("Theme load complete: ", theme);
});
window.RenderScheduler = RenderScheduler;
window.isIE = isIE; // attached to the window object for testing purposes

const testAssets = {
	configuration : {
		getAnimationMode: getAnimationMode$1,
		setAnimationMode,
		getTheme: getTheme$1,
		setTheme,
		getLanguage: getLanguage$1,
		setLanguage,
		setNoConflict,
		getRTL: getRTL$1,
		getFirstDayOfWeek,
		getAssetsPath: getAssetsPath$1,
		setAssetsPath
	},
	getLocaleData,
	applyDirection,
	ResizeHandler,
	addCustomCSS,
	attachThemeLoaded,
	detachThemeLoaded,
	getIconNames: getRegisteredNames,
};

window["sap-ui-webcomponents-bundle"] = testAssets;

var sap_belize$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.24f035f6c7c15616.json";

var sap_belize_hcb$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.e8e5a35fb8f777e8.json";

var sap_belize_hcw$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.94855b4490891df9.json";

var sap_fiori_3_dark$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.1122b40ced7728e8.json";

var sap_fiori_3_hcb$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.d9198917f94d41f8.json";

var sap_fiori_3_hcw$2 = "/services/v4/web/voting/ui/vote/resources/parameters-bundle.css.4127f31975c68012.json";

const isInlined$2 = obj => typeof (obj) === "object";

if (isInlined$2(sap_belize$2) || isInlined$2(sap_belize_hcb$2) || isInlined$2(sap_belize_hcw$2) || isInlined$2(sap_fiori_3_dark$2) || isInlined$2(sap_fiori_3_hcb$2) || isInlined$2(sap_fiori_3_hcw$2)) {
	console.warn(`Inefficient bundling detected: consider bundling theme properties imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}

registerThemeProperties("@ui5/webcomponents-fiori", "sap_belize", sap_belize$2);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_belize_hcb", sap_belize_hcb$2);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_belize_hcw", sap_belize_hcw$2);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3_dark", sap_fiori_3_dark$2);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3_hcb", sap_fiori_3_hcb$2);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3_hcw", sap_fiori_3_hcw$2);

var ar$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ar.9f07d59ccabc801f.json";

var bg$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_bg.b0fab61bb674cc09.json";

var ca$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ca.80121460336e2218.json";

var cs$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_cs.d06f4148c878e6df.json";

var da$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_da.eb01bd6c06849225.json";

var de$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_de.698c436d44ca7ad2.json";

var el$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_el.84872ee76c2a3ee9.json";

var en$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_en.5f92323c744e56b0.json";

var es$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_es.82a02c63cae47052.json";

var et$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_et.79344ad8de2fdb10.json";

var fi$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_fi.0b3014ba71d79fca.json";

var fr$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_fr.ae448789e778c1b9.json";

var hi$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hi.809010feafcf3c15.json";

var hr$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hr.58352355623a4e43.json";

var hu$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_hu.37b11c150510af40.json";

var it$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_it.d9400502ee7cbb21.json";

var iw$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_iw.02d7d9a080e48746.json";

var ja$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ja.8dd02556eb5137b4.json";

var kk$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_kk.f398888ec3af4c76.json";

var ko$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ko.dd9a38e6417c083b.json";

var lt$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_lt.e6378e0351910538.json";

var lv$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_lv.7dd3b793a9364b62.json";

var ms$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ms.24264629db95db62.json";

var nl$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_nl.d434c94e004d595b.json";

var no$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_no.a170b9ef08a1941d.json";

var pl$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_pl.51889af839808979.json";

var pt$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_pt.c36a58dc16548488.json";

var ro$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ro.613efe9ce874a708.json";

var ru$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_ru.64ddb0e7dabd2136.json";

var sh$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sh.af625259000e7e5b.json";

var sk$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sk.151d11acff4dc6ba.json";

var sl$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sl.b32f912782aa85ac.json";

var sv$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_sv.f7766faf4b7ae3f9.json";

var th$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_th.713af829e7d4e764.json";

var tr$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_tr.10145413de496511.json";

var uk$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_uk.a9fae190215504e6.json";

var vi$3 = "/services/v4/web/voting/ui/vote/resources/messagebundle_vi.3ee4dede51bdd3ee.json";

var zh_CN$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_CN.e7bd0867c6cf38bd.json";

var zh_TW$2 = "/services/v4/web/voting/ui/vote/resources/messagebundle_zh_TW.8a8c51e1b2859f64.json";

const bundleMap$2 = {
	ar: ar$3,
	bg: bg$3,
	ca: ca$3,
	cs: cs$3,
	da: da$3,
	de: de$3,
	el: el$3,
	en: en$3,
	es: es$3,
	et: et$3,
	fi: fi$3,
	fr: fr$3,
	hi: hi$3,
	hr: hr$3,
	hu: hu$3,
	it: it$3,
	iw: iw$2,
	ja: ja$3,
	kk: kk$3,
	ko: ko$3,
	lt: lt$3,
	lv: lv$3,
	ms: ms$3,
	nl: nl$3,
	no: no$2,
	pl: pl$3,
	pt: pt$3,
	ro: ro$3,
	ru: ru$3,
	sh: sh$2,
	sk: sk$3,
	sl: sl$3,
	sv: sv$3,
	th: th$3,
	tr: tr$3,
	uk: uk$3,
	vi: vi$3,
	zh_CN: zh_CN$2,
	zh_TW: zh_TW$2,
};

const allEntriesInlined$3 = Object.entries(bundleMap$2).every(([_key, value]) => typeof (value) === "object");

if (allEntriesInlined$3) {
	console.warn(`Inefficient bundling detected: consider bundling i18n imports as URLs instead of inlining them.
See rollup-plugin-url or webpack file-loader for more information.
Suggested pattern: "assets\\\/.*\\\.json"`);
}

registerI18nBundle("@ui5/webcomponents-fiori", bundleMap$2);

const CoPilotAnimation = {
	animated: true,
	animationValues: `M 102 0 C 102 17.85, 86.87 29.53, 77.94 44.99 C 69.01 60.46, 66.46 79.40, 51 88.33 C 35.53 97.26, 17.85 90, 5.51e-15 90 C -17.85 90, -35.53 97.26, -50.99 88.33 C -66.46 79.40, -69.01 60.46, -77.94 45 C -86.87 29.53, -102 17.85, -102 1.24e-14 C -102 -17.85, -86.87 -29.53, -77.94 -44.99 C -69.01 -60.46, -66.46 -79.40, -51 -88.33 C -35.53 -97.26, -17.85 -89.99, -1.65e-14 -90 C 17.85 -90, 35.53 -97.26, 50.99 -88.33 C 66.46 -79.40, 69.01 -60.46, 77.94 -45 C 86.87 -29.53, 102 -17.85, 102 0 z ;M 104 0 C 103.68 18.67, 99.74 36.21, 88.33 50.99 C 77.42 65.13, 59.95 68.15, 44.50 77.07 C 29.04 86, 17.85 102, 6.24e-15 102 C -17.85 102, -28.89 85.74, -44.49 77.07 C -60.41 68.24, -78.94 66.40, -90.06 52 C -101.58 37.08, -106.51 18.67, -104 1.27e-14 C -101.57 -18.04, -86.17 -28.73, -77.07 -44.49 C -67.97 -60.26, -66.77 -79.42, -52 -90.06 C -36.96 -100.89, -18.33 -102.64, -1.83e-14 -100 C 17.32 -97.49, 28.55 -84.44, 43.99 -76.21 C 60.07 -67.64, 78.79 -66.31, 90.06 -52 C 101.72 -37.19, 104.31 -18.83, 104 0 z ;M 102 0 C 101.82 17.85, 86.53 29.35, 77.07 44.49 C 67.96 59.09, 63.13 75.05, 49 84.87 C 34.41 94.99, 17.75 97.84, 6e-15 98 C -17.84 98.15, -34.93 96.05, -49.49 85.73 C -63.65 75.70, -67.15 58.79, -76.21 44 C -85.53 28.77, -101.82 17.84, -102 1.24e-14 C -102.17 -17.85, -86.26 -29.19, -77.07 -44.49 C -68.05 -59.52, -65.25 -77.99, -50 -86.60 C -34.75 -95.20, -17.50 -87.99, -1.61e-14 -88 C 17.50 -88, 34.67 -95.05, 49.99 -86.60 C 65.35 -78.12, 68.91 -60.03, 77.94 -45 C 87.13 -29.68, 102.17 -17.85, 102 0 z ;M 88 0 C 87 16.75, 89.16 32.23, 82.48 47.62 C 75.39 63.97, 66.14 78.96, 50.25 87.03 C 34.54 95, 17.59 90.29, 5.48e-15 89.5 C -16.84 88.73, -32.38 89.68, -47.68 82.60 C -63.74 75.17, -77.27 65.04, -86.06 49.69 C -94.84 34.35, -96.67 17.59, -95 1.16e-14 C -93.40 -16.71, -85.83 -30.17, -77.07 -44.49 C -68.48 -58.53, -59.78 -70.71, -46.12 -79.89 C -31.90 -89.43, -17.11 -95.62, -1.76e-14 -96.25 C 17.42 -96.89, 32.60 -91.30, 48.12 -83.35 C 64.20 -75.11, 80.53 -67.29, 88.33 -51 C 96.03 -34.89, 89.05 -17.81, 88 0 z ;M 97 0 C 95.96 17.38, 92.31 33.26, 82.33 47.53 C 72.73 61.25, 58.07 67.12, 43.85 75.95 C 29.16 85.08, 17.26 97.78, 6.04e-15 98.71 C -17.46 99.64, -31.76 89.97, -46.65 80.81 C -61.25 71.84, -74.99 63.05, -82.80 47.80 C -90.46 32.82, -87.30 16.81, -88 1.07e-14 C -88.72 -17.54, -95.38 -34.80, -86.85 -50.14 C -78.30 -65.50, -59.99 -68.75, -44.82 -77.63 C -29.55 -86.55, -17.67 -101.20, -1.85e-14 -100.93 C 17.66 -100.65, 28.66 -84.98, 44.03 -76.27 C 59.54 -67.48, 78.04 -65.57, 88.21 -50.93 C 98.53 -36.07, 98.07 -18.05, 97 0 z ;M 97 0 C 95.96 17.38, 92.31 33.26, 82.33 47.53 C 72.73 61.25, 58.07 67.12, 43.85 75.95 C 29.16 85.08, 17.26 97.78, 6.04e-15 98.71 C -17.46 99.64, -31.76 89.97, -46.65 80.81 C -61.25 71.84, -74.99 63.05, -82.80 47.80 C -90.46 32.82, -87.30 16.81, -88 1.07e-14 C -88.72 -17.54, -95.38 -34.80, -86.85 -50.14 C -78.30 -65.50, -59.99 -68.75, -44.82 -77.63 C -29.55 -86.55, -17.67 -101.20, -1.85e-14 -100.93 C 17.66 -100.65, 28.66 -84.98, 44.03 -76.27 C 59.54 -67.48, 78.04 -65.57, 88.21 -50.93 C 98.53 -36.07, 98.07 -18.05, 97 0 z ;M 87.83 0 C 87.55 17.48, 95.16 34.74, 86.50 49.94 C 77.84 65.14, 59.80 68.65, 44.21 76.58 C 29.39 84.11, 16.53 92.20, 5.75e-15 93.93 C -17.56 95.76, -35.17 96.17, -49.88 86.40 C -64.42 76.73, -67.07 58.88, -75.63 43.67 C -84.09 28.63, -98.51 17.25, -98.5 1.20e-14 C -98.48 -17.25, -84.34 -28.78, -75.55 -43.61 C -66.86 -58.28, -63.23 -75.43, -48.60 -84.17 C -33.93 -92.94, -17.02 -90.19, -1.63e-14 -88.77 C 15.97 -87.42, 29.38 -82.73, 44.10 -76.40 C 60.46 -69.36, 79.25 -66.31, 88.09 -50.86 C 96.93 -35.40, 88.10 -17.79, 87.83 0 z ;M 102.87 0 C 100.60 17.86, 85.53 28.60, 75.95 43.85 C 66.77 58.47, 64.20 76.67, 49.27 85.33 C 34.33 94, 17.25 88.61, 5.38e-15 87.94 C -16.62 87.29, -32.13 88.83, -47.10 81.58 C -62.59 74.09, -75.11 63.20, -82.85 47.83 C -90.43 32.78, -88.33 16.84, -88.2 1.08e-14 C -88.06 -16.72, -90.31 -32.83, -82.09 -47.39 C -73.84 -61.99, -58.70 -68.16, -44.58 -77.21 C -29.82 -86.66, -17.52 -100.13, -1.83e-14 -100 C 17.51 -99.86, 28.90 -85.08, 44.18 -76.53 C 59.70 -67.86, 77.14 -64.89, 87.96 -50.78 C 99.23 -36.08, 105.20 -18.37, 102.87 0 z ;M 96.65 0 C 97.56 17.29, 91.44 32.85, 81.65 47.14 C 72.23 60.89, 58.31 67.69, 44.20 76.56 C 29.58 85.75, 17.26 98.50, 6.02e-15 98.46 C -17.26 98.41, -28.92 84.61, -44.07 76.34 C -59.63 67.86, -77.60 65.19, -87.68 50.62 C -97.93 35.81, -99.13 17.87, -96.9 1.18e-14 C -94.78 -16.87, -84.03 -28.88, -75.85 -43.79 C -67.48 -59.04, -64.58 -77.07, -49.68 -86.05 C -34.75 -95.05, -17.42 -90.01, -1.64e-14 -89.5 C 16.94 -88.99, 33.40 -91.76, 48.01 -83.17 C 62.60 -74.59, 68.26 -58.94, 76.79 -44.34 C 85.38 -29.66, 95.74 -16.97, 96.65 0 z ;M 100.43 0 C 99.44 17.55, 85.45 29.03, 76.37 44.09 C 67.47 58.85, 64.07 76.52, 49.13 85.10 C 34.19 93.68, 17.22 88.19, 5.38e-15 87.97 C -16.99 87.74, -33.67 92.32, -48.38 83.80 C -63.09 75.28, -67.46 58.57, -76.07 43.92 C -84.74 29.15, -97.50 17.11, -97.6 1.19e-14 C -97.69 -17.13, -85.16 -29.38, -76.55 -44.19 C -67.96 -58.96, -62.77 -74.64, -48.62 -84.22 C -34.12 -94.03, -17.44 -97.50, -1.76e-14 -96 C 16.82 -94.54, 29.53 -84.92, 44 -76.22 C 58.26 -67.66, 71.61 -60.42, 81.51 -47.06 C 92.07 -32.79, 101.42 -17.72, 100.43 0 z ;M 97.27 0 C 98.58 17.55, 94.29 34.20, 84.09 48.54 C 74.21 62.42, 58.47 67.23, 43.57 75.46 C 28.94 83.54, 16.64 93.54, 5.81e-15 95 C -17.27 96.50, -33.78 93.13, -48.19 83.47 C -62.26 74.04, -68.01 58.82, -76.14 43.96 C -84.09 29.40, -92 16.48, -93.8 1.14e-14 C -95.70 -17.53, -94.76 -34.35, -86.34 -49.84 C -77.83 -65.50, -64.53 -76.31, -48.31 -83.67 C -32.81 -90.70, -17 -88.78, -1.63e-14 -89 C 17.21 -89.21, 34.09 -93.47, 49 -84.87 C 63.91 -76.28, 68.61 -59.49, 77.12 -44.53 C 85.58 -29.66, 95.99 -17.05, 97.27 0 z ;M 102 0 C 102 17.85, 86.87 29.53, 77.94 44.99 C 69.01 60.46, 66.46 79.40, 51 88.33 C 35.53 97.26, 17.85 90, 5.51e-15 90 C -17.85 90, -35.53 97.26, -50.99 88.33 C -66.46 79.40, -69.01 60.46, -77.94 45 C -86.87 29.53, -102 17.85, -102 1.24e-14 C -102 -17.85, -86.87 -29.53, -77.94 -44.99 C -69.01 -60.46, -66.46 -79.40, -51 -88.33 C -35.53 -97.26, -17.85 -89.99, -1.65e-14 -90 C 17.85 -90, 35.53 -97.26, 50.99 -88.33 C 66.46 -79.40, 69.01 -60.46, 77.94 -45 C 86.87 -29.53, 102 -17.85, 102 0 z ;`,
};

registerFeature("CoPilotAnimation", CoPilotAnimation);

/**
 * Different types of FCLLayout.
 * @lends sap.ui.webcomponents.fiori.types.FCLLayout.prototype
 * @public
 */
const FCLLayouts = {
	/**
	 * The layout will display 1 column.
	 * @public
	 * @type {OneColumn}
	 */
	OneColumn: "OneColumn",

	/**
	 *
	 * Desktop: 67/33/-  Start (expanded) and Mid columns are displayed
	 * Tablet:  67/33/-  Start (expanded) and Mid columns are displayed
	 * Phone:   -/100/-  only the Mid column is displayed
	 *
	 * Use to display both a master and a detail page when the user should focus on the master page.
	 *
	 * @type {TwoColumnsStartExpanded}
	 * @public
	 */
	TwoColumnsStartExpanded: "TwoColumnsStartExpanded",

	/**
	 * Desktop: 33/67/-  Start and Mid (expanded) columns are displayed
	 * Tablet:  33/67/-  Start and Mid (expanded) columns are displayed
	 * Phone:   -/100/-  only the Mid column is displayed
	 *
	 * Use to display both a master and a detail page when the user should focus on the detail page.
	 *
	 * @type {TwoColumnsMidExpanded}
	 * @public
	 */
	TwoColumnsMidExpanded: "TwoColumnsMidExpanded",

	/**
	 * Desktop: 25/50/25 Start, Mid (expanded) and End columns are displayed
	 * Tablet:  0/67/33  Mid (expanded) and End columns are displayed, Start is accessible by a layout arrow
	 * Phone:   -/-/100  only the End column is displayed
	 *
	 * Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail.
	 *
	 * @type {ThreeColumnsMidExpanded}
	 * @public
	 */
	ThreeColumnsMidExpanded: "ThreeColumnsMidExpanded",

	/**
	 * Desktop: 25/25/50 Start, Mid and End (expanded) columns are displayed
	 * Tablet:  0/33/67  Mid and End (expanded) columns are displayed, Start is accessible by layout arrows
	 * Phone:   -/-/100  (only the End column is displayed)
	 *
	 * Use to display all three pages (master, detail, detail-detail) when the user should focus on the detail-detail.
	 *
	 * @public
	 * @type ThreeColumnsEndExpanded
	 */
	ThreeColumnsEndExpanded: "ThreeColumnsEndExpanded",

	/**
	 * Desktop: 67/33/0  Start (expanded) and Mid columns are displayed, End is accessible by layout arrows
	 * Tablet:  67/33/0  Start (expanded) and Mid columns are displayed, End is accessible by layout arrows
	 * Phone:   -/-/100  only the End column is displayed
	 *
	 * Use to display the master and detail pages when the user should focus on the master.
	 * The detail-detail is still loaded and easily accessible with layout arrows.
	 *
	 * @public
	 * @type ThreeColumnsStartExpandedEndHidden
	 */
	ThreeColumnsStartExpandedEndHidden: "ThreeColumnsStartExpandedEndHidden",

	/**
	 * Desktop: 33/67/0  Start and Mid (expanded) columns are displayed, End is accessible by a layout arrow
	 * Tablet:  33/67/0  Start and Mid (expanded) columns are displayed, End is accessible by a layout arrow
	 * Phone:   -/-/100  only the End column is displayed
	 *
	 * Use to display the master and detail pages when the user should focus on the detail.
	 * The detail-detail is still loaded and easily accessible with a layout arrow.
	 *
	 * @public
	 * @type ThreeColumnsMidExpandedEndHidden
	 */
	ThreeColumnsMidExpandedEndHidden: "ThreeColumnsMidExpandedEndHidden",

	/**
	 * Desktop: -/100/-  only the Mid column is displayed
	 * Tablet:  -/100/-  only the Mid column is displayed
	 * Phone:   -/100/-  only the Mid column is displayed
	 *
	 * Use to display a detail page only, when the user should focus entirely on it.
	 *
	 * @public
	 * @type MidColumnFullScreen
	 */
	MidColumnFullScreen: "MidColumnFullScreen",

	/**
	 * Desktop: -/-/100  only the End column is displayed
	 * Tablet:  -/-/100  only the End column is displayed
	 * Phone:   -/-/100  only the End column is displayed
	 *
	 * Use to display a detail-detail page only, when the user should focus entirely on it.
	 *
	 * @public
	 * @type EndColumnFullScreen
	 */
	EndColumnFullScreen: "EndColumnFullScreen",
};

/**
 * The number of columns of <code>ui5-flexible-collcolumn-layout</code>.
 *
 * @class
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.types.FCLLayout
 * @public
 * @enum {string}
 */
class FCLLayout extends DataType {
	static isValid(value) {
		return !!FCLLayouts[value];
	}
}

FCLLayout.generataTypeAcessors(FCLLayouts);

const getLayoutsByMedia = () => {
	return {
		desktop: {
			"OneColumn": {
				layout: ["100%", 0, 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsStartExpanded": {
				layout: ["67%", "33%", 0],
				arrows: [
					{ visible: true, dir: "mirror" },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsMidExpanded": {
				layout: ["33%", "67%", 0],
				arrows: [
					{ visible: true, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsStartExpanded": {
				layout: ["25%", "50%", "25%"],
				arrows: [
					{ visible: true, dir: null },
					{ visible: true, dir: null },
				],
			},
			"ThreeColumnsMidExpanded": {
				layout: ["25%", "50%", "25%"],
				arrows:	[
					{ visible: true, dir: null },
					{ visible: true, dir: null },
				],
			},
			"ThreeColumnsEndExpanded": {
				layout: ["25%", "25%", "50%"],
				arrows: [
					{ visible: false, dir: null, separator: true },
					{ visible: true, dir: "mirror" },
				],
			},
			"ThreeColumnsStartExpandedEndHidden": {
				layout: ["67%", "33%", 0],
				arrows: [
					{ visible: true, dir: "mirror" },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsMidExpandedEndHidden": {
				layout: ["33%", "67%", 0],
				arrows: [
					{ visible: true, dir: null },
					{ visible: true, dir: null },
				],
			},
			"MidColumnFullScreen": {
				layout: [0, "100%", 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"EndColumnFullScreen": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
		},
		tablet: {
			"OneColumn": {
				layout: ["100%", 0, 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsStartExpanded": {
				layout: ["67%", "33%", 0],
				arrows: [
					{ visible: true, dir: "mirror" },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsMidExpanded": {
				layout: ["33%", "67%", 0],
				arrows: [
					{ visible: true, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsStartExpanded": {
				layout: ["67%", "33%", 0],
				arrows: [
					{ visible: true, dir: "mirror" },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsMidExpanded": {
				layout: [0, "67%", "33%"],
				arrows: [
					{ visible: true, dir: null },
					{ visible: true, dir: null },
				],
			},
			"ThreeColumnsEndExpanded": {
				layout: [0, "33%", "67%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: true, dir: "mirror" },
				],
			},
			"ThreeColumnsStartExpandedEndHidden": {
				layout: ["67%", "33%", 0],
				arrows: [
					{ visible: true, dir: "mirror" },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsMidExpandedEndHidden": {
				layout: ["33%", "67%", 0],
				arrows: [
					{ visible: true, dir: null },
					{ visible: true, dir: null },
				],
			},
			"MidColumnFullScreen": {
				layout: [0, "100%", 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"EndColumnFullScreen": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
		},
		phone: {
			"OneColumn": {
				layout: ["100%", 0, 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsStartExpanded": {
				layout: [0, "100%", 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"TwoColumnsMidExpanded": {
				layout: [0, "100%", 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsStartExpanded": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsMidExpanded": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsEndExpanded": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsStartExpandedEndHidden": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"ThreeColumnsMidExpandedEndHidden": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"MidColumnFullScreen": {
				layout: [0, "100%", 0],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
			"EndColumnFullScreen": {
				layout: [0, 0, "100%"],
				arrows: [
					{ visible: false, dir: null },
					{ visible: false, dir: null },
				],
			},
		},
	};
};

const getNextLayoutByStartArrow = () => {
	return {
		"TwoColumnsStartExpanded": "TwoColumnsMidExpanded",
		"TwoColumnsMidExpanded": "TwoColumnsStartExpanded",
		"ThreeColumnsMidExpanded": "ThreeColumnsMidExpandedEndHidden",
		"ThreeColumnsEndExpanded": "ThreeColumnsStartExpandedEndHidden",
		"ThreeColumnsStartExpandedEndHidden": "ThreeColumnsMidExpandedEndHidden",
		"ThreeColumnsMidExpandedEndHidden": "ThreeColumnsStartExpandedEndHidden",
	};
};

const getNextLayoutByEndArrow = () => {
	return {
		"ThreeColumnsMidExpanded": "ThreeColumnsEndExpanded",
		"ThreeColumnsEndExpanded": "ThreeColumnsMidExpanded",
		"ThreeColumnsStartExpandedEndHidden": "ThreeColumnsMidExpanded",
		"ThreeColumnsMidExpandedEndHidden": "ThreeColumnsMidExpanded",
	};
};

const FCL_START_COLUMN_TXT = {key: "FCL_START_COLUMN_TXT", defaultText: "First column"};const FCL_MIDDLE_COLUMN_TXT = {key: "FCL_MIDDLE_COLUMN_TXT", defaultText: "Middle column"};const FCL_END_COLUMN_TXT = {key: "FCL_END_COLUMN_TXT", defaultText: "Last column"};const FCL_START_COLUMN_EXPAND_BUTTON_TOOLTIP = {key: "FCL_START_COLUMN_EXPAND_BUTTON_TOOLTIP", defaultText: "Expand the first column"};const FCL_START_COLUMN_COLLAPSE_BUTTON_TOOLTIP = {key: "FCL_START_COLUMN_COLLAPSE_BUTTON_TOOLTIP", defaultText: "Collapse the first column"};const FCL_END_COLUMN_EXPAND_BUTTON_TOOLTIP = {key: "FCL_END_COLUMN_EXPAND_BUTTON_TOOLTIP", defaultText: "Expand the last column"};const FCL_END_COLUMN_COLLAPSE_BUTTON_TOOLTIP = {key: "FCL_END_COLUMN_COLLAPSE_BUTTON_TOOLTIP", defaultText: "Collapse the last column"};const NOTIFICATION_LIST_ITEM_TXT = {key: "NOTIFICATION_LIST_ITEM_TXT", defaultText: "Notification"};const NOTIFICATION_LIST_ITEM_SHOW_MORE = {key: "NOTIFICATION_LIST_ITEM_SHOW_MORE", defaultText: "Show More"};const NOTIFICATION_LIST_ITEM_SHOW_LESS = {key: "NOTIFICATION_LIST_ITEM_SHOW_LESS", defaultText: "Show Less"};const NOTIFICATION_LIST_ITEM_OVERLOW_BTN_TITLE = {key: "NOTIFICATION_LIST_ITEM_OVERLOW_BTN_TITLE", defaultText: "More"};const NOTIFICATION_LIST_ITEM_CLOSE_BTN_TITLE = {key: "NOTIFICATION_LIST_ITEM_CLOSE_BTN_TITLE", defaultText: "Close"};const NOTIFICATION_LIST_ITEM_READ = {key: "NOTIFICATION_LIST_ITEM_READ", defaultText: "Read"};const NOTIFICATION_LIST_ITEM_UNREAD = {key: "NOTIFICATION_LIST_ITEM_UNREAD", defaultText: "Unread"};const NOTIFICATION_LIST_ITEM_HIGH_PRIORITY_TXT = {key: "NOTIFICATION_LIST_ITEM_HIGH_PRIORITY_TXT", defaultText: "High Priority"};const NOTIFICATION_LIST_ITEM_MEDIUM_PRIORITY_TXT = {key: "NOTIFICATION_LIST_ITEM_MEDIUM_PRIORITY_TXT", defaultText: "Medium Priority"};const NOTIFICATION_LIST_ITEM_LOW_PRIORITY_TXT = {key: "NOTIFICATION_LIST_ITEM_LOW_PRIORITY_TXT", defaultText: "Low Priority"};const NOTIFICATION_LIST_GROUP_ITEM_TXT = {key: "NOTIFICATION_LIST_GROUP_ITEM_TXT", defaultText: "Notification Group"};const NOTIFICATION_LIST_GROUP_ITEM_COUNTER_TXT = {key: "NOTIFICATION_LIST_GROUP_ITEM_COUNTER_TXT", defaultText: "Counter"};const UPLOADCOLLECTIONITEM_CANCELBUTTON_TEXT = {key: "UPLOADCOLLECTIONITEM_CANCELBUTTON_TEXT", defaultText: "Cancel"};const UPLOADCOLLECTIONITEM_RENAMEBUTTON_TEXT = {key: "UPLOADCOLLECTIONITEM_RENAMEBUTTON_TEXT", defaultText: "Rename"};const UPLOADCOLLECTIONITEM_ERROR_STATE = {key: "UPLOADCOLLECTIONITEM_ERROR_STATE", defaultText: "Terminated"};const UPLOADCOLLECTIONITEM_READY_STATE = {key: "UPLOADCOLLECTIONITEM_READY_STATE", defaultText: "Pending"};const UPLOADCOLLECTIONITEM_UPLOADING_STATE = {key: "UPLOADCOLLECTIONITEM_UPLOADING_STATE", defaultText: "Uploading"};const UPLOADCOLLECTIONITEM_TERMINATE_BUTTON_TEXT = {key: "UPLOADCOLLECTIONITEM_TERMINATE_BUTTON_TEXT", defaultText: "Terminate"};const UPLOADCOLLECTIONITEM_RETRY_BUTTON_TEXT = {key: "UPLOADCOLLECTIONITEM_RETRY_BUTTON_TEXT", defaultText: "Retry"};const UPLOADCOLLECTION_NO_DATA_TEXT = {key: "UPLOADCOLLECTION_NO_DATA_TEXT", defaultText: "No files found."};const UPLOADCOLLECTION_NO_DATA_DESCRIPTION = {key: "UPLOADCOLLECTION_NO_DATA_DESCRIPTION", defaultText: "Drop files to upload them or use the \"Upload\" button."};const UPLOADCOLLECTION_DRAG_FILE_INDICATOR = {key: "UPLOADCOLLECTION_DRAG_FILE_INDICATOR", defaultText: "Drag files here."};const UPLOADCOLLECTION_DROP_FILE_INDICATOR = {key: "UPLOADCOLLECTION_DROP_FILE_INDICATOR", defaultText: "Drop files to upload them."};const SHELLBAR_LABEL = {key: "SHELLBAR_LABEL", defaultText: "Shell Bar"};const SHELLBAR_LOGO = {key: "SHELLBAR_LOGO", defaultText: "Logo"};const SHELLBAR_COPILOT = {key: "SHELLBAR_COPILOT", defaultText: "CoPilot"};const SHELLBAR_NOTIFICATIONS = {key: "SHELLBAR_NOTIFICATIONS", defaultText: "{0} Notifications"};const SHELLBAR_PROFILE = {key: "SHELLBAR_PROFILE", defaultText: "Profile"};const SHELLBAR_PRODUCTS = {key: "SHELLBAR_PRODUCTS", defaultText: "Products"};const SHELLBAR_SEARCH = {key: "SHELLBAR_SEARCH", defaultText: "Search"};const SHELLBAR_OVERFLOW = {key: "SHELLBAR_OVERFLOW", defaultText: "More"};

const block0$1b = (context) => { return scopedHtml`<div class="${classMap(context.classes.root)}"><div role="region" class="${classMap(context.classes.columns.start)}" aria-labelledby="${ifDefined(context._id)}-startColumnText"><slot name="startColumn"></slot></div><div class="ui5-fcl-arrow-container" style="${styleMap(context.styles.arrowsContainer.start)}"><ui5-button class="ui5-fcl-arrow ui5-fcl-arrow--start" icon="slim-arrow-right" design="Transparent" @click="${context.startArrowClick}" style="${styleMap(context.styles.arrows.start)}" aria-label="${ifDefined(context.accStartArrowText)}" title="${ifDefined(context.accStartArrowText)}"></ui5-button></div><div role="region" class="${classMap(context.classes.columns.middle)}" aria-labelledby="${ifDefined(context._id)}-midColumnText"><slot name="midColumn"></slot></div><div class="ui5-fcl-arrow-container" style="${styleMap(context.styles.arrowsContainer.end)}"><ui5-button class="ui5-fcl-arrow ui5-fcl-arrow--end" style="${styleMap(context.styles.arrows.end)}" icon="slim-arrow-left" design="Transparent" @click="${context.endArrowClick}" aria-label="${ifDefined(context.accEndArrowText)}" title="${ifDefined(context.accEndArrowText)}"></ui5-button></div><div role="region" class="${classMap(context.classes.columns.end)}" aria-labelledby="${ifDefined(context._id)}-endColumnText"><slot name="endColumn"></slot></div><span id="${ifDefined(context._id)}-startColumnText" class="ui5-hidden-text">${ifDefined(context.accStartColumnText)}</span><span id="${ifDefined(context._id)}-midColumnText" class="ui5-hidden-text">${ifDefined(context.accMiddleColumnText)}</span><span id="${ifDefined(context._id)}-endColumnText" class="ui5-hidden-text">${ifDefined(context.accEndColumnText)}</span></div> `; };


const main$1b = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1b(context);
};

var defaultTheme$1 = ":root{--_ui5_fcl_solid_bg:var(--sapShell_Background);--_ui5_fcl_column_border:none;--_ui5_fcl_decoration_top:linear-gradient(0deg,var(--sapHighlightColor),#f3f4f5);--_ui5_fcl_decoration_bottom:linear-gradient(180deg,var(--sapHighlightColor),#f3f4f5);--_ui5_product_switch_item_width:11.25rem;--_ui5_product_switch_item_height:7rem;--_ui5_product_switch_item_outline_width:.0625rem;--_ui5_product_switch_item_outline_color:var(--sapContent_FocusColor);--_ui5_product_switch_item_outline:var(--_ui5_product_switch_item_outline_width) var(--_ui5_product_switch_item_outline_color) dotted;--_ui5_product_switch_item_active_outline_color:var(--sapContent_ContrastFocusColor);--_ui5_product_switch_item_outline_offset:-.1875rem;--_ui5_product_switch_item_outline_offset_positive:.1875rem;--ui5_upload_collection_level_2Size:1.375rem;--ui5_upload_collection_level_5Size:1rem;--ui5_upload_collection_drag_overlay_border:0.125rem dashed var(--sapContent_ForegroundBorderColor);--ui5_upload_collection_drop_overlay_border:0.125rem solid var(--sapContent_DragAndDropActiveColor);--ui5_upload_collection_drop_overlay_background:transparent}";

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var FlexibleColumnLayoutCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:block;background:var(--_ui5_fcl_solid_bg)}.ui5-fcl-root{height:100%;display:flex;flex-direction:row}.ui5-fcl-column{background:inherit;box-sizing:border-box;will-change:width;overflow-y:auto}.ui5-fcl-column-animation{transition:width .56s cubic-bezier(.1,0,.05,1),visibility .56s ease-in}:host([_visible-columns=\"2\"]) .ui5-fcl-column--start{border-right:var(--_ui5_fcl_column_border)}:host([_visible-columns=\"3\"]) .ui5-fcl-column--start{border-right:var(--_ui5_fcl_column_border)}:host([_visible-columns=\"2\"]) .ui5-fcl-column--middle{border-left:var(--_ui5_fcl_column_border)}:host([_visible-columns=\"3\"]) .ui5-fcl-column--middle{border-left:var(--_ui5_fcl_column_border)}:host([_visible-columns=\"3\"]) .ui5-fcl-column--middle{border-right:var(--_ui5_fcl_column_border)}:host([_visible-columns=\"3\"]) .ui5-fcl-column--end{border-left:var(--_ui5_fcl_column_border)}.ui5-fcl-column--hidden{display:none}.ui5-fcl-arrow-container{display:flex;align-items:center;justify-content:center;width:1rem;background-color:var(--sapShell_Background)}.ui5-fcl-arrow{position:relative;width:1.5rem;height:1.5rem;min-width:1.5rem;will-change:transform;overflow:visible;z-index:1}.ui5-fcl-arrow:before{background-image:var(--_ui5_fcl_decoration_top);background-position-y:-.3125rem;bottom:100%}.ui5-fcl-arrow:after{background-image:var(--_ui5_fcl_decoration_bottom);background-position-y:.3125rem;top:100%}.ui5-fcl-arrow:after,.ui5-fcl-arrow:before{content:\"\";position:absolute;left:0;height:4rem;width:100%;transition:all .1s ease-in;background-repeat:no-repeat;background-size:.0625rem 100%;background-position-x:calc(50% - .03125rem)}.ui5-fcl-arrow:hover:after,.ui5-fcl-arrow:hover:before{height:7rem}.ui5-fcl--ie .ui5-fcl-arrow{margin:0 -.75rem}";

/**
 * @public
 */
const metadata$14 = {
	tag: "ui5-flexible-column-layout",
	properties: /** @lends sap.ui.webcomponents.fiori.FlexibleColumnLayout.prototype */ {
		/**
		 * Defines the columns layout and their proportion.
		 * <br><br>
		 * <b>Note:</b> The layout also depends on the screen size - one column for screens smaller than 900px,
		 * two columns between 900px and 1280px and three columns for sizes bigger than 1280px.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>OneColumn</code></li>
		 * <li><code>TwoColumnsStartExpanded</code></li>
		 * <li><code>TwoColumnsMidExpanded</code></li>
		 * <li><code>ThreeColumnsMidExpanded</code></li>
		 * <li><code>ThreeColumnsEndExpanded</code></li>
		 * <li><code>ThreeColumnsStartExpandedEndHidden</code></li>
		 * <li><code>ThreeColumnsMidExpandedEndHidden</code></li>
		 * <li><code>MidColumnFullScreen</code></li>
		 * <li><code>EndColumnFullScreen</code></li>
		 * </ul>
		 * <br><br>
		 * <b>For example:</b> layout=<code>TwoColumnsStartExpanded</code> means the layout will display up to two columns
		 * in 67%/33% proportion.
		 * @type {FCLLayout}
		 * @defaultvalue "OneColumn"
		 * @public
		 */
		layout: {
			type: FCLLayout,
			defaultValue: FCLLayout.OneColumn,
		},

		/**
		* Defines the visibility of the arrows,
		* used for expanding and shrinking the columns.
		*
		* @type {boolean}
		* @defaultvalue false
		* @public
		*/
		noArrows: {
			type: Boolean,
		},

		/**
		* Defines the component width in px.
		*
		* @type {Float}
		* @defaultvalue 0
		* @private
		*/
		_width: {
			type: Float,
			defaultValue: 0,
		},

		/**
		* Defines the effective columns layout,
		* based on both the <code>layout</code> property and the screen size.
		* Example: [67%, 33%, 0], [25%, 50%, 25%], etc.
		*
		* @type {Object}
		* @defaultvalue undefined
		* @private
		*/
		_columnLayout: {
			type: Object,
			defaultValue: undefined,
		},

		/**
		* Defines the visible columns count - 1, 2 or 3.
		*
		* @type {Integer}
		* @defaultvalue 1
		* @private
		*/
		_visibleColumns: {
			type: Integer,
			defaultValue: 0,
		},

		/**
		 * Allows the user to replace the whole layouts configuration
		 *
		 * @type {Object}
		 * @private
		 * @sap-restricted
		 */
		_layoutsConfiguration: {
			type: Object,
			defaultValue: undefined,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.FlexibleColumnLayout.prototype */ {
		/**
		 * Defines the content in the start column.
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		startColumn: {
			type: HTMLElement,
		},

		/**
		 * Defines the content in the middle column.
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		midColumn: {
			type: HTMLElement,
		},

		/**
		 * Defines the content in the end column.
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		endColumn: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.FlexibleColumnLayout.prototype */ {
		/**
		 * Fired when the layout changes via user interaction by clicking the arrows
		 * or by changing the component size due to resizing.
		 *
		 * @param {FCLLayout} layout the current layout
		 * @param {Array} columnLayout the effective column layout, f.e [67%, 33%, 0]
		 * @param {boolean} startColumnVisible indicates if the start column is currently visible
		 * @param {boolean} midColumnVisible indicates if the middle column is currently visible
		 * @param {boolean} endColumnVisible indicates if the end column is currently visible
		 * @param {boolean} arrowsUsed indicates if the layout is changed via the arrows
		 * @param {boolean} resize indicates if the layout is changed via resizing
		 * @event sap.ui.webcomponents.fiori.FlexibleColumnLayout#layout-change
		 * @public
		 */
		"layout-change": {
			detail: {
				layout: { type: FCLLayout },
				columnLayout: { type: Array },
				startColumnVisible: { type: Boolean },
				midColumnVisible: { type: Boolean },
				endColumnVisible: { type: Boolean },
				arrowsUsed: { type: Boolean },
				resize: { type: Boolean },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>FlexibleColumnLayout</code> implements the master-detail-detail paradigm by displaying up to three pages in separate columns.
 * There are several possible layouts that can be changed either with the component API, or by pressing the arrows, displayed between the columns.
 *
 * <h3>Usage</h3>
 *
 * Use this component for applications that need to display several logical levels of related information side by side (e.g. list of items, item, sub-item, etc.).
 * The Component is flexible in a sense that the application can focus the user's attention on one particular column.
 *
 * <h3>Responsive Behavior</h3>
 *
 * The <code>FlexibleColumnLayout</code> automatically displays the maximum possible number of columns based on <code>layout</code> property and the window size.
 * The component would display 1 column for window size smaller than 900px, up to two columns between 900px and 1280px,
 * and 3 columns for sizes bigger than 1280px.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents-fiori/dist/FlexibleColumnLayout.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.FlexibleColumnLayout
 * @extends UI5Element
 * @tagname ui5-flexible-column-layout
 * @public
 * @since 1.0.0-rc.8
 */
class FlexibleColumnLayout extends UI5Element {
	constructor() {
		super();

		this._prevLayout = null;
		this.initialRendering = true;
		this._handleResize = this.handleResize.bind(this);
		this.i18nBundle = getI18nBundle("@ui5/webcomponents-fiori");
	}

	static get metadata() {
		return metadata$14;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return FlexibleColumnLayoutCss;
	}

	static get template() {
		return main$1b;
	}

	static get dependencies() {
		return [Button];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}

	static get BREAKPOINTS() {
		return {
			"PHONE": 599,
			"TABLET": 1023,
		};
	}

	static get MEDIA() {
		return {
			PHONE: "phone",
			TABLET: "tablet",
			DESKTOP: "desktop",
		};
	}

	static get ANIMATION_DURATION() {
		return getAnimationMode$1() !== AnimationMode.None ? 560 : 0;
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._handleResize);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this._handleResize);
	}

	onAfterRendering() {
		if (this.initialRendering) {
			this.handleInitialRendering();
			return;
		}

		this.syncLayout();
	}

	handleInitialRendering() {
		this._prevLayout = this.layout;
		this.updateLayout();
		this.initialRendering = false;
	}

	handleResize() {
		if (this.initialRendering) {
			return;
		}

		// store the previous layout
		const prevLayoutHash = this.columnLayout.join();

		// update the column layout, based on the current width
		this.updateLayout();

		// fire layout-change if the column layout changed
		if (prevLayoutHash !== this.columnLayout.join()) {
			this.fireLayoutChange(false, true);
		}
	}

	startArrowClick() {
		this.arrowClick({ start: true, end: false });
	}

	endArrowClick() {
		this.arrowClick({ start: false, end: true });
	}

	arrowClick({ start, end }) {
		// update public property
		this.layout = this.nextLayout(this.layout, { start, end });

		// update layout
		this.updateLayout();

		// fire layout-change
		this.fireLayoutChange(true, false);
	}

	updateLayout() {
		this._width = this.widthDOM;
		this._columnLayout = this.nextColumnLayout(this.layout);
		this._visibleColumns = this.calcVisibleColumns(this._columnLayout);
		this.toggleColumns();
	}

	syncLayout() {
		if (this._prevLayout !== this.layout) {
			this.updateLayout();
			this._prevLayout = this.layout;
		}
	}

	toggleColumns() {
		this.toggleColumn("start");
		this.toggleColumn("mid");
		this.toggleColumn("end");
	}

	toggleColumn(column) {
		const columnWidth = this[`${column}ColumnWidth`];
		const columnDOM = this[`${column}ColumnDOM`];
		const currentlyHidden = columnWidth === 0;
		const previouslyHidden = columnDOM.style.width === "0px";

		// no change
		if (currentlyHidden && previouslyHidden) {
			return;
		}

		// column resizing: from 33% to 67%, from 25% to 50%, etc.
		if (!currentlyHidden && !previouslyHidden) {
			columnDOM.style.width = columnWidth;
			return;
		}

		// hide column: 33% to 0, 25% to 0, etc .
		if (currentlyHidden) {
			// animate the width
			columnDOM.style.width = columnWidth;

			// hide column with delay to allow the animation runs entirely
			setTimeout(() => {
				columnDOM.classList.add("ui5-fcl-column--hidden");
			}, FlexibleColumnLayout.ANIMATION_DURATION);

			return;
		}

		// show column: from 0 to 33%, from 0 to 25%, etc.
		if (previouslyHidden) {
			columnDOM.classList.remove("ui5-fcl-column--hidden");
			columnDOM.style.width = columnWidth;
		}
	}

	nextLayout(layout, arrowsInfo = {}) {
		if (arrowsInfo.start) {
			return getNextLayoutByStartArrow()[layout];
		}

		if (arrowsInfo.end) {
			return getNextLayoutByEndArrow()[layout];
		}
	}

	nextColumnLayout(layout) {
		return this._effectiveLayoutsByMedia[this.media][layout].layout;
	}

	calcVisibleColumns(colLayot) {
		return colLayot.filter(col => col !== 0).length;
	}

	fireLayoutChange(arrowUsed, resize) {
		this.fireEvent("layout-change", {
			layout: this.layout,
			columnLayout: this._columnLayout,
			startColumnVisible: this.startColumnVisible,
			midColumnVisible: this.midColumnVisible,
			endColumnVisible: this.endColumnVisible,
			arrowUsed,
			resize,
		});
	}

	/**
	 * Returns the current column layout, based on both the <code>layout</code> property and the screen size.
	 * <br><br>
	 * <b>For example:</b> ["67%", "33%", 0], ["100%", 0, 0], ["25%", "50%", "25%"], etc,
	 * where the numbers represents the width of the start, middle and end columns.
	 * @readonly
	 * @type { Array }
	 * @defaultvalue ["100%", 0, 0]
	 * @public
	 */
	get columnLayout() {
		return this._columnLayout;
	}

	/**
	 * Returns if the <code>start</code> column is visible.
	 * @readonly
	 * @defaultvalue true
	 * @type { boolean }
	 * @public
	 */
	get startColumnVisible() {
		if (this._columnLayout) {
			return this._columnLayout[0] !== 0;
		}

		return false;
	}

	/**
	 * Returns if the <code>middle</code> column is visible.
	 * @readonly
	 * @type { boolean }
	 * @defaultvalue false
	 * @public
	 */
	get midColumnVisible() {
		if (this._columnLayout) {
			return this._columnLayout[1] !== 0;
		}

		return false;
	}

	/**
	 * Returns if the <code>end</code> column is visible.
	 * @readonly
	 * @type { boolean }
	 * @defaultvalue false
	 * @public
	 */
	get endColumnVisible() {
		if (this._columnLayout) {
			return this._columnLayout[2] !== 0;
		}

		return false;
	}

	/**
	 * Returns the number of currently visible columns.
	 * @readonly
	 * @type { Integer }
	 * @defaultvalue 1
	 * @public
	 */
	get visibleColumns() {
		return this._visibleColumns;
	}

	get classes() {
		const hasAnimation = getAnimationMode$1() !== AnimationMode.None;

		return {
			root: {
				"ui5-fcl-root": true,
				"ui5-fcl--ie": isIE(),
			},
			columns: {
				start: {
					"ui5-fcl-column": true,
					"ui5-fcl-column-animation": hasAnimation,
					"ui5-fcl-column--start": true,
				},
				middle: {
					"ui5-fcl-column": true,
					"ui5-fcl-column-animation": hasAnimation,
					"ui5-fcl-column--middle": true,
				},
				end: {
					"ui5-fcl-column": true,
					"ui5-fcl-column-animation": hasAnimation,
					"ui5-fcl-column--end": true,
				},
			},
		};
	}

	get styles() {
		return {
			arrowsContainer: {
				start: {
					display: this.showStartSeparator ? "flex" : "none",
				},
				end: {
					display: this.showEndSeparator ? "flex" : "none",
				},
			},
			arrows: {
				start: {
					display: this.showStartArrow ? "inline-block" : "none",
					transform: this.startArrowDirection === "mirror" ? "rotate(180deg)" : "",
				},
				end: {
					display: this.showEndArrow ? "inline-block" : "none",
					transform: this.endArrowDirection === "mirror" ? "rotate(180deg)" : "",
				},
			},
		};
	}

	get startColumnWidth() {
		return this._columnLayout ? this._columnLayout[0] : "100%";
	}

	get midColumnWidth() {
		return this._columnLayout ? this._columnLayout[1] : 0;
	}

	get endColumnWidth() {
		return this._columnLayout ? this._columnLayout[2] : 0;
	}

	get showStartSeparator() {
		return this.effectiveArrowsInfo[0].separator || this.startArrowVisibility;
	}

	get showEndSeparator() {
		return this.effectiveArrowsInfo[1].separator || this.endArrowVisibility;
	}

	get showStartArrow() {
		return this.noArrows ? false : this.startArrowVisibility;
	}

	get showEndArrow() {
		return this.noArrows ? false : this.endArrowVisibility;
	}

	get startArrowVisibility() {
		return this.effectiveArrowsInfo[0].visible;
	}

	get endArrowVisibility() {
		return this.effectiveArrowsInfo[1].visible;
	}

	get startArrowDirection() {
		return this.effectiveArrowsInfo[0].dir;
	}

	get endArrowDirection() {
		return this.effectiveArrowsInfo[1].dir;
	}

	get effectiveArrowsInfo() {
		return this._effectiveLayoutsByMedia[this.media][this.layout].arrows;
	}

	get media() {
		if (this._width <= FlexibleColumnLayout.BREAKPOINTS.PHONE) {
			return FlexibleColumnLayout.MEDIA.PHONE;
		}

		if (this._width <= FlexibleColumnLayout.BREAKPOINTS.TABLET) {
			return FlexibleColumnLayout.MEDIA.TABLET;
		}

		return FlexibleColumnLayout.MEDIA.DESKTOP;
	}

	get widthDOM() {
		return this.getBoundingClientRect().width;
	}

	get startColumnDOM() {
		return this.shadowRoot.querySelector(".ui5-fcl-column--start");
	}

	get midColumnDOM() {
		return this.shadowRoot.querySelector(".ui5-fcl-column--middle");
	}

	get endColumnDOM() {
		return this.shadowRoot.querySelector(".ui5-fcl-column--end");
	}

	get accStartColumnText() {
		return this.i18nBundle.getText(FCL_START_COLUMN_TXT);
	}

	get accMiddleColumnText() {
		return this.i18nBundle.getText(FCL_MIDDLE_COLUMN_TXT);
	}

	get accEndColumnText() {
		return this.i18nBundle.getText(FCL_END_COLUMN_TXT);
	}

	get _effectiveLayoutsByMedia() {
		return this._layoutsConfiguration || getLayoutsByMedia();
	}

	get accStartArrowText() {
		if (this.startArrowDirection === "mirror") {
			return this.i18nBundle.getText(FCL_START_COLUMN_COLLAPSE_BUTTON_TOOLTIP);
		}

		return this.i18nBundle.getText(FCL_START_COLUMN_EXPAND_BUTTON_TOOLTIP);
	}

	get accEndArrowText() {
		if (this.endArrowDirection === "mirror") {
			return this.i18nBundle.getText(FCL_END_COLUMN_COLLAPSE_BUTTON_TOOLTIP);
		}

		return this.i18nBundle.getText(FCL_END_COLUMN_EXPAND_BUTTON_TOOLTIP);
	}
}

FlexibleColumnLayout.define();

const block0$1c = (context) => { return scopedHtml`<div class="ui5-product-switch-root" @focusin=${context._onfocusin}><slot></slot></div>`; };


const main$1c = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1c(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var ProductSwitchCss = ":host{font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize)}.ui5-product-switch-root{display:flex;flex-wrap:wrap;width:752px;padding:1.25rem .75rem}:host([desktop-columns=\"3\"]) .ui5-product-switch-root{width:564px}@media only screen and (max-width:900px){.ui5-product-switch-root{width:564px}}@media only screen and (max-width:600px){.ui5-product-switch-root,:host([desktop-columns=\"3\"]) .ui5-product-switch-root{flex-direction:column;padding:0;width:100%}}";

/**
 * @public
 */
const metadata$15 = {
	tag: "ui5-product-switch",
	properties: /** @lends sap.ui.webcomponents.fiori.ProductSwitch.prototype */ {
		/**
		 * Indicates how many columns are displayed.
		 * @private
		 */
		desktopColumns: {
			type: Integer,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.fiori.ProductSwitch.prototype */ {
		/**
		 * Defines the items of the <code>ui5-product-switch</code>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
		},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-product-switch</code> is an SAP Fiori specific web component that is used in <code>ui5-shellbar</code>
 * and allows the user to easily switch between products.
 * <br><br>
 * <h3>ES6 Module Import</h3>
 * <code>import "@ui5/webcomponents-fiori/dist/ProductSwitch.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents-fiori/dist/ProductSwitchItem.js";</code> (for <code>ui5-product-switch-item</code>)
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.ProductSwitch
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-product-switch
 * @appenddocs ProductSwitchItem
 * @public
 * @since 1.0.0-rc.5
 */
class ProductSwitch extends UI5Element {
	constructor() {
		super();

		this.initItemNavigation();
	}

	initItemNavigation() {
		this._itemNavigation = new ItemNavigation(this, { rowSize: 4 });
		this._itemNavigation.getItemsCallback = () => this.items;
	}

	static get metadata() {
		return metadata$15;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ProductSwitchCss;
	}

	static get template() {
		return main$1c;
	}

	static get ROW_MIN_WIDTH() {
		return {
			ONE_COLUMN: 600,
			THREE_COLUMN: 900,
		};
	}

	onEnterDOM() {
		this._handleResizeBound = this._handleResize.bind(this);

		ResizeHandler.register(document.body, this._handleResizeBound);
	}

	onExitDOM() {
		ResizeHandler.deregister(document.body, this._handleResizeBound);
	}

	onBeforeRendering() {
		this.desktopColumns = this.items.length > 6 ? 4 : 3;
	}

	_handleResize() {
		const documentWidth = document.body.clientWidth;

		if (documentWidth <= this.constructor.ROW_MIN_WIDTH.ONE_COLUMN) {
			this._itemNavigation.rowSize = 1;
		} else if (documentWidth <= this.constructor.ROW_MIN_WIDTH.THREE_COLUMN || this.items.length <= 6) {
			this._itemNavigation.rowSize = 3;
		} else {
			this._itemNavigation.rowSize = 4;
		}
	}

	_onfocusin(event) {
		const target = event.target;

		this._itemNavigation.update(target);
	}
}

ProductSwitch.define();

const block0$1d = (context) => { return scopedHtml`${ context.targetSrc ? block1$_(context) : block5$q(context) }`; };
const block1$_ = (context) => { return scopedHtml`<a class="ui5-product-switch-item-root" data-sap-focus-ref @focusout="${context._onfocusout}" @focusin="${context._onfocusin}" @mousedown="${context._onmousedown}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" tabindex=${ifDefined(context._tabIndex)} href="${ifDefined(context.targetSrc)}" target="${ifDefined(context.target)}">${ context.icon ? block2$V(context) : undefined }<span class="ui5-product-switch-item-text-content">${ context.heading ? block3$F(context) : undefined }${ context.subtitle ? block4$x(context) : undefined }</span></a>`; };
const block2$V = (context) => { return scopedHtml`<ui5-icon class="ui5-product-switch-item-icon" name="${ifDefined(context.icon)}"></ui5-icon>`; };
const block3$F = (context) => { return scopedHtml`<span class="ui5-product-switch-item-heading">${ifDefined(context.heading)}</span>`; };
const block4$x = (context) => { return scopedHtml`<span class="ui5-product-switch-item-subtitle">${ifDefined(context.subtitle)}</span>`; };
const block5$q = (context) => { return scopedHtml`<div class="ui5-product-switch-item-root" data-sap-focus-ref @focusout="${context._onfocusout}" @focusin="${context._onfocusin}" @mousedown="${context._onmousedown}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" tabindex=${ifDefined(context._tabIndex)}>${ context.icon ? block6$j(context) : undefined }<span class="ui5-product-switch-item-text-content">${ context.heading ? block7$f(context) : undefined }${ context.subtitle ? block8$e(context) : undefined }</span></div>`; };
const block6$j = (context) => { return scopedHtml`<ui5-icon class="ui5-product-switch-item-icon" name="${ifDefined(context.icon)}"></ui5-icon>`; };
const block7$f = (context) => { return scopedHtml`<span class="ui5-product-switch-item-heading">${ifDefined(context.heading)}</span>`; };
const block8$e = (context) => { return scopedHtml`<span class="ui5-product-switch-item-subtitle">${ifDefined(context.subtitle)}</span>`; };


const main$1d = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1d(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var ProductSwitchItemCss = ":host{width:var(--_ui5_product_switch_item_width);height:var(--_ui5_product_switch_item_height);margin:.25rem;border-radius:.25rem;box-sizing:border-box;background:var(--sapList_Background)}:host(:hover){background:var(--sapList_Hover_Background)}:host([active]){background:var(--sapList_Active_Background)}:host([active]) .ui5-product-switch-item-root .ui5-product-switch-item-icon,:host([active]) .ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-heading,:host([active]) .ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-subtitle{color:var(--sapList_Active_TextColor)}:host([focused]){outline:var(--_ui5_product_switch_item_outline);outline-offset:var(--_ui5_product_switch_item_outline_offset)}:host([active][focused]){outline-color:var(--_ui5_product_switch_item_active_outline_color)}.ui5-product-switch-item-root{user-select:none;-ms-user-select:none;width:100%;height:100%;flex-direction:column;display:flex;align-items:center;text-decoration:none;outline:none;box-sizing:border-box;padding:.5rem;padding-top:4rem;cursor:pointer;border:var(--_ui5_product_switch_item_border)}:host([icon]) .ui5-product-switch-item-root{padding-top:.5rem}.ui5-product-switch-item-root .ui5-product-switch-item-icon{width:3rem;height:3rem;padding:.75rem;margin-bottom:.5rem;box-sizing:border-box;color:var(--sapContent_IconColor);pointer-events:none}.ui5-product-switch-item-root .ui5-product-switch-item-text-content{display:flex;align-items:center;flex-direction:column;max-width:10.25rem}.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-heading,.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-subtitle{line-height:1.25rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:100%;pointer-events:none}.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-heading{font-size:var(--sapMFontHeader6Size);color:var(--sapGroup_TitleTextColor)}.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-subtitle{font-size:var(--sapFontSmallSize);color:var(--sapContent_LabelColor)}@media only screen and (max-width:600px){:host{margin:0;width:100%;max-width:600px;height:5rem;border-radius:0}.ui5-product-switch-item-root{padding:0 1rem;flex-direction:row}:host([icon]) .ui5-product-switch-item-root{padding-top:0}.ui5-product-switch-item-root .ui5-product-switch-item-icon{padding:.875rem;color:var(--sapContent_NonInteractiveIconColor);margin:0 .75rem 0 0}.ui5-product-switch-item-root .ui5-product-switch-item-text-content{align-items:flex-start;max-width:100%}:host([icon]) .ui5-product-switch-item-root .ui5-product-switch-item-text-content{max-width:calc(100% - 3.75rem)}.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-heading,.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-subtitle{line-height:normal}.ui5-product-switch-item-root .ui5-product-switch-item-text-content .ui5-product-switch-item-subtitle{font-size:var(--sapFontSize);padding-top:.75rem}}[ui5-product-switch-item][focused]{outline:none;position:relative}[ui5-product-switch-item][focused] .ui5-product-switch-item-root:after{content:\"\";position:absolute;border-color:var(--_ui5_product_switch_item_outline_color);border-width:var(--_ui5_product_switch_item_outline_width);border-style:dotted;top:var(--_ui5_product_switch_item_outline_offset_positive);bottom:var(--_ui5_product_switch_item_outline_offset_positive);left:var(--_ui5_product_switch_item_outline_offset_positive);right:var(--_ui5_product_switch_item_outline_offset_positive)}[ui5-product-switch-item][active][focused] .ui5-product-switch-item-root:after{border-color:var(--_ui5_product_switch_item_active_outline_color)}";

/**
 * @public
 */
const metadata$16 = {
	tag: "ui5-product-switch-item",
	properties: /** @lends sap.ui.webcomponents.fiori.ProductSwitchItem.prototype */ {
		/**
		  * Defines the title of the <code>ui5-product-switch-item</code>.
		  * @type {string}
		  * @defaultvalue ""
		  * @public
		  */
		heading: {
			type: String,
		},

		/**
		 * Defines the subtitle of the <code>ui5-product-switch-item</code>.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		subtitle: {
			type: String,
		},

		/**
		 * Defines the icon to be displayed as a graphical element within the <code>ui5-product-switch-item</code>.
		 * <br><br>
		 * Example:
		 * <br>
		 * <pre>ui5-product-switch-item icon="palette"</pre>
		 *
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines a target where the <code>targetSrc</code> content must be open.
		 * <br><br>
		 * Available options are:
		 * <ul>
		 * <li><code>_self</code></li>
		 * <li><code>_top</code></li>
		 * <li><code>_blank</code></li>
		 * <li><code>_parent</code></li>
		 * <li><code>_search</code></li>
		 * </ul>
		 *
		 * @type {string}
		 * @defaultvalue "_self"
		 * @public
		 */
		target: {
			type: String,
			defaultValue: "_self",
		},

		/**
		 * Defines the <code>ui5-product-switch-item</code> target URI. Supports standard hyperlink behavior.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		targetSrc: {
			type: String,
		},

		/**
		 * Used to switch the active state (pressed or not) of the <code>ui5-product-switch-item</code>.
		 * @private
		 */
		active: {
			type: Boolean,
		},

		/**
		 * Indicates whether the element is focused.
		 * @private
		 */
		focused: {
			type: Boolean,
		},

		_tabIndex: {
			type: String,
			defaultValue: "-1",
			noAttribute: true,
		},
	},
	slots: /** @lends  sap.ui.webcomponents.fiori.ProductSwitchItem.prototype */ {
	},
	events: /** @lends sap.ui.webcomponents.fiori.ProductSwitchItem.prototype */ {
		/**
		 * Fired when the <code>ui5-product-switch-item</code> is activated either with a
		 * click/tap or by using the Enter or Space key.
		 *
		 * @event
		 * @public
		 */
		click: {},
		_focused: {},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-product-switch-item</code> web component represents the items displayed in the
 * <code>ui5-product-switch</code> web component.
 * <br><br>
 * <b>Note:</b> <code>ui5-product-switch-item</code> is not supported when used outside of <code>ui5-product-switch</code>.
 * <br><br>
 * <h3>ES6 Module Import</h3>
 * <code>import "@ui5/webcomponents-fiori/dist/ProductSwitchItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.ProductSwitchItem
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-product-switch-item
 * @public
 * @since 1.0.0-rc.5
 */
class ProductSwitchItem extends UI5Element {
	constructor() {
		super();

		this._deactivate = () => {
			if (this.active) {
				this.active = false;
			}
		};
	}

	static get metadata() {
		return metadata$16;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return ProductSwitchItemCss;
	}

	static get template() {
		return main$1d;
	}

	onEnterDOM() {
		document.addEventListener("mouseup", this._deactivate);
	}

	onExitDOM() {
		document.removeEventListener("mouseup", this._deactivate);
	}

	_onmousedown() {
		this.active = true;
	}

	_onkeydown(event) {
		if (isSpace(event) || isEnter(event)) {
			this.active = true;
		}

		if (isSpace(event)) {
			event.preventDefault();
		}

		if (isEnter(event)) {
			this._fireItemClick();
		}
	}

	_onkeyup(event) {
		if (isSpace(event) || isEnter(event)) {
			this.active = false;
		}

		if (isSpace(event)) {
			this._fireItemClick();
		}
	}

	_onfocusout() {
		this.active = false;
		this.focused = false;
	}

	_onfocusin(event) {
		this.focused = true;

		this.fireEvent("_focused", event);
	}

	_fireItemClick() {
		this.fireEvent("click", { item: this });
	}

	static get dependencies() {
		return [Icon];
	}
}

ProductSwitchItem.define();

const block0$1e = (context) => { return scopedHtml`<div class="ui5-sn-root">${ context.items.length ? block1$$(context) : undefined }<div class="ui5-sn-spacer"></div>${ context.fixedItems.length ? block5$r(context) : undefined }</div> `; };
const block1$$ = (context) => { return scopedHtml`<ui5-tree id="ui5-sn-items-tree" mode="None" ?_minimal="${ifDefined(context.collapsed)}" _toggle-button-end @ui5-item-click="${ifDefined(context.handleTreeItemClick)}">${ repeat(context._items, (item, index) => item._id || index, (item, index) => block2$W(item, index, context)) }</ui5-tree>`; };
const block2$W = (item, index, context) => { return scopedHtml`<ui5-tree-item icon="${ifDefined(item.item.icon)}" .associatedItem="${ifDefined(item.item)}" text="${ifDefined(item.item.text)}" ?has-children="${item.item.items.length}" ?expanded="${item.item.expanded}" ?selected="${item.selected}">${ !context.collapsed ? block3$G(item) : undefined }</ui5-tree-item>`; };
const block3$G = (item, index, context) => { return scopedHtml`${ repeat(item.item.items, (item, index) => item._id || index, (item, index) => block4$y(item)) }`; };
const block4$y = (item, index, context) => { return scopedHtml`<ui5-tree-item .associatedItem="${ifDefined(item)}" text="${ifDefined(item.text)}" icon="${ifDefined(item.icon)}" ?selected="${item.selected}"></ui5-tree-item>`; };
const block5$r = (context) => { return scopedHtml`<div><div class="ui5-sn-bottom-content-border"><span></span></div><ui5-tree id="ui5-sn-fixed-items-tree" mode="None" ?_minimal="${ifDefined(context.collapsed)}" _toggle-button-end @ui5-item-click="${ifDefined(context.handleTreeItemClick)}">${ repeat(context._fixedItems, (item, index) => item._id || index, (item, index) => block6$k(item, index, context)) }</ui5-tree></div>`; };
const block6$k = (item, index, context) => { return scopedHtml`<ui5-tree-item icon="${ifDefined(item.item.icon)}" .associatedItem="${ifDefined(item.item)}" text="${ifDefined(item.item.text)}" ?has-children="${item.item.items.length}" ?expanded="${item.item.expanded}" ?selected="${item.selected}">${ !context.collapsed ? block7$g(item) : undefined }</ui5-tree-item>`; };
const block7$g = (item, index, context) => { return scopedHtml`${ repeat(item.item.items, (item, index) => item._id || index, (item, index) => block8$f(item)) }`; };
const block8$f = (item, index, context) => { return scopedHtml`<ui5-tree-item .associatedItem="${ifDefined(item)}" text="${ifDefined(item.text)}" ?selected="${item.selected}"></ui5-tree-item>`; };


const main$1e = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1e(context);
};

const block0$1f = (context) => { return scopedHtml`<ui5-responsive-popover vertical-align="Top"><ui5-list mode="None" @ui5-item-click="${ifDefined(context.handleListItemClick)}"><ui5-li ?selected="${context._popoverContent.mainItemSelected}" .associatedItem="${ifDefined(context._popoverContent.mainItem)}">${ifDefined(context._popoverContent.mainItem.text)}</ui5-li>${ repeat(context._popoverContent.subItems, (item, index) => item._id || index, (item, index) => block1$10(item)) }</ui5-list></ui5-responsive-popover>`; };
const block1$10 = (item, index, context) => { return scopedHtml`<ui5-li ?selected="${item.selected}" .associatedItem="${ifDefined(item)}">${ifDefined(item.text)}</ui5-li>`; };


const main$1f = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1f(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var SideNavigationCss = ":host(:not([hidden])){display:inline-block;width:15rem;height:100%;border-right:var(--sapList_BorderWidth) solid var(--sapList_GroupHeaderBorderColor);transition:width .25s;--_ui5-tree-toggle-box-width:1rem}:host([collapsed]){width:3rem}.ui5-sn-bottom-content-border{width:100%;padding:0 .5rem;margin:.25rem 0;display:flex;justify-content:center;box-sizing:border-box}.ui5-sn-bottom-content-border>span{width:90%;height:.125rem;background:var(--sapList_GroupHeaderBorderColor)}.ui5-sn-root{height:100%;display:flex;flex-direction:column;background:var(--sapList_Background)}.ui5-sn-spacer{flex:auto;min-height:3rem}";

/**
 * @public
 */
const metadata$17 = {
	tag: "ui5-side-navigation",
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.fiori.SideNavigation.prototype */ {
		/**
		 * Defines whether the <code>ui5-side-navigation</code> is expanded or collapsed.
		 *
		 * @public
		 * @type {boolean}
		 * @defaultvalue false
		 */
		collapsed: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		_popoverContent: {
			type: Object,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.SideNavigation.prototype */ {
		/**
		 * Defines the main items of the <code>ui5-side-navigation</code>. Use the <code>ui5-side-navigation-item</code> component
		 * for the top-level items, and the <code>ui5-side-navigation-subitem</code> component for second-level items, nested
		 * inside the items.
		 *
		 * @public
		 * @slot
		 */
		"default": {
			propertyName: "items",
			invalidateParent: true,
			type: HTMLElement,
		},

		/**
		 * Defines the fixed items at the bottom of the <code>ui5-side-navigation</code>. Use the <code>ui5-side-navigation-item</code> component
		 * for the fixed items, and optionally the <code>ui5-side-navigation-subitem</code> component to provide second-level items inside them.
		 *
		 * <b>Note:</b> In order to achieve the best user experience, it is recommended that you keep the fixed items "flat" (do not pass sub-items)
		 *
		 * @public
		 * @slot
		 */
		fixedItems: {
			type: HTMLElement,
			invalidateParent: true,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.SideNavigation.prototype */ {
		/**
		 * Fired when the selection has changed via user interaction
		 *
		 * @event sap.ui.webcomponents.fiori.SideNavigation#selection-change
		 * @param {HTMLElement} item the clicked item.
		 * @public
		 */
		"selection-change": {
			item: {
				type: HTMLElement,
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>SideNavigation</code> is used as a standard menu in applications.
 * It consists of two containers: the main navigation section (top-aligned) and the secondary section (bottom-aligned).
 * Usually the main navigation section is related to the user’s current work context,
 * whereas the secondary section is mostly used to link additional information that may be of interest (legal information, developer communities, external help, contact information and so on).

 * <h3>Usage</h3>
 *
 * Use the available <code>ui5-side-navigation-item</code> and <code>ui5-side-navigation-sub-item</code> components to build your menu.
 * The items can consist of text only or an icon with text. The use or non-use of icons must be consistent for all items on one level.
 * You must not combine entries with and without icons on the same level. We strongly recommend that you do not use icons on the second level.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents-fiori/dist/SideNavigation.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents-fiori/dist/SideNavigationItem.js";</code> (for <code>ui5-side-navigation-item</code>)
 * <br>
 * <code>import "@ui5/webcomponents-fiori/dist/SideNavigationSubItem.js";</code> (for <code>ui5-side-navigation-sub-item</code>)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.SideNavigation
 * @extends UI5Element
 * @tagname ui5-side-navigation
 * @since 1.0.0-rc.8
 * @appenddocs SideNavigationItem SideNavigationSubItem
 * @public
 */
class SideNavigation extends UI5Element {
	static get metadata() {
		return metadata$17;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return SideNavigationCss;
	}

	static get template() {
		return main$1e;
	}

	static get staticAreaTemplate() {
		return main$1f;
	}

	static get dependencies() {
		return [
			List,
			StandardListItem,
			Tree,
			TreeItem,
			ResponsivePopover,
		];
	}

	onBeforeRendering() {
		this._items = this.items.map(item => {
			return {
				item,
				selected: ((item.items.some(subItem => subItem.selected) && this.collapsed) || item.selected),
			};
		});

		this._fixedItems = this.fixedItems.map(item => {
			return {
				item,
				selected: ((item.items.some(subItem => subItem.selected) && this.collapsed) || item.selected),
			};
		});
	}

	_setSelectedItem(item) {
		this._walk(current => {
			current.selected = false;
		});
		item.selected = true;

		this.fireEvent("selection-change", { item });
	}

	_buildPopoverContent(item) {
		this._popoverContent = {
			mainItem: item,
			mainItemSelected: item.selected && !item.items.some(subItem => subItem.selected),
			subItems: item.items,
		};
	}

	handleTreeItemClick(event) {
		const treeItem = event.detail.item;
		const item = treeItem.associatedItem;

		if (item.selected && !this.collapsed) {
			return;
		}

		if (this.collapsed && item.items.length) {
			this._buildPopoverContent(item);
			const currentTree = this._itemsTree === event.target ? this._itemsTree : this._fixedItemsTree;
			this.openPicker(currentTree._getListItemForTreeItem(treeItem));
		} else {
			this._setSelectedItem(item);
		}
	}

	handleListItemClick(event) {
		const listItem = event.detail.item;
		const item = listItem.associatedItem;

		if (item.selected) {
			return;
		}

		this._setSelectedItem(item);
		this.closePicker();
	}

	async getPicker() {
		return (await this.getStaticAreaItemDomRef()).querySelector("[ui5-responsive-popover]");
	}

	async openPicker(opener) {
		const responsivePopover = await this.getPicker();
		responsivePopover.open(opener);
	}

	async closePicker(opener) {
		const responsivePopover = await this.getPicker();
		responsivePopover.close();
	}

	get _itemsTree() {
		return this.getDomRef().querySelector("#ui5-sn-items-tree");
	}

	get _fixedItemsTree() {
		return this.getDomRef().querySelector("#ui5-sn-fixed-items-tree");
	}

	_walk(callback) {
		this.items.forEach(current => {
			callback(current);

			current.items.forEach(currentSubitem => {
				callback(currentSubitem);
			});
		});

		this.fixedItems.forEach(current => {
			callback(current);

			current.items.forEach(currentSubitem => {
				callback(currentSubitem);
			});
		});
	}
}

SideNavigation.define();

/**
 * @public
 */
const metadata$18 = {
	tag: "ui5-side-navigation-item",
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.fiori.SideNavigationItem.prototype */ {
		/**
		 * Defines the text of the item.
		 *
		 * @public
		 * @type {string}
		 * @defaultvalue ""
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the icon of the item.
		 * <br><br>
		 *
		 * The SAP-icons font provides numerous options.
		 * <br>
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 * @public
		 * @type {string}
		 * @defaultvalue ""
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines if the item is expanded
		 *
		 * @public
		 * @type {boolean}
		 * @defaultvalue false
		 */
		expanded: {
			type: Boolean,
		},

		/**
		 * Defines whether the subitem is selected
		 *
		 * @public
		 * @type {boolean}
		 * @defaultvalue false
		 */
		selected: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.SideNavigationItem.prototype */ {
		/**
		 * If you wish to nest menus, you can pass inner menu items to the default slot.
		 *
		 * @type {HTMLElement[]}
		 * @public
		 * @slot
		 */
		"default": {
			propertyName: "items",
			invalidateParent: true,
			type: HTMLElement,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-side-navigation-item</code> is used within <code>ui5-side-navigation</code> only.
 * Via the <code>ui5-side-navigation-item</code> you control the content of the <code>SideNavigation</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents-fiori/dist/SideNavigationItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.SideNavigationItem
 * @extends UI5Element
 * @tagname ui5-side-navigation-item
 * @public
 * @since 1.0.0-rc.8
 */
class SideNavigationItem extends UI5Element {
	static get metadata() {
		return metadata$18;
	}
}

SideNavigationItem.define();

/**
 * @public
 */
const metadata$19 = {
	tag: "ui5-side-navigation-sub-item",
	properties: /** @lends sap.ui.webcomponents.fiori.SideNavigationSubItem.prototype */ {
		/**
		 * Defines the text of the item.
		 *
		 * @public
		 * @type {string}
		 * @defaultvalue ""
		 */
		text: {
			type: String,
		},

		/**
		 * Defines whether the subitem is selected.
		 *
		 * @public
		 * @type {boolean}
		 * @defaultvalue false
		 */
		selected: {
			type: Boolean,
		},

		/**
		 * Defines the icon of the item.
		 * <br><br>
		 *
		 * The SAP-icons font provides numerous options.
		 * <br>
		 * See all the available icons in the <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 * @public
		 * @type {string}
		 * @defaultvalue ""
		 */
		icon: {
			type: String,
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-side-navigation-sub-item</code> is intended to be used inside a <code>ui5-side-navigation-item</code> only.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents-fiori/dist/SideNavigationSubItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.SideNavigationSubItem
 * @extends UI5Element
 * @tagname ui5-side-navigation-sub-item
 * @public
 * @since 1.0.0-rc.8
 */
class SideNavigationSubItem extends UI5Element {
	static get metadata() {
		return metadata$19;
	}
}

SideNavigationSubItem.define();

const name$l = "search";
const pathData$l = "M470 426q10 9 10 22.5T470 471q-9 9-22 9t-23-9L308 353q-45 31-100 31-36 0-68-13.5T84 333t-38-56-14-69q0-36 14-68t38-56 56-38 68-14 68 14 56 38 38 56 14 68q0 28-8.5 53T353 308zm-262-74q30 0 56-11t45.5-30.5 31-46T352 208t-11.5-56-31-45.5-45.5-31T208 64t-56.5 11.5-46 31T75 152t-11 56 11 56.5 30.5 46 46 30.5 56.5 11z";
const ltr$l = true;

registerIcon(name$l, { pathData: pathData$l, ltr: ltr$l});

const name$m = "bell";
const pathData$m = "M32 416q0-7 15-21t31-40.5 25.5-67.5-1.5-101q-5-29 3-54.5t25-45 42-33T225 35q0-15 7-25t24-10q14 0 23 9t9 23q0 2-1 3 26 5 50 18t41 33 24.5 45.5T404 186q-12 60-1.5 101t27.5 67.5 33.5 40.5 16.5 21q0 14-9 23t-23 9H320q0 26-19 45t-45 19-45-19-19-45H64q-14 0-23-9t-9-23zm39 0h369q-10-11-25.5-30.5t-28-48.5-18-68 4.5-89q5-25-2.5-44T354 106q-19-23-42-32.5T256 64q-32 0-57.5 9.5T154 106q-10 11-18 30t-3 44q9 50 4 89t-16 68-25.5 48.5T71 416z";
const ltr$m = false;

registerIcon(name$m, { pathData: pathData$m, ltr: ltr$m});

const name$n = "overflow";
const pathData$n = "M448 192q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zm0 96q14 0 23-9t9-23-9-23-23-9-23 9-9 23 9 23 23 9zm-192-96q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zm0 96q14 0 23-9t9-23-9-23-23-9-23 9-9 23 9 23 23 9zM64 192q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zm0 96q14 0 23-9t9-23-9-23-23-9-23 9-9 23 9 23 23 9z";
const ltr$n = false;

registerIcon(name$n, { pathData: pathData$n, ltr: ltr$n});

const name$o = "grid";
const pathData$o = "M394 362h55q14 0 22.5 9t8.5 23v54q0 14-8.5 23t-22.5 9h-55q-14 0-22.5-9t-8.5-23v-54q0-14 8.5-23t22.5-9zM228 197h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5h-55q-13 0-22-9.5t-9-22.5v-54q0-14 8.5-23t22.5-9zm135-79V64q0-14 8.5-23t22.5-9h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5h-55q-13 0-22-9.5t-9-22.5zm31 79h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5h-55q-13 0-22-9.5t-9-22.5v-54q0-14 8.5-23t22.5-9zM63 32h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5H63q-13 0-22-9.5T32 118V64q0-14 8.5-23T63 32zM32 229q0-14 8.5-23t22.5-9h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5H63q-13 0-22-9.5T32 283v-54zm31 133h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5H63q-13 0-22-9.5T32 448v-54q0-14 8.5-23t22.5-9zM228 32h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5h-55q-13 0-22-9.5t-9-22.5V64q0-14 8.5-23t22.5-9zm-31 362q0-14 8.5-23t22.5-9h55q14 0 22.5 9t8.5 23v54q0 13-9 22.5t-22 9.5h-55q-13 0-22-9.5t-9-22.5v-54z";
const ltr$o = false;

registerIcon(name$o, { pathData: pathData$o, ltr: ltr$o});

const block0$1g = (context) => { return scopedHtml`<div class="${classMap(context.classes.wrapper)}" dir="${ifDefined(context.effectiveDir)}" role="banner" aria-label="${ifDefined(context._shellbarText)}" part="root"><div class="ui5-shellbar-overflow-container ui5-shellbar-overflow-container-left">${ context.startButton.length ? block1$11() : undefined }${ context.hasFocusableLogo ? block2$X(context) : undefined }${ context.showArrowDown ? block3$H(context) : undefined }<h2 class="ui5-shellbar-secondary-title">${ifDefined(context.secondaryTitle)}</h2></div><div class="ui5-shellbar-overflow-container ui5-shellbar-overflow-container-middle">${ context.showCoPilot ? block6$l(context) : block9$a() }</div><div id="${ifDefined(context._id)}-searchfield-wrapper" class="ui5-shellbar-search-field" style="${styleMap(context.styles.searchField)}">${ context.searchField.length ? block10$9() : undefined }</div><div class="ui5-shellbar-overflow-container ui5-shellbar-overflow-container-right"><div class="ui5-shellbar-overflow-container-right-child">${ context.hasSearchField ? block11$8(context) : undefined }${ repeat(context.customItemsInfo, (item, index) => item._id || index, (item, index) => block12$8(item, index, context)) }${ context.showNotifications ? block13$7(context) : undefined }<ui5-button id="${ifDefined(context._id)}-item-5" style="${styleMap(context.styles.items.overflow)}" class="${classMap(context.classes.items.overflow)} ui5-shellbar-button ui5-shellbar-overflow-button-shown ui5-shellbar-overflow-button" icon="sap-icon://overflow" @click="${context._handleOverflowPress}" aria-label="${ifDefined(context._overflowText)}" title="${ifDefined(context._overflowText)}" ._buttonAccInfo="${ifDefined(context.accInfo.overflow)}" data-ui5-stable="overflow"></ui5-button>${ context.hasProfile ? block14$6(context) : undefined }${ context.showProductSwitch ? block15$5(context) : undefined }</div></div></div> `; };
const block1$11 = (context) => { return scopedHtml`<slot name="startButton"></slot>`; };
const block2$X = (context) => { return scopedHtml`<span class="ui5-shellbar-logo" role="button" aria-label="${ifDefined(context._logoText)}" title="${ifDefined(context._logoText)}" @click="${context._logoPress}" @keydown="${context._logoKeydown}" @keyup="${context._logoKeyup}" tabindex="0" data-ui5-stable="logo"><slot name="logo"></slot></span>`; };
const block3$H = (context) => { return scopedHtml`<button tabindex="${ifDefined(context.menuBtnTabindex)}" class="${classMap(context.classes.button)}" @click="${context._header.press}" aria-haspopup="${ifDefined(context.menuBtnHasPopup)}" aria-expanded="${ifDefined(context.menuPopoverExpanded)}">${ context.hasNonFocusableLogo ? block4$z(context) : undefined }${ context.primaryTitle ? block5$s(context) : undefined }<span class="ui5-shellbar-menu-button-arrow"></span></button>`; };
const block4$z = (context) => { return scopedHtml`<span class="ui5-shellbar-logo" aria-label="${ifDefined(context._logoText)}" title="${ifDefined(context._logoText)}"><slot name="logo"></slot></span>`; };
const block5$s = (context) => { return scopedHtml`<h1 class="ui5-shellbar-menu-button-title"><bdi class="${classMap(context.classes.title)}">${ifDefined(context.primaryTitle)}</bdi></h1>`; };
const block6$l = (context) => { return scopedHtml`<div class="ui5-shellbar-copilot-wrapper" tabindex="0" aria-label="${ifDefined(context._copilotText)}" title="${ifDefined(context._copilotText)}" @keydown="${context._coPilotKeydown}" @keyup="${context._coPilotKeyup}" ?active="${context.coPilotActive}" data-ui5-stable="copilot"><svg @click="${context._coPilotClick}" focusable="false" width="44" role="presentation" aria-hidden="true" height="44" viewBox="-150 -150 300 300" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="ui5-shellbar-coPilot">${blockSVG1$2(context)}</svg></div>`; };
const block7$h = (context) => { return scopedSvg`<animateTransform attributeName="transform" type="rotate" from="54" to="416" dur="15s" repeatCount="indefinite"/>`; };
const block8$g = (context) => { return scopedSvg`<animateTransform attributeName="transform" type="rotate" from="90" to="450" dur="30s" repeatCount="indefinite"/>`; };
const block9$a = (context) => { return scopedHtml`<span class="ui5-shellbar-co-pilot-placeholder"></span>`; };
const block10$9 = (context) => { return scopedHtml`<slot name="searchField"></slot>`; };
const block11$8 = (context) => { return scopedHtml`<ui5-button id="${ifDefined(context._id)}-item-1" class="${classMap(context.classes.items.search)} ui5-shellbar-button ui5-shellbar-search-button" icon="sap-icon://search" data-ui5-text="Search" data-ui5-notification-count="${ifDefined(context.notificationCount)}" @click=${context._handleSearchIconPress} aria-label="${ifDefined(context._searchText)}" title="${ifDefined(context._searchText)}" ._buttonAccInfo="${ifDefined(context.accInfo.search)}"></ui5-button>`; };
const block12$8 = (item, index, context) => { return scopedHtml`<ui5-button id="${ifDefined(item.id)}" style="${ifDefined(item.style)}" class="${ifDefined(item.classes)}" icon="${ifDefined(item.icon)}" title="${ifDefined(item.title)}" data-count="${ifDefined(item.count)}" data-ui5-notification-count="${ifDefined(context.notificationCount)}" data-ui5-external-action-item-id="${ifDefined(item.refItemid)}" data-ui5-stable="${ifDefined(item.stableDomRef)}" @click=${item.press}></ui5-button>`; };
const block13$7 = (context) => { return scopedHtml`<ui5-button id="${ifDefined(context._id)}-item-2" style="${styleMap(context.styles.items.notification)}" class="${classMap(context.classes.items.notification)} ui5-shellbar-button ui5-shellbar-bell-button" icon="sap-icon://bell" data-ui5-text="Notifications" data-ui5-notification-count="${ifDefined(context.notificationCount)}" @click=${context._handleNotificationsPress} aria-label="${ifDefined(context._notificationsText)}" title="${ifDefined(context._notificationsText)}" ._buttonAccInfo="${ifDefined(context.accInfo.notifications)}" data-ui5-stable="notifications"></ui5-button>`; };
const block14$6 = (context) => { return scopedHtml`<ui5-button profile-btn id="${ifDefined(context._id)}-item-3" @click=${context._handleProfilePress} style="${styleMap(context.styles.items.profile)}" aria-label="${ifDefined(context._profileText)}" title="${ifDefined(context._profileText)}" ._buttonAccInfo="${ifDefined(context.accInfo.profile)}" class="ui5-shellbar-button ui5-shellbar-image-button" data-ui5-stable="profile"><slot name="profile"></slot></ui5-button>`; };
const block15$5 = (context) => { return scopedHtml`<ui5-button id="${ifDefined(context._id)}-item-4" style="${styleMap(context.styles.items.product)}" class="${classMap(context.classes.items.product)} ui5-shellbar-button ui5-shellbar-button-product-switch" icon="sap-icon://grid" data-ui5-text="Product Switch" @click=${context._handleProductSwitchPress} aria-label="${ifDefined(context._productsText)}" title="${ifDefined(context._productsText)}" ._buttonAccInfo="${ifDefined(context.accInfo.products)}" data-ui5-stable="product-switch"></ui5-button>`; };

const blockSVG1$2 = (context) => {return scopedSvg`<defs><linearGradient id="f" x1="0%" x2="100%" y1="100%" y2="0%"><stop offset="0%" stop-color="#c0d9f2" stop-opacity=".87"/><stop offset="80%" stop-color="#fff" stop-opacity=".87"/></linearGradient><linearGradient id="e" x1="0%" x2="100%" y1="100%" y2="0%"><stop offset="0%" stop-color="#b4d2ff" stop-opacity=".16"/><stop offset="80%" stop-color="#fff" stop-opacity=".16"/></linearGradient><linearGradient id="c" x1="0%" x2="100%" y1="100%" y2="0%"><stop offset="0%" stop-color="#b4d2ff" stop-opacity=".1"/><stop offset="80%" stop-color="#fff" stop-opacity=".1"/></linearGradient><path id="d" d="M98.158 0c.158 17.395-9.107 31.335-18.609 45.928-9.21 14.153-18.933 25.29-33.377 34.045C31.427 88.918 17.25 94.39 0 94.273c-17.155-.115-30.823-6.582-45.798-14.949-15.216-8.497-27.76-16.77-37.253-31.375C-92.668 33.158-98.487 17.571-97.179 0c1.233-16.978 12.691-29.086 21.044-43.957 8.456-15.059 12.272-32.152 26.873-41.367 14.76-9.322 31.83-7.68 49.262-6.77 16.897.88 31.86 3.06 46.42 11.693 14.452 8.568 23.18 20.866 32.26 34.976C88.05-30.91 98.014-17.277 98.157 0z"><animate attributeName="d" values="${ifDefined(context.coPilot.animationValues)}" dur="30s" repeatCount="indefinite"/><animateTransform attributeName="transform" type="scale" values="1;1.05;1.05;1.02;1" dur="0.15s" begin="a.mousedown" repeatCount="1" additive="sum"/></path><mask id="b"><circle r="120" fill="#fff"/><circle r="76"/></mask></defs><g mask="url(#b)"><g transform="rotate(54)"><use xlink:href="#d" fill="url(#c)">${ context.coPilot.animated ? block7$h() : undefined }</use></g><use xlink:href="#d" fill="url(#e)" transform="rotate(74)"/><g transform="rotate(90)"><use xlink:href="#d" fill="url(#f)">${ context.coPilot.animated ? block8$g() : undefined }</use></g></g><circle cx="0" cy="0" r="76" class="ui5-shellbar-co-pilot-circle" id="a"/>`};

const main$1g = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1g(context);
};

const block0$1h = (context) => { return scopedHtml`<ui5-popover class="ui5-shellbar-menu-popover" placement-type="Bottom" @ui5-before-open=${ifDefined(context._menuPopoverBeforeOpen)} @ui5-after-close=${ifDefined(context._menuPopoverAfterClose)}><ui5-list separators="None" mode="SingleSelect" @ui5-item-press=${ifDefined(context._menuItemPress)}>${ repeat(context._menuPopoverItems, (item, index) => item._id || index, (item, index) => block1$12(item)) }</ui5-list></ui5-popover><ui5-popover class="ui5-shellbar-overflow-popover" placement-type="Bottom" horizontal-align="${ifDefined(context.popoverHorizontalAlign)}" no-arrow @ui5-before-open=${ifDefined(context._overflowPopoverBeforeOpen)} @ui5-after-close=${ifDefined(context._overflowPopoverAfterClose)}><ui5-list separators="None" @ui5-item-press="${ifDefined(context._actionList.itemPress)}">${ repeat(context._hiddenIcons, (item, index) => item._id || index, (item, index) => block2$Y(item)) }</ui5-list></ui5-popover>`; };
const block1$12 = (item, index, context) => { return scopedHtml`${ifDefined(item)}`; };
const block2$Y = (item, index, context) => { return scopedHtml`<ui5-li data-ui5-external-action-item-id="${ifDefined(item.refItemid)}" icon="${ifDefined(item.icon)}" type="Active" @ui5-_press="${ifDefined(item.press)}">${ifDefined(item.text)}</ui5-li>`; };


const main$1h = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1h(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var styles$i = ":host(:not([hidden])){display:inline-block;width:100%}.ui5-shellbar-root{position:relative;display:flex;justify-content:space-between;align-items:center;background:var(--sapShellColor);height:2.75rem;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400;box-sizing:border-box}.ui5-shellbar-button,.ui5-shellbar-image-button,.ui5-shellbar-menu-button,::slotted([ui5-button][slot=startButton]){height:2.25rem;padding:0;margin-left:.5rem;border:none;background:transparent;outline-color:var(--sapShell_TextColor);color:var(--sapShell_TextColor);box-sizing:border-box;cursor:pointer;border-radius:.25rem;position:relative;font-size:.75rem;font-weight:700;white-space:normal;overflow:initial;text-overflow:clip}.ui5-shellbar-button,.ui5-shellbar-menu-button,::slotted([ui5-button][slot=startButton]){outline:none}.ui5-shellbar-button:hover,.ui5-shellbar-image-button:hover,.ui5-shellbar-menu-button.ui5-shellbar-menu-button--interactive:hover,::slotted([ui5-button][slot=startButton]:hover){background:var(--sapShell_Hover_Background)}.ui5-shellbar-button[active],.ui5-shellbar-image-button:active,.ui5-shellbar-menu-button.ui5-shellbar-menu-button--interactive:active,::slotted([ui5-button][slot=startButton][active]){background:var(--sapShell_Active_Background);color:var(--sapShell_Active_TextColor)}.ui5-shellbar-button[focused]:after,.ui5-shellbar-image-button:focus:after,.ui5-shellbar-menu-button.ui5-shellbar-menu-button--interactive:focus:after,::slotted([ui5-button][slot=startButton][focused]):after{content:\"\";position:absolute;width:calc(100% - .375rem);height:calc(100% - .375rem);border:1px dotted var(--sapContent_ContrastFocusColor);pointer-events:none;left:2px;top:2px;z-index:1}slot[name=profile]{min-width:0}::slotted([ui5-avatar][slot=profile]){min-width:0;width:2rem;height:2rem;padding:.25rem;pointer-events:none}.ui5-shellbar-menu-button.ui5-shellbar-menu-button--interactive::-moz-focus-inner{border:none}.ui5-shellbar-menu-button-title{display:inline-block;font-family:\"72override\",var(--sapFontFamily);margin:0;font-size:.75rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;flex:auto}:host(:not([primary-title])) .ui5-shellbar-menu-button{min-width:2.25rem;justify-content:center}:host(:not([primary-title])) .ui5-shellbar-menu-button span{margin-left:0}:host([breakpoint-size=S]) .ui5-shellbar-menu-button span{margin-left:.5rem}.ui5-shellbar-secondary-title{display:inline-block;margin:0 .5rem;font-size:var(--sapFontSmallSize);color:var(--sapShell_TextColor);line-height:1rem;font-weight:400;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.ui5-shellbar-menu-button--interactive .ui5-shellbar-menu-button-arrow{display:inline-block;margin-left:.5rem;width:10px;height:10px;width:0;height:0;color:var(--sapShell_InteractiveTextColor);border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid var(--sapShell_TextColor)}.ui5-shellbar-overflow-container{display:flex;justify-content:center;align-items:center;height:100%;overflow:hidden}.ui5-shellbar-overflow-container-middle{align-self:center;height:2.5rem;width:3rem;flex-shrink:0}@keyframes Behind_layer{0%{transform:rotate(1turn)}}@keyframes Top_layer{0%{transform:rotate(-1turn)}}:host([breakpoint-size=S]) .ui5-shellbar-root{padding:.25rem 1rem}:host([breakpoint-size=S]) ::slotted([ui5-button][slot=startButton]){margin-right:0}:host([breakpoint-size=S]) .ui5-shellbar-search-field{width:200px}:host([breakpoint-size=M]) .ui5-shellbar-root{padding:.25rem 2rem}:host([breakpoint-size=L]) .ui5-shellbar-root{padding:.25rem 2rem}:host([breakpoint-size=XL]) .ui5-shellbar-root{padding:.25rem 3rem}:host([breakpoint-size=XXL]) .ui5-shellbar-root{padding:.25rem 3rem}.ui5-shellbar-logo{cursor:pointer;max-height:2rem}.ui5-shellbar-logo:focus{outline:1px dotted var(--sapContent_ContrastFocusColor)}.ui5-shellbar-button{width:2.5rem}.ui5-shellbar-image-buttonImage{border-radius:50%;width:1.75rem;height:1.75rem;display:flex;background-size:cover}.ui5-shellbar-image-button{display:flex;justify-content:center;align-items:center;min-width:2.25rem;height:2.25rem;display:inline-flex;padding:0}.ui5-shellbar-overflow-container-left{flex-basis:50%;max-width:calc(50% - 1.5rem);justify-content:flex-start;margin-right:.5rem}.ui5-shellbar-menu-button{white-space:nowrap;overflow:hidden;display:flex;align-items:center;padding:.25rem .5rem;cursor:text;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}.ui5-shellbar-menu-button.ui5-shellbar-menu-button--interactive{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}:host(:not([with-logo])) .ui5-shellbar-menu-button{margin-left:0}.ui5-shellbar-overflow-container-right{display:block;overflow:hidden;box-sizing:border-box;white-space:nowrap;margin-left:8rem;flex:1}.ui5-shellbar-overflow-container-right .ui5-shellbar-overflow-container-right-child{display:flex;float:right}.ui5-shellbar-overflow-button{display:none}:host([breakpoint-size=M]) .ui5-shellbar-secondary-title{display:none}:host([breakpoint-size=S]) .ui5-shellbar-secondary-title{display:none}:host([breakpoint-size=S]) .ui5-shellbar-logo+.ui5-shellbar-menu-button-title,:host([breakpoint-size=S]) .ui5-shellbar-menu-button+.ui5-shellbar-menu-button-title{display:none}:host([breakpoint-size=S]) .ui5-shellbar-overflow-container-right{margin-left:0}.ui5-shellbar-overflow-button-shown{display:inline-block}.ui5-shellbar-hidden-button,.ui5-shellbar-invisible-button{visibility:hidden}.ui5-shellbar-coPilot{background-color:transparent;cursor:pointer}:host(:not([show-search-field])) .ui5-shellbar-search-field{display:none}:host([breakpoint-size=L]) .ui5-shellbar-with-searchfield .ui5-shellbar-overflow-container-right{margin-left:1rem}:host([breakpoint-size=XL]) .ui5-shellbar-with-searchfield .ui5-shellbar-overflow-container-right{margin-left:1rem}:host(:not([notification-count])) .ui5-shellbar-bell-button{position:relative}.ui5-shellbar-button[data-count]:before,:host([notification-count]) .ui5-shellbar-bell-button:before{position:absolute;width:auto;height:1rem;min-width:1rem;background:var(--sapContent_BadgeBackground);color:var(--sapShell_TextColor);top:.125rem;left:1.5rem;padding:.25rem;border-radius:1rem;display:flex;justify-content:center;align-items:center;font-size:var(--sapFontSmallSize);font-family:\"72override\",var(--sapFontFamily);z-index:2;box-sizing:border-box}:host([notification-count]) .ui5-shellbar-bell-button:before{content:attr(data-ui5-notification-count)}.ui5-shellbar-button[data-count]:before{content:attr(data-count)}.ui5-shellbar-menu-button{margin-left:.5rem}.ui5-shellbar-search-field{z-index:101;position:absolute;width:240px;top:.25rem;height:2.25rem}::slotted([ui5-input]){background-color:var(--sapShellColor);border:1px solid var(--sapShell_InteractiveBorderColor);color:var(--sapShell_TextColor);height:100%}::slotted([ui5-input][focused]){outline:1px dotted var(--sapContent_ContrastFocusColor)}::slotted([slot=logo]){max-height:2rem;pointer-events:none}[ui5-input][value-state]:not([readonly]){background:var(--sapShellColor);border:1px solid var(--sapShell_InteractiveBorderColor)}[ui5-input]:not([value-state]):not([readonly]):hover,[ui5-input][value-state]:not([readonly]):hover{background:var(--sapShell_Hover_Background);border:1px solid var(--sapShell_InteractiveBorderColor)}[ui5-input][value-state]:not([value-state=None])[focused]{outline:1px dotted var(--sapContent_ContrastFocusColor)}.ui5-shellbar-copilot-wrapper{position:relative;outline:none;box-sizing:border-box}.ui5-shellbar-copilot-wrapper:hover{background:var(--sapShell_Hover_Background)}.ui5-shellbar-copilot-wrapper:active,.ui5-shellbar-copilot-wrapper[active]{background:var(--sapShell_Active_Background)}.ui5-shellbar-copilot-wrapper:focus:after{content:\"\";position:absolute;width:100%;height:calc(100% - .75rem);border:1px dotted var(--sapContent_ContrastFocusColor);pointer-events:none;left:0;top:.25rem;z-index:1}.ui5-shellbar-co-pilot-placeholder{width:2.75rem;height:2.75rem}.ui5-shellbar-co-pilot-circle{fill:var(--sapShellColor)}:host [dir=rtl] ::slotted([ui5-button][slot=startButton]){margin-left:.5rem;margin-right:0}:host [dir=rtl] .ui5-shellbar-menu-button{margin-right:.5rem;margin-left:0}[dir=rtl] .ui5-shellbar-menu-button--interactive .ui5-shellbar-menu-button-arrow{margin-right:.5rem;margin-left:0}[dir=rtl] .ui5-shellbar-overflow-container-right{margin-right:8rem;margin-left:0}[dir=rtl] .ui5-shellbar-overflow-container-right .ui5-shellbar-overflow-container-right-child{float:left}:host([breakpoint-size=S]) [dir=rtl] .ui5-shellbar-overflow-container-right{margin-right:0}::slotted([ui5-button][slot=startButton]){margin-right:.5rem;margin-left:0;justify-content:center;align-items:center}::slotted([ui5-button][profile-btn]){width:auto}";

/**
 * @public
 */
const metadata$1a = {
	tag: "ui5-shellbar",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.fiori.ShellBar.prototype */ {

		/**
		 * Defines the <code>primaryTitle</code>.
		 * <br><br>
		 * <b>Note:</b> The <code>primaryTitle</code> would be hidden on S screen size (less than approx. 700px).
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		primaryTitle: {
			type: String,
		},

		/**
		 * Defines the <code>secondaryTitle</code>.
		 * <br><br>
		 * <b>Note:</b> The <code>secondaryTitle</code> would be hidden on S and M screen sizes (less than approx. 1300px).
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		secondaryTitle: {
			type: String,
		},

		/**
		 * Defines the <code>notificationCount</code>,
		 * displayed in the notification icon top-right corner.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		notificationCount: {
			type: String,
		},

		/**
		 * Defines, if the notification icon would be displayed.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showNotifications: {
			type: Boolean,
		},

		/**
		 * Defines, if the product switch icon would be displayed.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showProductSwitch: {
			type: Boolean,
		},

		/**
		 * Defines, if the product CoPilot icon would be displayed.
		 * <br><b>Note:</b> By default the co-pilot is displayed as static SVG.
		 * If you need an animated co-pilot, you can import the <code>"@ui5/webcomponents-fiori/dist/features/CoPilotAnimation.js"</code> module as add-on feature.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showCoPilot: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		breakpointSize: {
			type: String,
		},

		/**
		 * @private
		 */
		showSearchField: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		coPilotActive: {
			type: Boolean,
		},

		/**
		 * @private
		 */
		withLogo: {
			type: Boolean,
		},

		_itemsInfo: {
			type: Object,
		},

		_actionList: {
			type: Object,
		},

		_searchField: {
			type: Object,
		},

		_header: {
			type: Object,
		},

		_menuPopoverItems: {
			type: String,
			multiple: true,
		},
		_menuPopoverExpanded: {
			type: Boolean,
			noAttribute: true,
		},
		_overflowPopoverExpanded: {
			type: Boolean,
			noAttribute: true,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.fiori.ShellBar.prototype */ {
		/**
		 * Defines the <code>ui5-shellbar</code> aditional items.
		 * <br><br>
		 * <b>Note:</b>
		 * You can use the &nbsp;&lt;ui5-shellbar-item>&lt;/ui5-shellbar-item>.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
			invalidateParent: true,
		},

		/**
		 * You can pass <code>ui5-avatar</code> to set the profile image/icon.
		 * If no profile slot is set - profile will be excluded from actions.
		 * @type {HTMLElement}
		 * @slot
		 * @since 1.0.0-rc.6
		 * @public
		 */
		profile: {
			type: HTMLElement,
		},

		/**
		 * Defines the logo of the <code>ui5-shellbar</code>.
		 * For example, you can use <code>ui5-avatar</code> or <code>img</code> elements as logo.
		 * @type {HTMLElement}
		 * @slot
		 * @since 1.0.0-rc.8
		 * @public
		 */
		logo: {
			type: HTMLElement,
		},

		/**
		 * Defines the items displayed in menu after a click on the primary title.
		 * <br><br>
		 * <b>Note:</b>
		 * You can use the &nbsp;&lt;ui5-li>&lt;/ui5-li> and its ancestors.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @since 0.10
		 * @public
		 */
		menuItems: {
			type: HTMLElement,
		},

		/**
		 * Defines the <code>ui5-input</code>, that will be used as a search field.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		searchField: {
			type: HTMLElement,
		},

		/**
		 * Defines a <code>ui5-button</code> in the bar that will be placed in the beginning.
		 * We encourage this slot to be used for a back or home button.
		 * It gets overstyled to match ShellBar's styling.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		startButton: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.ShellBar.prototype */ {
		/**
		 *
		 * Fired, when the notification icon is activated.
		 *
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#notifications-click
		 * @param {HTMLElement} targetRef dom ref of the activated element
		 * @public
		 */
		"notifications-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired, when the profile slot is present.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#profile-click
		 * @param {HTMLElement} targetRef dom ref of the activated element
		 * @public
		 */
		"profile-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired, when the product switch icon is activated.
		 * <b>Note:</b> You can prevent closing of oveflow popover by calling <code>event.preventDefault()</code>.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#product-switch-click
		 * @param {HTMLElement} targetRef dom ref of the activated element
		 * @public
		 */
		"product-switch-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired, when the logo is activated.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#logo-click
		 * @param {HTMLElement} targetRef dom ref of the activated element
		 * @since 0.10
		 * @public
		 */
		"logo-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired, when the co pilot is activated.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#co-pilot-click
		 * @param {HTMLElement} targetRef dom ref of the activated element
		 * @since 0.10
		 * @public
		 */
		"co-pilot-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},

		/**
		 * Fired, when a menu item is activated
		 * <b>Note:</b> You can prevent closing of oveflow popover by calling <code>event.preventDefault()</code>.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBar#menu-item-click
		 * @param {HTMLElement} item dom ref of the activated list item
		 * @since 0.10
		 * @public
		 */
		"menu-item-click": {
			detail: {
				item: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-shellbar</code> is meant to serve as an application header
 * and includes numerous built-in features, such as: logo, profile image/icon, title, search field, notifications and so on.
 * <br><br>
 * <h3>ES6 Module Import</h3>
 * <code>import "@ui5/webcomponents-fiori/dist/ShellBar";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.ShellBar
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-shellbar
 * @appenddocs ShellBarItem
 * @public
 * @since 0.8.0
 */
class ShellBar extends UI5Element {
	static get metadata() {
		return metadata$1a;
	}

	static get styles() {
		return styles$i;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$1g;
	}

	static get staticAreaTemplate() {
		return main$1h;
	}

	static get FIORI_3_BREAKPOINTS() {
		return [
			559,
			1023,
			1439,
			1919,
			10000,
		];
	}

	static get FIORI_3_BREAKPOINTS_MAP() {
		return {
			"559": "S",
			"1023": "M",
			"1439": "L",
			"1919": "XL",
			"10000": "XXL",
		};
	}

	constructor() {
		super();

		this._itemsInfo = [];
		this._isInitialRendering = true;
		this._focusedItem = null;

		// marks if preventDefault() is called in item's press handler
		this._defaultItemPressPrevented = false;

		this._actionList = {
			itemPress: event => {
				if (!this._defaultItemPressPrevented) {
					this.overflowPopover.close();
				}

				this._defaultItemPressPrevented = false;
			},
		};

		this.menuItemsObserver = new MutationObserver(() => {
			this._updateClonedMenuItems();
		});

		this._header = {
			press: async () => {
				this._updateClonedMenuItems();

				if (this.hasMenuItems) {
					const menuPopover = await this._getMenuPopover();
					menuPopover.openBy(this.shadowRoot.querySelector(".ui5-shellbar-menu-button"));
				}
			},
		};

		this._searchField = {
			left: 0,
		};

		this._handleResize = async event => {
			await this._getResponsivePopover();
			this.overflowPopover.close();
			this._overflowActions();
		};

		this.i18nBundle = getI18nBundle("@ui5/webcomponents-fiori");
	}

	_menuItemPress(event) {
		this.fireEvent("menu-item-click", {
			item: event.detail.item,
		}, true);
	}

	_logoPress() {
		this.fireEvent("logo-click", {
			targetRef: this.shadowRoot.querySelector(".ui5-shellbar-logo"),
		});
	}

	_menuPopoverBeforeOpen() {
		this._menuPopoverExpanded = true;
	}

	_menuPopoverAfterClose() {
		this._menuPopoverExpanded = false;
	}

	_overflowPopoverBeforeOpen() {
		this._overflowPopoverExpanded = true;
	}

	_overflowPopoverAfterClose() {
		this._overflowPopoverExpanded = false;
	}

	_logoKeyup(event) {
		if (isSpace(event)) {
			this._logoPress();
		}
	}

	_logoKeydown(event) {
		if (isSpace(event)) {
			event.preventDefault();
			return;
		}

		if (isEnter(event)) {
			this._logoPress();
		}
	}

	_fireCoPilotClick() {
		this.fireEvent("co-pilot-click", {
			targetRef: this.shadowRoot.querySelector(".ui5-shellbar-coPilot"),
		});
	}

	_coPilotClick() {
		this._fireCoPilotClick();
	}

	_coPilotKeydown(event) {
		if (isSpace(event)) {
			this.coPilotActive = true;
			event.preventDefault();
			return;
		}

		if (isEnter(event)) {
			this.coPilotActive = true;
			this._fireCoPilotClick();
		}
	}

	_coPilotKeyup(event) {
		if (isSpace(event)) {
			this._fireCoPilotClick();
		}
		this.coPilotActive = false;
	}

	onBeforeRendering() {
		const animationsOn = getAnimationMode$1() === AnimationMode.Full;
		const coPilotAnimation = getFeature("CoPilotAnimation");
		this.coPilot = coPilotAnimation && animationsOn ? coPilotAnimation : { animated: false };
		this.withLogo = this.hasLogo;

		this._hiddenIcons = this._itemsInfo.filter(info => {
			const isHidden = (info.classes.indexOf("ui5-shellbar-hidden-button") !== -1);
			const isSet = info.classes.indexOf("ui5-shellbar-invisible-button") === -1;
			const isOverflowIcon = info.classes.indexOf("ui5-shellbar-overflow-button") !== -1;

			return isHidden && isSet && !isOverflowIcon;
		});

		this._observeMenuItems();
	}

	onAfterRendering() {
		this._overflowActions();
	}

	/**
	 * Closes the overflow area.
	 * Useful to manually close the overflow after having suppressed automatic closing with preventDefault() of ShellbarItem's press event
	 * @public
	 */
	closeOverflow() {
		if (this.overflowPopover) {
			this.overflowPopover.close();
		}
	}

	_handleBarBreakpoints() {
		const width = this.getBoundingClientRect().width;
		const breakpoints = ShellBar.FIORI_3_BREAKPOINTS;

		const size = breakpoints.find(bp1 => width < bp1) || ShellBar.FIORI_3_BREAKPOINTS[ShellBar.FIORI_3_BREAKPOINTS.length - 1];
		const mappedSize = ShellBar.FIORI_3_BREAKPOINTS_MAP[size];

		if (this.breakpointSize !== mappedSize) {
			this.breakpointSize = mappedSize;
		}

		return mappedSize;
	}

	_handleSizeS() {
		const hasIcons = this.showNotifications || this.showProductSwitch || this.searchField.length || this.items.length;

		const newItems = this._getAllItems(hasIcons).map(info => {
			const isOverflowIcon = info.classes.indexOf("ui5-shellbar-overflow-button") !== -1;
			const isImageIcon = info.classes.indexOf("ui5-shellbar-image-button") !== -1;
			const shouldStayOnScreen = isOverflowIcon || (isImageIcon && this.hasProfile);

			return Object.assign({}, info, {
				classes: `${info.classes} ${shouldStayOnScreen ? "" : "ui5-shellbar-hidden-button"} ui5-shellbar-button`,
				style: `order: ${shouldStayOnScreen ? 1 : -1}`,
			});
		});

		this._updateItemsInfo(newItems);
	}

	_handleActionsOverflow() {
		const rightContainerRect = this.shadowRoot.querySelector(".ui5-shellbar-overflow-container-right").getBoundingClientRect();
		const icons = this.shadowRoot.querySelectorAll(".ui5-shellbar-button:not(.ui5-shellbar-overflow-button):not(.ui5-shellbar-invisible-button)");
		const isRTL = this.effectiveDir === "rtl";

		let overflowCount = [].filter.call(icons, icon => {
			const iconRect = icon.getBoundingClientRect();

			if (isRTL) {
				return (iconRect.left + iconRect.width) > (rightContainerRect.left + rightContainerRect.width);
			}

			return iconRect.left < rightContainerRect.left;
		});

		overflowCount = overflowCount.length;

		const items = this._getAllItems(!!overflowCount);

		const itemsByPriority = items.sort((item1, item2) => {
			if (item1.priority > item2.priority) {
				return 1;
			}

			if (item1.priority < item2.priority) {
				return -1;
			}

			return 0;
		});

		for (let i = 0; i < itemsByPriority.length; i++) {
			if (i < overflowCount) {
				itemsByPriority[i].classes = `${itemsByPriority[i].classes} ui5-shellbar-hidden-button`;
				itemsByPriority[i].style = `order: -1`;
			}
		}

		return itemsByPriority;
	}

	_overflowActions() {
		const size = this._handleBarBreakpoints();

		if (size === "S") {
			return this._handleSizeS();
		}

		const newItems = this._handleActionsOverflow();
		this._updateItemsInfo(newItems);
	}

	_toggleActionPopover() {
		const overflowButton = this.shadowRoot.querySelector(".ui5-shellbar-overflow-button");
		this.overflowPopover.openBy(overflowButton);
	}

	onEnterDOM() {
		ResizeHandler.register(this, this._handleResize);
	}

	onExitDOM() {
		this.menuItemsObserver.disconnect();
		ResizeHandler.deregister(this, this._handleResize);
	}

	_handleSearchIconPress(event) {
		this.showSearchField = !this.showSearchField;

		if (!this.showSearchField) {
			return;
		}

		const searchField = this.shadowRoot.querySelector(`#${this._id}-searchfield-wrapper`);
		const triggeredByOverflow = event.target.tagName.toLowerCase() === "ui5-li";
		const overflowButton = this.shadowRoot.querySelector(".ui5-shellbar-overflow-button");
		const overflowButtonRect = overflowButton.getBoundingClientRect();
		const isRTL = this.effectiveDir === "rtl";
		let right = "";

		if (isRTL) {
			right = `${(triggeredByOverflow ? overflowButton.offsetLeft : event.target.offsetLeft) + overflowButtonRect.width}px`;
		} else {
			right = `calc(100% - ${triggeredByOverflow ? overflowButton.offsetLeft : event.target.offsetLeft}px)`;
		}

		this._searchField = Object.assign({}, this._searchField, {
			"right": right,
		});


		const inputSlot = searchField.children[0];
		const input = inputSlot && inputSlot.assignedNodes()[0];

		// update the state immediately
		if (input) {
			input.focused = true;
		}

		// move the focus later
		setTimeout(() => {
			if (input) {
				input.focus();
			}
		}, 100);
	}

	_handleCustomActionPress(event) {
		const refItemId = event.target.getAttribute("data-ui5-external-action-item-id");

		if (refItemId) {
			const shellbarItem = this.items.find(item => {
				return item.shadowRoot.querySelector(`#${refItemId}`);
			});

			const prevented = !shellbarItem.fireEvent("item-click", { targetRef: event.target }, true);

			this._defaultItemPressPrevented = prevented;
		}
	}

	_handleOverflowPress(event) {
		this._toggleActionPopover();
	}

	_handleNotificationsPress(event) {
		const notificationIconRef = this.shadowRoot.querySelector(".ui5-shellbar-bell-button");

		this._defaultItemPressPrevented = !this.fireEvent("notifications-click", {
			targetRef: notificationIconRef.classList.contains("ui5-shellbar-hidden-button") ? event.target : notificationIconRef,
		}, true);
	}

	_handleProfilePress(event) {
		this.fireEvent("profile-click", {
			targetRef: this.shadowRoot.querySelector(".ui5-shellbar-image-button"),
		});
	}

	_handleProductSwitchPress(event) {
		const buttonRef = this.shadowRoot.querySelector(".ui5-shellbar-button-product-switch");

		this._defaultItemPressPrevented = !this.fireEvent("product-switch-click", {
			targetRef: buttonRef.classList.contains("ui5-shellbar-hidden-button") ? event.target : buttonRef,
		}, true);
	}

	/**
	 * Returns all items that will be placed in the right of the bar as icons / dom elements.
	 * @param {Boolean} showOverflowButton Determines if overflow button should be visible (not overflowing)
	 */
	_getAllItems(showOverflowButton) {
		let domOrder = -1;

		const items = [
			{
				icon: "search",
				text: "Search",
				classes: `${this.searchField.length ? "" : "ui5-shellbar-invisible-button"} ui5-shellbar-search-button ui5-shellbar-button`,
				priority: 4,
				domOrder: this.searchField.length ? (++domOrder) : -1,
				style: `order: ${this.searchField.length ? 1 : -10}`,
				id: `${this._id}-item-${1}`,
				press: this._handleSearchIconPress.bind(this),
			},
			...this.items.map((item, index) => {
				return {
					icon: item.icon,
					id: item._id,
					count: item.count || undefined,
					refItemid: item._id,
					text: item.text,
					classes: "ui5-shellbar-custom-item ui5-shellbar-button",
					priority: 1,
					domOrder: (++domOrder),
					style: `order: ${2}`,
					show: true,
					press: this._handleCustomActionPress.bind(this),
					custom: true,
					title: item.title,
					stableDomRef: item.stableDomRef,
				};
			}),
			{
				icon: "bell",
				text: "Notifications",
				classes: `${this.showNotifications ? "" : "ui5-shellbar-invisible-button"} ui5-shellbar-bell-button ui5-shellbar-button`,
				priority: 3,
				style: `order: ${this.showNotifications ? 3 : -10}`,
				id: `${this._id}-item-${2}`,
				show: this.showNotifications,
				domOrder: this.showNotifications ? (++domOrder) : -1,
				press: this._handleNotificationsPress.bind(this),
			},
			{
				icon: "overflow",
				text: "Overflow",
				classes: `${showOverflowButton ? "" : "ui5-shellbar-hidden-button"} ui5-shellbar-overflow-button-shown ui5-shellbar-overflow-button ui5-shellbar-button`,
				priority: 5,
				order: 4,
				style: `order: ${showOverflowButton ? 4 : -1}`,
				domOrder: showOverflowButton ? (++domOrder) : -1,
				id: `${this.id}-item-${5}`,
				press: this._handleOverflowPress.bind(this),
				show: true,
			},
			{
				text: "Person",
				classes: `${this.hasProfile ? "" : "ui5-shellbar-invisible-button"} ui5-shellbar-image-button ui5-shellbar-button`,
				priority: 4,
				style: `order: ${this.hasProfile ? 5 : -10};`,
				profile: true,
				id: `${this._id}-item-${3}`,
				domOrder: this.hasProfile ? (++domOrder) : -1,
				show: this.hasProfile,
				press: this._handleProfilePress.bind(this),
			},
			{
				icon: "grid",
				text: "Product Switch",
				classes: `${this.showProductSwitch ? "" : "ui5-shellbar-invisible-button"} ui5-shellbar-button ui5-shellbar-button-product-switch`,
				priority: 2,
				style: `order: ${this.showProductSwitch ? 6 : -10}`,
				id: `${this._id}-item-${4}`,
				show: this.showProductSwitch,
				domOrder: this.showProductSwitch ? (++domOrder) : -1,
				press: this._handleProductSwitchPress.bind(this),
			},
		];
		return items;
	}

	_updateItemsInfo(newItems) {
		const isDifferent = JSON.stringify(this._itemsInfo) !== JSON.stringify(newItems);
		if (isDifferent) {
			this._itemsInfo = newItems;
		}
	}

	_updateClonedMenuItems() {
		this._menuPopoverItems = [];

		this.menuItems.forEach(item => {
			// clone the menuItem and remove the slot="menuItems",
			// otherwise would not be slotted in the internal ui5-li
			const clonedItem = item.cloneNode(true);
			clonedItem.removeAttribute("slot");

			this._menuPopoverItems.push(clonedItem);
		});
	}

	_observeMenuItems() {
		this.menuItems.forEach(item => {
			this.menuItemsObserver.observe(item, {
				characterData: true,
				childList: true,
				subtree: true,
				attributes: true,
			});
		});
	}

	async _getResponsivePopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		this.overflowPopover = staticAreaItem.querySelector(".ui5-shellbar-overflow-popover");
		this.menuPopover = staticAreaItem.querySelector(".ui5-shellbar-menu-popover");
	}

	async _getMenuPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector(".ui5-shellbar-menu-popover");
	}

	isIconHidden(name) {
		const itemInfo = this._itemsInfo.find(item => item.icon === name);

		if (!itemInfo) {
			return false;
		}

		return itemInfo.classes.indexOf("ui5-shellbar-hidden-button") !== -1;
	}

	get classes() {
		return {
			wrapper: {
				"ui5-shellbar-root": true,
				"ui5-shellbar-with-searchfield": this.searchField.length,
			},
			button: {
				"ui5-shellbar-menu-button--interactive": this.hasMenuItems,
				"ui5-shellbar-menu-button": true,
			},
			items: {
				notification: {
					"ui5-shellbar-hidden-button": this.isIconHidden("bell"),
				},
				product: {
					"ui5-shellbar-hidden-button": this.isIconHidden("grid"),
				},
				search: {
					"ui5-shellbar-hidden-button": this.isIconHidden("search"),
				},
				overflow: {
					"ui5-shellbar-hidden-button": this.isIconHidden("overflow"),
				},
			},
		};
	}

	get styles() {
		return {
			searchField: {
				[this.effectiveDir === "rtl" ? "left" : "right"]: this._searchField.right,
				"top": `${parseInt(this._searchField.top)}px`,
			},
			items: {
				notification: {
					"order": this.isIconHidden("bell") ? "-1" : "3",
				},
				overflow: {
					"order": this.isIconHidden("overflow") ? "-1" : "4",
				},
				profile: {
					"order": this.hasProfile ? "5" : "-1",
				},
				product: {
					"order": this.isIconHidden("grid") ? "-1" : "6",
				},
			},
		};
	}

	get customItemsInfo() {
		return this._itemsInfo.filter(itemInfo => !!itemInfo.custom);
	}

	get nonFocusableLogo() {
		return this.breakpointSize === "S" && this.hasMenuItems;
	}

	get hasFocusableLogo() {
		return this.hasLogo && !this.nonFocusableLogo;
	}

	get hasNonFocusableLogo() {
		return this.hasLogo && this.nonFocusableLogo;
	}

	get hasLogo() {
		return !!this.logo.length;
	}

	get showArrowDown() {
		return this.primaryTitle || this.hasInteractvieLogo;
	}

	get popoverHorizontalAlign() {
		return this.effectiveDir === "rtl" ? "Left" : "Right";
	}

	get hasSearchField() {
		return !!this.searchField.length;
	}

	get hasProfile() {
		return !!this.profile.length;
	}

	get hasMenuItems() {
		return this.menuItems.length > 0;
	}

	get menuBtnHasPopup() {
		return this.hasMenuItems ? true : undefined;
	}

	get menuBtnTabindex() {
		return this.hasMenuItems ? "0" : "-1";
	}

	get menuPopoverExpanded() {
		return this.hasMenuItems ? this._menuPopoverExpanded : undefined;
	}

	get _shellbarText() {
		return this.i18nBundle.getText(SHELLBAR_LABEL);
	}

	get _logoText() {
		return this.i18nBundle.getText(SHELLBAR_LOGO);
	}

	get _copilotText() {
		return this.i18nBundle.getText(SHELLBAR_COPILOT);
	}

	get _notificationsText() {
		return this.i18nBundle.getText(SHELLBAR_NOTIFICATIONS, this.notificationCount);
	}

	get _profileText() {
		return this.i18nBundle.getText(SHELLBAR_PROFILE);
	}

	get _productsText() {
		return this.i18nBundle.getText(SHELLBAR_PRODUCTS);
	}

	get _searchText() {
		return this.i18nBundle.getText(SHELLBAR_SEARCH);
	}

	get _overflowText() {
		return this.i18nBundle.getText(SHELLBAR_OVERFLOW);
	}

	get accInfo() {
		return {
			notifications: {
				"title": this._notificationsText,
			},
			profile: {
				"title": this._profileText,
			},
			products: {
				"title": this._productsText,
			},
			search: {
				"ariaExpanded": this.showSearchField,
				"title": this._searchText,
			},
			overflow: {
				"title": this._overflowText,
				"ariaHaspopup": true,
				"ariaExpanded": this._overflowPopoverExpanded,
			},
		};
	}

	static get dependencies() {
		return [
			Button,
			List,
			Popover,
			StandardListItem,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}
}

ShellBar.define();

const block0$1i = (context) => { return scopedHtml`<span id="${ifDefined(context._id)}"></span>`; };


const main$1i = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1i(context);
};

/**
 * @public
 */
const metadata$1b = {
	tag: "ui5-shellbar-item",
	properties: /** @lends sap.ui.webcomponents.fiori.ShellBarItem.prototype */ {
		/**
		 * Defines the name of the item's icon.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},

		/**
		 * Defines the item text.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Defines the count displayed in the top-right corner.
		 * @type {string}
		 * @defaultValue ""
		 * @since 1.0.0-rc.6
		 * @public
		 */
		count: {
			type: String,
		},

		/**
		 * Defines the stable selector that you can use via getStableDomRef method.
		 * @public
		 * @since 1.0.0-rc.8
		 */
		stableDomRef: {
			type: String,
		},
	},

	events: /** @lends sap.ui.webcomponents.fiori.ShellBarItem.prototype */ {
		/**
		 * Fired, when the item is pressed.
		 *
		 * @event sap.ui.webcomponents.fiori.ShellBarItem#item-click
		 * @param {HTMLElement} targetRef dom ref of the clicked element
		 * @public
		 */
		"item-click": {
			detail: {
				targetRef: { type: HTMLElement },
			},
		},
	},
};

/**
 * @class
 * The <code>ui5-shellbar-item</code> represents a custom item, that
 * might be added to the <code>ui5-shellbar</code>.
 * <br><br>
 * <h3>ES6 Module Import</h3>
 * <code>import "@ui5/webcomponents-fiori/dist/ShellBarItem";</code>
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.ShellBarItem
 * @extends sap.ui.webcomponents.base.UI5Element
 * @tagname ui5-shellbar-item
 * @public
 */
class ShellBarItem extends UI5Element {
	static get metadata() {
		return metadata$1b;
	}

	static get render() {
		return litRender;
	}

	static get template() {
		return main$1i;
	}
}

ShellBarItem.define();

const name$p = "upload-to-cloud";
const pathData$p = "M494 212q18 23 18 56 0 18-7 31-3 8-8 15l-10 14q-6 7-10.5 10t-12.5 6q-19 8-34 8h-15v-32h15q10 0 21-5 5-2 6.5-3t4.5-4q5-5 8-10t5-10l2-4q3-6 3-16 0-22-11-36-11-12-30-18l-42-11 22-36q5-8 5-18 0-25-17-40-17-17-42-17-23 0-36 13l-33 28-18-40q-12-28-36-44-23-17-58-17-14 0-33 8-17 8-34 23-12 14-20 31-7 14-7 35 0 20 8 34l22 37-41 10q-22 6-33 21h-1l-1 1q-12 14-12 36 0 11 4 19 1 2 5.5 8T59 312q2 2 12.5 5t40.5 3v32q-23 0-43-3t-31-13q-24-21-31-36t-7-32q0-35 21-58 19-23 50-31-13-22-13-50 0-29 10-49 11-24 28-41 18-17 42-28t46-11q45 0 76 22 32 22 48 58 23-20 57-20 39 0 64 25 27 26 27 64 0 19-9 34 28 7 47 29zm-112 75q11 12 0 23-12 11-23 0l-87-87v273q0 16-16 16t-16-16V225l-85 85q-5 5-11 5t-11-5q-12-11 0-23l102-101q9-10 22-10t23 10z";
const ltr$p = false;

registerIcon(name$p, { pathData: pathData$p, ltr: ltr$p});

const name$q = "document";
const pathData$q = "M416 0q14 0 23 9t9 23v448q0 14-8.5 23t-22.5 9H97q-14 0-23.5-9T64 480V128L192 0h224zm1 480l-1-448H224v96q0 14-9 23t-23 9H96v320h321z";
const ltr$q = false;

registerIcon(name$q, { pathData: pathData$q, ltr: ltr$q});

/**
 * Different drag and drop overlay modes of UploadCollection.
 *
 * @lends sap.ui.webcomponents.fiori.types.UploadCollectionDnDOverlayMode.prototype
 * @private
 */
const DndOverlayModes = {
	/**
	 * No drag or drop indication.
	 * @private
	 * @type {None}
	 */
	None: "None",

	/**
	 * Indication that drag can be performed.
	 * @private
	 * @type {Drag}
	 */
	Drag: "Drag",

	/**
	 * Indication that drop can be performed.
	 * @private
	 * @type {Drop}
	 */
	Drop: "Drop",
};

/**
 * @class
 * Different types of drag and drop overlay modes.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.types.UploadCollectionDnDOverlayMode
 * @private
 * @enum {string}
 */
class UploadCollectionDnDOverlayMode extends DataType {
	static isValid(value) {
		return !!DndOverlayModes[value];
	}
}

UploadCollectionDnDOverlayMode.generataTypeAcessors(DndOverlayModes);

const draggingFiles = event => {
	return Array.from(event.dataTransfer.types).includes("Files");
};

const eventProvider$3 = new EventProvider();
const EVENT = "UploadCollectionBodyDndEvent";
let lastDragEnter = null;
let globalHandlersAttached = false;

const ondragenter = event => {
	if (!draggingFiles(event)) {
		return;
	}

	lastDragEnter = event.target;
	eventProvider$3.fireEvent(EVENT, { mode: UploadCollectionDnDOverlayMode.Drag });
};

const ondragleave = event => {
	if (lastDragEnter === event.target) {
		eventProvider$3.fireEvent(EVENT, { mode: UploadCollectionDnDOverlayMode.None });
	}
};

const ondrop = event => {
	eventProvider$3.fireEvent(EVENT, { mode: UploadCollectionDnDOverlayMode.None });
};

const ondragover = event => {
	event.preventDefault();
};

const attachGlobalHandlers = () => {
	document.body.addEventListener("dragenter", ondragenter);
	document.body.addEventListener("dragleave", ondragleave);
	document.body.addEventListener("drop", ondrop);
	document.body.addEventListener("dragover", ondragover);
};

const detachGlobalHandlers = () => {
	document.body.removeEventListener("dragenter", ondragenter);
	document.body.removeEventListener("dragleave", ondragleave);
	document.body.removeEventListener("drop", ondrop);
	document.body.removeEventListener("dragover", ondragover);
	globalHandlersAttached = false;
};

const attachBodyDnDHandler = handler => {
	eventProvider$3.attachEvent(EVENT, handler);

	if (!globalHandlersAttached) {
		attachGlobalHandlers();
		globalHandlersAttached = true;
	}
};

const detachBodyDnDHandler = handler => {
	eventProvider$3.detachEvent(EVENT, handler);

	if (!eventProvider$3.hasListeners(EVENT)) {
		detachGlobalHandlers();
	}
};

const block0$1j = (context) => { return scopedHtml`<div class="ui5-uc-root"><div class="ui5-uc-header"><slot name="header"></slot></div><div class="${classMap(context.classes.content)}"><ui5-list mode="${ifDefined(context.mode)}" @ui5-selection-change="${ifDefined(context._onSelectionChange)}" @ui5-item-delete="${ifDefined(context._onItemDelete)}"><slot></slot></ui5-list>${ context._showNoData ? block1$13(context) : block2$Z(context) }</div></div>`; };
const block1$13 = (context) => { return scopedHtml`<div class="uc-no-files"><div class="icon-container"><ui5-icon name="document"></ui5-icon></div><ui5-title level="H2">${ifDefined(context._noDataText)}</ui5-title><ui5-label class="subtitle">${ifDefined(context._noDataDescription)}</ui5-label></div>`; };
const block2$Z = (context) => { return scopedHtml`${ context._showDndOverlay ? block3$I(context) : undefined }`; };
const block3$I = (context) => { return scopedHtml`<div class="${classMap(context.classes.dndOverlay)}" @dragenter="${context._ondragenter}" @dragleave="${context._ondragleave}" @dragover="${context._ondragover}" @drop="${context._ondrop}"><ui5-icon name="upload-to-cloud"></ui5-icon><span class="dnd-overlay-text">${ifDefined(context._dndOverlayText)}</span></div>`; };


const main$1j = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1j(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var UploadCollectionCss = ":host(:not([hidden])){display:block}.ui5-uc-root{height:100%;display:flex;flex-direction:column}.ui5-uc-content{position:relative;flex:1 1 auto}.ui5-uc-content.ui5-uc-content-no-data{min-height:20rem}.uc-no-files{position:absolute;top:0;right:0;left:0;bottom:0;box-sizing:border-box;display:flex;flex-direction:column;align-items:center;justify-content:center;padding:1rem;background-color:var(--sapGroup_ContentBackground)}.uc-no-files .icon-container{height:8rem}.uc-no-files .icon-container [ui5-icon]{font-size:6rem;width:6rem;height:6rem;color:var(--sapContent_NonInteractiveIconColor);opacity:.5}.uc-no-files [ui5-title]{font-size:var(--ui5_upload_collection_level_2Size);color:var(--sapGroup_TitleTextColor);margin:1rem 0}.uc-no-files .subtitle{font-size:var(--ui5_upload_collection_level_5Size);color:var(--sapContent_LabelColor);margin-bottom:2rem}.uc-dnd-overlay{position:absolute;top:.5rem;right:.5rem;left:.5rem;bottom:.5rem;display:flex;flex-direction:column;align-items:center;justify-content:center}.uc-drag-overlay{border:var(--ui5_upload_collection_drag_overlay_border)}.uc-drop-overlay{border:var(--ui5_upload_collection_drop_overlay_border)}.uc-dnd-overlay:before{content:\"\";position:absolute;top:0;bottom:0;left:0;right:0;background-color:var(--sapGroup_ContentBackground);opacity:.8}.uc-drop-overlay:after{content:\"\";position:absolute;top:0;bottom:0;left:0;right:0;background-color:var(--ui5_upload_collection_drop_overlay_background);opacity:.05}.uc-dnd-overlay [ui5-icon]{width:4rem;height:4rem;margin-bottom:1rem;color:var(--sapContent_NonInteractiveIconColor)}.uc-dnd-overlay .dnd-overlay-text{font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapMFontHeader4Size);color:var(--sapContent_NonInteractiveIconColor)}.uc-dnd-overlay .dnd-overlay-text,.uc-dnd-overlay [ui5-icon]{z-index:1;pointer-events:none}.uc-drop-overlay .dnd-overlay-text,.uc-drop-overlay [ui5-icon]{color:var(--sapContent_DragAndDropActiveColor)}";

/**
 * @public
 */
const metadata$1c = {
	tag: "ui5-upload-collection",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.fiori.UploadCollection.prototype */ {
		/**
		 * Defines the mode of the <code>ui5-upload-collection</code>.
		 * <br><br>
		 * <b>Note:</b> Available options are <code>None</code>, <code>SingleSelect</code>,
		 * <code>MultiSelect</code>, and <code>Delete</code>.
		 *
		 * @type {ListMode}
		 * @defaultvalue "None"
		 * @public
		 */
		mode: {
			type: ListMode,
			defaultValue: ListMode.None,
		},

		/**
		 * Allows you to set your own text for the 'No data' description.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		noDataDescription: {
			type: String,
		},

		/**
		 * Allows you to set your own text for the 'No data' text.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		noDataText: {
			type: String,
		},

		/**
		 * By default there will be drag and drop overlay shown over the <code>ui5-upload-collection</code> when files
		 * are dragged. If you don't intend to use drag and drop, set this property to <code>true</code>
		 * <br><br>
		 * <b>Note:</b> It is up to the application developer to add handler for <code>drop</code> event and handle it.
		 * <code>ui5-upload-collection</code> only shows an overlay.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noDnd: {
			type: Boolean,
		},

		/**
		 * Indicates what overlay to show when files are being dragged.
		 *
		 * @type {UploadCollectionDnDOverlayMode}
		 * @defaultvalue "None"
		 * @private
		 */
		_dndOverlayMode: {
			type: String,
			defaultValue: UploadCollectionDnDOverlayMode.None,
		},
	},
	managedSlots: true,
	slots: /** @lends sap.ui.webcomponents.fiori.UploadCollection.prototype */ {
		/**
		 * Defines the items of the <code>ui5-upload-collection</code>.
		 * <br><b>Note:</b> Use <code>ui5-upload-collection-item</code> for the intended design.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
		},

		/**
		 * Defines the <code>ui5-upload-collection</code> header.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		header: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.UploadCollection.prototype */ {
		/**
		 * Fired when the Delete button of any item is pressed.
		 * <br><br>
		 * <b>Note:</b> A Delete button is displayed on each item,
		 * when the <code>ui5-upload-collection</code> <code>mode</code> property is set to <code>Delete</code>.
		 * @event sap.ui.webcomponents.fiori.UploadCollection#file-deleted
		 * @param {HTMLElement} item The <code>ui5-upload-collection-item</code> which was renamed.
		 * @public
		 */
		"file-deleted": {
			detail: {
				item: { type: HTMLElement },
			},
		},

		/**
		 * Fired when selection is changed by user interaction
		 * in <code>SingleSelect</code> and <code>MultiSelect</code> modes.
		 *
		 * @event sap.ui.webcomponents.fiori.UploadCollection#selection-change
		 * @param {Array} selectedItems An array of the selected items.
		 * @public
		 */
		"selection-change": {
			detail: {
				selectedItems: { type: Array },
			},
		},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * This component allows you to represent files before uploading them to a server, with the help of <code>ui5-upload-collection-item</code>.
 * It also allows you to show already uploaded files.
 *
 * <h3>ES6 Module Import</h3>
 * <code>import @ui5/webcomponents-fiori/dist/UploadCollection.js";</code>
 * <br>
 * <code>import "@ui5/webcomponents-fiori/dist/UploadCollectionItem.js";</code> (for <code>ui5-upload-collection-item</code>)
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.UploadCollection
 * @extends UI5Element
 * @tagname ui5-upload-collection
 * @appenddocs UploadCollectionItem
 * @public
 * @since 1.0.0-rc.7
 */
class UploadCollection extends UI5Element {
	static get metadata() {
		return metadata$1c;
	}

	static get render() {
		return litRender;
	}

	static get styles() {
		return UploadCollectionCss;
	}

	static get template() {
		return main$1j;
	}

	static get dependencies() {
		return [
			Icon,
			Label,
			List,
			Title,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}

	constructor() {
		super();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents-fiori");
		this._bodyDnDHandler = event => {
			if (this._dndOverlayMode !== UploadCollectionDnDOverlayMode.Drop) {
				this._dndOverlayMode = event.mode;
			}
		};
	}

	onEnterDOM() {
		if (this.noDnd) {
			return;
		}

		attachBodyDnDHandler(this._bodyDnDHandler);
	}

	onExitDOM() {
		if (this.noDnd) {
			return;
		}

		detachBodyDnDHandler(this._bodyDnDHandler);
	}

	_ondragenter(event) {
		if (this.noDnd) {
			return;
		}

		if (!draggingFiles(event)) {
			return;
		}

		this._dndOverlayMode = UploadCollectionDnDOverlayMode.Drop;
	}

	_ondrop(event) {
		if (this.noDnd) {
			return;
		}

		this._dndOverlayMode = UploadCollectionDnDOverlayMode.None;
	}

	_ondragover(event) {
		if (this.noDnd) {
			return;
		}

		event.preventDefault();
	}

	_ondragleave(event) {
		if (this.noDnd) {
			return;
		}

		this._dndOverlayMode = UploadCollectionDnDOverlayMode.Drag;
	}

	_onItemDelete(event) {
		this.fireEvent("file-deleted", { item: event.detail.item });
	}

	_onSelectionChange(event) {
		this.fireEvent("selection-change", { selectedItems: event.detail.selectedItems });
	}

	get classes() {
		return {
			content: {
				"ui5-uc-content": true,
				"ui5-uc-content-no-data": this.items.length === 0,
			},
			dndOverlay: {
				"uc-dnd-overlay": true,
				"uc-drag-overlay": this._dndOverlayMode === UploadCollectionDnDOverlayMode.Drag,
				"uc-drop-overlay": this._dndOverlayMode === UploadCollectionDnDOverlayMode.Drop,
			},
		};
	}

	get _root() {
		return this.shadowRoot.querySelector(".ui5-uc-root");
	}

	get _dndOverlay() {
		return this._root.querySelector(".uc-dnd-overlay");
	}

	get _showDndOverlay() {
		return this._dndOverlayMode !== UploadCollectionDnDOverlayMode.None;
	}

	get _showNoData() {
		return this.items.length === 0 && !this._showDndOverlay;
	}

	get _noDataText() {
		return this.noDataText || this.i18nBundle.getText(UPLOADCOLLECTION_NO_DATA_TEXT);
	}

	get _noDataDescription() {
		return this.noDataDescription || this.i18nBundle.getText(UPLOADCOLLECTION_NO_DATA_DESCRIPTION);
	}

	get _dndOverlayText() {
		if (this._dndOverlayMode === UploadCollectionDnDOverlayMode.Drag) {
			return this.i18nBundle.getText(UPLOADCOLLECTION_DRAG_FILE_INDICATOR);
		}

		return this.i18nBundle.getText(UPLOADCOLLECTION_DROP_FILE_INDICATOR);
	}
}

UploadCollection.define();

/**
 * Different types of UploadState.
 * @lends sap.ui.webcomponents.fiori.types.UploadState.prototype
 * @public
 */
const UploadStates = {
	/**
	 * The file has been uploaded successfully.
	 * @public
	 * @type {Complete}
	 */
	Complete: "Complete",

	/**
	 * The file cannot be uploaded due to an error.
	 * @public
	 * @type {Error}
	 */
	Error: "Error",

	/**
	 * The file is awaiting an explicit command to start being uploaded.
	 * @public
	 * @type {Ready}
	 */
	Ready: "Ready",

	/**
	 * The file is currently being uploaded.
	 * @public
	 * @type {Uploading}
	 */
	Uploading: "Uploading",
};

/**
 * States of the upload process of <code>ui5-upload-collection-item</code>.
 *
 * @class
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.types.UploadState
 * @public
 * @enum {string}
 */
class UploadState extends DataType {
	static isValid(value) {
		return !!UploadStates[value];
	}
}

UploadState.generataTypeAcessors(UploadStates);

const name$r = "refresh";
const pathData$r = "M478 320q-6 41-25.5 76T404 456.5 337.5 497 257 512q-46 0-86.5-17.5t-71-48-48-71T34 288q0-45 16.5-85T96 133t68-48 84-20h61q26 0 60-1l-41-36q-5-5-5-11.5T328 5t11-5 11 5l58 51q9 10 9 23t-9 23l-57 54q-5 5-11 5t-11-5-5-11.5 5-11.5l40-37H257q-40 0-74.5 15T122 152t-41 61-15 75 15 75 41 61 60.5 41 74.5 15q36 0 68-12t56.5-33.5T423 384t23-64h32z";
const ltr$r = false;

registerIcon(name$r, { pathData: pathData$r, ltr: ltr$r});

const name$s = "stop";
const pathData$s = "M256 0q53 0 99.5 20T437 74.5t55 81.5 20 100-20 99.5-55 81.5-81.5 55-99.5 20-100-20-81.5-55T20 355.5 0 256t20-100 54.5-81.5T156 20 256 0zm0 480q46 0 87-17.5t71.5-48 48-71.5 17.5-87-17.5-87-48-71.5-71.5-48T256 32q-47 0-87.5 17.5t-71 48-48 71.5T32 256t17.5 87 48 71.5 71 48T256 480zm64-320q13 0 22.5 9t9.5 23v128q0 13-9.5 22.5T320 352H192q-14 0-23-9.5t-9-22.5V192q0-14 9-23t23-9h128z";
const ltr$s = false;

registerIcon(name$s, { pathData: pathData$s, ltr: ltr$s});

const block0$1k = (context) => { return scopedHtml`<li tabindex="${ifDefined(context._tabIndex)}" class="${classMap(context.classes.main)}" dir="${ifDefined(context.effectiveDir)}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keyup="${context._onkeyup}" @keydown="${context._onkeydown}" @mouseup="${context._onmouseup}" @mousedown="${context._onmousedown}" @touchstart="${context._ontouchstart}" @touchend="${context._ontouchend}" @click="${context._onclick}" aria-selected="${ifDefined(context.ariaSelected)}" role="${ifDefined(context._accInfo.role)}" aria-expanded="${ifDefined(context._accInfo.ariaExpanded)}" aria-level="${ifDefined(context._accInfo.ariaLevel)}" style="list-style-type: none;">${ context.placeSelectionElementBefore ? block1$14(context) : undefined }<div id="${ifDefined(context._id)}-content" class="ui5-li-content"><div class="ui5-uci-thumbnail"><slot name="thumbnail"></slot></div><div class="ui5-uci-content-and-edit-container"><div class="ui5-uci-content-and-progress"><div class="ui5-uci-content">${ context._editing ? block5$t(context) : block6$m(context) }<div class="ui5-uci-description"><slot></slot></div></div>${ context._showProgressIndicator ? block9$b(context) : undefined }</div><div class="ui5-uci-edit-buttons">${ context._editing ? block10$a(context) : block11$9(context) }</div></div></div>${ context.typeDetail ? block15$6(context) : undefined }${ context.placeSelectionElementAfter ? block16$4(context) : undefined }</li>`; };
const block1$14 = (context) => { return scopedHtml`${ context.modeSingleSelect ? block2$_(context) : undefined }${ context.modeMultiSelect ? block3$J(context) : undefined }${ context.modeDelete ? block4$A(context) : undefined }`; };
const block2$_ = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block3$J = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block4$A = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };
const block5$t = (context) => { return scopedHtml`<div class="ui5-uci-edit-container"><ui5-input id="ui5-uci-edit-input" value="${ifDefined(context._fileNameWithoutExtension)}" data-sap-focus-ref @keyup="${context._onInputKeyUp}" @keydown="${context._onInputKeydown}" @ui5-change="${ifDefined(context._onInputChange)}"></ui5-input><span class="ui5-uci-file-extension">${ifDefined(context._fileExtension)}</span></div>`; };
const block6$m = (context) => { return scopedHtml`${ context.fileNameClickable ? block7$i(context) : block8$h(context) }`; };
const block7$i = (context) => { return scopedHtml`<ui5-link class="ui5-uci-file-name" @click="${context._onFileNameClick}">${ifDefined(context.fileName)}</ui5-link>`; };
const block8$h = (context) => { return scopedHtml`<span class="ui5-uci-file-name">${ifDefined(context.fileName)}</span>`; };
const block9$b = (context) => { return scopedHtml`<div class="ui5-uci-progress-box"><ui5-progress-indicator class="ui5-uci-progress-indicator" hide-value value="${ifDefined(context.progress)}" value-state="${ifDefined(context.valueStateName)}"></ui5-progress-indicator><div class="ui5-uci-progress-labels"><ui5-label show-colon>${ifDefined(context._progressText)}</ui5-label><ui5-label>${ifDefined(context.progress)}%</ui5-label></div></div>`; };
const block10$a = (context) => { return scopedHtml`<ui5-button design="Transparent" class="ui5-uci-edit-rename-btn" @click="${context._onRename}">${ifDefined(context._renameBtnText)}</ui5-button><ui5-button design="Transparent" id="ui5-uci-edit-cancel" @click="${context._onRenameCancel}">${ifDefined(context._cancelRenameBtnText)}</ui5-button>`; };
const block11$9 = (context) => { return scopedHtml`${ context._showRetry ? block12$9(context) : undefined }${ context._showTerminate ? block13$8(context) : undefined }${ context.showEditButton ? block14$7(context) : undefined }`; };
const block12$9 = (context) => { return scopedHtml`<ui5-button icon="refresh" design="Transparent" title="${ifDefined(context._retryButtonTooltip)}" @click="${context._onRetry}"></ui5-button>`; };
const block13$8 = (context) => { return scopedHtml`<ui5-button icon="stop" design="Transparent" title="${ifDefined(context._terminateButtonTooltip)}" @click="${context._onTerminate}"></ui5-button>`; };
const block14$7 = (context) => { return scopedHtml`<ui5-button id="${ifDefined(context._id)}-editing-button" design="Transparent" icon="edit" @click="${context.onDetailClick}" @keyup="${context._onDetailKeyup}" class="ui5-li-detailbtn ui5-uci-edit"></ui5-button>`; };
const block15$6 = (context) => { return scopedHtml`<div class="ui5-li-detailbtn"><ui5-button design="Transparent" icon="edit" @click="${context.onDetailClick}"></ui5-button></div>`; };
const block16$4 = (context) => { return scopedHtml`${ context.modeSingleSelect ? block17$2(context) : undefined }${ context.modeMultiSelect ? block18$2(context) : undefined }${ context.modeDelete ? block19$1(context) : undefined }`; };
const block17$2 = (context) => { return scopedHtml`<ui5-radiobutton ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-singleSelectionElement" class="ui5-li-singlesel-radiobtn" ?selected="${context.selected}" @click="${context.onSingleSelectionComponentPress}"></ui5-radiobutton>`; };
const block18$2 = (context) => { return scopedHtml`<ui5-checkbox ?disabled="${context.isInactive}" tabindex="-1" id="${ifDefined(context._id)}-multiSelectionElement" class="ui5-li-multisel-cb" ?checked="${context.selected}" aria-label="${ifDefined(context._accInfo.ariaLabel)}" @click="${context.onMultiSelectionComponentPress}"></ui5-checkbox>`; };
const block19$1 = (context) => { return scopedHtml`<div class="ui5-li-deletebtn"><ui5-button id="${ifDefined(context._id)}-deleteSelectionElement" design="Transparent" icon="decline" @click="${context.onDelete}" title="${ifDefined(context.deleteText)}"></ui5-button></div>`; };


const main$1k = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1k(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var UploadCollectionItemCss = ":host{height:auto}:host(:not([hidden])){display:block}.ui5-li-root.ui5-uci-root{padding:1rem}.ui5-uci-thumbnail{width:3rem;height:3rem;margin-right:.75rem}::slotted([ui5-icon][slot=thumbnail]){width:3rem;height:3rem;font-size:2.5rem}::slotted(img[slot=thumbnail]){width:3rem;height:3rem}:host([actionable]) ::slotted([ui5-icon][slot=thumbnail]){color:var(--sapContent_IconColor)}.ui5-uci-content-and-edit-container{flex:1 1 auto;min-width:0;display:flex;align-items:center}.ui5-uci-content-and-progress{display:flex;flex:1 1 auto}.ui5-uci-content{flex:1 1 auto;margin-right:.5rem;min-width:0}.ui5-uci-file-name{display:block;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontLargeSize);color:var(--sapTextColor);margin-bottom:.25rem;white-space:pre-wrap}[ui5-link].ui5-uci-file-name{pointer-events:all}.ui5-uci-description{margin-top:.375rem;font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontMediumSize);color:var(--sapContent_LabelColor);white-space:normal}.ui5-uci-edit-container [ui5-input]{width:60%;pointer-events:all;min-width:auto}.ui5-uci-file-extension{font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontMediumSize);color:var(--sapTextColor);white-space:no-wrap;overflow:hidden;margin-left:.5rem;width:40%;display:inline-block;vertical-align:middle}.ui5-uci-root-editing .ui5-li-deletebtn,.ui5-uci-root-editing .ui5-li-detailbtn,.ui5-uci-root-uploading .ui5-li-deletebtn,.ui5-uci-root-uploading .ui5-li-detailbtn{display:none}.ui5-uci-edit-buttons{pointer-events:all;margin-left:1rem}.ui5-uci-edit-rename-btn{margin-right:.125rem}.ui5-uci-progress-box{width:20%;min-width:4rem}@media(max-width:30rem){.ui5-uci-content-and-edit-container{display:block}.ui5-uci-content-and-progress{flex-wrap:wrap}.ui5-uci-progress-box{width:100%;margin-top:.5rem}.ui5-uci-content{width:100%}.ui5-li-deletebtn,.ui5-li-detailbtn,.ui5-uci-edit-buttons{margin-top:.75rem}.ui5-uci-edit-buttons{margin-left:0}}.ui5-uci-progress-indicator{height:1.125rem;margin-bottom:.5rem;padding:5px 0;box-sizing:border-box}.ui5-uci-progress-labels{display:flex;justify-content:space-between}";

/**
 * @public
 */
const metadata$1d = {
	tag: "ui5-upload-collection-item",
	languageAware: true,
	properties: /** @lends sap.ui.webcomponents.fiori.UploadCollectionItem.prototype */ {
		/**
		 * Holds <code>File</code>, associated with this item.
		 *
		 * @type {File}
		 * @defaultvalue null
		 * @public
		 */
		file: {
			type: Object,
			defaultValue: null,
		},

		/**
		 * The name of the file.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		fileName: {
			type: String,
		},

		/**
		 * If set to <code>true</code> the file name will be clickable and it will fire <code>file-name-click</code> event upon click.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		fileNameClickable: {
			type: Boolean,
		},

		/**
		 * Removes delete option from <code>ui5-upload-collection</code> with <code>mode</code> <code>Delete</code> for this item.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noDelete: {
			type: Boolean,
		},

		/**
		 * Hides the retry button when <code>uploadState</code> property is <code>Error</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noRetry: {
			type: Boolean,
		},

		/**
		 * Hides the terminate button when <code>uploadState</code> property is <code>Uploading</code>.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		noTerminate: {
			type: Boolean,
		},

		/**
		 * The upload progress in percentage.
		 * <br><br>
		 * <b>Note:</b> Expected values are in the interval [0, 100].
		 *
		 * @type {Integer}
		 * @defaultvalue 0
		 * @public
		 */
		progress: {
			type: Integer,
			defaultValue: 0,
		},

		/**
		 * If set to <code>Uploading</code> or <code>Error</code>, a progress indicator showing the <code>progress</code> is displayed.
		 * Also if set to <code>Error</code>, a refresh button is shown. When this icon is pressed <code>retry</code> event is fired.
		 * If set to <code>Uploading</code>, a terminate button is shown. When this icon is pressed <code>terminate</code> event is fired.
		 *
		 * @type {UploadState}
		 * @defaultvalue "Ready"
		 * @public
		 */
		uploadState: {
			type: UploadState,
			defaultValue: UploadState.Ready,
		},

		/**
		 * Indicates if editing.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @private
		 */
		_editing: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.UploadCollectionItem.prototype */ {
		/**
		 * Hold the description of the <code>ui5-upload-collection-item</code>. Will be shown below the file name.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			type: Node,
		},

		/**
		 * A thumbnail, which will be shown in the beginning of the <code>ui5-upload-collection-item</code>.
		 * <br><br>
		 * <b>Note:</b> Use <code>ui5-icon</code> or <code>img</code> for the intended design.
		 *
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		thumbnail: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.UploadCollectionItem.prototype */ {
		/**
		 * Fired when the file name is clicked.
		 * <br><br>
		 * <b>Note:</b> This event is only available when <code>fileNameClickable</code> property is <code>true</code>.
		 *
		 * @event sap.ui.webcomponents.fiori.UploadCollectionItem#file-name-click
		 * @public
		 */
		"file-name-click": { },

		/**
		 * Fired when the <code>fileName</code> property gets changed.
		 * <br><br>
		 * <b>Note:</b> An edit button is displayed on each item,
		 * when the <code>ui5-upload-collection-item</code> <code>type</code> property is set to <code>Detail</code>.
		 *
		 * @event
		 * @public
		 */
		rename: { },

		/**
		 * Fired when the terminate button is pressed.
		 * <br><br>
		 * <b>Note:</b> Terminate button is displayed when <code>uploadState</code> property is set to <code>Uploading</code>.
		 *
		 * @event
		 * @public
		 */
		terminate: {},

		/**
		 * Fired when the retry button is pressed.
		 * <br><br>
		 * <b>Note:</b> Retry button is displayed when <code>uploadState</code> property is set to <code>Error</code>.
		 * @event
		 * @public
		 */
		retry: {},

		/**
		 * @since 1.0.0-rc.8
		 * @event
		 * @private
		 */
		"_focus-requested": {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * A component to be used within the <code>ui5-upload-collection</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents-fiori/dist/UploadCollectionItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.UploadCollectionItem
 * @extends UI5Element
 * @tagname ui5-upload-collection-item
 * @public
 * @since 1.0.0-rc.7
 */
class UploadCollectionItem extends ListItem {
	static get metadata() {
		return metadata$1d;
	}

	static get styles() {
		return [ListItem.styles, UploadCollectionItemCss];
	}

	static get template() {
		return main$1k;
	}

	static get dependencies() {
		return [
			...ListItem.dependencies,
			Button,
			Input,
			Link,
			Label,
			ProgressIndicator,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}

	constructor() {
		super();
		this.i18nBundle = getI18nBundle("@ui5/webcomponents-fiori");

		this._editPressed = false; // indicates if the edit btn has been pressed
		this.doNotCloseInput = false; // Indicates whether the input should be closed when using keybord for navigation
		this.isEnter = false;
	}

	onAfterRendering() {
		if (this._editPressed) {
			this._editing = true;
			this._editPressed = false;
			this.focusAndSelectText();
		}
	}

	async focusAndSelectText() {
		await this.focus();

		const inp = this.shadowRoot.getElementById("ui5-uci-edit-input");

		await RenderScheduler.whenDOMUpdated();
		if (inp.getFocusDomRef()) {
			inp.getFocusDomRef().setSelectionRange(0, this._fileNameWithoutExtension.length);
		}
	}

	/**
	 * @override
	 */
	onDetailClick(event) {
		super.onDetailClick(event);
		this._editing = true;
	}

	_onDetailKeyup(event) {
		if (isSpace(event)) {
			this.onDetailClick(event);
		}
	}

	/**
	 * @override
	 */
	_onfocusout(event) {
		super._onfocusout(event);

		const path = event.path || (event.composedPath && event.composedPath());

		this._editPressed = this.isDetailPressed(event);

		if (!this._editPressed && path.indexOf(this) > -1) {
			this._editing = false;
		}
	}

	_onInputKeydown(event) {
		this.isEnter = isEnter(event);
		this.isEscape = isEscape(event);
	}

	_onInputKeyUp(event) {
		this.doNotCloseInput = true;
		this.tempValue = event.target.value + this._fileExtension;

		if (this.isEscape) {
			[this.fileName, this.tempValue] = [this.tempValue, this.fileName];
			return this._onRenameCancel();
		}
	}

	isDetailPressed(event) {
		const path = event.path || (event.composedPath && event.composedPath());

		return path.some(e => {
			return e.classList && e.classList.contains("ui5-uci-edit");
		});
	}

	_onInputChange(event) {
		if (this.shadowRoot.getElementById("ui5-uci-edit-cancel").active) {
			return;
		}

		if ((!this.isEnter && this.doNotCloseInput) || this.isEscape) {
			[this.fileName, this.tempValue] = [this.tempValue, this.fileName];
			this.isEscape = false;
			return;
		}

		this._editing = false;
		this.fileName = event.target.value + this._fileExtension;
		this.fireEvent("rename");

		if (this.isEnter) {
			this._focus();
		}
	}

	_onRename(event) {
		this.doNotCloseInput = false;
		this._editing = false;
		this._focus();
	}

	_onRenameCancel(event) {
		if (!this.isEscape) {
			[this.fileName, this.tempValue] = [this.tempValue, this.fileName];
		}

		this._editing = false;
		this.doNotCloseInput = false;

		this._focus();
	}

	_focus() {
		this.fireEvent("_focus-requested");
	}

	_onFileNameClick(event) {
		this.fireEvent("file-name-click");
	}

	_onRetry(event) {
		this.fireEvent("retry");
	}

	_onTerminate(event) {
		this.fireEvent("terminate");
	}

	get list() {
		return this.assignedSlot.parentElement;
	}

	/**
	 * @override
	 */
	get classes() {
		const result = super.classes;

		return {
			main: {
				...result.main,
				"ui5-uci-root": true,
				"ui5-uci-root-editing": this._editing,
				"ui5-uci-root-uploading": this.uploadState === UploadState.Uploading,
			},
		};
	}

	/**
	 * @override
	 */
	get modeDelete() {
		return !this.noDelete && super.modeDelete;
	}

	get _fileNameWithoutExtension() {
		return this.fileName.substring(0, this.fileName.length - this._fileExtension.length);
	}

	get _fileExtension() {
		return getFileExtension(this.fileName);
	}

	get _renameBtnText() {
		return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_RENAMEBUTTON_TEXT);
	}

	get _cancelRenameBtnText() {
		return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_CANCELBUTTON_TEXT);
	}

	get _showProgressIndicator() {
		return this.uploadState !== UploadState.Complete;
	}

	get _progressText() {
		if (this.uploadState === UploadState.Uploading) {
			return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_UPLOADING_STATE);
		}

		if (this.uploadState === UploadState.Error) {
			return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_ERROR_STATE);
		}

		return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_READY_STATE);
	}

	get _showRetry() {
		return !this.noRetry && this.uploadState === UploadState.Error;
	}

	get _showTerminate() {
		return !this.noTerminate && this.uploadState === UploadState.Uploading;
	}

	get _retryButtonTooltip() {
		return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_RETRY_BUTTON_TEXT);
	}

	get _terminateButtonTooltip() {
		return this.i18nBundle.getText(UPLOADCOLLECTIONITEM_TERMINATE_BUTTON_TEXT);
	}

	get valueStateName() {
		if (this.uploadState === UploadState.Error) {
			return "Error";
		}

		if (this.uploadState === UploadState.Ready || this.uploadState === UploadState.Uploading) {
			return "Information";
		}

		return undefined;
	}

	/**
	 * override
	 */
	get typeDetail() {
		return false;
	}

	get showEditButton() {
		return this.type === ListItemType.Detail;
	}
}

UploadCollectionItem.define();

/**
 * Different types of Priority.
 * @lends sap.ui.webcomponents.main.types.Priority.prototype
 * @public
 */
const Priorities = {
	/**
	 * High priority.
	 * @public
	 * @type {High}
	 */
	High: "High",

	/**
	 * Medium priority.
	 * @public
	 * @type {Medium}
	 */
	Medium: "Medium",

	/**
	 * Low priority.
	 * @public
	 * @type {Low}
	 */
	Low: "Low",

	/**
	 * Default, none priority.
	 * @public
	 * @type {None}
	 */
	None: "None",
};

/**
 * @class
 * Different types of Priority.
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.main.types.Priority
 * @public
 * @enum {string}
 */
class Priority extends DataType {
	static isValid(value) {
		return !!Priorities[value];
	}
}

Priority.generataTypeAcessors(Priorities);

const block0$1l = (context) => { return scopedHtml`<ui5-popover class="ui5-notification-overflow-popover" placement-type="Bottom" horizontal-align="Right" no-arrow><div class="ui5-notification-overflow-list">${ repeat(context.overflowActions, (item, index) => item._id || index, (item, index) => block1$15(item)) }</div></ui5-popover>`; };
const block1$15 = (item, index, context) => { return scopedHtml`<ui5-button icon="${ifDefined(item.icon)}" design="Transparent" @click="${item.press}" ?disabled="${item.disabled}" design="${ifDefined(item.design)}" data-ui5-external-action-item-id="${ifDefined(item.refItemid)}">${ifDefined(item.text)}</ui5-button>`; };


const main$1l = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1l(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var NotifactionOverflowActionsPopoverCss = ".ui5-notification-overflow-list{display:flex;flex-direction:column;padding:0 .5rem}";

/**
 * @public
 */
const metadata$1e = {
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.fiori.NotificationListItemBase.prototype */ {

		/**
		 * Defines the <code>heading</code> of the item.
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		heading: {
			type: String,
		},

		/**
		 * Defines the <code>priority</code> of the item.
		 * @type {Priority}
		 * @defaultvalue "None"
		 * @public
		 */
		priority: {
			type: Priority,
			defaultValue: Priority.None,
		},

		/**
		 * Defines if the <code>close</code> button would be displayed.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showClose: {
			type: Boolean,
		},

		/**
		 * Defines if a busy indicator would be displayed over the item.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 * @since 1.0.0-rc.8
		 */
		busy: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.NotificationListItemBase.prototype */ {

		/**
		 * Defines the actions, displayed in the top-right area.
		 * <br><br>
		 * <b>Note:</b> use the <code>ui5-notification-overflow-action</code> component.
		 *
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		actions: {
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.NotificationListItemBase.prototype */ {
		/**
		 * Fired when the <code>Close</code> button is pressed.
		 *
		 * @event
		 * @public
		 */
		close: {},
	},
};

/**
 * @class
 *
 * The base class of the <code>NotificationListItem</code> and <code>NotificationListGroupItem</code>.
 *
 * @abstract
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.NotificationListItemBase
 * @extends ListItemBase
 * @tagname ui5-li-notification-group
 * @since 1.0.0-rc.8
 * @appenddocs NotificationOverflowAction
 * @public
 */
class NotificationListItemBase extends ListItemBase {
	constructor() {
		super();

		this.i18nBundle = getI18nBundle("@ui5/webcomponents-fiori");
	}

	static get metadata() {
		return metadata$1e;
	}

	static get staticAreaTemplate() {
		return main$1l;
	}

	static get staticAreaStyles() {
		return NotifactionOverflowActionsPopoverCss;
	}

	static priorityIconsMappings() {
		return {
			"High": "message-error",
			"Medium": "message-warning",
			"Low": "message-success",
		};
	}

	get hasHeading() {
		return !!this.heading.length;
	}

	get hasPriority() {
		return this.priority !== Priority.None;
	}

	get priorityIcon() {
		return NotificationListItemBase.priorityIconsMappings()[this.priority];
	}

	get overflowButtonDOM() {
		return this.shadowRoot.querySelector(".ui5-nli-overflow-btn");
	}

	get showOverflow() {
		return !!this.overflowActions.length;
	}

	get overflowActions() {
		if (this.actions.length <= 1) {
			return [];
		}

		return this.actionsInfo;
	}

	get standardActions() {
		if (this.actions.length > 1) {
			return [];
		}

		return this.actionsInfo;
	}

	get actionsInfo() {
		return this.actions.map(action => {
			return {
				icon: action.icon,
				text: action.text,
				press: this._onCustomActionClick.bind(this),
				refItemid: action._id,
				disabled: action.disabled ? true : undefined,
				design: action.design,
			};
		});
	}

	/**
	 * Event handlers
	 */
	_onBtnCloseClick() {
		this.fireEvent("close", { item: this });
	}

	_onBtnOverflowClick() {
		this.openOverflow();
	}

	_onCustomActionClick(event) {
		const refItemId = event.target.getAttribute("data-ui5-external-action-item-id");

		if (refItemId) {
			this.getActionByID(refItemId).fireEvent("click", {
				targetRef: event.target,
			}, true);

			this.closeOverflow();
		}
	}

	_onkeydown(event) {
		super._onkeydown(event);

		if (event.isMarked === "button") {
			return;
		}

		if (isSpace(event)) {
			event.preventDefault();
		}
	}

	getActionByID(id) {
		return this.actions.find(action => action._id === id);
	}

	async openOverflow() {
		const overflowPopover = await this.getOverflowPopover();
		overflowPopover.openBy(this.overflowButtonDOM);
	}

	async closeOverflow() {
		const overflowPopover = await this.getOverflowPopover();
		overflowPopover.close();
	}

	async getOverflowPopover() {
		const staticAreaItem = await this.getStaticAreaItemDomRef();
		return staticAreaItem.querySelector(".ui5-notification-overflow-popover");
	}
}

const block0$1m = (context) => { return scopedHtml`<li class="ui5-nli-root ui5-nli-focusable" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click="${context._onclick}" role="option" tabindex="${ifDefined(context._tabIndex)}" dir="${ifDefined(context.effectiveDir)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" style="list-style-type: none;"><div class="ui5-nli-actions">${ context.showOverflow ? block1$16(context) : block2$$(context) }${ context.showClose ? block4$B(context) : undefined }</div><div class="ui5-nli-content ${classMap(context.classes.content)}"><div class="ui5-nli-heading">${ context.hasPriority ? block5$u(context) : undefined }<div id="${ifDefined(context._id)}-heading" class="ui5-nli-title" part="heading">${ifDefined(context.heading)}</div></div>${ context.hasDesc ? block6$n(context) : undefined }<div id="${ifDefined(context._id)}-footer" class="ui5-nli-footer">${ repeat(context.footerItems, (item, index) => item._id || index, (item, index) => block7$j(item)) }<ui5-link class="ui5-nli-footer-showMore" ?hidden="${context.hideShowMore}" @click="${context._onShowMoreClick}" aria-hidden="true" href="#"  showMore-btn>${ifDefined(context.showMoreText)}</ui5-link></div><span id="${ifDefined(context._id)}-invisibleText" class="ui5-hidden-text">${ifDefined(context.accInvisibleText)}</span></div><div class="ui5-nli-avatar"><slot name="avatar"></slot></div>${ context.busy ? block9$c() : undefined }</li>`; };
const block1$16 = (context) => { return scopedHtml`<ui5-button icon="overflow" design="Transparent" @click="${context._onBtnOverflowClick}" class="ui5-nli-overflow-btn" title="${ifDefined(context.overflowBtnTitle)}"></ui5-button>`; };
const block2$$ = (context) => { return scopedHtml`${ repeat(context.standardActions, (item, index) => item._id || index, (item, index) => block3$K(item)) }`; };
const block3$K = (item, index, context) => { return scopedHtml`<ui5-button icon="${ifDefined(item.icon)}" class="ui5-nli-action" @click="${item.press}" ?disabled="${item.disabled}" design="${ifDefined(item.design)}" data-ui5-external-action-item-id="${ifDefined(item.refItemid)}">${ifDefined(item.text)}</ui5-button>`; };
const block4$B = (context) => { return scopedHtml`<ui5-button icon="decline" design="Transparent" @click="${context._onBtnCloseClick}" title="${ifDefined(context.closeBtnTitle)}" close-btn></ui5-button>`; };
const block5$u = (context) => { return scopedHtml`<ui5-icon class="ui5-prio-icon ui5-prio-icon--${ifDefined(context.priorityIcon)}" name="${ifDefined(context.priorityIcon)}"></ui5-icon>`; };
const block6$n = (context) => { return scopedHtml`<div id="${ifDefined(context._id)}-description" class="ui5-nli-description"><slot></slot></div>`; };
const block7$j = (item, index, context) => { return scopedHtml`<slot name="${ifDefined(item.slotName)}"></slot>${ item.showDivider ? block8$i() : undefined }`; };
const block8$i = (item, index, context) => { return scopedHtml`<div class="ui5-nli-footer-divider"></div>`; };
const block9$c = (context) => { return scopedHtml`<ui5-busyindicator active size="Medium" class="ui5-nli-busy"></ui5-busyindicator>`; };


const main$1m = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1m(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var NotificationListItemCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:block;width:100%;min-height:var(--_ui5_list_item_base_height);background:var(--ui5-listitem-background-color);cursor:pointer}:host([has-border]){border-bottom:var(--ui5-listitem-border-bottom)}:host([focused]) .ui5-nli-focusable{outline:none}:host([focused]) .ui5-nli-focusable:after{content:\"\";border:var(--_ui5_listitembase_focus_width) dotted var(--sapContent_FocusColor);position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}:host([busy]){opacity:.6;pointer-events:none}:host([busy]) .ui5-nli-busy{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.ui5-nli-action{flex-shrink:0;margin-right:.5rem}.ui5-nli-overflow-btn{margin-right:.5rem}[dir=rtl] .ui5-nli-group-action{margin-left:.5rem}[dir=rtl] .ui5-nli-overflow-btn{margin-left:.5rem}.ui5-prio-icon{min-width:1rem;min-height:1rem;padding-right:.5rem}.ui5-prio-icon--message-error{color:var(--sapNegativeElementColor)}.ui5-prio-icon--message-warning{color:var(--sapCriticalElementColor)}.ui5-prio-icon--message-success{color:var(--sapPositiveElementColor)}[dir=rtl] .ui5-prio-icon{padding-right:.5rem}:host(:not([wrap])) .ui5-nli-title{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden}:host(:not([wrap])) .ui5-nli-description{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden}:host([_show-more-pressed]) .ui5-nli-title{-webkit-line-clamp:unset}:host([_show-more-pressed]) .ui5-nli-description{-webkit-line-clamp:unset}:host([read]) .ui5-nli-title{font-weight:400}:host(:not([wrap])) .ui5-nli-content--ie .ui5-nli-description{max-height:32px}:host(:not([wrap])) .ui5-nli-content--ie .ui5-nli-title{max-height:32px}:host([_show-more-pressed]) .ui5-nli-content--ie .ui5-nli-title{max-height:inherit}:host([_show-more-pressed]) .ui5-nli-content--ie .ui5-nli-description{max-height:inherit}.ui5-nli-root{display:flex;flex-direction:row-reverse;position:relative;width:100%;padding:1rem .5rem 1rem 1rem;box-sizing:border-box;cursor:pointer}.ui5-nli-content{display:flex;flex-direction:column;flex:1;width:100%;padding:0 1rem 0 .75rem;font-family:\"72override\",var(--sapFontFamily);box-sizing:border-box}.ui5-nli-heading{display:flex;margin-bottom:.25rem;box-sizing:border-box}.ui5-nli-title{color:var(--sapGroup_TitleTextColor);font-weight:700;font-size:var(--sapFontHeader6Size)}.ui5-nli-description{display:flex;margin-top:.5rem;color:var(--sapTextColor);font-size:var(--sapFontSize);box-sizing:border-box}.ui5-nli-footer{display:flex;color:var(--sapContent_LabelColor);font-size:var(--sapFontSize);padding-top:.5rem;box-sizing:border-box;flex-wrap:wrap}.ui5-nli-footer-divider{position:relative;align-items:center;margin-left:.5rem;margin-right:.625rem}.ui5-nli-footer-divider:after{position:absolute;content:\".\";top:-20%}.ui5-nli-footer-showMore{margin-left:1rem}::slotted([slot^=footnotes]){color:var(--sapContent_LabelColor);font-size:var(--sapFontSize);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.ui5-nli-actions{display:flex;box-sizing:border-box}[dir=rtl] .ui5-nli-footer-divider{margin-right:.5rem;margin-left:.625rem}[dir=rtl] .ui5-nli-footer-showMore{margin-right:1rem}";

const MAX_WRAP_HEIGHT = 32; // px.

/**
 * @public
 */
const metadata$1f = {
	tag: "ui5-li-notification",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.fiori.NotificationListItem.prototype */ {

		/**
		 * Defines if the <code>heading</code> and <code>description</code> should wrap,
		 * they truncate by default.
		 *
		 * <br><br>
		 * <b>Note:</b> by default the <code>heading</code> and <code>decription</code>,
		 * and a <code>ShowMore/Less</code> button would be displayed.
         * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		wrap: {
			type: Boolean,
		},

		/**
		 * Defines if the <code>notification</code> is new or has been already read.
		 * <br><br>
		 * <b>Note:</b> if set to <code>false</code> the <code>heading</code> has bold font,
		 * if set to true - it has a normal font.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		read: {
			type: Boolean,
		},

		/**
		 * Defines the state of the <code>heading</code> and <code>description</code>,
		 * if less or more information is displayed.
		 * @private
		 */
		_showMorePressed: {
			type: Boolean,
		},

		/**
		 * Defines the visibility of the <code>showMore</code> button.
		 * @private
		 */
		_showMore: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.NotificationListItem.prototype */ {

		/**
		 * Defines the avatar, displayed in the <code>ui5-li-notification</code>.
		 *
		 * <br><br>
		 * <b>Note:</b> Consider using the <code>ui5-avatar</code> to display icons, initials or images.
		 *
		 * @type {HTMLElement}
		 * @slot
		 * @public
		 */
		avatar: {
			type: HTMLElement,
		},

		/**
		 * Defines the elements, dipalyed in the footer of the of the <code>ui5-li-notification</code>.
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		footnotes: {
			type: HTMLElement,
			propertyName: "footnotes",
			individualSlots: true,
		},

		/**
		 * Defines the content of the <code>ui5-li-notification</code>,
		 * usually a description of the notification.
		 *
		 * <br><br>
		 * <b>Note:</b> Аlthough this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.
		 *
		 * @type {Node[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "description",
			type: Node,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.NotificationListItem.prototype */ {
		_press: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-li-notification</code> is a type of list item, meant to display notifications.
 * <br>
 *
 * The component has a rich set of various properties that allows the user to set <code>avatar</code>, <code>heading</code>, descriptive <code>content</code>
 * and <code>footnotes</code> to fully describe a notification.
 * <br>
 *
 * The user can:
 * <ul>
 * <li>display a <code>Close</code> button</li>
 * <li>can control whether the <code>heading</code> and <code>description</code> should wrap or truncate
 * and display a <code>ShowMore</code> button to switch between less and more information</li>
 * <li>add custom actions by using the <code>ui5-notification-overflow-action</code> component</li>
 * </ul>
 *
 * <h3>Usage</h3>
 * The component can be used in a standard <code>ui5-list</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/NotificationListItem.js";</code>
 * <br>
 * <code>import @ui5/webcomponents/dist/NotificationOverflowAction.js";</code> (optional)
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.NotificationListItem
 * @extends NotificationListItemBase
 * @tagname ui5-li-notification
 * @appenddocs NotificationOverflowAction
 * @since 1.0.0-rc.8
 * @public
 */
class NotificationListItem extends NotificationListItemBase {
	constructor() {
		super();

		// the heading overflow height
		this._headingOverflowHeight = 0;

		// the description overflow height
		this._descOverflowHeight = 0;

		// the resize handler
		this.onResizeBind = this.onResize.bind(this);
	}

	static get metadata() {
		return metadata$1f;
	}

	static get styles() {
		return NotificationListItemCss;
	}

	static get template() {
		return main$1m;
	}

	static get dependencies() {
		return [
			Button,
			Icon,
			BusyIndicator,
			Link,
			Popover,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}

	onEnterDOM() {
		ResizeHandler.register(this, this.onResizeBind);
	}

	onExitDOM() {
		ResizeHandler.deregister(this, this.onResizeBind);
	}

	get hasDesc() {
		return !!this.description.length;
	}

	get hasFootNotes() {
		return !!this.footnotes.length;
	}

	get showMoreText() {
		if (this._showMorePressed) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_SHOW_LESS);
		}

		return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_SHOW_MORE);
	}

	get overflowBtnTitle() {
		return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_OVERLOW_BTN_TITLE);
	}

	get closeBtnTitle() {
		return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_CLOSE_BTN_TITLE);
	}

	get hideShowMore() {
		if (!this.wrap && this._showMore) {
			return undefined;
		}

		return true;
	}

	get descriptionDOM() {
		return this.shadowRoot.querySelector(".ui5-nli-description");
	}

	get headingDOM() {
		return this.shadowRoot.querySelector(".ui5-nli-title");
	}

	get headingHeight() {
		return this.headingDOM.offsetHeight;
	}

	get descriptionHeight() {
		return this.descriptionDOM.offsetHeight;
	}

	get headingOverflows() {
		const heading = this.headingDOM;

		if (!heading) {
			return false;
		}

		if (isIE()) {
			return heading.scrollHeight > MAX_WRAP_HEIGHT;
		}

		return heading.offsetHeight < heading.scrollHeight;
	}

	get descriptionOverflows() {
		const description = this.descriptionDOM;

		if (!description) {
			return false;
		}

		if (isIE()) {
			return description.scrollHeight > MAX_WRAP_HEIGHT;
		}

		return description.offsetHeight < description.scrollHeight;
	}

	get footerItems() {
		return this.footnotes.map((el, idx, arr) => {
			return {
				slotName: el._individualSlot,
				showDivider: idx !== arr.length - 1,
			};
		});
	}

	get ariaLabelledBy() {
		const id = this._id;
		const ids = [];

		if (this.hasHeading) {
			ids.push(`${id}-heading`);
		}
		if (this.hasDesc) {
			ids.push(`${id}-description`);
		}

		if (this.hasFootNotes) {
			ids.push(`${id}-footer`);
		}

		ids.push(`${id}-invisibleText`);

		return ids.join(" ");
	}

	get priorityText() {
		if (this.priority === Priority.High) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_HIGH_PRIORITY_TXT);
		}

		if (this.priority === Priority.Medium) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_MEDIUM_PRIORITY_TXT);
		}

		if (this.priority === Priority.Low) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_LOW_PRIORITY_TXT);
		}

		return "";
	}

	get accInvisibleText() {
		const notifcationTxt = this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_TXT);
		const readTxt = this.read ? this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_READ) : this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_UNREAD);
		const priorityText = this.priorityText;

		return `${notifcationTxt} ${readTxt} ${priorityText}`;
	}

	get classes() {
		return {
			content: {
				"ui5-nli-content--ie": isIE(),
			},
		};
	}

	/**
	 * Event handlers
	 */
	_onclick(event) {
		this.fireItemPress(event);
	}

	_onShowMoreClick(event) {
		event.preventDefault();
		this._showMorePressed = !this._showMorePressed;
	}

	_onkeydown(event) {
		super._onkeydown(event);

		if (isEnter(event)) {
			this.fireItemPress(event);
		}
	}

	_onkeyup(event) {
		super._onkeyup(event);

		const space = isSpace(event);

		if (space && event.isMarked === "link") {
			this._onShowMoreClick(event);
			return;
		}

		if (space) {
			this.fireItemPress(event);
		}
	}

	/**
	 * Private
	 */
	fireItemPress(event) {
		if (event.isMarked === "button" || event.isMarked === "link") {
			return;
		}

		this.fireEvent("_press", { item: this });
	}

	onResize() {
		if (this.wrap) {
			this._showMore = false;
			return;
		}

		const headingWouldOverflow = this.headingHeight > this._headingOverflowHeight;
		const descWouldOverflow = this.descriptionHeight > this._descOverflowHeight;
		const overflows = headingWouldOverflow || descWouldOverflow;

		if (this._showMorePressed && overflows) {
			this._showMore = true;
			return;
		}

		if (this.headingOverflows || this.descriptionOverflows) {
			this._headingOverflowHeight = this.headingHeight;
			this._descOverflowHeight = this.descriptionHeight;
			this._showMore = true;
			return;
		}

		this._showMore = false;
	}
}

NotificationListItem.define();

const block0$1n = (context) => { return scopedHtml`<li class="ui5-nli-group-root ui5-nli-focusable" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}" @keydown="${context._onkeydown}" role="option" tabindex="${ifDefined(context._tabIndex)}" dir="${ifDefined(context.effectiveDir)}" aria-labelledby="${ifDefined(context.ariaLabelledBy)}" style="list-style-type: none;"><div class="ui5-nli-group-header"><ui5-button icon="navigation-right-arrow" design="Transparent" @click="${context._onBtnToggleClick}" class="ui5-nli-group-toggle-btn"></ui5-button>${ context.hasPriority ? block1$17(context) : undefined }<div id="${ifDefined(context._id)}-heading" class="ui5-nli-group-heading" part="heading">${ifDefined(context.heading)}</div>${ context.showCounter ? block2$10(context) : undefined }<div class="ui5-nli-group-divider"></div>${ !context.collapsed ? block3$L(context) : undefined }${ context.showClose ? block7$k(context) : undefined }<span id="${ifDefined(context._id)}-invisibleText" class="ui5-hidden-text">${ifDefined(context.accInvisibleText)}</span></div><ui5-list class="ui5-nli-group-items"><slot></slot></ui5-list>${ context.busy ? block8$j() : undefined }</li>`; };
const block1$17 = (context) => { return scopedHtml`<ui5-icon class="ui5-prio-icon ui5-prio-icon--${ifDefined(context.priorityIcon)}" name="${ifDefined(context.priorityIcon)}"></ui5-icon>`; };
const block2$10 = (context) => { return scopedHtml`<span class="ui5-nli-group-counter">(${ifDefined(context.itemsCount)})</span>`; };
const block3$L = (context) => { return scopedHtml`${ context.showOverflow ? block4$C(context) : block5$v(context) }`; };
const block4$C = (context) => { return scopedHtml`<ui5-button icon="overflow" design="Transparent" @click="${context._onBtnOverflowClick}" class="ui5-nli-overflow-btn" title="${ifDefined(context.overflowBtnTitle)}"></ui5-button>`; };
const block5$v = (context) => { return scopedHtml`${ repeat(context.standardActions, (item, index) => item._id || index, (item, index) => block6$o(item)) }`; };
const block6$o = (item, index, context) => { return scopedHtml`<ui5-button icon="${ifDefined(item.icon)}" class="ui5-nli-action" ?disabled="${item.disabled}" design="${ifDefined(item.design)}" @click="${item.press}" data-ui5-external-action-item-id="${ifDefined(item.refItemid)}">${ifDefined(item.text)}</ui5-button>`; };
const block7$k = (context) => { return scopedHtml`<ui5-button icon="decline" design="Transparent" @click="${context._onBtnCloseClick}" title="${ifDefined(context.closeBtnTitle)}" close-btn></ui5-button>`; };
const block8$j = (context) => { return scopedHtml`<ui5-busyindicator active size="Medium" class="ui5-nli-busy"></ui5-busyindicator>`; };


const main$1n = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0$1n(context);
};

registerThemeProperties("@ui5/webcomponents-theme-base", "sap_fiori_3", defaultThemeBase);
registerThemeProperties("@ui5/webcomponents-fiori", "sap_fiori_3", defaultTheme$1);
var NotificationListGroupItemCss = ".ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:0;top:0}:host(:not([hidden])){display:block;width:100%;min-height:var(--_ui5_list_item_base_height);background:var(--ui5-listitem-background-color);cursor:pointer}:host([has-border]){border-bottom:var(--ui5-listitem-border-bottom)}:host([focused]) .ui5-nli-focusable{outline:none}:host([focused]) .ui5-nli-focusable:after{content:\"\";border:var(--_ui5_listitembase_focus_width) dotted var(--sapContent_FocusColor);position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none}:host([busy]){opacity:.6;pointer-events:none}:host([busy]) .ui5-nli-busy{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.ui5-nli-action{flex-shrink:0;margin-right:.5rem}.ui5-nli-overflow-btn{margin-right:.5rem}[dir=rtl] .ui5-nli-group-action{margin-left:.5rem}[dir=rtl] .ui5-nli-overflow-btn{margin-left:.5rem}.ui5-prio-icon{min-width:1rem;min-height:1rem;padding-right:.5rem}.ui5-prio-icon--message-error{color:var(--sapNegativeElementColor)}.ui5-prio-icon--message-warning{color:var(--sapCriticalElementColor)}.ui5-prio-icon--message-success{color:var(--sapPositiveElementColor)}[dir=rtl] .ui5-prio-icon{padding-right:.5rem}:host(:not([collapsed])) .ui5-nli-group-toggle-btn{transform:rotate(90deg)}:host([collapsed]) .ui5-nli-group-items{display:none}.ui5-nli-group-root{display:flex;flex-direction:column;position:relative;width:100%;box-sizing:border-box}.ui5-nli-group-header{display:flex;align-items:center;padding:.75rem .5rem .25rem .75rem;width:100%;border-bottom:.0625rem solid var(--sapList_GroupHeaderBorderColor);box-sizing:border-box;cursor:default}.ui5-nli-group-toggle-btn{margin-right:1rem;cursor:pointer}.ui5-nli-group-heading{color:var(--sapGroup_TitleTextColor);font-family:\"72override\",var(--sapFontFamily);font-size:var(--sapFontHeader6Size);white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-nli-group-divider{flex:1}.ui5-nli-group-counter{margin-left:.25rem;margin-right:1rem;color:var(--sapList_TableGroupHeaderTextColor);font-size:var(--sapFontHeader6Size);font-family:\"72override\",var(--sapFontHeaderFamily)}[dir=rtl] .ui5-nli-group-toggle-btn{margin-left:1rem}[dir=rtl] .ui5-nli-group-counter{margin-right:.25rem;margin-left:1rem}";

/**
 * @public
 */
const metadata$1g = {
	tag: "ui5-li-notification-group",
	languageAware: true,
	managedSlots: true,
	properties: /** @lends sap.ui.webcomponents.fiori.NotificationListGroupItem.prototype */ {

		/**
		 * Defines if the group is collapsed or expanded.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		collapsed: {
			type: Boolean,
		},

		/**
		 * Defines if the items <code>counter</code> would be displayed.
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		showCounter: {
			type: Boolean,
		},
	},
	slots: /** @lends sap.ui.webcomponents.fiori.NotificationListGroupItem.prototype */ {

		/**
		 * Defines the items of the <code>ui5-li-notification-group</code>,
		 * usually <code>ui5-li-notification</code> items.
		 *
		 * @type {HTMLElement[]}
		 * @slot
		 * @public
		 */
		"default": {
			propertyName: "items",
			type: HTMLElement,
		},
	},
	events: /** @lends sap.ui.webcomponents.fiori.NotificationListGroupItem.prototype */ {

		/**
		 * Fired when the <code>ui5-li-notification-group</code> is expanded/collapsed by user interaction.
		 *
		 * @event
		 * @public
		 */
		toggle: {},
	},
};

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-li-notification-group</code> is a special type of list item,
 * that unlike others can group items within self, usually <code>ui5-li-notification</code> items.
 * <br>
 *
 * The component consists of:
 * <ul>
 * <li><code>Toggle</code> button to expand and collapse the group</li>
 * <li><code>Priority</code> icon to display the priority of the group</li>
 * <li><code>Heading</code> to entitle the group</li>
 * <li>Custom actions - with the use of <code>ui5-notification-overflow-action</code></li>
 * <li>Items of the group</li>
 * </ul>
 *
 * <h3>Usage</h3>
 * The component can be used in a standard <code>ui5-list</code>.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @ui5/webcomponents/dist/NotificationListGroupItem.js";</code>
 * <br>
 * <code>import @ui5/webcomponents/dist/NotificationOverflowAction.js";</code> (optional)
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.NotificationListGroupItem
 * @extends NotificationListItemBase
 * @tagname ui5-li-notification-group
 * @since 1.0.0-rc.8
 * @appenddocs NotificationOverflowAction
 * @public
 */
class NotificationListGroupItem extends NotificationListItemBase {
	static get metadata() {
		return metadata$1g;
	}

	static get styles() {
		return NotificationListGroupItemCss;
	}

	static get template() {
		return main$1n;
	}

	onBeforeRendering() {
		if (this.busy) {
			this.clearChildBusyIndicator();
		}
	}

	/**
	 * Clears child items busy state to show a single busy over the entire group,
	 * instead of multiple BusyIndicator instances
	 */
	clearChildBusyIndicator() {
		this.items.forEach(item => {
			item.busy = false;
		});
	}

	static get dependencies() {
		return [
			List,
			Button,
			Icon,
			BusyIndicator,
			Popover,
		];
	}

	static async onDefine() {
		await fetchI18nBundle("@ui5/webcomponents-fiori");
	}

	get itemsCount() {
		return this.items.length;
	}

	get overflowBtnTitle() {
		return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_OVERLOW_BTN_TITLE);
	}

	get closeBtnTitle() {
		return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_CLOSE_BTN_TITLE);
	}

	get priorityText() {
		if (this.priority === Priority.High) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_HIGH_PRIORITY_TXT);
		}

		if (this.priority === Priority.Medium) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_MEDIUM_PRIORITY_TXT);
		}

		if (this.priority === Priority.Low) {
			return this.i18nBundle.getText(NOTIFICATION_LIST_ITEM_LOW_PRIORITY_TXT);
		}

		return "";
	}

	get accInvisibleText() {
		const groupTxt = this.i18nBundle.getText(NOTIFICATION_LIST_GROUP_ITEM_TXT);
		const counterTxt = this.i18nBundle.getText(NOTIFICATION_LIST_GROUP_ITEM_COUNTER_TXT);
		const counter = this.showCounter ? `${counterTxt} ${this.itemsCount}` : "";
		const priorityText = this.priorityText;

		return `${groupTxt} ${priorityText} ${counter}`;
	}

	get ariaLabelledBy() {
		const id = this._id;
		const ids = [];

		if (this.hasHeading) {
			ids.push(`${id}-heading`);
		}

		ids.push(`${id}-invisibleText`);

		return ids.join(" ");
	}

	/**
	 * Event handlers
	 *
	 */
	_onBtnToggleClick() {
		this.collapsed = !this.collapsed;
		this.fireEvent("toggle", { item: this });
	}
}

NotificationListGroupItem.define();

/**
 * @public
 */
const metadata$1h = {
	tag: "ui5-notification-overflow-action",
	properties: /** @lends  sap.ui.webcomponents.fiori.NotificationOverflowAction.prototype */ {
		/**
		 * Defines the text of the <code>ui5-notification-overflow-action</code>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		text: {
			type: String,
		},

		/**
		 * Defines if the action is disabled.
		 * <br><br>
		 * <b>Note:</b> a disabled action can't be pressed or focused, and it is not in the tab chain.
		 *
		 * @type {boolean}
		 * @defaultvalue false
		 * @public
		 */
		disabled: {
			type: Boolean,
		},

		/**
		 * Defines the action design.
		 * <br><br>
		 * <b>Note:</b> Available options are "Default", "Emphasized", "Positive",
		 * "Negative", and "Transparent".
		 *
		 * @type {ButtonDesign}
		 * @defaultvalue "Transparent"
		 * @public
		 */
		design: {
			type: ButtonDesign,
			defaultValue: ButtonDesign.Transparent,
		},

		/**
		 * Defines the <code>icon</code> source URI.
		 * <br><br>
		 * <b>Note:</b>
		 * SAP-icons font provides numerous buil-in icons. To find all the available icons, see the
		 * <ui5-link target="_blank" href="https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html" class="api-table-content-cell-link">Icon Explorer</ui5-link>.
		 *
		 * @type {string}
		 * @defaultvalue ""
		 * @public
		 */
		icon: {
			type: String,
		},
	},
	slots: {
	},
	events: {
		click: {},
	},
};

/**
 * @class
 * The <code>ui5-notification-overflow-action</code> represents an abstract action,
 * used in the <code>ui5-li-notification</code> and the <code>ui5-li-notification-group</code> items.
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webcomponents.fiori.NotificationOverflowAction
 * @extends UI5Element
 * @public
 */
class NotificationOverflowAction extends UI5Element {
	static get metadata() {
		return metadata$1h;
	}
}

NotificationOverflowAction.define();

export default testAssets;
//# sourceMappingURL=bundle.esm.js.map
